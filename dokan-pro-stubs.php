<?php
/**
 * Generated stub declarations for dokan.
 * @see https://dokan.co
 * @see https://github.com/0zd0/dokan-pro-stubs
 */

namespace WeDevs\DokanPro\Dependencies\Appsero {
    /**
     * WeDevs\DokanPro\Dependencies\Appsero Client
     *
     * This class is necessary to set project data
     */
    class Client
    {
        /**
         * The client version
         *
         * @var string
         */
        public $version = '2.0.4';
        /**
         * Hash identifier of the plugin
         *
         * @var string
         */
        public $hash;
        /**
         * Name of the plugin
         *
         * @var string
         */
        public $name;
        /**
         * The plugin/theme file path
         *
         * @example .../wp-content/plugins/test-slug/test-slug.php
         *
         * @var string
         */
        public $file;
        /**
         * Main plugin file
         *
         * @example test-slug/test-slug.php
         *
         * @var string
         */
        public $basename;
        /**
         * Slug of the plugin
         *
         * @example test-slug
         *
         * @var string
         */
        public $slug;
        /**
         * The project version
         *
         * @var string
         */
        public $project_version;
        /**
         * The project type
         *
         * @var string
         */
        public $type;
        /**
         * Textdomain
         *
         * @var string
         */
        public $textdomain;
        /**
         * Initialize the class
         *
         * @param string $hash hash of the plugin
         * @param string $name readable name of the plugin
         * @param string $file main plugin file path
         */
        public function __construct($hash, $name, $file)
        {
        }
        /**
         * Initialize insights class
         *
         * @return WeDevs\DokanPro\Dependencies\Appsero\Insights
         */
        public function insights()
        {
        }
        /**
         * Initialize plugin/theme updater
         *
         * @return void
         */
        public function updater()
        {
        }
        /**
         * Initialize license checker
         *
         * @return WeDevs\DokanPro\Dependencies\Appsero\License
         */
        public function license()
        {
        }
        /**
         * API Endpoint
         *
         * @return string
         */
        public function endpoint()
        {
        }
        /**
         * Set project basename, slug and version
         *
         * @return void
         */
        protected function set_basename_and_slug()
        {
        }
        /**
         * Send request to remote endpoint
         *
         * @param array  $params
         * @param string $route
         *
         * @return array|WP_Error array of results including HTTP headers or WP_Error if the request failed
         */
        public function send_request($params, $route, $blocking = false)
        {
        }
        /**
         * Check if the current server is localhost
         *
         * @return bool
         */
        public function is_local_server()
        {
        }
        /**
         * Translate function _e()
         */
        // phpcs:ignore
        public function _etrans($text)
        {
        }
        /**
         * Translate function __()
         */
        // phpcs:ignore
        public function __trans($text)
        {
        }
        /**
         * Set project textdomain
         */
        public function set_textdomain($textdomain)
        {
        }
    }
    /**
     * WeDevs\DokanPro\Dependencies\Appsero Insights
     *
     * This is a tracker class to track plugin usage based on if the customer has opted in.
     * No personal information is being tracked by this class, only general settings, active plugins, environment details
     * and admin email.
     */
    class Insights
    {
        /**
         * The notice text
         *
         * @var string
         */
        public $notice;
        /**
         * Whether to show the notice or not
         *
         * @var bool
         */
        protected $show_notice = true;
        /**
         * If extra data needs to be sent
         *
         * @var array
         */
        protected $extra_data = array();
        /**
         * AppSero\Client
         *
         * @var object
         */
        protected $client;
        /**
         * Initialize the class
         *
         * @param mixed  $client Client object or string.
         * @param string $name   Name of the plugin/theme.
         * @param string $file   Main plugin file path.
         */
        public function __construct($client, $name = null, $file = null)
        {
        }
        /**
         * Don't show the notice
         *
         * @return self
         */
        public function hide_notice()
        {
        }
        /**
         * Add plugin data if needed
         *
         * @return self
         */
        public function add_plugin_data()
        {
        }
        /**
         * Add extra data if needed
         *
         * @param array $data Extra data.
         *
         * @return self
         */
        public function add_extra($data = array())
        {
        }
        /**
         * Set custom notice text
         *
         * @param string $text Custom notice text.
         *
         * @return self
         */
        public function notice($text = '')
        {
        }
        /**
         * Initialize insights
         *
         * @return void
         */
        public function init()
        {
        }
        /**
         * Initialize theme hooks
         *
         * @return void
         */
        public function init_theme()
        {
        }
        /**
         * Initialize plugin hooks
         *
         * @return void
         */
        public function init_plugin()
        {
        }
        /**
         * Initialize common hooks
         *
         * @return void
         */
        protected function init_common()
        {
        }
        /**
         * Send tracking data to AppSero server
         *
         * @param bool $override Whether to override the tracking allowed check.
         *
         * @return void
         */
        public function send_tracking_data($override = false)
        {
        }
        /**
         * Get the tracking data points
         *
         * @return array
         */
        protected function get_tracking_data()
        {
        }
        /**
         * If a child class wants to send extra data
         *
         * @return mixed
         */
        protected function get_extra_data()
        {
        }
        /**
         * Explain the user which data we collect
         *
         * @return array
         */
        protected function data_we_collect()
        {
        }
        /**
         * Check if the user has opted into tracking
         *
         * @return bool
         */
        public function tracking_allowed()
        {
        }
        /**
         * Check if the notice has been dismissed or enabled
         *
         * @return bool
         */
        public function notice_dismissed()
        {
        }
        /**
         * Display the admin notice to users that have not opted-in or out
         *
         * @return void
         */
        public function admin_notice()
        {
        }
        /**
         * Handle the optin/optout
         *
         * @return void
         */
        public function handle_optin_optout()
        {
        }
        /**
         * Tracking optin
         *
         * @return void
         */
        public function optin()
        {
        }
        /**
         * Optout from tracking
         *
         * @return void
         */
        public function optout()
        {
        }
        /**
         * Get the number of post counts
         *
         * @param string $post_type The post type to count.
         * @return int
         */
        public function get_post_count($post_type)
        {
        }
        /**
         * Get user totals based on user role.
         *
         * @return array
         */
        public function get_user_counts()
        {
        }
        /**
         * Add weekly cron schedule
         *
         * @param array $schedules Existing cron schedules.
         * @return array
         */
        public function add_weekly_schedule($schedules)
        {
        }
        /**
         * Plugin activation hook
         *
         * @return void
         */
        public function activate_plugin()
        {
        }
        /**
         * Clear our options upon deactivation
         *
         * @return void
         */
        public function deactivation_cleanup()
        {
        }
        /**
         * Hook into action links and modify the deactivate link
         *
         * @param array $links
         *
         * @return array
         */
        public function plugin_action_links($links)
        {
        }
        /**
         * Plugin deactivation uninstall reason submission
         *
         * @return void
         */
        public function uninstall_reason_submission()
        {
        }
        /**
         * Handle the plugin deactivation feedback
         *
         * @return void
         */
        public function deactivate_scripts()
        {
        }
        /**
         * Run after theme deactivated
         *
         * @param string $new_name
         * @param object $new_theme
         * @param object $old_theme
         *
         * @return void
         */
        public function theme_deactivated($new_name, $new_theme, $old_theme)
        {
        }
    }
    /**
     * WeDevs\DokanPro\Dependencies\Appsero License Checker
     *
     * This class will check, active and deactive license
     */
    class License
    {
        /**
         * AppSero\Client
         *
         * @var object
         */
        protected $client;
        /**
         * Arguments of create menu
         *
         * @var array
         */
        protected $menu_args;
        /**
         * `option_name` of `wp_options` table
         *
         * @var string
         */
        protected $option_key;
        /**
         * Error message of HTTP request
         *
         * @var string
         */
        public $error;
        /**
         * Success message on form submit
         *
         * @var string
         */
        public $success;
        /**
         * Corn schedule hook name
         *
         * @var string
         */
        protected $schedule_hook;
        /**
         * Initialize the class
         *
         * @param Client $client
         */
        public function __construct(\WeDevs\DokanPro\Dependencies\Appsero\Client $client)
        {
        }
        /**
         * Set the license option key.
         *
         * If someone wants to override the default generated key.
         *
         * @param string $key
         *
         * @since 1.3.0
         *
         * @return License
         */
        public function set_option_key($key)
        {
        }
        /**
         * Get the license key
         *
         * @since 1.3.0
         *
         * @return string|null
         */
        public function get_license()
        {
        }
        /**
         * Check license
         *
         * @return array
         */
        public function check($license_key)
        {
        }
        /**
         * Active a license
         *
         * @return array
         */
        public function activate($license_key)
        {
        }
        /**
         * Deactivate a license
         *
         * @return array
         */
        public function deactivate($license_key)
        {
        }
        /**
         * Send common request
         *
         * @return array
         */
        protected function send_request($license_key, $route)
        {
        }
        /**
         * License Refresh Endpoint
         */
        public function refresh_license_api()
        {
        }
        /**
         * Add settings page for license
         *
         * @param array $args
         *
         * @return void
         */
        public function add_settings_page($args = [])
        {
        }
        /**
         * Admin Menu hook
         *
         * @return void
         */
        public function admin_menu()
        {
        }
        /**
         * License menu output
         */
        public function menu_output()
        {
        }
        /**
         * License form submit
         */
        public function license_form_submit($form_data = array())
        {
        }
        /**
         * Check license status on schedule
         */
        public function check_license_status()
        {
        }
        /**
         * Check this is a valid license
         */
        public function is_valid()
        {
        }
        /**
         * Check this is a valid license
         */
        public function is_valid_by($option, $value)
        {
        }
        /**
         * Schedule daily sicense checker event
         */
        public function schedule_cron_event()
        {
        }
        /**
         * Clear any scheduled hook
         */
        public function clear_scheduler()
        {
        }
    }
    /**
     * WeDevs\DokanPro\Dependencies\Appsero Updater
     *
     * This class will show new updates for the project
     */
    class Updater
    {
        /**
         * WeDevs\DokanPro\Dependencies\Appsero\Client
         *
         * @var object
         */
        protected $client;
        /**
         * Object of Updater
         *
         * @var object
         */
        protected static $instance;
        /**
         * Cache key
         *
         * @var string
         */
        protected $cache_key;
        /**
         * Initialize the class
         *
         * @param object $client
         */
        public function __construct($client)
        {
        }
        /**
         * Initialize the Updater
         *
         * @param object $client
         * @return object
         */
        public static function init($client)
        {
        }
        /**
         * Set up WordPress filter hooks to get plugin updates
         *
         * @return void
         */
        public function run_plugin_hooks()
        {
        }
        /**
         * Set up WordPress filter hooks to get theme updates
         *
         * @return void
         */
        public function run_theme_hooks()
        {
        }
        /**
         * Check for plugin updates
         *
         * @param object $transient_data
         * @return object
         */
        public function check_plugin_update($transient_data)
        {
        }
        /**
         * Update information on the "View version x.x details" page with custom data
         *
         * @param mixed  $data
         * @param string $action
         * @param object $args
         * @return object
         */
        public function plugins_api_filter($data, $action = '', $args = null)
        {
        }
        /**
         * Check for theme updates
         *
         * @param object $transient_data
         * @return object
         */
        public function check_theme_update($transient_data)
        {
        }
        /**
         * Show warning notice for required plugins
         *
         * @param array $warnings
         * @return void
         */
        public function show_warning_notice($warnings)
        {
        }
        /**
         * Add custom plugin row with warnings
         *
         * @param string $plugin_file
         * @param array  $plugin_data
         * @param string $status
         * @param array  $warnings
         * @return void
         */
        public function add_custom_plugin_row($plugin_file, $plugin_data, $status, $warnings)
        {
        }
        public function validate_plugin_update_url($reply, $package)
        {
        }
    }
}
namespace WeDevs\DokanPro\Dependencies\GuzzleHttp {
    interface BodySummarizerInterface
    {
        /**
         * Returns a summarized message body.
         */
        public function summarize(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\MessageInterface $message): ?string;
    }
    final class BodySummarizer implements \WeDevs\DokanPro\Dependencies\GuzzleHttp\BodySummarizerInterface
    {
        public function __construct(?int $truncateAt = null)
        {
        }
        /**
         * Returns a summarized message body.
         */
        public function summarize(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\MessageInterface $message): ?string
        {
        }
    }
    /**
     * Client interface for sending HTTP requests.
     */
    interface ClientInterface
    {
        /**
         * The Guzzle major version.
         */
        public const MAJOR_VERSION = 7;
        /**
         * Send an HTTP request.
         *
         * @param RequestInterface $request Request to send
         * @param array            $options Request options to apply to the given
         *                                  request and to the transfer.
         *
         * @throws GuzzleException
         */
        public function send(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request, array $options = []): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface;
        /**
         * Asynchronously send an HTTP request.
         *
         * @param RequestInterface $request Request to send
         * @param array            $options Request options to apply to the given
         *                                  request and to the transfer.
         */
        public function sendAsync(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request, array $options = []): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface;
        /**
         * Create and send an HTTP request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well.
         *
         * @param string              $method  HTTP method.
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         *
         * @throws GuzzleException
         */
        public function request(string $method, $uri, array $options = []): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface;
        /**
         * Create and send an asynchronous HTTP request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well. Use an array to provide a URL
         * template and additional variables to use in the URL template expansion.
         *
         * @param string              $method  HTTP method
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         */
        public function requestAsync(string $method, $uri, array $options = []): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface;
        /**
         * Get a client configuration option.
         *
         * These options include default request options of the client, a "handler"
         * (if utilized by the concrete client), and a "base_uri" if utilized by
         * the concrete client.
         *
         * @param string|null $option The config option to retrieve.
         *
         * @return mixed
         *
         * @deprecated ClientInterface::getConfig will be removed in guzzlehttp/guzzle:8.0.
         */
        public function getConfig(?string $option = null);
    }
    /**
     * Client interface for sending HTTP requests.
     */
    trait ClientTrait
    {
        /**
         * Create and send an HTTP request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well.
         *
         * @param string              $method  HTTP method.
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         *
         * @throws GuzzleException
         */
        abstract public function request(string $method, $uri, array $options = []): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface;
        /**
         * Create and send an HTTP GET request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well.
         *
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         *
         * @throws GuzzleException
         */
        public function get($uri, array $options = []): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface
        {
        }
        /**
         * Create and send an HTTP HEAD request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well.
         *
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         *
         * @throws GuzzleException
         */
        public function head($uri, array $options = []): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface
        {
        }
        /**
         * Create and send an HTTP PUT request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well.
         *
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         *
         * @throws GuzzleException
         */
        public function put($uri, array $options = []): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface
        {
        }
        /**
         * Create and send an HTTP POST request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well.
         *
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         *
         * @throws GuzzleException
         */
        public function post($uri, array $options = []): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface
        {
        }
        /**
         * Create and send an HTTP PATCH request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well.
         *
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         *
         * @throws GuzzleException
         */
        public function patch($uri, array $options = []): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface
        {
        }
        /**
         * Create and send an HTTP DELETE request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well.
         *
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         *
         * @throws GuzzleException
         */
        public function delete($uri, array $options = []): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface
        {
        }
        /**
         * Create and send an asynchronous HTTP request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well. Use an array to provide a URL
         * template and additional variables to use in the URL template expansion.
         *
         * @param string              $method  HTTP method
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         */
        abstract public function requestAsync(string $method, $uri, array $options = []): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface;
        /**
         * Create and send an asynchronous HTTP GET request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well. Use an array to provide a URL
         * template and additional variables to use in the URL template expansion.
         *
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         */
        public function getAsync($uri, array $options = []): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface
        {
        }
        /**
         * Create and send an asynchronous HTTP HEAD request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well. Use an array to provide a URL
         * template and additional variables to use in the URL template expansion.
         *
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         */
        public function headAsync($uri, array $options = []): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface
        {
        }
        /**
         * Create and send an asynchronous HTTP PUT request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well. Use an array to provide a URL
         * template and additional variables to use in the URL template expansion.
         *
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         */
        public function putAsync($uri, array $options = []): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface
        {
        }
        /**
         * Create and send an asynchronous HTTP POST request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well. Use an array to provide a URL
         * template and additional variables to use in the URL template expansion.
         *
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         */
        public function postAsync($uri, array $options = []): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface
        {
        }
        /**
         * Create and send an asynchronous HTTP PATCH request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well. Use an array to provide a URL
         * template and additional variables to use in the URL template expansion.
         *
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         */
        public function patchAsync($uri, array $options = []): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface
        {
        }
        /**
         * Create and send an asynchronous HTTP DELETE request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well. Use an array to provide a URL
         * template and additional variables to use in the URL template expansion.
         *
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply.
         */
        public function deleteAsync($uri, array $options = []): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface
        {
        }
    }
    /**
     * @final
     */
    class Client implements \WeDevs\DokanPro\Dependencies\GuzzleHttp\ClientInterface, \WeDevs\DokanPro\Dependencies\Psr\Http\Client\ClientInterface
    {
        use \WeDevs\DokanPro\Dependencies\GuzzleHttp\ClientTrait;
        /**
         * Clients accept an array of constructor parameters.
         *
         * Here's an example of creating a client using a base_uri and an array of
         * default request options to apply to each request:
         *
         *     $client = new Client([
         *         'base_uri'        => 'http://www.foo.com/1.0/',
         *         'timeout'         => 0,
         *         'allow_redirects' => false,
         *         'proxy'           => '192.168.16.1:10'
         *     ]);
         *
         * Client configuration settings include the following options:
         *
         * - handler: (callable) Function that transfers HTTP requests over the
         *   wire. The function is called with a Psr7\Http\Message\RequestInterface
         *   and array of transfer options, and must return a
         *   WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface that is fulfilled with a
         *   Psr7\Http\Message\ResponseInterface on success.
         *   If no handler is provided, a default handler will be created
         *   that enables all of the request options below by attaching all of the
         *   default middleware to the handler.
         * - base_uri: (string|UriInterface) Base URI of the client that is merged
         *   into relative URIs. Can be a string or instance of UriInterface.
         * - **: any request option
         *
         * @param array $config Client configuration settings.
         *
         * @see RequestOptions for a list of available request options.
         */
        public function __construct(array $config = [])
        {
        }
        /**
         * @param string $method
         * @param array  $args
         *
         * @return PromiseInterface|ResponseInterface
         *
         * @deprecated Client::__call will be removed in guzzlehttp/guzzle:8.0.
         */
        public function __call($method, $args)
        {
        }
        /**
         * Asynchronously send an HTTP request.
         *
         * @param array $options Request options to apply to the given
         *                       request and to the transfer. See \WeDevs\DokanPro\Dependencies\GuzzleHttp\RequestOptions.
         */
        public function sendAsync(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request, array $options = []): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface
        {
        }
        /**
         * Send an HTTP request.
         *
         * @param array $options Request options to apply to the given
         *                       request and to the transfer. See \WeDevs\DokanPro\Dependencies\GuzzleHttp\RequestOptions.
         *
         * @throws GuzzleException
         */
        public function send(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request, array $options = []): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface
        {
        }
        /**
         * The HttpClient PSR (PSR-18) specify this method.
         *
         * {@inheritDoc}
         */
        public function sendRequest(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface
        {
        }
        /**
         * Create and send an asynchronous HTTP request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well. Use an array to provide a URL
         * template and additional variables to use in the URL template expansion.
         *
         * @param string              $method  HTTP method
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply. See \WeDevs\DokanPro\Dependencies\GuzzleHttp\RequestOptions.
         */
        public function requestAsync(string $method, $uri = '', array $options = []): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface
        {
        }
        /**
         * Create and send an HTTP request.
         *
         * Use an absolute path to override the base path of the client, or a
         * relative path to append to the base path of the client. The URL can
         * contain the query string as well.
         *
         * @param string              $method  HTTP method.
         * @param string|UriInterface $uri     URI object or string.
         * @param array               $options Request options to apply. See \WeDevs\DokanPro\Dependencies\GuzzleHttp\RequestOptions.
         *
         * @throws GuzzleException
         */
        public function request(string $method, $uri = '', array $options = []): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface
        {
        }
        /**
         * Get a client configuration option.
         *
         * These options include default request options of the client, a "handler"
         * (if utilized by the concrete client), and a "base_uri" if utilized by
         * the concrete client.
         *
         * @param string|null $option The config option to retrieve.
         *
         * @return mixed
         *
         * @deprecated Client::getConfig will be removed in guzzlehttp/guzzle:8.0.
         */
        public function getConfig(?string $option = null)
        {
        }
    }
}
namespace WeDevs\DokanPro\Dependencies\GuzzleHttp\Cookie {
    /**
     * Stores HTTP cookies.
     *
     * It extracts cookies from HTTP requests, and returns them in HTTP responses.
     * CookieJarInterface instances automatically expire contained cookies when
     * necessary. Subclasses are also responsible for storing and retrieving
     * cookies from a file, database, etc.
     *
     * @see https://docs.python.org/2/library/cookielib.html Inspiration
     *
     * @extends \IteratorAggregate<SetCookie>
     */
    interface CookieJarInterface extends \Countable, \IteratorAggregate
    {
        /**
         * Create a request with added cookie headers.
         *
         * If no matching cookies are found in the cookie jar, then no Cookie
         * header is added to the request and the same request is returned.
         *
         * @param RequestInterface $request Request object to modify.
         *
         * @return RequestInterface returns the modified request.
         */
        public function withCookieHeader(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface;
        /**
         * Extract cookies from an HTTP response and store them in the CookieJar.
         *
         * @param RequestInterface  $request  Request that was sent
         * @param ResponseInterface $response Response that was received
         */
        public function extractCookies(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request, \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface $response): void;
        /**
         * Sets a cookie in the cookie jar.
         *
         * @param SetCookie $cookie Cookie to set.
         *
         * @return bool Returns true on success or false on failure
         */
        public function setCookie(\WeDevs\DokanPro\Dependencies\GuzzleHttp\Cookie\SetCookie $cookie): bool;
        /**
         * Remove cookies currently held in the cookie jar.
         *
         * Invoking this method without arguments will empty the whole cookie jar.
         * If given a $domain argument only cookies belonging to that domain will
         * be removed. If given a $domain and $path argument, cookies belonging to
         * the specified path within that domain are removed. If given all three
         * arguments, then the cookie with the specified name, path and domain is
         * removed.
         *
         * @param string|null $domain Clears cookies matching a domain
         * @param string|null $path   Clears cookies matching a domain and path
         * @param string|null $name   Clears cookies matching a domain, path, and name
         */
        public function clear(?string $domain = null, ?string $path = null, ?string $name = null): void;
        /**
         * Discard all sessions cookies.
         *
         * Removes cookies that don't have an expire field or a have a discard
         * field set to true. To be called when the user agent shuts down according
         * to RFC 2965.
         */
        public function clearSessionCookies(): void;
        /**
         * Converts the cookie jar to an array.
         */
        public function toArray(): array;
    }
    /**
     * Cookie jar that stores cookies as an array
     */
    class CookieJar implements \WeDevs\DokanPro\Dependencies\GuzzleHttp\Cookie\CookieJarInterface
    {
        /**
         * @param bool  $strictMode  Set to true to throw exceptions when invalid
         *                           cookies are added to the cookie jar.
         * @param array $cookieArray Array of SetCookie objects or a hash of
         *                           arrays that can be used with the SetCookie
         *                           constructor
         */
        public function __construct(bool $strictMode = false, array $cookieArray = [])
        {
        }
        /**
         * Create a new Cookie jar from an associative array and domain.
         *
         * @param array  $cookies Cookies to create the jar from
         * @param string $domain  Domain to set the cookies to
         */
        public static function fromArray(array $cookies, string $domain): self
        {
        }
        /**
         * Evaluate if this cookie should be persisted to storage
         * that survives between requests.
         *
         * @param SetCookie $cookie              Being evaluated.
         * @param bool      $allowSessionCookies If we should persist session cookies
         */
        public static function shouldPersist(\WeDevs\DokanPro\Dependencies\GuzzleHttp\Cookie\SetCookie $cookie, bool $allowSessionCookies = false): bool
        {
        }
        /**
         * Finds and returns the cookie based on the name
         *
         * @param string $name cookie name to search for
         *
         * @return SetCookie|null cookie that was found or null if not found
         */
        public function getCookieByName(string $name): ?\WeDevs\DokanPro\Dependencies\GuzzleHttp\Cookie\SetCookie
        {
        }
        public function toArray(): array
        {
        }
        public function clear(?string $domain = null, ?string $path = null, ?string $name = null): void
        {
        }
        public function clearSessionCookies(): void
        {
        }
        public function setCookie(\WeDevs\DokanPro\Dependencies\GuzzleHttp\Cookie\SetCookie $cookie): bool
        {
        }
        public function count(): int
        {
        }
        /**
         * @return \ArrayIterator<int, SetCookie>
         */
        public function getIterator(): \ArrayIterator
        {
        }
        public function extractCookies(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request, \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface $response): void
        {
        }
        public function withCookieHeader(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface
        {
        }
    }
    /**
     * Persists non-session cookies using a JSON formatted file
     */
    class FileCookieJar extends \WeDevs\DokanPro\Dependencies\GuzzleHttp\Cookie\CookieJar
    {
        /**
         * Create a new FileCookieJar object
         *
         * @param string $cookieFile          File to store the cookie data
         * @param bool   $storeSessionCookies Set to true to store session cookies
         *                                    in the cookie jar.
         *
         * @throws \RuntimeException if the file cannot be found or created
         */
        public function __construct(string $cookieFile, bool $storeSessionCookies = false)
        {
        }
        /**
         * Saves the file when shutting down
         */
        public function __destruct()
        {
        }
        /**
         * Saves the cookies to a file.
         *
         * @param string $filename File to save
         *
         * @throws \RuntimeException if the file cannot be found or created
         */
        public function save(string $filename): void
        {
        }
        /**
         * Load cookies from a JSON formatted file.
         *
         * Old cookies are kept unless overwritten by newly loaded ones.
         *
         * @param string $filename Cookie file to load.
         *
         * @throws \RuntimeException if the file cannot be loaded.
         */
        public function load(string $filename): void
        {
        }
    }
    /**
     * Persists cookies in the client session
     */
    class SessionCookieJar extends \WeDevs\DokanPro\Dependencies\GuzzleHttp\Cookie\CookieJar
    {
        /**
         * Create a new SessionCookieJar object
         *
         * @param string $sessionKey          Session key name to store the cookie
         *                                    data in session
         * @param bool   $storeSessionCookies Set to true to store session cookies
         *                                    in the cookie jar.
         */
        public function __construct(string $sessionKey, bool $storeSessionCookies = false)
        {
        }
        /**
         * Saves cookies to session when shutting down
         */
        public function __destruct()
        {
        }
        /**
         * Save cookies to the client session
         */
        public function save(): void
        {
        }
        /**
         * Load the contents of the client session into the data array
         */
        protected function load(): void
        {
        }
    }
    /**
     * Set-Cookie object
     */
    class SetCookie
    {
        /**
         * Create a new SetCookie object from a string.
         *
         * @param string $cookie Set-Cookie header string
         */
        public static function fromString(string $cookie): self
        {
        }
        /**
         * @param array $data Array of cookie data provided by a Cookie parser
         */
        public function __construct(array $data = [])
        {
        }
        public function __toString()
        {
        }
        public function toArray(): array
        {
        }
        /**
         * Get the cookie name.
         *
         * @return string
         */
        public function getName()
        {
        }
        /**
         * Set the cookie name.
         *
         * @param string $name Cookie name
         */
        public function setName($name): void
        {
        }
        /**
         * Get the cookie value.
         *
         * @return string|null
         */
        public function getValue()
        {
        }
        /**
         * Set the cookie value.
         *
         * @param string $value Cookie value
         */
        public function setValue($value): void
        {
        }
        /**
         * Get the domain.
         *
         * @return string|null
         */
        public function getDomain()
        {
        }
        /**
         * Set the domain of the cookie.
         *
         * @param string|null $domain
         */
        public function setDomain($domain): void
        {
        }
        /**
         * Get the path.
         *
         * @return string
         */
        public function getPath()
        {
        }
        /**
         * Set the path of the cookie.
         *
         * @param string $path Path of the cookie
         */
        public function setPath($path): void
        {
        }
        /**
         * Maximum lifetime of the cookie in seconds.
         *
         * @return int|null
         */
        public function getMaxAge()
        {
        }
        /**
         * Set the max-age of the cookie.
         *
         * @param int|null $maxAge Max age of the cookie in seconds
         */
        public function setMaxAge($maxAge): void
        {
        }
        /**
         * The UNIX timestamp when the cookie Expires.
         *
         * @return string|int|null
         */
        public function getExpires()
        {
        }
        /**
         * Set the unix timestamp for which the cookie will expire.
         *
         * @param int|string|null $timestamp Unix timestamp or any English textual datetime description.
         */
        public function setExpires($timestamp): void
        {
        }
        /**
         * Get whether or not this is a secure cookie.
         *
         * @return bool
         */
        public function getSecure()
        {
        }
        /**
         * Set whether or not the cookie is secure.
         *
         * @param bool $secure Set to true or false if secure
         */
        public function setSecure($secure): void
        {
        }
        /**
         * Get whether or not this is a session cookie.
         *
         * @return bool|null
         */
        public function getDiscard()
        {
        }
        /**
         * Set whether or not this is a session cookie.
         *
         * @param bool $discard Set to true or false if this is a session cookie
         */
        public function setDiscard($discard): void
        {
        }
        /**
         * Get whether or not this is an HTTP only cookie.
         *
         * @return bool
         */
        public function getHttpOnly()
        {
        }
        /**
         * Set whether or not this is an HTTP only cookie.
         *
         * @param bool $httpOnly Set to true or false if this is HTTP only
         */
        public function setHttpOnly($httpOnly): void
        {
        }
        /**
         * Check if the cookie matches a path value.
         *
         * A request-path path-matches a given cookie-path if at least one of
         * the following conditions holds:
         *
         * - The cookie-path and the request-path are identical.
         * - The cookie-path is a prefix of the request-path, and the last
         *   character of the cookie-path is %x2F ("/").
         * - The cookie-path is a prefix of the request-path, and the first
         *   character of the request-path that is not included in the cookie-
         *   path is a %x2F ("/") character.
         *
         * @param string $requestPath Path to check against
         */
        public function matchesPath(string $requestPath): bool
        {
        }
        /**
         * Check if the cookie matches a domain value.
         *
         * @param string $domain Domain to check against
         */
        public function matchesDomain(string $domain): bool
        {
        }
        /**
         * Check if the cookie is expired.
         */
        public function isExpired(): bool
        {
        }
        /**
         * Check if the cookie is valid according to RFC 6265.
         *
         * @return bool|string Returns true if valid or an error message if invalid
         */
        public function validate()
        {
        }
    }
}
namespace WeDevs\DokanPro\Dependencies\GuzzleHttp {
    /**
     * Creates a composed Guzzle handler function by stacking middlewares on top of
     * an HTTP handler function.
     *
     * @final
     */
    class HandlerStack
    {
        /**
         * Creates a default handler stack that can be used by clients.
         *
         * The returned handler will wrap the provided handler or use the most
         * appropriate default handler for your system. The returned HandlerStack has
         * support for cookies, redirects, HTTP error exceptions, and preparing a body
         * before sending.
         *
         * The returned handler stack can be passed to a client in the "handler"
         * option.
         *
         * @param (callable(RequestInterface, array): PromiseInterface)|null $handler HTTP handler function to use with the stack. If no
         *                                                                            handler is provided, the best handler for your
         *                                                                            system will be utilized.
         */
        public static function create(?callable $handler = null): self
        {
        }
        /**
         * @param (callable(RequestInterface, array): PromiseInterface)|null $handler Underlying HTTP handler.
         */
        public function __construct(?callable $handler = null)
        {
        }
        /**
         * Invokes the handler stack as a composed handler
         *
         * @return ResponseInterface|PromiseInterface
         */
        public function __invoke(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request, array $options)
        {
        }
        /**
         * Dumps a string representation of the stack.
         *
         * @return string
         */
        public function __toString()
        {
        }
        /**
         * Set the HTTP handler that actually returns a promise.
         *
         * @param callable(RequestInterface, array): PromiseInterface $handler Accepts a request and array of options and
         *                                                                     returns a Promise.
         */
        public function setHandler(callable $handler): void
        {
        }
        /**
         * Returns true if the builder has a handler.
         */
        public function hasHandler(): bool
        {
        }
        /**
         * Unshift a middleware to the bottom of the stack.
         *
         * @param callable(callable): callable $middleware Middleware function
         * @param string                       $name       Name to register for this middleware.
         */
        public function unshift(callable $middleware, ?string $name = null): void
        {
        }
        /**
         * Push a middleware to the top of the stack.
         *
         * @param callable(callable): callable $middleware Middleware function
         * @param string                       $name       Name to register for this middleware.
         */
        public function push(callable $middleware, string $name = ''): void
        {
        }
        /**
         * Add a middleware before another middleware by name.
         *
         * @param string                       $findName   Middleware to find
         * @param callable(callable): callable $middleware Middleware function
         * @param string                       $withName   Name to register for this middleware.
         */
        public function before(string $findName, callable $middleware, string $withName = ''): void
        {
        }
        /**
         * Add a middleware after another middleware by name.
         *
         * @param string                       $findName   Middleware to find
         * @param callable(callable): callable $middleware Middleware function
         * @param string                       $withName   Name to register for this middleware.
         */
        public function after(string $findName, callable $middleware, string $withName = ''): void
        {
        }
        /**
         * Remove a middleware by instance or name from the stack.
         *
         * @param callable|string $remove Middleware to remove by instance or name.
         */
        public function remove($remove): void
        {
        }
        /**
         * Compose the middleware and handler into a single callable function.
         *
         * @return callable(RequestInterface, array): PromiseInterface
         */
        public function resolve(): callable
        {
        }
    }
    interface MessageFormatterInterface
    {
        /**
         * Returns a formatted message string.
         *
         * @param RequestInterface       $request  Request that was sent
         * @param ResponseInterface|null $response Response that was received
         * @param \Throwable|null        $error    Exception that was received
         */
        public function format(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request, ?\WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface $response = null, ?\Throwable $error = null): string;
    }
    /**
     * Formats log messages using variable substitutions for requests, responses,
     * and other transactional data.
     *
     * The following variable substitutions are supported:
     *
     * - {request}:        Full HTTP request message
     * - {response}:       Full HTTP response message
     * - {ts}:             ISO 8601 date in GMT
     * - {date_iso_8601}   ISO 8601 date in GMT
     * - {date_common_log} Apache common log date using the configured timezone.
     * - {host}:           Host of the request
     * - {method}:         Method of the request
     * - {uri}:            URI of the request
     * - {version}:        Protocol version
     * - {target}:         Request target of the request (path + query + fragment)
     * - {hostname}:       Hostname of the machine that sent the request
     * - {code}:           Status code of the response (if available)
     * - {phrase}:         Reason phrase of the response  (if available)
     * - {error}:          Any error messages (if available)
     * - {req_header_*}:   Replace `*` with the lowercased name of a request header to add to the message
     * - {res_header_*}:   Replace `*` with the lowercased name of a response header to add to the message
     * - {req_headers}:    Request headers
     * - {res_headers}:    Response headers
     * - {req_body}:       Request body
     * - {res_body}:       Response body
     *
     * @final
     */
    class MessageFormatter implements \WeDevs\DokanPro\Dependencies\GuzzleHttp\MessageFormatterInterface
    {
        /**
         * Apache Common Log Format.
         *
         * @see https://httpd.apache.org/docs/2.4/logs.html#common
         *
         * @var string
         */
        public const CLF = '{hostname} {req_header_User-Agent} - [{date_common_log}] "{method} {target} HTTP/{version}" {code} {res_header_Content-Length}';
        public const DEBUG = ">>>>>>>>\n{request}\n<<<<<<<<\n{response}\n--------\n{error}";
        public const SHORT = '[{ts}] "{method} {target} HTTP/{version}" {code}';
        /**
         * @param string $template Log message template
         */
        public function __construct(?string $template = self::CLF)
        {
        }
        /**
         * Returns a formatted message string.
         *
         * @param RequestInterface       $request  Request that was sent
         * @param ResponseInterface|null $response Response that was received
         * @param \Throwable|null        $error    Exception that was received
         */
        public function format(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request, ?\WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface $response = null, ?\Throwable $error = null): string
        {
        }
    }
    /**
     * Functions used to create and wrap handlers with handler middleware.
     */
    final class Middleware
    {
        /**
         * Middleware that adds cookies to requests.
         *
         * The options array must be set to a CookieJarInterface in order to use
         * cookies. This is typically handled for you by a client.
         *
         * @return callable Returns a function that accepts the next handler.
         */
        public static function cookies(): callable
        {
        }
        /**
         * Middleware that throws exceptions for 4xx or 5xx responses when the
         * "http_errors" request option is set to true.
         *
         * @param BodySummarizerInterface|null $bodySummarizer The body summarizer to use in exception messages.
         *
         * @return callable(callable): callable Returns a function that accepts the next handler.
         */
        public static function httpErrors(?\WeDevs\DokanPro\Dependencies\GuzzleHttp\BodySummarizerInterface $bodySummarizer = null): callable
        {
        }
        /**
         * Middleware that pushes history data to an ArrayAccess container.
         *
         * @param array|\ArrayAccess<int, array> $container Container to hold the history (by reference).
         *
         * @return callable(callable): callable Returns a function that accepts the next handler.
         *
         * @throws \InvalidArgumentException if container is not an array or ArrayAccess.
         */
        public static function history(&$container): callable
        {
        }
        /**
         * Middleware that invokes a callback before and after sending a request.
         *
         * The provided listener cannot modify or alter the response. It simply
         * "taps" into the chain to be notified before returning the promise. The
         * before listener accepts a request and options array, and the after
         * listener accepts a request, options array, and response promise.
         *
         * @param callable $before Function to invoke before forwarding the request.
         * @param callable $after  Function invoked after forwarding.
         *
         * @return callable Returns a function that accepts the next handler.
         */
        public static function tap(?callable $before = null, ?callable $after = null): callable
        {
        }
        /**
         * Middleware that handles request redirects.
         *
         * @return callable Returns a function that accepts the next handler.
         */
        public static function redirect(): callable
        {
        }
        /**
         * Middleware that retries requests based on the boolean result of
         * invoking the provided "decider" function.
         *
         * If no delay function is provided, a simple implementation of exponential
         * backoff will be utilized.
         *
         * @param callable $decider Function that accepts the number of retries,
         *                          a request, [response], and [exception] and
         *                          returns true if the request is to be retried.
         * @param callable $delay   Function that accepts the number of retries and
         *                          returns the number of milliseconds to delay.
         *
         * @return callable Returns a function that accepts the next handler.
         */
        public static function retry(callable $decider, ?callable $delay = null): callable
        {
        }
        /**
         * Middleware that logs requests, responses, and errors using a message
         * formatter.
         *
         * @phpstan-param \Psr\Log\LogLevel::* $logLevel  Level at which to log requests.
         *
         * @param LoggerInterface                            $logger    Logs messages.
         * @param MessageFormatterInterface|MessageFormatter $formatter Formatter used to create message strings.
         * @param string                                     $logLevel  Level at which to log requests.
         *
         * @return callable Returns a function that accepts the next handler.
         */
        public static function log(\Psr\Log\LoggerInterface $logger, $formatter, string $logLevel = 'info'): callable
        {
        }
        /**
         * This middleware adds a default content-type if possible, a default
         * content-length or transfer-encoding header, and the expect header.
         */
        public static function prepareBody(): callable
        {
        }
        /**
         * Middleware that applies a map function to the request before passing to
         * the next handler.
         *
         * @param callable $fn Function that accepts a RequestInterface and returns
         *                     a RequestInterface.
         */
        public static function mapRequest(callable $fn): callable
        {
        }
        /**
         * Middleware that applies a map function to the resolved promise's
         * response.
         *
         * @param callable $fn Function that accepts a ResponseInterface and
         *                     returns a ResponseInterface.
         */
        public static function mapResponse(callable $fn): callable
        {
        }
    }
    /**
     * Sends an iterator of requests concurrently using a capped pool size.
     *
     * The pool will read from an iterator until it is cancelled or until the
     * iterator is consumed. When a request is yielded, the request is sent after
     * applying the "request_options" request options (if provided in the ctor).
     *
     * When a function is yielded by the iterator, the function is provided the
     * "request_options" array that should be merged on top of any existing
     * options, and the function MUST then return a wait-able promise.
     *
     * @final
     */
    class Pool implements \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromisorInterface
    {
        /**
         * @param ClientInterface $client   Client used to send the requests.
         * @param array|\Iterator $requests Requests or functions that return
         *                                  requests to send concurrently.
         * @param array           $config   Associative array of options
         *                                  - concurrency: (int) Maximum number of requests to send concurrently
         *                                  - options: Array of request options to apply to each request.
         *                                  - fulfilled: (callable) Function to invoke when a request completes.
         *                                  - rejected: (callable) Function to invoke when a request is rejected.
         */
        public function __construct(\WeDevs\DokanPro\Dependencies\GuzzleHttp\ClientInterface $client, $requests, array $config = [])
        {
        }
        /**
         * Get promise
         */
        public function promise(): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface
        {
        }
        /**
         * Sends multiple requests concurrently and returns an array of responses
         * and exceptions that uses the same ordering as the provided requests.
         *
         * IMPORTANT: This method keeps every request and response in memory, and
         * as such, is NOT recommended when sending a large number or an
         * indeterminate number of requests concurrently.
         *
         * @param ClientInterface $client   Client used to send the requests
         * @param array|\Iterator $requests Requests to send concurrently.
         * @param array           $options  Passes through the options available in
         *                                  {@see \WeDevs\DokanPro\Dependencies\GuzzleHttp\Pool::__construct}
         *
         * @return array Returns an array containing the response or an exception
         *               in the same order that the requests were sent.
         *
         * @throws \InvalidArgumentException if the event format is incorrect.
         */
        public static function batch(\WeDevs\DokanPro\Dependencies\GuzzleHttp\ClientInterface $client, $requests, array $options = []): array
        {
        }
    }
    /**
     * Prepares requests that contain a body, adding the Content-Length,
     * Content-Type, and Expect headers.
     *
     * @final
     */
    class PrepareBodyMiddleware
    {
        /**
         * @param callable(RequestInterface, array): PromiseInterface $nextHandler Next handler to invoke.
         */
        public function __construct(callable $nextHandler)
        {
        }
        public function __invoke(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request, array $options): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface
        {
        }
    }
    /**
     * Request redirect middleware.
     *
     * Apply this middleware like other middleware using
     * {@see \WeDevs\DokanPro\Dependencies\GuzzleHttp\Middleware::redirect()}.
     *
     * @final
     */
    class RedirectMiddleware
    {
        public const HISTORY_HEADER = 'X-Guzzle-Redirect-History';
        public const STATUS_HISTORY_HEADER = 'X-Guzzle-Redirect-Status-History';
        /**
         * @var array
         */
        public static $defaultSettings = ['max' => 5, 'protocols' => ['http', 'https'], 'strict' => false, 'referer' => false, 'track_redirects' => false];
        /**
         * @param callable(RequestInterface, array): PromiseInterface $nextHandler Next handler to invoke.
         */
        public function __construct(callable $nextHandler)
        {
        }
        public function __invoke(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request, array $options): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface
        {
        }
        /**
         * @return ResponseInterface|PromiseInterface
         */
        public function checkRedirect(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request, array $options, \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface $response)
        {
        }
        public function modifyRequest(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request, array $options, \WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface $response): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface
        {
        }
    }
    /**
     * This class contains a list of built-in Guzzle request options.
     *
     * @see https://docs.guzzlephp.org/en/latest/request-options.html
     */
    final class RequestOptions
    {
        /**
         * allow_redirects: (bool|array) Controls redirect behavior. Pass false
         * to disable redirects, pass true to enable redirects, pass an
         * associative to provide custom redirect settings. Defaults to "false".
         * This option only works if your handler has the RedirectMiddleware. When
         * passing an associative array, you can provide the following key value
         * pairs:
         *
         * - max: (int, default=5) maximum number of allowed redirects.
         * - strict: (bool, default=false) Set to true to use strict redirects
         *   meaning redirect POST requests with POST requests vs. doing what most
         *   browsers do which is redirect POST requests with GET requests
         * - referer: (bool, default=false) Set to true to enable the Referer
         *   header.
         * - protocols: (array, default=['http', 'https']) Allowed redirect
         *   protocols.
         * - on_redirect: (callable) PHP callable that is invoked when a redirect
         *   is encountered. The callable is invoked with the request, the redirect
         *   response that was received, and the effective URI. Any return value
         *   from the on_redirect function is ignored.
         */
        public const ALLOW_REDIRECTS = 'allow_redirects';
        /**
         * auth: (array) Pass an array of HTTP authentication parameters to use
         * with the request. The array must contain the username in index [0],
         * the password in index [1], and you can optionally provide a built-in
         * authentication type in index [2]. Pass null to disable authentication
         * for a request.
         */
        public const AUTH = 'auth';
        /**
         * body: (resource|string|null|int|float|StreamInterface|callable|\Iterator)
         * Body to send in the request.
         */
        public const BODY = 'body';
        /**
         * cert: (string|array) Set to a string to specify the path to a file
         * containing a PEM formatted SSL client side certificate. If a password
         * is required, then set cert to an array containing the path to the PEM
         * file in the first array element followed by the certificate password
         * in the second array element.
         */
        public const CERT = 'cert';
        /**
         * cookies: (bool|WeDevs\DokanPro\Dependencies\GuzzleHttp\Cookie\CookieJarInterface, default=false)
         * Specifies whether or not cookies are used in a request or what cookie
         * jar to use or what cookies to send. This option only works if your
         * handler has the `cookie` middleware. Valid values are `false` and
         * an instance of {@see Cookie\CookieJarInterface}.
         */
        public const COOKIES = 'cookies';
        /**
         * connect_timeout: (float, default=0) Float describing the number of
         * seconds to wait while trying to connect to a server. Use 0 to wait
         * 300 seconds (the default behavior).
         */
        public const CONNECT_TIMEOUT = 'connect_timeout';
        /**
         * crypto_method: (int) A value describing the minimum TLS protocol
         * version to use.
         *
         * This setting must be set to one of the
         * ``STREAM_CRYPTO_METHOD_TLS*_CLIENT`` constants. PHP 7.4 or higher is
         * required in order to use TLS 1.3, and cURL 7.34.0 or higher is required
         * in order to specify a crypto method, with cURL 7.52.0 or higher being
         * required to use TLS 1.3.
         */
        public const CRYPTO_METHOD = 'crypto_method';
        /**
         * debug: (bool|resource) Set to true or set to a PHP stream returned by
         * fopen()  enable debug output with the HTTP handler used to send a
         * request.
         */
        public const DEBUG = 'debug';
        /**
         * decode_content: (bool, default=true) Specify whether or not
         * Content-Encoding responses (gzip, deflate, etc.) are automatically
         * decoded.
         */
        public const DECODE_CONTENT = 'decode_content';
        /**
         * delay: (int) The amount of time to delay before sending in milliseconds.
         */
        public const DELAY = 'delay';
        /**
         * expect: (bool|integer) Controls the behavior of the
         * "Expect: 100-Continue" header.
         *
         * Set to `true` to enable the "Expect: 100-Continue" header for all
         * requests that sends a body. Set to `false` to disable the
         * "Expect: 100-Continue" header for all requests. Set to a number so that
         * the size of the payload must be greater than the number in order to send
         * the Expect header. Setting to a number will send the Expect header for
         * all requests in which the size of the payload cannot be determined or
         * where the body is not rewindable.
         *
         * By default, Guzzle will add the "Expect: 100-Continue" header when the
         * size of the body of a request is greater than 1 MB and a request is
         * using HTTP/1.1.
         */
        public const EXPECT = 'expect';
        /**
         * form_params: (array) Associative array of form field names to values
         * where each value is a string or array of strings. Sets the Content-Type
         * header to application/x-www-form-urlencoded when no Content-Type header
         * is already present.
         */
        public const FORM_PARAMS = 'form_params';
        /**
         * headers: (array) Associative array of HTTP headers. Each value MUST be
         * a string or array of strings.
         */
        public const HEADERS = 'headers';
        /**
         * http_errors: (bool, default=true) Set to false to disable exceptions
         * when a non- successful HTTP response is received. By default,
         * exceptions will be thrown for 4xx and 5xx responses. This option only
         * works if your handler has the `httpErrors` middleware.
         */
        public const HTTP_ERRORS = 'http_errors';
        /**
         * idn: (bool|int, default=true) A combination of IDNA_* constants for
         * idn_to_ascii() PHP's function (see "options" parameter). Set to false to
         * disable IDN support completely, or to true to use the default
         * configuration (IDNA_DEFAULT constant).
         */
        public const IDN_CONVERSION = 'idn_conversion';
        /**
         * json: (mixed) Adds JSON data to a request. The provided value is JSON
         * encoded and a Content-Type header of application/json will be added to
         * the request if no Content-Type header is already present.
         */
        public const JSON = 'json';
        /**
         * multipart: (array) Array of associative arrays, each containing a
         * required "name" key mapping to the form field, name, a required
         * "contents" key mapping to a StreamInterface|resource|string, an
         * optional "headers" associative array of custom headers, and an
         * optional "filename" key mapping to a string to send as the filename in
         * the part. If no "filename" key is present, then no "filename" attribute
         * will be added to the part.
         */
        public const MULTIPART = 'multipart';
        /**
         * on_headers: (callable) A callable that is invoked when the HTTP headers
         * of the response have been received but the body has not yet begun to
         * download.
         */
        public const ON_HEADERS = 'on_headers';
        /**
         * on_stats: (callable) allows you to get access to transfer statistics of
         * a request and access the lower level transfer details of the handler
         * associated with your client. ``on_stats`` is a callable that is invoked
         * when a handler has finished sending a request. The callback is invoked
         * with transfer statistics about the request, the response received, or
         * the error encountered. Included in the data is the total amount of time
         * taken to send the request.
         */
        public const ON_STATS = 'on_stats';
        /**
         * progress: (callable) Defines a function to invoke when transfer
         * progress is made. The function accepts the following positional
         * arguments: the total number of bytes expected to be downloaded, the
         * number of bytes downloaded so far, the number of bytes expected to be
         * uploaded, the number of bytes uploaded so far.
         */
        public const PROGRESS = 'progress';
        /**
         * proxy: (string|array) Pass a string to specify an HTTP proxy, or an
         * array to specify different proxies for different protocols (where the
         * key is the protocol and the value is a proxy string).
         */
        public const PROXY = 'proxy';
        /**
         * query: (array|string) Associative array of query string values to add
         * to the request. This option uses PHP's http_build_query() to create
         * the string representation. Pass a string value if you need more
         * control than what this method provides
         */
        public const QUERY = 'query';
        /**
         * sink: (resource|string|StreamInterface) Where the data of the
         * response is written to. Defaults to a PHP temp stream. Providing a
         * string will write data to a file by the given name.
         */
        public const SINK = 'sink';
        /**
         * synchronous: (bool) Set to true to inform HTTP handlers that you intend
         * on waiting on the response. This can be useful for optimizations. Note
         * that a promise is still returned if you are using one of the async
         * client methods.
         */
        public const SYNCHRONOUS = 'synchronous';
        /**
         * ssl_key: (array|string) Specify the path to a file containing a private
         * SSL key in PEM format. If a password is required, then set to an array
         * containing the path to the SSL key in the first array element followed
         * by the password required for the certificate in the second element.
         */
        public const SSL_KEY = 'ssl_key';
        /**
         * stream: Set to true to attempt to stream a response rather than
         * download it all up-front.
         */
        public const STREAM = 'stream';
        /**
         * verify: (bool|string, default=true) Describes the SSL certificate
         * verification behavior of a request. Set to true to enable SSL
         * certificate verification using the system CA bundle when available
         * (the default). Set to false to disable certificate verification (this
         * is insecure!). Set to a string to provide the path to a CA bundle on
         * disk to enable verification using a custom certificate.
         */
        public const VERIFY = 'verify';
        /**
         * timeout: (float, default=0) Float describing the timeout of the
         * request in seconds. Use 0 to wait indefinitely (the default behavior).
         */
        public const TIMEOUT = 'timeout';
        /**
         * read_timeout: (float, default=default_socket_timeout ini setting) Float describing
         * the body read timeout, for stream requests.
         */
        public const READ_TIMEOUT = 'read_timeout';
        /**
         * version: (float) Specifies the HTTP protocol version to attempt to use.
         */
        public const VERSION = 'version';
        /**
         * force_ip_resolve: (bool) Force client to use only ipv4 or ipv6 protocol
         */
        public const FORCE_IP_RESOLVE = 'force_ip_resolve';
    }
    /**
     * Middleware that retries requests based on the boolean result of
     * invoking the provided "decider" function.
     *
     * @final
     */
    class RetryMiddleware
    {
        /**
         * @param callable                                            $decider     Function that accepts the number of retries,
         *                                                                         a request, [response], and [exception] and
         *                                                                         returns true if the request is to be
         *                                                                         retried.
         * @param callable(RequestInterface, array): PromiseInterface $nextHandler Next handler to invoke.
         * @param (callable(int): int)|null                           $delay       Function that accepts the number of retries
         *                                                                         and returns the number of
         *                                                                         milliseconds to delay.
         */
        public function __construct(callable $decider, callable $nextHandler, ?callable $delay = null)
        {
        }
        /**
         * Default exponential backoff delay function.
         *
         * @return int milliseconds.
         */
        public static function exponentialDelay(int $retries): int
        {
        }
        public function __invoke(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request, array $options): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface
        {
        }
    }
    /**
     * Represents data at the point after it was transferred either successfully
     * or after a network error.
     */
    final class TransferStats
    {
        /**
         * @param RequestInterface       $request          Request that was sent.
         * @param ResponseInterface|null $response         Response received (if any)
         * @param float|null             $transferTime     Total handler transfer time.
         * @param mixed                  $handlerErrorData Handler error data.
         * @param array                  $handlerStats     Handler specific stats.
         */
        public function __construct(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface $request, ?\WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface $response = null, ?float $transferTime = null, $handlerErrorData = null, array $handlerStats = [])
        {
        }
        public function getRequest(): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface
        {
        }
        /**
         * Returns the response that was received (if any).
         */
        public function getResponse(): ?\WeDevs\DokanPro\Dependencies\Psr\Http\Message\ResponseInterface
        {
        }
        /**
         * Returns true if a response was received.
         */
        public function hasResponse(): bool
        {
        }
        /**
         * Gets handler specific error data.
         *
         * This might be an exception, a integer representing an error code, or
         * anything else. Relying on this value assumes that you know what handler
         * you are using.
         *
         * @return mixed
         */
        public function getHandlerErrorData()
        {
        }
        /**
         * Get the effective URI the request was sent to.
         */
        public function getEffectiveUri(): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\UriInterface
        {
        }
        /**
         * Get the estimated time the request was being transferred by the handler.
         *
         * @return float|null Time in seconds.
         */
        public function getTransferTime(): ?float
        {
        }
        /**
         * Gets an array of all of the handler specific transfer data.
         */
        public function getHandlerStats(): array
        {
        }
        /**
         * Get a specific handler statistic from the handler by name.
         *
         * @param string $stat Handler specific transfer stat to retrieve.
         *
         * @return mixed|null
         */
        public function getHandlerStat(string $stat)
        {
        }
    }
    final class Utils
    {
        /**
         * Debug function used to describe the provided value type and class.
         *
         * @param mixed $input
         *
         * @return string Returns a string containing the type of the variable and
         *                if a class is provided, the class name.
         */
        public static function describeType($input): string
        {
        }
        /**
         * Parses an array of header lines into an associative array of headers.
         *
         * @param iterable $lines Header lines array of strings in the following
         *                        format: "Name: Value"
         */
        public static function headersFromLines(iterable $lines): array
        {
        }
        /**
         * Returns a debug stream based on the provided variable.
         *
         * @param mixed $value Optional value
         *
         * @return resource
         */
        public static function debugResource($value = null)
        {
        }
        /**
         * Chooses and creates a default handler to use based on the environment.
         *
         * The returned handler is not wrapped by any default middlewares.
         *
         * @return callable(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface, array): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface Returns the best handler for the given system.
         *
         * @throws \RuntimeException if no viable Handler is available.
         */
        public static function chooseHandler(): callable
        {
        }
        /**
         * Get the default User-Agent string to use with Guzzle.
         */
        public static function defaultUserAgent(): string
        {
        }
        /**
         * Returns the default cacert bundle for the current system.
         *
         * First, the openssl.cafile and curl.cainfo php.ini settings are checked.
         * If those settings are not configured, then the common locations for
         * bundles found on Red Hat, CentOS, Fedora, Ubuntu, Debian, FreeBSD, OS X
         * and Windows are checked. If any of these file locations are found on
         * disk, they will be utilized.
         *
         * Note: the result of this function is cached for subsequent calls.
         *
         * @throws \RuntimeException if no bundle can be found.
         *
         * @deprecated Utils::defaultCaBundle will be removed in guzzlehttp/guzzle:8.0. This method is not needed in PHP 5.6+.
         */
        public static function defaultCaBundle(): string
        {
        }
        /**
         * Creates an associative array of lowercase header names to the actual
         * header casing.
         */
        public static function normalizeHeaderKeys(array $headers): array
        {
        }
        /**
         * Returns true if the provided host matches any of the no proxy areas.
         *
         * This method will strip a port from the host if it is present. Each pattern
         * can be matched with an exact match (e.g., "foo.com" == "foo.com") or a
         * partial match: (e.g., "foo.com" == "baz.foo.com" and ".foo.com" ==
         * "baz.foo.com", but ".foo.com" != "foo.com").
         *
         * Areas are matched in the following cases:
         * 1. "*" (without quotes) always matches any hosts.
         * 2. An exact match.
         * 3. The area starts with "." and the area is the last part of the host. e.g.
         *    '.mit.edu' will match any host that ends with '.mit.edu'.
         *
         * @param string   $host         Host to check against the patterns.
         * @param string[] $noProxyArray An array of host patterns.
         *
         * @throws InvalidArgumentException
         */
        public static function isHostInNoProxy(string $host, array $noProxyArray): bool
        {
        }
        /**
         * Wrapper for json_decode that throws when an error occurs.
         *
         * @param string $json    JSON data to parse
         * @param bool   $assoc   When true, returned objects will be converted
         *                        into associative arrays.
         * @param int    $depth   User specified recursion depth.
         * @param int    $options Bitmask of JSON decode options.
         *
         * @return object|array|string|int|float|bool|null
         *
         * @throws InvalidArgumentException if the JSON cannot be decoded.
         *
         * @see https://www.php.net/manual/en/function.json-decode.php
         */
        public static function jsonDecode(string $json, bool $assoc = false, int $depth = 512, int $options = 0)
        {
        }
        /**
         * Wrapper for JSON encoding that throws when an error occurs.
         *
         * @param mixed $value   The value being encoded
         * @param int   $options JSON encode option bitmask
         * @param int   $depth   Set the maximum depth. Must be greater than zero.
         *
         * @throws InvalidArgumentException if the JSON cannot be encoded.
         *
         * @see https://www.php.net/manual/en/function.json-encode.php
         */
        public static function jsonEncode($value, int $options = 0, int $depth = 512): string
        {
        }
        /**
         * Wrapper for the hrtime() or microtime() functions
         * (depending on the PHP version, one of the two is used)
         *
         * @return float UNIX timestamp
         *
         * @internal
         */
        public static function currentTime(): float
        {
        }
        /**
         * @throws InvalidArgumentException
         *
         * @internal
         */
        public static function idnUriConvert(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\UriInterface $uri, int $options = 0): \WeDevs\DokanPro\Dependencies\Psr\Http\Message\UriInterface
        {
        }
        /**
         * @internal
         */
        public static function getenv(string $name): ?string
        {
        }
    }
}
namespace {
    /**
     * Plugin Name: Dokan Pro
     * Plugin URI: https://dokan.co/wordpress/
     * Description: An e-commerce marketplace plugin for WordPress. Powered by WooCommerce and weDevs.
     * Version: 3.14.2
     * Author: weDevs
     * Author URI: https://dokan.co/
     * WC requires at least: 8.0.0
     * WC tested up to: 9.5.1
     * License: GPL2
     * TextDomain: dokan
     * Requires Plugins: woocommerce, dokan-lite
     */
    /**
     * Dokan Pro Feature Loader
     *
     * Load all pro-functionality in this class
     * if the pro-folder exists, then automatically load this class file
     *
     * @since  2.4
     *
     * @author weDevs <info@wedevs.com>
     *
     * @property WeDevs\DokanPro\Product\Manager           $product
     * @property WeDevs\DokanPro\Products                  $products
     * @property WeDevs\DokanPro\Refund\Manager            $refund
     * @property WeDevs\DokanPro\Coupons\Manager           $coupon
     * @property WeDevs\DokanPro\Admin\Reports\Manager     $reports
     * @property WeDevs\DokanPro\Module                    $module
     * @property WeDevs\DokanPro\Shipping\ShippingStatus   $shipment
     * @property WeDevs\DokanPro\DigitalProduct            $digital_product
     * @property WeDevs\DokanPro\Review                    $review
     * @property WeDevs\DokanPro\Announcement\Announcement $announcement
     * @property WeDevs\DokanPro\BackgroundProcess\Manager $bg_process
     * @property WeDevs\DokanPro\SocialLogin               $social_login
     * @property WeDevs\DokanPro\VendorDiscount\Controller $vendor_discount
     * @property WeDevs\DokanPro\Update                    $license
     */
    class Dokan_Pro
    {
        /**
         * Plugin version
         *
         * @var string
         */
        public $version = '3.14.2';
        /**
         * Initializes the WeDevs_Dokan() class
         *
         * Checks for an existing WeDevs_WeDevs_Dokan() instance
         * and if it doesn't find one, creates it.
         */
        public static function init()
        {
        }
        /**
         * Constructor for the Dokan_Pro class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Magic getter to bypass referencing objects
         *
         * @since 3.0.0
         *
         * @param $prop
         *
         * @return mixed
         */
        public function __get($prop)
        {
        }
        /**
         * Magic isset to check if it's exist
         *
         * @param $prop
         *
         * @return bool
         */
        public function __isset($prop)
        {
        }
        /**
         * Define all pro module constant
         *
         * @since  2.6
         *
         * @return void
         */
        public function define_constants()
        {
        }
        /**
         * Get Dokan db version key
         *
         * @since 2.8.0
         *
         * @return string
         */
        public function get_db_version_key()
        {
        }
        /**
         * Placeholder for activation function
         */
        public function activate()
        {
        }
        /**
         * Placeholder for deactivation function
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function deactivate()
        {
        }
        /**
         * This method will flush rewrite rules for dokan pro
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        /**
         * Add High Performance Order Storage Support
         *
         * @since 3.8.0
         *
         * @return void
         */
        public function declare_woocommerce_feature_compatibility()
        {
        }
        /**
         * Load all things
         *
         * @since 2.7.3
         *
         * @return void
         */
        public function init_plugin()
        {
        }
        /**
         * Check whether dokan lite is installed
         *
         * @since 3.3.1
         *
         * @return bool
         */
        public function is_dokan_lite_installed()
        {
        }
        /**
         * This method will return core dokan lite plugin file
         *
         * @since 3.3.1
         *
         * @return string
         */
        public function get_core_plugin_file()
        {
        }
        /**
         * Load all includes file for pro
         *
         * @since 2.4
         *
         * @return void
         */
        public function includes()
        {
        }
        /**
         * Load all necessary Actions hooks
         *
         * @since 2.4
         *
         * @return void
         */
        public function load_actions()
        {
        }
        /**
         * Load all Filters Hook
         *
         * @since 2.4
         *
         * @return void
         */
        public function load_filters()
        {
        }
        /**
         * Initialize plugin for localization
         *
         * @uses load_plugin_textdomain()
         */
        public function localization_setup()
        {
        }
        /**
         * Load priority classes
         *
         * @since 3.10.0
         *
         * @return void
         */
        public function init_priority_classes()
        {
        }
        /**
         * Instantiate all classes
         *
         * @since 2.4
         *
         * @return void
         */
        public function init_classes()
        {
        }
        /**
         * Initialize shipping class
         *
         * @since 3.3.7
         *
         * @retrun void
         */
        public function init_shipping_class()
        {
        }
        /**
         * Initialize the plugin updater
         *
         * @since 3.1.1
         *
         * @return void
         */
        public function init_updater()
        {
        }
        /**
         * Register all scripts
         *
         * @since 2.6
         *
         * @return void
         */
        public function register_scripts()
        {
        }
        /**
         * Register widgets
         *
         * @since 2.8
         *
         * @return array
         */
        public function register_widgets($widgets)
        {
        }
        /**
         * Enqueue scripts
         *
         * @since 2.6
         *
         * @return void
         * */
        public function enqueue_scripts()
        {
        }
        /**
         * Admin scripts
         *
         * @since 2.6
         *
         * @return void
         * */
        public function admin_enqueue_scripts($hook)
        {
        }
        /**
         * Initialize pro rest api class
         *
         * @param array $class_map
         *
         * @return array
         */
        public function rest_api_class_map($class_map)
        {
        }
        /**
         * Load Pro rewrite query vars
         *
         * @since 2.4
         *
         * @param array $query_vars
         *
         * @return array
         */
        public function load_query_var($query_vars)
        {
        }
        /**
         * @param string $file
         *
         * @return string
         */
        public function dokan_registration_template($file)
        {
        }
        /**
         * Load dokan pro templates
         *
         * @since 2.5.2
         *
         * @return string
         * */
        public function load_pro_templates($template_path, $template, $args)
        {
        }
        /**
         * Add Dokan Email classes in WC Email
         *
         * @since 2.6.6
         *
         * @param array $wc_emails
         *
         * @return array
         */
        public function load_dokan_emails($wc_emails)
        {
        }
        /**
         * Set template override directory for Dokan Emails
         *
         * @since 2.6.6
         *
         * @param array $dokan_emails
         *
         * @return array
         */
        public function set_email_template_directory($dokan_emails)
        {
        }
        /**
         * Register Dokan Email actions for WC
         *
         * @since 2.6.6
         *
         * @param array $actions
         *
         * @return array
         */
        public function register_email_actions($actions)
        {
        }
        /**
         * Get plan id
         *
         * @since 2.8.4
         *
         * @return string
         */
        public function get_plan()
        {
        }
        /**
         * List of Dokan Pro plans
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_dokan_pro_plans()
        {
        }
        /**
         * Get plugin path
         *
         * @since 2.5.2
         *
         * @return string
         * */
        public function plugin_path()
        {
        }
        /**
         * Required all class files inside Pro
         *
         * @since 2.4
         *
         * @param string $class_list
         *
         * @return void
         */
        public function dokan_pro_autoload($class_list)
        {
        }
    }
}
namespace WeDevs\DokanPro\Abstracts {
    class DokanProUpgrader extends \WeDevs\Dokan\Abstracts\DokanUpgrader
    {
        /**
         * Get db versioning key
         *
         * @since 3.0.0
         *
         * @return string
         */
        public static function get_db_version_key()
        {
        }
    }
}
namespace WeDevs\DokanPro\Admin {
    /**
     * Class Dokan_Pro_Admin_Settings
     *
     * Class for load Admin functionality for Pro Version
     *
     * @since 2.4
     *
     * @author weDevs <info@wedevs.com>
     */
    class Admin
    {
        /**
         * Constructor for the Dokan_Pro_Admin_Settings class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add additional fee setup wizard
         *
         * @since 3.2.1
         *
         * @return void
         */
        public function add_additional_fee_admin_setup_wizard()
        {
        }
        /**
         * Load Admin Pro settings
         *
         * @since 2.4
         *
         * @param  string $capability
         * @param  integer $menu_position
         *
         * @return void
         */
        public function load_admin_settings($capability, $menu_position)
        {
        }
        /**
         * Remove addon submenu from dokan admin menu
         *
         * @since 2.7.0
         *
         * @return void
         */
        public function remove_add_on_menu()
        {
        }
        /**
         * Add vendor store options in general settings
         *
         * @since 2.9.13
         *
         * @param array $settings_fields
         *
         * @return array
         */
        public function add_settings_general_vendor_store_options($settings_fields)
        {
        }
        /**
         * Add vendor capability settings in selling option settings
         *
         * @since 2.9.13
         *
         * @param array $settings_fields
         *
         * @return array
         */
        public function add_settings_selling_option_vendor_capability($settings_fields)
        {
        }
        /**
         * Backward compatible settings option map
         *
         * @since 2.9.13
         *
         * @param array $map
         *
         * @return array
         */
        public function admin_settings_rearrange_map($map)
        {
        }
        /**
         * Load all pro settings field
         *
         * @since 2.4
         *
         * @param  array $settings_fields
         *
         * @return array
         */
        public function load_settings_sections_fields($settings_fields, $dokan_settings)
        {
        }
        /**
         * Load Report Scripts
         *
         * @since 2.4
         *
         * @return void
         */
        public function common_scripts()
        {
        }
        /**
         * Add vue routes for admin pages
         *
         * @param  array $routes
         *
         * @return array
         */
        public function vue_admin_routes($routes)
        {
        }
        /**
         * Whats new page for dokan pro
         *
         * @return void
         */
        public function whats_new_page()
        {
        }
        /**
         * Create default pages
         *
         * @since 2.4
         *
         * @return void
         */
        public function create_default_pages()
        {
        }
        /**
         * Check a Donan shortcode  page exist or not
         *
         * @since 2.5
         *
         * @param type $slug
         *
         * @return boolean
         */
        public function dokan_page_exist($slug)
        {
        }
        /**
         * Render pro admin toolbar
         *
         * @since 1.0
         *
         * @param obj $wp_admin_bar
         *
         * @return void
         */
        public function render_pro_admin_toolbar($wp_admin_bar)
        {
        }
        /**
         * Export method to generate CSV for all logs tab
         *
         * @since 2.6.6
         *
         * @global type $wpdb
         */
        public function dokan_export_all_logs()
        {
        }
        /**
         * Handle seller bulk action
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function handle_seller_bulk_action()
        {
        }
        /**
         * Make combine commission fields mandatory
         *
         * @since  2.9.16
         *
         * @param  WC_Error
         *
         * @return void
         */
        public function make_combine_commission_fields_mandatory(&$errors, $update, &$user)
        {
        }
        /**
         * Checks if all dokan pages are created
         *
         * @since  3.2.2
         *
         * @return void
         *
         * TODO: We need to check if all pages are consist of the required shortcode
         */
        public function check_all_dokan_pages_exists()
        {
        }
        /**
         * Show withdraw threshold action in user profile
         *
         * @since 3.2.1
         *
         * @param object $user
         */
        public function add_admin_user_withdraw_threshold_options($user)
        {
        }
        /**
         * Save admin user profile withdraw threshold options
         *
         * @since  3.2.1
         *
         * @param  integer $user_id
         *
         * @return void
         */
        public function save_admin_user_withdraw_threshold_option($user_id)
        {
        }
        /**
         * Check post slug exits for dokan pages
         *
         * @since 1.0
         *
         * @param string $post_slug
         *
         * @return boolean
         */
        public function dokan_is_post_slug_exists($post_slug)
        {
        }
        /**
         * Update 'dokan_pages' and 'dokan_pages_created' options when pages are trashed
         *
         * @since 3.5.2
         *
         * @param $page_id
         *
         * @return void
         */
        public function dokan_page_trash_handler($page_id)
        {
        }
        /**
         * Handle dokan untrash page
         *
         * @since 3.5.2
         *
         * @param $page_id
         * @param $previous_status
         *
         * @return void
         */
        public function dokan_page_untrash_handler($page_id, $previous_status)
        {
        }
        /**
         * To Restore a dokan page in its previous status, say publish
         *
         * @since 3.5.2
         *
         * @param $page
         */
        public function dokan_draft_to_publish($page)
        {
        }
        /**
         * Handle deletion of a dokan page
         *
         * @since 3.5.2
         *
         * @param $page_id
         *
         * @return void
         */
        public function dokan_page_delete_handler($page_id)
        {
        }
    }
    /**
     * Ajax handling for Dokan in Admin area
     *
     * @since  2.2
     *
     * @author weDevs <info@wedevs.com>
     */
    class Ajax
    {
        /**
         * Load automatically all actions
         */
        public function __construct()
        {
        }
        /**
         * Regenerate order commission data.
         *
         * @since 3.9.3
         *
         * @return void
         */
        public function regenerate_order_commission()
        {
        }
        /**
         * Remove duplicate sub-orders if found
         *
         * @since 2.4.4
         *
         * @return void
         */
        public function check_duplicate_suborders()
        {
        }
        /**
         * Rewrite product variations author via ajax.
         *
         * @since 3.7.13
         *
         * @return void
         */
        public function rewrite_product_variations_author()
        {
        }
        /**
         * Get distance between two address to check if Distance Matrix API is working or not
         *
         * @since 3.7.21
         *
         * @return void
         */
        public function get_distance_btwn_address()
        {
        }
    }
}
namespace WeDevs\DokanPro\Admin\Notices {
    /**
     * Dokan lite missing notice handler class
     *
     * @since 3.4.3
     */
    class DokanLiteMissing
    {
        /**
         * Class constructor
         */
        public function __construct()
        {
        }
        /**
         * Dokan main plugin activation notice
         *
         * @since 2.5.2
         *
         * @return void
         * */
        public function activation_notice()
        {
        }
        /**
         * Install dokan lite
         *
         * @since 2.5.2
         *
         * @return void
         * */
        public function install_dokan_lite()
        {
        }
    }
    /**
     * Admin notices handler class
     *
     * @since 3.4.3
     */
    class Manager
    {
        /**
         * Class constructor
         */
        public function __construct()
        {
        }
        /**
         * Display dismiss Table Rate Shipping module notice
         *
         * @since 3.4.3
         *
         * @param array $notices
         *
         * @return array
         */
        public function dokan_pro_survey_notice($notices)
        {
        }
        /**
         * Dismiss Table Rate Shipping module ajax action.
         *
         * @since 3.4.3
         *
         * @return void
         */
        public function ajax_dismiss_dokan_pro_survey_notice()
        {
        }
    }
    /**
     * What's new notice handler class
     *
     * @since 3.4.3
     */
    class WhatsNew
    {
        /**
         * Class Constructor
         */
        public function __construct()
        {
        }
        /**
         * Show update notice
         *
         * @since 1.0
         *
         * @param array $notices
         *
         * @return array
         */
        public function show_whats_new_notice($notices)
        {
        }
        /**
         * Dismiss new notice
         *
         * @since 1.0
         *
         * @return void
         */
        public function dismiss_new_notice()
        {
        }
    }
}
namespace WeDevs\DokanPro\Admin {
    /**
     * Dokan_Pro_Admin_Pointers Class.
     */
    class Pointers
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Setup screen for pointer
         *
         * @param string $screen
         * @param object $dokan_pointers
         *
         * @return void
         */
        public function setup_pointers_for_screen($screen, $dokan_pointers)
        {
        }
        /**
         * Render pointers on Dashboard Page
         *
         * @since 3.0.0
         *
         * @return void
         */
        public function all_vendors_tutorial()
        {
        }
    }
    /**
    * Promotion class
    *
    * For displaying AI base add on admin panel
    */
    class Promotion extends \WeDevs\Dokan\Abstracts\DokanPromotion
    {
        /**
         * Time interval for displaying promo
         *
         * @var integer
         */
        public $time_interval = WEEK_IN_SECONDS;
        /**
         * Upgrade option key
         *
         * @var string
         */
        public $promo_option_key = '_dokan_pro_upgrade_promo';
        /**
         * Get prmotion data
         *
         * @since 1.0.0
         *
         * @return array
         */
        public function get_promotion_data()
        {
        }
    }
    /**
     * ReportLogExporter for Log Export
     *
     * @since 3.4.1
     *
     * @package dokan
     */
    class ReportLogExporter extends \WC_CSV_Batch_Exporter
    {
        /**
         * Type of export used in filter names.
         *
         * @since 3.4.1
         *
         * @var string
         */
        protected $export_type = 'order';
        /**
         * Filename to export to.
         *
         * @since 3.4.1
         *
         * @var string
         */
        protected $filename = 'dokan-order-export.csv';
        /**
         * Query parameters
         *
         * @since 3.4.1
         *
         * @var array
         */
        protected $items = [];
        /**
         * Query parameters
         *
         * @since 3.4.1
         *
         * @var array
         */
        protected $total_rows = 0;
        /**
         * Decimal places
         *
         * @since 3.4.1
         *
         * @var int
         */
        protected $decimal_places = 2;
        /**
         * Get column names
         *
         * @since 3.4.1
         *
         * @return array
         */
        public function get_column_names()
        {
        }
        /**
         * Set items for export
         *
         * @since 3.4.1
         *
         * @param array $params
         */
        public function set_items($items = [])
        {
        }
        /**
         * Set total rows
         *
         * @since 3.4.1
         *
         * @param array $params
         */
        public function set_total_rows($total_rows)
        {
        }
        /**
         * Return an array of columns to export.
         *
         * @since 3.4.1
         *
         * @return array
         */
        public function get_default_column_names()
        {
        }
        /**
         * Prepare formatted data to export
         *
         * @since 3.4.1
         */
        public function prepare_data_to_export()
        {
        }
        /**
         * Take an order and generate row data from it for export.
         *
         * @since 3.4.1
         *
         * @param $dokan_order
         *
         * @return array
         */
        protected function generate_row_data($order_item)
        {
        }
        /**
         * Get value from object by key
         *
         * @since 3.4.1
         *
         * @param $order_item
         * @param $key
         *
         * @return mixed
         */
        protected function get_column_value($order_item, $key)
        {
        }
        /**
         * Get total % complete.
         *
         * @since 3.4.1
         * @return int
         */
        public function get_percent_complete()
        {
        }
    }
}
namespace WeDevs\DokanPro\Admin\Reports {
    /**
     * Class Manager
     *
     * @since 3.4.1
     * @since 3.8.0 Moved this class from includes/Reports/Manager.php to includes/Admin/Reports/Manager.php
     */
    class Manager
    {
        /**
         * @since 3.4.1
         *
         * @param array $args
         *
         * @return array|object|string|null
         */
        public function get_logs($args = [])
        {
        }
        /**
         * This will check if given var is empty or not.
         *
         * @since 3.4.1
         *
         * @param mixed $var
         *
         * @return bool
         */
        protected function is_empty($var)
        {
        }
    }
}
namespace WeDevs\DokanPro\Admin {
    /**
     * Dokan tinyMce Shortcode Button class
     *
     * @since 2.4.12
     */
    class ShortcodesButton
    {
        /**
         * Constructor for shortcode class
         */
        public function __construct()
        {
        }
        /**
         * Generate shortcode array
         *
         * @since 2.4.12
         */
        public function localize_shortcodes()
        {
        }
        /**
         * * Singleton object
         *
         * @staticvar boolean $instance
         *
         * @return \self
         */
        public static function init()
        {
        }
        /**
         * Add button on Post Editor
         *
         * @since 2.4.12
         *
         * @param array $plugin_array
         *
         * @return array
         */
        public function enqueue_plugin_scripts($plugin_array)
        {
        }
        /**
         * Register tinyMce button
         *
         * @since 2.4.12
         *
         * @param array $buttons
         *
         * @return array
         */
        public function register_buttons_editor($buttons)
        {
        }
    }
}
namespace WeDevs\DokanPro {
    /**
     * Dokan Pro Ajax class
     *
     * @since   2.4
     *
     * @package dokan
     */
    class Ajax
    {
        /**
         * Loading automatically when class initiate
         *
         * @since 2.4
         *
         * @uses  action hook
         * @uses  filter hook
         */
        public function __construct()
        {
        }
        /**
         * Get shipping zone
         *
         * @since 2.8.0
         * @since 3.7.23 Shipping zone sorting support added.
         *
         * @return void
         */
        public function get_shipping_zone()
        {
        }
        /**
         * Get shipping methods
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function get_shipping_methods()
        {
        }
        /**
         * Update shipping methods settings
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function update_shipping_methods_settings()
        {
        }
        /**
         * Toggle shipping method
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function toggle_shipping_method()
        {
        }
        /**
         * Add new shipping method for a zone
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function add_shipping_method()
        {
        }
        /**
         * Delete shipping method
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function delete_shipping_method()
        {
        }
        /**
         * Save shipping Settings
         *
         * @since 2.9.2
         *
         * @return void
         */
        public function save_shipping_settings()
        {
        }
        /**
         * Get shipping settings
         *
         * @since 2.9.2
         *
         * @return void
         */
        public function get_shipping_settings()
        {
        }
        /**
         * Save zone settings
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function save_zone_settings()
        {
        }
        /**
         * Load variations
         *
         * @return void
         */
        public function load_variations()
        {
        }
        /**
         * Save variations via AJAX.
         */
        public static function save_variations()
        {
        }
        public static function bulk_edit_variations()
        {
        }
        /**
         * Delete variations via ajax function.
         */
        public static function remove_variations()
        {
        }
        /**
         * Enable/disable seller selling capability from admin seller listing page
         *
         * @return type
         */
        public function toggle_seller_status()
        {
        }
        /**
         * Load State via ajax for refund
         *
         * @since 2.4.11
         *
         * @return html Set of states
         */
        public function load_order_items()
        {
        }
        /**
         * Load State via ajax for shipping
         *
         * @since 2.4
         *
         * @return html Set of states
         */
        public function load_state_by_country()
        {
        }
        /**
         * get state by shipping country
         *
         * @since 2.4
         *
         * @return json
         */
        public function get_state_by_shipping_country()
        {
        }
        /**
         * calculate shipping rate in single product page
         *
         * @since 2.4
         *
         * @return json
         */
        public function get_calculated_shipping_cost()
        {
        }
        /**
         * Save attributes from edit product page
         *
         * @return void
         */
        public function save_attributes()
        {
        }
        /**
         * Delete variations via ajax function
         */
        public function remove_variation()
        {
        }
        public function add_attr_predefined_attribute()
        {
        }
        /**
         * Add new attribute from predifined attribute
         *
         * @since 2.5
         *
         * @return void
         */
        public function add_new_attribute()
        {
        }
        /**
         * Add Predefined Attribute
         *
         * @since 2.3
         *
         * @return json success|$content (array)
         */
        public function add_predefined_attribute()
        {
        }
        /**
         * Add variation via ajax function
         *
         * @since 2.3
         *
         * @return void
         */
        public static function add_variation()
        {
        }
        /**
         * Link all variations via ajax function
         *
         * @since 2.3
         *
         * @return void
         */
        public function link_all_variations()
        {
        }
        /**
         * Dokan Pre Define Attribute Render
         *
         * @since 2.0
         *
         * @return void
         */
        public function dokan_pre_define_attribute()
        {
        }
        /**
         * Save the action of user closed the progressbar
         *
         * @since 3.5.2
         *
         * @return void
         */
        public function user_closed_progressbar()
        {
        }
    }
}
namespace WeDevs\DokanPro\Announcement {
    /**
     *  Dokan Announcement class for Admin
     *
     *  Announcement for seller
     *
     * @since  2.1
     *
     * @author weDevs <info@wedevs.com>
     *
     * @property Manager           $manager
     * @property BackgroundProcess $processor
     */
    class Announcement
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         *  Automatically load all actions
         */
        public function __construct()
        {
        }
        public function set_controllers()
        {
        }
        /**
         * Delete individual seller announcement cache.
         *
         * @since 3.4.2
         *
         * @param array|int $seller_ids
         * @param int       $post_id
         *
         * @return void
         */
        public function delete_announcement_cache($seller_ids, $post_id = null)
        {
        }
    }
    /**
     * Background Process Class
     */
    class BackgroundProcess extends \WeDevs\Dokan\Abstracts\DokanBackgroundProcesses
    {
        /**
         * @var string
         */
        protected $action = 'dokan_announcement_emails';
        /**
         * Task
         *
         * Override this method to perform any actions required on each
         * queue item. Return the modified item for further processing
         * in the next pass through. Or, return false to remove the
         * item from the queue.
         *
         * @param mixed $item Queue item to iterate over
         *
         * @return mixed
         */
        public function task($payload)
        {
        }
        /**
         * Complete
         *
         * Override if applicable, but ensure that the below actions are
         * performed, or, call parent::complete().
         */
        public function complete()
        {
        }
    }
}
namespace WeDevs\DokanPro\Announcement\Frontend {
    /**
     * Dokan Announcement class for Vendor
     *
     * @since   3.9.4
     *
     * @package DokanPro\Announcement\Frontend
     */
    class Template
    {
        /**
         * Constructor method
         *
         * @since 3.9.4
         */
        public function __construct()
        {
        }
        /**
         * Render announcement template
         *
         * @since  2.2
         * @since  3.9.4 moved this method from Announcement class
         *
         * @param array $query_vars
         *
         * @return void
         */
        public function load_announcement_template($query_vars)
        {
        }
        /**
         * Render Announcement listing template header
         *
         * @since 2.2
         *
         * @return void
         */
        public function load_header_template()
        {
        }
        /**
         * Load announcement Content
         *
         * @since  2.4
         * @since  3.9.4 moved this method from Announcement class
         *
         * @return void
         */
        public function load_announcement_content()
        {
        }
        /**
         * Load Single announcement content
         *
         * @since  2.4
         * @since  3.9.4 moved this method from Announcement class
         *
         * @return void
         */
        public function load_single_announcement_content()
        {
        }
        /**
         * Add announcement page in seller dashboard
         *
         * @since  3.9.4 moved this method from Announcement class
         *
         * @param array $urls
         *
         * @return array $urls
         */
        public function add_announcement_page($urls)
        {
        }
        /**
         * Set announcement menu as active.
         *
         * @since  3.7.18
         * @since  3.9.4 moved this method from Announcement class
         *
         * @param string $active_menu Currently active menu slug.
         * @param string $request_uri Request URI.
         * @param array  $query_vars  Currently active query vars.
         *
         * @return string
         */
        public function active_announcement_nav_menu(string $active_menu, $request_uri, array $query_vars): string
        {
        }
        /**
         * Remove Announcement ajax
         *
         * @since  2.4
         * @since  3.9.4 moved this method from Announcement class
         *
         * @return void
         */
        public function remove_announcement()
        {
        }
    }
}
namespace WeDevs\DokanPro\Announcement {
    /**
     * Announcement Mails
     *
     * @since 3.9.4
     */
    class Mails
    {
        /**
         * Class constructor
         *
         * @since 2.8.2
         * @since 3.7.25 moved this method from includes/functions.php to this class
         * @since 3.9.4 moved this method from Announcement class to this class
         */
        public function __construct()
        {
        }
        /**
         * Send announcement email
         *
         * @since 2.8.2
         * @since 3.7.25 moved this method from includes/functions.php to this class
         * @since 3.9.4 moved this method from Announcement class to this class
         *
         * @param $announcement_id
         *
         * @return void
         */
        public function send_announcement_email($announcement_id)
        {
        }
        /**
         * Send email for a scheduled announcement
         *
         * @since 2.9.13
         * @since 3.7.25 moved this method from includes/functions.php to this class
         * @since 3.9.4 moved this method from Announcement class to this class
         *
         * @param WP_Post $post
         *
         * @return void
         */
        public function send_scheduled_announcement_email($post)
        {
        }
        /**
         * Trigger mail
         *
         * @since 2.8.0
         * @since 3.9.4 rewritten this method
         *
         * @return void
         */
        protected function trigger_mail($post_id)
        {
        }
    }
    class Manager
    {
        /**
         * Manager constructor.
         *
         * @since 3.9.4
         */
        public function __construct()
        {
        }
        /**
         * Get announcement
         *
         * @since 3.9.4
         *
         * @param array $args
         *
         * @return int|Single[]|int[]|WP_Error
         */
        public function all($args = [])
        {
        }
        /**
         * Get a single announcement
         *
         * @since 3.9.4
         *
         * @param int $id
         *
         * @return Single|WP_Error
         */
        public function get_single_announcement($id)
        {
        }
        /**
         * Get a single announcement
         *
         * @since 3.9.4
         *
         * @param int $id
         *
         * @return string[]|WP_Error
         */
        public function get_pagination_data($args = [])
        {
        }
        /**
         * Create announcement
         *
         * @since 3.9.4
         *
         * @param array $args
         * @param bool  $update
         *
         * @return int|WP_Error
         */
        public function create_announcement($args = [], $update = false)
        {
        }
        /**
         * Process seller announcement data
         *
         * @since  2.1
         * @since 3.9.4 rewritten some logic
         *
         * @param array   $announcement_seller
         * @param integer $announcment_id
         *
         * @return void
         */
        protected function process_seller_announcement_data($announcement_seller, $announcment_id)
        {
        }
        /**
         * Get assign seller
         *
         * @since  2.1
         *
         * @param int  $announcment_id
         * @param bool $exclude_trash
         *
         * @return int[]|stdClass[]
         */
        public function get_assigned_seller_from_db($announcment_id, $exclude_trash = false)
        {
        }
        /**
         * Insert assigned seller
         *
         * @since 2.1
         *
         * @param int[] $seller_array
         * @param int   $announcment_id
         *
         * @return void
         */
        protected function insert_assigned_seller($seller_array, $announcment_id)
        {
        }
        /**
         * Delete assign seller
         *
         * @since  2.1
         *
         * @param int[] $seller_array
         * @param int   $announcment_id
         *
         * @return void
         */
        protected function delete_assigned_seller($seller_array, $announcment_id)
        {
        }
        /**
         * Delete a single announcement
         *
         * @since  3.9.4
         *
         * @param int  $id
         * @param bool $force
         *
         * @return WP_Post|WP_Error Post data on success, WP_Error on failure.
         */
        public function delete_announcement($id, $force = false)
        {
        }
        /**
         * Delete announcement relational table data
         *
         * @since 2.8.2
         *
         * @return void
         */
        protected function delete_announcement_data($post_id)
        {
        }
        /**
         * Trash a single announcement
         *
         * @since  3.9.4
         *
         * @param int $announcement_id
         *
         * @return WP_Post|WP_Error Post data on success, WP_Error on failure.
         */
        public function untrash_announcement($announcement_id)
        {
        }
        /**
         * Get a single notice
         *
         * @since 3.9.4
         *
         * @param int $notice_id
         *
         * @return Single|WP_Error
         */
        public function get_notice($notice_id, $vendor_id = null)
        {
        }
        /**
         * Update notice read status
         *
         * @since 3.9.4
         *
         * @param int    $notice_id
         * @param string $read_status read,unread,trash
         * @param int    $vendor_id   vendor id is required to ensure that the request is coming from the same vendor
         *
         * @return bool|WP_Error true on success, WP_Error on failure.
         */
        public function update_read_status($notice_id, $read_status, $vendor_id = null)
        {
        }
        /**
         * Delete a single notice
         *
         * @param int $notice_id
         * @param int|null $vendor_id
         *
         * @return bool|WP_Error true on success, WP_Error on failure.
         */
        public function delete_notice($notice_id, $vendor_id = null)
        {
        }
    }
    /**
     * Announcement Post Type
     *
     * @since 3.9.4
     */
    class PostType
    {
        /**
         * Class constructor
         *
         * @since 3.9.4
         */
        public function __construct()
        {
        }
        /**
         * Register announcement post type
         *
         * @since 2.1
         * @since 3.9.4 moved this method from Announcement class to PostType class
         *
         * @return void
         */
        public function register_post_type()
        {
        }
    }
    /**
     * Class Single
     *
     * @since   3.9.4
     *
     * @package WeDevs\DokanPro\Announcement
     */
    class Single
    {
        /**
         * Single constructor.
         *
         * @param array $args
         */
        public function __construct($args = [])
        {
        }
        /**
         * Get announcement data
         *
         * @since 3.9.4
         *
         * @return array
         */
        public function get_data()
        {
        }
        /**
         * Get announcement id
         *
         * @since 3.9.4
         *
         * @return int
         */
        public function get_id(): int
        {
        }
        /**
         * Get vendor notice id
         *
         * @since 3.9.4
         *
         * @return int
         */
        public function get_notice_id(): int
        {
        }
        /**
         * Get vendor id
         *
         * @since 3.9.4
         *
         * @return int
         */
        public function get_vendor_id(): int
        {
        }
        /**
         * Get announcement title
         *
         * @since 3.9.4
         *
         * @return string
         */
        public function get_title(): string
        {
        }
        /**
         * Get announcement content
         *
         * @since 3.9.4
         *
         * @return string
         */
        public function get_content(): string
        {
        }
        /**
         * Get announcement status
         *
         * @since 3.9.4
         *
         * @return string
         */
        public function get_status(): string
        {
        }
        /**
         * Get announcement read status
         *
         * @since 3.9.4
         *
         * @return string
         */
        public function get_read_status(): string
        {
        }
        /**
         * Get announcement date
         *
         * @since 3.9.4
         *
         * @return string
         */
        public function get_date(): string
        {
        }
        /**
         * Get announcement date in GMT
         *
         * @since 3.9.4
         *
         * @return string
         */
        public function get_date_gmt(): string
        {
        }
        /**
         * Get human-readable announcement date
         *
         * @since 3.9.4
         *
         * @return string
         */
        public function get_human_readable_date(): string
        {
        }
        /**
         * Set announcement id
         *
         * @since 3.9.4
         *
         * @param int $id
         *
         * @return $this
         */
        public function set_id($id): \WeDevs\DokanPro\Announcement\Single
        {
        }
        /**
         * Set vendor single notice id
         *
         * @since 3.9.4
         *
         * @param int $id
         *
         * @return $this
         */
        public function set_notice_id($id): \WeDevs\DokanPro\Announcement\Single
        {
        }
        /**
         * Set vendor id
         *
         * @since 3.9.4
         *
         * @param int $id
         *
         * @return $this
         */
        public function set_vendor_id($id): \WeDevs\DokanPro\Announcement\Single
        {
        }
        /**
         * Set announcement title
         *
         * @since 3.9.4
         *
         * @param string $title
         *
         * @return $this
         */
        public function set_title($title): \WeDevs\DokanPro\Announcement\Single
        {
        }
        /**
         * Set announcement content
         *
         * @since 3.9.4
         *
         * @param string $content
         *
         * @return $this
         */
        public function set_content($content): \WeDevs\DokanPro\Announcement\Single
        {
        }
        /**
         * Set announcement status
         *
         * @since 3.9.4
         *
         * @param string $status
         *
         * @return $this
         */
        public function set_status($status): \WeDevs\DokanPro\Announcement\Single
        {
        }
        /**
         * Set announcement read status
         *
         * @since 3.9.4
         *
         * @param string $read_status
         *
         * @return $this
         */
        public function set_read_status($read_status): \WeDevs\DokanPro\Announcement\Single
        {
        }
        /**
         * Set human-readable announcement date
         *
         * @since 3.9.4
         *
         * @return $this
         */
        public function set_human_readable_date(): \WeDevs\DokanPro\Announcement\Single
        {
        }
        /**
         * Check if the current item is a notice
         *
         * @since 3.9.4
         *
         * @return bool
         */
        public function is_notice(): bool
        {
        }
        /**
         * Check if the current item is an announcement
         *
         * @since 3.9.4
         *
         * @return bool
         */
        public function is_announcement(): bool
        {
        }
    }
}
namespace WeDevs\DokanPro {
    /**
     * Scripts and Styles Class
     */
    class Assets
    {
        public function __construct()
        {
        }
        /**
         * Enqueue admin scripts
         *
         * @return void
         */
        public function enqueue_admin_scripts()
        {
        }
        /**
         * This method will enqueue dokan pro localize data
         *
         * @since 3.1.1
         * @param array $data
         * @return array
         */
        public function add_localized_data($data)
        {
        }
        /**
         * Enqueue forntend scripts
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function enqueue_frontend_scripts()
        {
        }
        /**
         * Register our app scripts and styles
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Register styles
         *
         * @param  array $styles
         *
         * @return void
         */
        public function register_styles($styles)
        {
        }
        /**
         * Get all registered scripts
         *
         * @return array
         */
        public function get_scripts()
        {
        }
        /**
         * Get registered styles
         *
         * @return array
         */
        public function get_styles()
        {
        }
        /**
         * Register i18n Scripts
         *
         * @since DOKAN_PRO
         *
         * @param array $default_script
         *
         * @return array
         */
        public function add_i18_localized_data($default_script)
        {
        }
    }
}
namespace WeDevs\DokanPro\BackgroundProcess {
    /**
     * Background Process Manager Class.
     *
     * @since 3.9.3
     *
     * @property SyncVendorZoneData        $sync_vendor_zone_data       Instance of WeDevs\DokanPro\BackgroundProcess\SyncVendorZoneData class
     * @property RegenerateOrderCommission $regenerate_order_commission Instance of WeDevs\DokanPro\BackgroundProcess\RegenerateOrderCommission class
     */
    class Manager
    {
        use \Wedevs\Dokan\Traits\ChainableContainer;
        /**
         * Class constructor.
         *
         * @since 3.9.3
         */
        public function __construct()
        {
        }
        /**
         * Initialize classes to chainable container.
         *
         * @since 3.9.3
         *
         * @return void
         */
        public function init_classes()
        {
        }
        /**
         * Initialize hooks.
         *
         * @since 3.9.3
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Show variable products author updated notice.
         *
         * @since 3.9.3
         *
         * @param array $notices
         *
         * @return array $notices
         */
        public function show_regenerate_order_commission_updated_notice($notices)
        {
        }
    }
    /**
     * RewriteVariableProductsAuthor Class.
     *
     * @since 3.9.3
     */
    class RegenerateOrderCommission extends \WC_Background_Process
    {
        /**
         * Initiate a new background process.
         */
        public function __construct()
        {
        }
        /**
         * Dispatch updater.
         *
         * Updater will still run via cron job if this fails for any reason.
         *
         * @since 3.9.3
         *
         * @return void
         */
        public function dispatch()
        {
        }
        /**
         * Perform updates.
         *
         * @since 3.9.3
         *
         * @param array $args
         *
         * @return bool|array
         */
        public function task($args)
        {
        }
        /**
         * Complete the process.
         *
         * @since 3.9.3
         *
         * @return void
         */
        protected function complete()
        {
        }
    }
    /**
     * Class SyncVendorZoneData
     * @package WeDevs\DokanPro\BackgroundProcesses
     * @since 3.2.2
     */
    class SyncVendorZoneData extends \WC_Background_Process
    {
        /**
         * Initiate new background process.
         */
        public function __construct()
        {
        }
        /**
         * Dispatch updater.
         *
         * Updater will still run via cron job if this fails for any reason.
         */
        public function dispatch()
        {
        }
        /**
         * Handle cron healthcheck
         *
         * Restart the background process if not already running
         * and data exists in the queue.
         */
        public function handle_cron_healthcheck()
        {
        }
        /**
         * Schedule fallback event.
         */
        protected function schedule_event()
        {
        }
        /**
         * Task
         *
         * Override this method to perform any actions required on each
         * queue item. Return the modified item for further processing
         * in the next pass through. Or, return false to remove the
         * item from the queue.
         *
         * @param object $vendor Update callback function.
         * @return string|bool
         */
        protected function task($args)
        {
        }
        /**
         * Complete
         *
         * Override if applicable, but ensure that the below actions are
         * performed, or, call parent::complete().
         */
        protected function complete()
        {
        }
    }
}
namespace WeDevs\DokanPro {
    class BlockEditorBlockTypes
    {
        /**
         * Class constructor
         *
         * @since 2.9.16
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add Dokan Block category
         *
         * @since 2.9.16
         *
         * @param array $block_categories
         * @param mixed $block_editor_context
         *
         * @return array
         */
        public function add_block_category($block_categories, $block_editor_context)
        {
        }
        /**
         * Register block scripts
         *
         * @since 2.9.16
         *
         * @return void
         */
        public function register_scripts()
        {
        }
        /**
         * Register block types
         *
         * @since 2.9.16
         *
         * @return void
         */
        public function register_block_types()
        {
        }
        /**
         * Render shortcode block content
         *
         * @since 2.9.16
         *
         * @param array  $attributes
         * @param string $content
         *
         * @return void
         */
        public function render_shortcode($attributes, $content)
        {
        }
    }
}
namespace WeDevs\DokanPro\Blocks {
    /**
     * Dokan Block manager class for PRO.
     *
     * @since 3.7.13
     */
    class Manager
    {
        /**
         * Block class mapping.
         *
         * @since 3.7.13
         *
         * @var array
         */
        protected $block_classes;
        /**
         * Constructor class.
         *
         * @since 3.7.13
         */
        public function __construct()
        {
        }
        /**
         * Init block classes.
         *
         * @since 3.7.13
         *
         * @return void
         */
        public function init_block_classes()
        {
        }
        /**
         * Include block classes.
         *
         * @since 3.7.13
         *
         * @return void
         */
        public function include_block_classes()
        {
        }
    }
    class Product
    {
        /**
         * Constructor class.
         *
         * @since 3.7.13
         */
        public function __construct()
        {
        }
        /**
         * Set product block data for Dokan-pro.
         *
         * @since 3.7.13
         *
         * @param array      $block
         * @param WC_Product $product
         * @param string     $context
         *
         * @return array
         */
        public function set_block_data($block, $product, $context = 'view')
        {
        }
    }
    /**
     * Dokan Product Attribute Block data class.
     *
     * @author weDevs
     */
    class ProductAttribute
    {
        /**
         * Block section name.
         *
         * @since 3.7.13
         *
         * @var string
         */
        public $section;
        /**
         * Constructor class.
         *
         * @since 3.7.13
         */
        public function __construct()
        {
        }
        /**
         * Get product block configurations.
         *
         * @since 3.7.13
         *
         * @param array $configuration
         *
         * @return array
         */
        public function get_block_configurations($configuration = [])
        {
        }
        /**
         * Get product-shipping data.
         *
         * @since 3.7.13
         *
         * @param array      $block
         * @param WC_Product $product
         * @param string     $context
         *
         * @return array
         */
        public function get_block_data(array $block, $product, string $context)
        {
        }
    }
    /**
     * Dokan Product Shipping Block data class.
     *
     * @author weDevs
     */
    class ProductShipping
    {
        /**
         * Block section name.
         *
         * @since 3.7.13
         *
         * @var string
         */
        public $section;
        /**
         * Constructor class.
         *
         * @since 3.7.13
         */
        public function __construct()
        {
        }
        /**
         * Get product block configurations.
         *
         * @since 3.7.13
         *
         * @param $configuration array
         *
         * @return array
         */
        public function get_block_configurations($configuration = [])
        {
        }
        /**
         * Get product-shipping data.
         *
         * @since 3.7.13
         *
         * @param array      $block
         * @param WC_Product $product
         * @param string     $context
         *
         * @return array
         */
        public function get_block_data(array $block, $product, string $context)
        {
        }
        /**
         * Returns variable block data.
         *
         * @since 3.11.3
         *
         * @param array  $block
         * @param        $product
         * @param string $context
         *
         * @return array
         */
        public function get_variable_block_data(array $block, $product, string $context): array
        {
        }
        /**
         * Save product-shipping data.
         *
         * @since 3.7.13
         *
         * @param WC_Product      $product  Inserted object.
         * @param WP_REST_Request $request  Request object.
         *
         * @return void
         */
        public function set_block_data($product, $request)
        {
        }
    }
}
namespace WeDevs\DokanPro\Brands {
    class AdminSettings
    {
        /**
         * Add admin settings for Brands feature
         *
         * @since 2.9.7
         *
         * @param array           $settings_fields
         * @param \Dokan_Settings $dokan_settings
         *
         * @return array
         */
        public static function add_admin_settings_fields($settings_fields, $dokan_settings)
        {
        }
    }
    class FormFields
    {
        /**
         * Print form fields
         *
         * @since 2.9.7
         *
         * @param int    $post_id
         * @param string $selected
         * @param bool   $show_label
         *
         * @return void
         */
        protected static function print_form_field($post_id = 0, $selected = '', $show_label = false)
        {
        }
        /**
         * New product form field
         *
         * @since 2.9.7
         *
         * @return void
         */
        public static function new_product_form_field()
        {
        }
        /**
         * Add brands dropdown
         *
         * @since 2.9.7
         *
         * @param \WP_Post $post
         * @param int      $post_id
         *
         * @return void
         */
        public static function product_edit_form_field($post, $post_id)
        {
        }
        /**
         * Save form data
         *
         * @since 2.9.7
         *
         * @param int   $product_id
         * @param array $data
         *
         * @return void
         */
        public static function set_product_brands($product_id, $data)
        {
        }
    }
    class Hooks
    {
        public function __construct()
        {
        }
        /**
         * Load brand after Dokan Pro init classes
         *
         * @since 2.9.7
         *
         * @return void
         */
        public function init()
        {
        }
        /**
         * Load functionalities
         *
         * @since 3.0.2
         *
         * @return void
         */
        public function load_dokan_brands()
        {
        }
        /**
         * Set brand for duplicate products
         *
         * @param Object $duplicate
         * @param Object $product
         */
        public function set_duplicate_product_brands($clone_product, $product)
        {
        }
        /**
         * Set brand for Single Product MultiVendor duplicate products
         *
         * @param Object $duplicate
         * @param Object $product
         */
        public function set_spmv_duplicate_product_brands($clone_product_id, $product_id)
        {
        }
        /**
         * Add brand input in auction product edit form.
         *
         * @param $post_id
         *
         * @return void
         */
        public function add_brand_option_in_auction_edit_form($post_id)
        {
        }
    }
    class Manager
    {
        /**
         * Is YITH plugin active or not
         *
         * @since 2.9.7
         *
         * @var bool
         */
        public $is_active = false;
        /**
         * Is YITH premium plugin active or not
         *
         * @since 2.9.7
         *
         * @var bool
         */
        public $is_premium_active = false;
        /**
         * Feature related admin settings
         *
         * @since 2.9.7
         *
         * @var array
         */
        public $settings = [];
        /**
         * Set is_active property
         *
         * @since 3.0.0
         *
         * @param bool $is_active
         *
         * @return void
         */
        public function set_is_active($is_active)
        {
        }
        /**
         * Set is_premium_active property
         *
         * @since 3.0.0
         *
         * @param bool $is_premium_active
         *
         * @return void
         */
        public function set_is_premium_active($is_premium_active)
        {
        }
        /**
         * Set settings property
         *
         * @since 3.0.0
         *
         * @param array $settings
         *
         * @return void
         */
        public function set_settings($settings)
        {
        }
        /**
         * Get Brand taxonomy
         *
         * When premium addon is active, admin can switch
         * taxonomy from admin panel settings
         *
         * @since 2.9.7
         *
         * @return string
         */
        public function get_taxonomy()
        {
        }
    }
}
namespace WeDevs\DokanPro {
    /**
     * ProductBulkEdit class
     *
     * @since   3.7.4
     *
     * @package WeDevs\DokanPro\CatalogMode\Dashboard
     */
    class CatalogModeProductInlineEdit
    {
        /**
         * Class Constructor
         *
         * @since 3.7.4
         */
        public function __construct()
        {
        }
        /**
         * Add bulk edit status.
         *
         * @since 3.7.4
         *
         * @param int $product_id previous status.
         *
         * @return void
         */
        public function inline_product_catalog_fields($product_id)
        {
        }
        /**
         * This method will enable/disable catalog mode feature called from product inline edit.
         *
         * @since 3.7.4
         *
         * @return void
         */
        public function save_inline_edit_catalog_mode_data($product_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Coupons {
    /**
    * Admin Coupons Class
    *
    * Loaded all hooks releated with coupon
    *
    * @since 3.4.0
    */
    class AdminCoupons
    {
        /**
         * Load autometically when class initiate
         *
         * @since 3.4.0
         */
        public function __construct()
        {
        }
        /**
         * Add vendor coupon tab on admin coupon area
         *
         * @param array $coupon_tabs
         *
         * @since 3.4.0
         *
         * @return array $coupon_tabs
         */
        public function dokan_admin_coupon_data_tabs($coupon_tabs)
        {
        }
        /**
         * Add vendor coupon section on admin coupon area
         *
         * @param int $coupon_id
         * @param obj $coupon
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function dokan_admin_coupon_data_panels($coupon_id, $coupon)
        {
        }
        /**
         * Search for products and echo json.
         *
         * @since 3.4.0
         *
         * @param string $term (default: '') Term to search for.
         * @param bool   $include_variations in search or not.
         */
        public function dokan_json_search_products_and_variations_for_coupon($term = '', $include_variations = true)
        {
        }
        /**
         * Search product data for a term and return ids.
         *
         * @since 3.4.0
         *
         * @param  string     $term Search term.
         * @param  string     $type Type of product.
         * @param  bool       $include_variations Include variations in search or not.
         * @param  bool       $all_statuses Should we search all statuses or limit to published.
         * @param  null|int   $limit Limit returned results.
         * @param  null|array $include Keep specific results.
         * @param  null|array $exclude Discard specific results.
         * @param  null|array $include_vendor_ids
         * @param  null|array $exclude_vendor_ids
         * @param  string     $enable_all_vendor
         * @return array of ids
         */
        public function search_products($term, $type = '', $include_variations = false, $all_statuses = false, $limit = null, $include = null, $exclude = null, $include_vendor_ids = null, $exclude_vendor_ids = null, $enable_all_vendor = null)
        {
        }
        /**
         * Check if the terms are suitable for searching.
         *
         * Uses an array of stopwords (terms) that are excluded from the separate
         * term matching when searching for posts. The list of English stopwords is
         * the approximate search engines list, and is translatable.
         *
         * @since 3.4.0
         *
         * @since 3.4.0
         * @param array $terms Terms to check.
         * @return array Terms that are not stopwords.
         */
        public function get_valid_search_terms($terms)
        {
        }
        /**
         * Retrieve stopwords used when parsing search terms.
         *
         * @since 3.4.0
         *
         * @return array Stopwords.
         */
        public function get_search_stopwords()
        {
        }
        /**
         * Search for products and echo json.
         *
         * @since 3.4.0
         *
         * @param string $term (default: '') Term to search for.
         * @param bool   $include_variations in search or not.
         */
        public function dokan_admin_coupons_search_vendors($term = '')
        {
        }
        /**
         * Coupon is valid for vendor current product when coupon is applied,
         *  Works for both vendor issued coupon and admin issued coupon.
         *
         * @since 3.4.0
         *
         * @param boolean $valid
         * @param WC_Product $product
         * @param WC_Coupon $coupon
         *
         * @return boolean
         */
        public function coupon_is_valid_for_product(bool $valid, \WC_Product $product, \WC_Coupon $coupon): bool
        {
        }
        /**
         * Save vendor coupon data from admin area
         *
         * @since 3.4.0
         *
         * @param int       $post_id Post ID
         * @param WC_Coupon $coupon  Coupon Object
         *
         * @return void
         */
        public function admin_coupon_options_save($post_id, $coupon)
        {
        }
        /**
         * For fixed cart admin created coupon for specific vendor is getting applied for admin products. While validating the coupon in woocommerce in class-wc-discounts.php#L838 and in class-wc-coupon.php#L903
         * the valid value is by default false and in `woocommerce_coupon_is_valid_for_product` filter_hook in dokan pro it is getting false and ignoring and
         * `fixed_cart` is not in product coupon types the rest so validation in class-wc-coupon.php#L903 are not working the the expected, the solution works properly if all validation runs properly
         * after class-wc-coupon.php#L903 and at class-wc-coupon.php#L940 the `woocommerce_coupon_is_valid_for_product` hook will get called and dokan pro will validate the coupon properly.
         * so we are adding the `fixed_cart` to product coupon types, and all the validation runs properly in class-wc-coupon.php#L903.
         *
         * @see https://github.com/woocommerce/woocommerce/blob/91272dde6f465acd159e9050202b627f81c8dd94/plugins/woocommerce/includes/class-wc-discounts.php#L838
         * @see https://github.com/woocommerce/woocommerce/blob/91272dde6f465acd159e9050202b627f81c8dd94/plugins/woocommerce/includes/class-wc-coupon.php#L903
         * @see https://github.com/woocommerce/woocommerce/blob/91272dde6f465acd159e9050202b627f81c8dd94/plugins/woocommerce/includes/class-wc-coupon.php#L901-L941
         *
         * @see https://github.com/getdokan/dokan-pro/issues/3094
         *
         * @param $types
         * @return array
         */
        public function add_fixed_cart_to_product_coupon_types($types)
        {
        }
        /**
         * Save REST Coupon Options.
         *
         * @since 3.12.5
         *
         * @param WC_Coupon       $coupon  Coupon Object
         * @param WP_REST_Request $request WP REST Request
         *
         * @return WC_Coupon $coupon
         */
        public function save_rest_coupon_options(\WC_Coupon $coupon, \WP_REST_Request $request): \WC_Coupon
        {
        }
        /**
         * Update Coupon Options Meta Data.
         *
         * @since 3.12.5
         *
         * @param WC_Coupon $coupon         Coupon Object
         * @param array     $coupon_options Coupon Options
         *
         * @return void
         */
        protected function update_coupon_options_meta_data(\WC_Coupon $coupon, array $coupon_options = [])
        {
        }
    }
    /**
    * Coupon Cache Class.
    *
    * Manage all of the caches related to coupons.
    *
    * @since 3.4.2
    *
    * @see \WeDevs\Dokan\Cache
    */
    class CouponCache
    {
        /**
         * Manage Coupon Caches.
         *
         * We Manage the following coupon groups -
         * 1. seller_coupons_[seller_id] => Seller Wise Coupons
         *
         * @since 3.4.2
         */
        public function __construct()
        {
        }
        /**
         * Invalidate seller coupons cache.
         *
         * @since 3.4.2
         *
         * @param int $seller_id
         *
         * @return void
         */
        public function invalidate_seller_coupons($seller_id)
        {
        }
        /**
         * Reset coupon after create, edit, delete, trash.
         *
         * @since 3.4.2
         *
         * @param int $coupon_id
         *
         * @return void
         */
        public function reset_coupons_cache_after_modification($coupon_id)
        {
        }
        /**
         * Reset coupon after restore.
         *
         * @since 3.4.2
         *
         * @param int    $post_id         Post ID.
         * @param string $previous_status The status of the post at the point where it was trashed.
         *
         * @return void
         */
        public function after_restore_coupon($post_id, $status)
        {
        }
        /**
         * Reset coupon caches before deleting a coupon.
         *
         * @since 3.4.2
         *
         * @param int      $post_id
         * @param \WP_Post $post
         *
         * @return void
         */
        public function before_delete_coupon($post_id, $post)
        {
        }
    }
    /**
    * Hooks Class
    *
    * Loaded all hooks releated with coupon
    *
    * @since 3.0.0
    */
    class Hooks
    {
        /**
         * Validated coupon form error
         *
         * @var WP_Error Object
         */
        public static $validated;
        /**
         * Load autometically when class initiate
         *
         * @since 3.0.0
         */
        public function __construct()
        {
        }
        /**
         * Initialization of Classes related to coupons
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function init_classes()
        {
        }
        /*
         * Check order have admin coupon
         *
         * @param bool       $valid
         * @param \WC_Coupon $coupon
         * @param array      $seller_ids
         * @param array      $product_ids
         *
         * @return boolean
         */
        public function is_order_have_admin_coupon($valid, $coupon, $seller_ids, $product_ids)
        {
        }
        /**
         * Ensure vendor have coupon created by admin
         *
         * @param bool       $valid
         * @param \WC_Coupon $coupon
         * @param array      $available_vendors
         * @param array      $available_products
         *
         * @return boolean
         */
        public function ensure_admin_have_create_coupon($valid, $coupon, $available_vendors, $available_products)
        {
        }
        /**
         * Associate new product with vendor coupon
         *
         * @param int $product_id
         * @param array $product
         *
         * @since 3.3.4
         *
         * @return void
         */
        public function associate_new_product_with_vendor_coupon($product_id, $product)
        {
        }
        /**
         * Get coupons apply for new products
         *
         * @since 3.3.4
         *
         * @return array $coupons
         */
        public function get_apply_coupons_for_new_products()
        {
        }
        /**
         * Add Coupon menu
         *
         * @param array $urls
         *
         * @since 2.4
         *
         * @return array $urls
         */
        public function add_coupon_menu($urls)
        {
        }
        /**
         * Ensure coupon amount is valid or throw exception.
         *
         * @since 2.9.10
         *
         * @param bool $invalid
         * @param WC_Coupon $coupon
         * @param float $total
         *
         * @return bool
         */
        public function validate_coupon_minimum_amount($valid, $coupon)
        {
        }
        /**
         * Render Coupon Header template
         *
         * @since 2.4
         *
         * @return void
         */
        public function render_coupon_header_template()
        {
        }
        /**
         * Render Coupon Content
         *
         * @since 2.4
         *
         * @return void
         */
        public function render_coupon_content_template()
        {
        }
        /**
         * Load Coupon template
         *
         * @since 2.4
         *
         * @param  array $query_vars
         *
         * @return void [require once template]
         */
        public function load_coupon_template($query_vars)
        {
        }
        /**
         * Render listing of coupon
         *
         * @since 2.4
         *
         * @return void
         */
        public function list_user_coupons()
        {
        }
        /**
         * Render coupon Message
         *
         * @return void
         */
        public function get_messages()
        {
        }
        /**
         * Render Add Coupon Form
         *
         * @param object $validated
         *
         * @return void
         */
        public function add_coupons_form($validated)
        {
        }
        /**
         * Handle the coupons submission
         *
         * @return void
         */
        public function handle_coupons()
        {
        }
        /**
         * Validate Coupon handler form
         *
         * @since 2.4
         *
         * @return object WP_Error|error
         */
        public function validate()
        {
        }
        /**
         * Coupon Delete Functionality
         *
         * @since 2.4
         *
         * @return void
         */
        public function coupun_delete()
        {
        }
        /**
         * Create Coupon hanlder function
         *
         * @since 2.4
         *
         * @return void
         */
        public function coupons_create()
        {
        }
        /**
         * Get the orders total from a specific seller
         *
         * @since version 3
         *
         * @param string $title
         * @param object $error
         *
         * @return object $error
         */
        public function is_coupon_exist($post_id, $title, $errors)
        {
        }
        /**
         * Handle coupon meta related to vendor limits
         *
         * @since 3.7.4
         *
         * @param int $user_id Deleted user's id
         * @param int|null $reassigned_user
         *
         * @retun void
         */
        public function handle_vendor_deletion($user_id, $reassigned_user)
        {
        }
        /**
         * Detach Coupons from user on delete coupon
         *
         * @since 3.7.4
         *
         * @param int $coupon_id
         * @param \WP_Post $post
         */
        public function detach_coupon_from_seller_on_delete($coupon_id, $post)
        {
        }
        /**
         * Detach Coupons from user
         *
         * @since 3.7.4
         *
         * @param int $coupon_id
         * @param array $new_data
         *
         * @retun void
         */
        public function detach_coupon_from_seller($coupon_id, $new_data)
        {
        }
        /**
         * Save marketplace coupons list as seller meta
         *
         * @since 3.7.4
         *
         * @param int $coupon_id
         *
         * @retun void
         */
        public function attach_coupon_to_seller($coupon_id)
        {
        }
    }
    /**
    * Coupon Manager class
    *
    * @since 3.0.0
    */
    class Manager
    {
        /**
         * Get all coupons
         *
         * @since 3.0.0
         *
         * @return void
         */
        public function all($args = [])
        {
        }
        /**
         * Get a coupon object
         *
         * @since 3.0.0
         *
         * @return void
         */
        public function get($id = 0)
        {
        }
        /**
         * Delete a coupon
         *
         * @since 3.0.0
         *
         * @return Void
         */
        public function delete($id, $force = true)
        {
        }
        /**
         * Admin coupon is valid for current cart items
         *
         * @since 3.4.0
         *
         * @param object $coupon
         * @param array  $vendors
         * @param array  $products
         *
         * @return boolean
         */
        public function is_admin_coupon_valid($coupon, $vendors, $products, $coupon_meta_data = array(), $valid = false)
        {
        }
        /**
         * Get earning use admin coupon for vendor
         *
         * @since 3.4.0
         *
         * @param obj   $order
         * @param obj   $item
         * @param obj   $context[admin|seller]
         * @param obj   $product
         * @param int   $vendor_id
         * @param float $refund
         *
         * @return float $earning
         */
        public function get_earning_by_admin_coupon($order, $item, $context, $product, $vendor_id, $refund)
        {
        }
        /**
         * Get earning by product if have created admin coupon for vendors
         *
         * @since 3.4.0
         *
         * @param array $current_data
         * @param array $coupon_meta
         * @param float $discount_price
         *
         * @return array
         */
        public function get_earning_for_admin_coupon($current_data, $coupon_meta, $discount_price)
        {
        }
        /**
         * Get earning if only coupon amount deduct from vendor.
         *
         * If coupon price deduct from vendor then full coupon price deducts from vendor earning.
         *
         * @since 3.4.0
         *
         * @param array $current_data
         * @param array $coupon_meta
         * @param float $discount_price
         *
         * @return array
         */
        public function get_earning_for_vendor_only_coupon($current_data, $coupon_meta, $discount_price)
        {
        }
        /**
         * Get earning if only coupon amount deduct from admin.
         *
         * If coupon price deduct from admin then full coupon price deducts from admin earning,
         * and if coupon price greater than admin earning than additional amount deducts from vendor earning.
         *
         * @since 3.4.0
         *
         * @param array $current_data
         * @param array $coupon_meta
         * @param float $discount_price
         *
         * @return array
         */
        public function get_earning_for_admin_only_coupon($current_data, $coupon_meta, $discount_price)
        {
        }
        /**
         * Get earning when coupon amount shared admin and vendor boths.
         *
         * If coupon price shared then coupon price minus from admin earning and vendor earning as per
         * shared coupon type. Here 2 types shared flat and percentage. Flat amount minus from admin
         * earning and other amount minus from vendor earning. Here also if admin earning greater than
         * coupon amount then additional amount minus from vendor earning.
         *
         * @since 3.4.0
         *
         * @param array $current_data
         * @param array $coupon_meta
         * @param float $discount_price
         *
         * @return array
         */
        public function get_earning_for_shared_coupon($current_data, $coupon_meta, $discount_price)
        {
        }
        /**
         * Get earning by product if have created vendor coupon default option
         *
         * @since 3.4.0
         *
         * @param array $current_data
         * @param array $coupon_meta
         * @param float $discount_price
         *
         * @return float
         */
        public function get_earning_for_vendor_coupon($current_data, $coupon_meta, $discount_price)
        {
        }
        /**
         * Apply a discount to all items using a coupon.
         *
         * @since 3.4.0
         *
         * @param array $coupon_meta
         * @param float $product_price
         */
        public function get_coupon_amount($coupon_meta, $product_price, $get_quantity, $get_items_count)
        {
        }
        /**
         * Apply percent discount to items and return an array of discounts granted.
         *
         * @since 3.4.0
         *
         * @param array $coupon_meta
         * @param float $get_subtotal
         */
        protected function apply_coupon_percent($coupon_meta, $get_subtotal)
        {
        }
        /**
         * Apply fixed product discount to item.
         *
         * @since 3.4.0
         *
         * @param array $coupon_meta
         * @param int   $quantity
         */
        protected function apply_coupon_fixed_product($coupon_meta, $quantity)
        {
        }
        /**
         * Apply fixed cart discount to item.
         *
         * @since 3.4.0
         *
         * @param array $coupon_meta
         * @param int   $get_items_count
         */
        protected function apply_coupon_fixed_cart($coupon_meta, $get_items_count)
        {
        }
        /**
         * Apply custom coupon discount to item.
         *
         * @since 3.4.0
         *
         * @param array $coupon_meta
         * @param float $get_subtotal
         */
        protected function apply_coupon_custom($coupon_meta, $get_subtotal)
        {
        }
    }
}
namespace WeDevs\DokanPro {
    /**
     * Custom Withdraw method handler class
     *
     * @since 3.5.0
     *
     * @author weDevs <info@wedevs.com>
     */
    class CustomWithdrawMethod
    {
        /**
         * Constructor for the CustomWithdrawMethod class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Returns true if venddor enabled dokan custom payment geteway.
         *
         * @since 3.9.1
         *
         * @param $data
         *
         * @return array
         */
        public function add_dokan_custom_to_vendor_profile_data($data)
        {
        }
        /**
         * Add custom withdraw method on admin withdraw and vendor payment settings
         *
         * @since 3.5.0
         *
         * @param  array $methods
         *
         * @return array
         */
        public function register_custom_withdraw_method($methods)
        {
        }
        /**
         * Callback for displaying custom withdraw method in store settings
         *
         * @since 3.5.0
         *
         * @param array $store_settings
         *
         * @return void
         */
        public function dokan_custom_withdraw_method($store_settings)
        {
        }
        /**
         * Add additional settings fields for custom withdraw method
         *
         * @since 3.5.0
         *
         * @param array $settings_fields
         * @param object $dokan_settings
         *
         * @return array
         */
        public function custom_withdraw_method_admin_settings($settings_fields, $dokan_settings)
        {
        }
        /**
         * Validate custom withdraw method fields
         *
         * @since 3.5.0
         *
         * @param string $option_name
         * @param array $option_value
         *
         * @return void
         */
        public function validate_custom_withdraw_method_admin_settings($option_name, $option_value)
        {
        }
        /**
         * Whether display custom withdraw method title or default title on vendor payment settings page
         *
         * @since 3.5.0
         *
         * @param string $title
         *
         * @return string
         */
        public function custom_payment_method_title($title, $method)
        {
        }
        /**
         * Save custom withdraw method field data
         *
         * @since 3.5.0
         *
         * @param int $store_id
         * @param array $dokan_settings
         *
         * @return void
         */
        public function save_custom_withdraw_method_vendor_settings($store_id, $dokan_settings)
        {
        }
        /**
         * Add custom withdraw method in vendor withdraw request dropdown
         *
         * @since 3.5.0
         *
         * @param array $active_payment_methods
         * @param int $vendor_id
         *
         * @return array
         */
        public function seller_active_withdraw_methods($active_payment_methods, $vendor_id)
        {
        }
        /**
         * Hide custom withdraw method if name and label wasn't provided by admin
         *
         * @since 3.5.0
         *
         * @param array $methods
         *
         * @return array
         */
        public function remove_custom_withdraw_method($methods)
        {
        }
        /**
         * Maps the required fields for custom withdraw method settings.
         *
         * @since 3.6.1
         *
         * @param array      $required_fields
         * @param string     $method_key
         * @param int|string $seller_id
         *
         * @return array
         */
        public function map_required_fields($required_fields, $method_key, $seller_id)
        {
        }
        /**
         * Calculate Dokan profile completeness value
         *
         * @since 3.7.1
         *
         * @param array $progress_track_value
         *
         * @return array
         */
        public function calculate_profile_progress($progress_track_value)
        {
        }
        /**
         * Get the heading for this payment's settings page
         *
         * @since 3.7.0
         *
         * @param string $heading
         * @param string $slug
         *
         * @return string
         */
        public function get_heading($heading, $slug)
        {
        }
        /**
         * Include Custom Withdraw method to withdrawable payment methods
         *
         * @since 3.7.1
         *
         * @param array $payment_methods
         *
         * @return array
         */
        public function include_custom_method_to_payment_methods($payment_methods)
        {
        }
    }
}
namespace WeDevs\DokanPro\Dashboard {
    /**
     * Dashboard Template Class.
     *
     * A template for frontend dashboard rendering items
     *
     * @since 2.4
     *
     * @author weDevs <info@wedevs.com>
     */
    class Dashboard extends \WeDevs\Dokan\Dashboard\Templates\Dashboard
    {
        /**
         * Constructor for the WeDevs_Dokan class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @uses add_action()
         */
        public function __construct()
        {
        }
        /**
         * Show Profile progressbar
         *
         * @return void
         */
        public function show_profile_progressbar()
        {
        }
        /**
         * Get Review Widget
         *
         * @return void
         */
        public function get_review_widget()
        {
        }
        /**
         * Get announcement widget
         *
         * @return void
         */
        public function get_announcement_widget()
        {
        }
    }
    /**
     * Profile Progressbar Class.
     *
     * @since 3.7.13
     *
     * @author weDevs <info@wedevs.com>
     */
    class ProfileProgress
    {
        /**
         * Get profile progressbar data.
         *
         * @since 3.7.13
         *
         * @param bool $new_dashboard
         *
         * @return array
         */
        public function get($new_dashboard = false)
        {
        }
    }
}
namespace WeDevs\DokanPro {
    /**
     * Digital Porduct class
     *
     * @since 3.2.3
     *
     * @package dokan
     */
    class DigitalProduct
    {
        /**
         * Load autometically when class initiate
         *
         * @since 3.2.3
         *
         * @uses actions
         * @uses filters
         */
        public function __construct()
        {
        }
        /**
         * Init hooks and filters
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Add vendor store options in general settings
         *
         * @since 3.2.3
         *
         * @param array $settings_fields
         *
         * @return array $settings_fields
         */
        public function add_admin_setting_digital_mode($settings_fields)
        {
        }
        /**
         * Get dokan selling product type
         *
         * @since 3.2.3
         *
         * @return string
         */
        public function get_selling_product_type()
        {
        }
        /**
         * Add store digitial product option template
         *
         * @since 3.2.3
         *
         * @return void
         */
        public function admin_wizard_store_setup_field($wizard)
        {
        }
        /**
         * Set store categories after wizard settings is saved
         *
         * @since 3.2.3
         *
         * @param \WeDevs\Dokan\Vendor\SetupWizard $wizard
         *
         * @return void
         */
        public function after_admin_wizard_store_field_save($wizard)
        {
        }
        /**
         * Remove shipping menu when digital mode only
         *
         * @since 3.2.3
         *
         * @param  array $sub_settins
         *
         * @return array
         */
        public function remove_shipping_settings_menu($sub_settins)
        {
        }
    }
    /**
     * Dokan Email Verification class
     *
     * @since 2.7.3
     *
     * @package dokan-pro
     */
    class EmailVerification
    {
        /**
         * Load automatically when class instantiated
         *
         * @since 2.7.3
         *
         * @uses actions|filter hooks
         */
        public function __construct()
        {
        }
        /**
         * Call actions and hooks
         */
        public function init_hooks()
        {
        }
        /**
         * Set Verification meta
         *
         * @param type $customer_id
         *
         * @param type $new_customer_data
         *
         * @param type $password_generated
         *
         * @return void
         */
        public function send_verification_email($customer_id, $new_customer_data, $password_generated)
        {
        }
        /**
         * Check for verification when a user logs in
         *
         * @param type $redirect
         *
         * @param WP_User $user
         *
         * @return String $redirect
         */
        public function check_verification($redirect, $user = array())
        {
        }
        /**
         * Validate Email from link
         */
        public function validate_email_link()
        {
        }
        /**
         * Add verification link in welcome email
         *
         * @param type $email
         *
         * @return void
         */
        public function add_activation_link($email)
        {
        }
        /**
         * Add email verification field
         *
         * @param object $user
         *
         * @return string
         */
        public function add_email_verification_field($user)
        {
        }
        /**
         * Verify a vendor from user profile page
         *
         * @param  int $user_id
         *
         * @return void
         */
        public function verify_vendor($user_id)
        {
        }
        /**
         * Send verification email again
         *
         * @return void
         */
        public function send_verification_email_again()
        {
        }
        /**
         * Show the resend email notification message
         *
         * @return void
         */
        public function show_resend_email_notification()
        {
        }
        /**
         * Filter admin menu settings section
         *
         * @param array $sections
         *
         * @return array
         */
        public function dokan_email_verification_settings($sections)
        {
        }
        /**
         * Render settings fields for admin settings section
         *
         * @param array $settings_fields
         *
         * @return array
         */
        public function dokan_email_settings_fields($settings_fields)
        {
        }
        /**
         * Get Post Type array
         *
         * @param  string $post_type
         *
         * @return array
         */
        public function get_post_type($post_type)
        {
        }
        /**
         * Check whether email verification is needed or not
         *
         * @since 2.9.13
         *
         * @return bool
         */
        public function maybe_verification_not_needed()
        {
        }
        /**
         * Check if the user is vendor
         *
         * @since 3.0.0
         *
         * @return boolean
         */
        protected function is_vendor()
        {
        }
        /**
         * Show `Double Opt-In` admin notice
         *
         * @since 3.2.3
         *
         * @param array $notices
         *
         * @return array
         */
        public function double_opt_in_admin_notice($notices)
        {
        }
        /**
         * Admin Notice ajax action
         *
         * @since 3.2.3
         *
         * @return void
         */
        public function woocommerce_germanized_double_opt_in_ajax()
        {
        }
    }
}
namespace WeDevs\DokanPro\Emails {
    class Announcement extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the this email.
         */
        public function trigger($seller_id, $post_id, $notice_id)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialize settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * Notify Vendor when a refund request get canceled.
     *
     * @since 3.3.6
     */
    class CanceledRefundVendor extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.3.6
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since 3.3.6
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @since 3.3.6
         *
         * @param Refund $refund Vendor Refund Request.
         */
        public function trigger($refund)
        {
        }
        /**
         * Get content html.
         *
         * @since 3.3.6
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @since 3.3.6
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         *
         * @since 3.3.6
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * Notify admin & seller when order marked as receive by customer.
     *
     * @since 3.11.4
     */
    class MarkedOrderReceive extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since 3.11.4
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since 3.11.4
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Default content to show below main email content.
         *
         * @since 3.11.4
         *
         * @return string
         */
        public function get_default_additional_content()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @since 3.11.4
         *
         * @param \WC_Order $order
         * @param int       $shipment_id
         *
         * @return void
         */
        public function trigger($order, $shipment_id)
        {
        }
        /**
         * Get content html.
         *
         * @since 3.11.4
         *
         * @access public
         *
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @since 3.11.4
         *
         * @access public
         *
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         *
         * @since 3.11.4
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
    }
    class RefundRequest extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @param int   $order_id      Order id
         * @param float $refund_amount Refund amount
         *
         * @return void
         */
        public function trigger($order_id, $refund_amount)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    class RefundVendor extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @param $seller_mail
         * @param $order_id
         * @param $status
         * @param $refund_amount
         * @param $refund_reason
         */
        public function trigger($seller_mail, $order_id, $status, $refund_amount, $refund_reason)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    class ShippingStatus extends \WC_Email
    {
        /**
         * Customer note.
         *
         * @var array
         */
        public $shipping_info;
        /**
         * Customer note.
         *
         * @var string
         */
        public $ship_info;
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Default content to show below main email content.
         *
         * @since 3.11.4
         *
         * @return string
         */
        public function get_default_additional_content()
        {
        }
        /**
         * Trigger the email.
         */
        public function trigger($order_id, $tracking_info, $ship_info, $seller_id, $new_shipment = false)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialize settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    class UpdatedProduct extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @param \WC_Product $product  The product object.
         * @param Vendor      $seller   The seller ID.
         * @param string[]    $category Category Name.
         */
        public function trigger($product, $seller, $category)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialize settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    class VendorDisable extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the email.
         */
        public function trigger($seller_id)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialize settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    class VendorEnable extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get an email subject.
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger this email.
         */
        public function trigger($seller_id)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialize settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
}
namespace WeDevs\DokanPro {
    /**
     * Hooks class
     *
     * @since 3.7.25
     */
    class Hooks
    {
        /**
         * Class constructor
         *
         * @since 3.7.25
         */
        public function __construct()
        {
        }
        /**
         * Disable entire Dokan withdraw mechanism.
         *
         * @since 3.7.25 moved from includes/functions.php to here
         *
         * @param bool $is_disabled
         *
         * @return bool
         */
        public function withdraw_disable_withdraw_operation($is_disabled)
        {
        }
        /**
         * Dokan add combine commission
         *
         * @deprecated 3.14.0
         *
         * @since  2.9.14
         * @since  3.7.25 moved from includes/functions.php to here
         *
         * @param float  $earning [earning for a vendor or admin]
         * @param float  $commission_rate
         * @param string $commission_type
         * @param float  $additional_fee
         * @param float  $product_price
         * @param int    $order_id
         *
         * @return float
         */
        public function add_combine_commission($earning, $commission_rate, $commission_type, $additional_fee, $product_price, $order_id)
        {
        }
        /**
         * Increase progressbar for skrill and custom payment method.
         *
         * @since DOKAN_SINCE
         *
         * @param $instance
         *
         * @return void
         */
        public function update_progressbar_for_payment_gateway($instance)
        {
        }
    }
}
namespace WeDevs\DokanPro\Install {
    /**
    * Dokan Pro Installer file
    */
    class Installer
    {
        /**
         * Load automatically when class initiate
         *
         * @since 2.8.0
         */
        public function do_install()
        {
        }
        /**
         * Version info
         *
         * @return void
         */
        public function add_version_info(): void
        {
        }
        /**
         * Create Shipping Tables
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function create_shipping_tables()
        {
        }
        /**
         * Add new table for shipping tracking
         *
         * @since 3.2.4
         *
         * @return void
         */
        public function create_shipping_tracking_table()
        {
        }
        /**
         * Maybe Activate modules
         *
         * For the first time activation after installation,
         * activate all pro modules.
         *
         * @since 2.8.0
         * @since 3.0.0 Using module manager to activate all modules
         * @since 3.1.0 Activate only available modules instead of all modules
         * @since 3.3.1 reactivate active modules after dokan pro is activated
         *
         * @return void
         * */
        public function maybe_activate_modules()
        {
        }
        /**
         * Initialize the appsero SDK
         *
         * @since 3.1.1
         *
         * @return void
         */
        protected function appsero_optin()
        {
        }
    }
}
namespace WeDevs\DokanPro\MenuManager {
    /**
     * Access restriction for disabled menus
     *
     * @since 3.10.0
     */
    class AccessRestriction
    {
        /**
         * List of restricted keys
         *
         * @since 3.10.0
         *
         * @var array
         */
        protected static $restricted_keys = [];
        /**
         * Alters Query Params to restrict access
         *
         * @since 3.10.0
         *
         * @param array $query_vars
         *
         * @return array|WP_Error
         */
        public static function restrict_access(array $query_vars)
        {
        }
        /**
         * Get a list of restricted keys
         *
         * @since 3.10.0
         *
         * @return array
         */
        public static function get_restricted_keys(): array
        {
        }
        /**
         * Adds aliases to restricted key list
         *
         * @since 3.10.0
         *
         * @param array $restricted_keys
         *
         * @return array
         */
        protected static function addRestrictedKeyAliases(array $restricted_keys): array
        {
        }
        /**
         * Adds widget restriction
         *
         * @since 3.10.0 Added widget restriction for lite and pro plugin.
         *
         * @param bool $status
         * @param string $widget_id
         *
         * @return bool
         */
        public static function validateWidgetRestriction(bool $status, string $widget_id): bool
        {
        }
    }
}
namespace WeDevs\DokanPro\MenuManager\Admin {
    /**
     * Manages Dashboard Menu Manager data
     *
     * @since 3.10.0
     */
    class DataSource
    {
        /**
         * Initializes all hooks
         *
         * @since 3.10.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Filters to be saved data
         *
         * @since 3.10.0
         *
         * @param array  $option_value
         * @param string $option_name
         *
         * @return array
         */
        public function save_admin_settings(array $option_value, string $option_name): array
        {
        }
        /**
         * Filters user input title
         *
         * @since 3.10.0
         *
         * @param array $data
         *
         * @return array
         */
        protected function filter_title(array $data): array
        {
        }
    }
    /**
     * Handles Menu manager admin settings configurations
     *
     * @since 3.10.0
     */
    class Settings
    {
        /**
         * Initializes all hooks
         *
         * @since 3.10.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Adds menu manager section in dokan admin dashboard settings
         *
         * @since 3.10.0
         *
         * @param array $settings_sections
         *
         * @return array
         */
        public function add_menu_manager_section(array $settings_sections): array
        {
        }
        /**
         * Adds Fields under menu manager settings fields
         *
         * @since 3.10.0
         *
         * @param array $settings_fields
         *
         * @return array
         */
        public function add_menu_manager_section_fields(array $settings_fields): array
        {
        }
    }
}
namespace WeDevs\DokanPro\MenuManager {
    /**
     * Class Constants
     *
     * @package WeDevs\DokanPro\MenuManager
     *
     * @since 3.10.0
     */
    class Constants
    {
        /**
         * Menu manager options key
         *
         * @since 3.10.0
         */
        const MENU_MANAGER_OPTIONS = 'dashboard_menu_manager';
        /**
         * Menu manager section key
         *
         * @since 3.10.0
         */
        const DOKAN_MENU_MANAGER = 'dokan_menu_manager';
        /**
         * Appearance menu options key
         *
         * @since 3.10.0
         */
        const APPEARANCE = 'dokan_appearance';
        /**
         * Submenu options key
         *
         * @since 3.10.0
         */
        const SUBMENU = 'submenu';
    }
    /**
     * Menu Manager Controller
     *
     * @since 3.10.0
     */
    class Controller
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Class constructor
         *
         * @since 3.10.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Initializes all classes
         *
         * @since 3.10.0
         *
         * @return void
         */
        protected function init_classes()
        {
        }
    }
    /**
     * Menu Manager settings field manager
     *
     * @since 3.10.0
     */
    class Hooks
    {
        /**
         * Invokes settings hook
         *
         * @since 3.10.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Updates navigation array data to accommodate menu Manager.
         *
         * @since 3.10.0
         *
         * @param array $navigations
         *
         * @return array
         */
        public function dashboard_menu_navigation_update_data($navigations)
        {
        }
    }
}
namespace WeDevs\DokanPro {
    /**
     * Dokan Pro Modules
     *
     * @property Modules\VendorVerification\Module $vendor_verification Vendor Verification.
     * @property Modules\ProductQA\Module $product_qa Product Qa Module.
     * @property Modules\PayPalMarketplace\Module $paypal_marketplace PayPal.
     * @property Modules\OrderMinMax\Module $order_min_max Order Min Max Module.
     */
    class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * The wp option key which contains active module ids
         *
         * @since 3.0.0
         *
         * @var string
         */
        const ACTIVE_MODULES_DB_KEY = 'dokan_pro_active_modules';
        /**
         * Update db option containing active module ids
         *
         * @since 3.0.0
         *
         * @param array $value
         *
         * @return bool
         */
        protected function update_db_option($value)
        {
        }
        /**
         * Load active modules
         *
         * @since 3.0.0
         *
         * @param array $newly_activated_modules Useful after module activation
         *
         * @return void
         */
        public function load_active_modules($newly_activated_modules = [], $force = false)
        {
        }
        /**
         * List of Dokan Pro modules
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_all_modules()
        {
        }
        /**
         * Set Dokan Pro modules
         *
         * @since 3.0.0
         *
         * @param array $modules
         *
         * @return void
         */
        public function set_modules($modules)
        {
        }
        /**
         * Get a list of module ids
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_all_module_ids()
        {
        }
        /**
         * Get Dokan Pro active modules
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_active_modules($force = false)
        {
        }
        /**
         * Get a list of available modules
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_available_modules()
        {
        }
        /**
         * Backward compatible module naming map
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_compatibility_naming_map()
        {
        }
        /**
         * Activate Dokan Pro modules
         *
         * @since 3.0.0
         *
         * @param array $modules
         *
         * @return array
         */
        public function activate_modules($modules, $force = false)
        {
        }
        /**
         * Deactivate Dokan Pro modules
         *
         * @since 3.0.0
         *
         * @param array $modules
         *
         * @return array
         */
        public function deactivate_modules($modules)
        {
        }
        /**
         * Checks if a module is active or not
         *
         * @since 3.0.0
         *
         * @param string $module_id
         *
         * @return bool
         */
        public function is_active($module_id)
        {
        }
        /**
         * Check if a module is available or not
         *
         * @since 3.8.0
         *
         * @param string $module_id
         *
         * @return bool
         */
        public function is_available($module_id)
        {
        }
        /**
         * Check if the module is in the package.
         *
         * @since 3.10.0
         *
         * @param $module
         *
         * @return bool
         */
        public function is_module_available_under_package($module)
        {
        }
    }
}
namespace WeDevs\DokanPro\Product {
    class Manager extends \WeDevs\Dokan\Product\Manager
    {
        /**
         * Returns linked products.
         *
         * @since 3.12.2
         *
         * @param string                $term
         * @param boolean|integer|array $user_ids
         * @param array                 $exclude
         * @param array                 $included_id
         * @param integer               $limit
         *
         * @return WC_Product[]
         */
        public function get_linked_products($term = '', $user_ids = [], $exclude = [], $included_id = [], $limit = 0)
        {
        }
    }
}
namespace WeDevs\DokanPro {
    /**
     * Dokan Pro Product Bulk Edit Class
     *
     * @since   3.4.0
     *
     * @package dokan
     */
    class ProductBulkEdit
    {
        /**
         * Load automatically when class initiate
         *
         * @since 3.4.0
         *
         * @uses  actions
         * @uses  filters
         */
        public function __construct()
        {
        }
        /**
         * Show Updated success message
         *
         * @since 2.6.3
         *
         * @return void
         */
        public function display_updated_message($type)
        {
        }
        /**
         * Add bulk edit status.
         *
         * @since 3.4.0
         *
         * @param array $bulk_statuses previous status.
         *
         * @return array
         */
        public function bulk_product_status($bulk_statuses)
        {
        }
        /**
         * Dokan bulk edit form.
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function bulk_edit_form()
        {
        }
        /**
         * Bulk saving product info.
         *
         * @since 3.4.0
         *
         * @throws \WC_Data_Exception
         *
         * @return void
         */
        public function bulk_edit()
        {
        }
        /**
         * Bulk edit saving.
         *
         * @since 3.4.0
         *
         * @param mixed|WC_Product $product WC_Product object.
         *
         * @throws \WC_Data_Exception
         *
         * @return void
         */
        public function bulk_edit_save($product, $request_data)
        {
        }
    }
    /**
     * Dokan Pro Product SEO class
     *
     * @since 2.9.0
     *
     * @package dokan
     */
    class ProductSeo
    {
        /**
         * Load autometically when class initiate
         *
         * @since 2.9.0
         *
         * @uses actions
         * @uses filters
         */
        public function __construct()
        {
        }
        /**
         * Init hooks and filters
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Convert Yoast shortcode format to Dokan format
         *
         * @since 3.0.7
         *
         * @param string $str
         *
         * @return string
         */
        public function convert_yoast_to_dokan_format($str)
        {
        }
        /**
         * Convert Dokan shortcode format to Yoast format
         *
         * @since 3.0.7
         *
         * @param string $str
         *
         * @return string
         */
        public function convert_dokan_to_yoast_format($str)
        {
        }
        /**
         * Load SEO content
         *
         * @since 2.9.0
         *
         * @param  object $post
         * @param  integer $post_id
         *
         * @return void
         */
        public function load_product_seo_content($post, $post_id)
        {
        }
        /**
         * Get title separator
         *
         * @since 3.2.1
         *
         * @return string
         */
        public function get_title_separator()
        {
        }
        /**
         * Set product seo data
         *
         * @since 2.5.3
         *
         * @param integer $post_id
         */
        public function save_product_seo_data($post_id)
        {
        }
    }
    /**
     * Dokan Pro Product Class
     *
     * @since 2.4
     *
     * @package dokan
     */
    class Products
    {
        /**
         * Load automatically when class initiate
         *
         * @since 2.4
         *
         * @uses actions
         * @uses filters
         */
        public function __construct()
        {
        }
        /**
         * Render New Product Template
         *
         * @since 2.4
         *
         * @param  array $query_vars
         *
         * @return void
         */
        public function render_new_product_template($query_vars)
        {
        }
        /**
         * Load Variation Content
         *
         * @since 2.4
         *
         * @param  object $post
         * @param  integer $post_id
         *
         * @return void
         */
        public function load_variations_content($post, $post_id)
        {
        }
        /**
         * Load Variation popup content when edit product
         *
         * @since 2.4
         *
         * @param  object $post
         * @param  integer $post_id
         *
         * @return void
         */
        public function load_variations_js_template($post, $post_id)
        {
        }
        /**
         * Load Shipping and tax content
         *
         * @since 2.4
         *
         * @param  object $post
         * @param  integer $post_id
         *
         * @return void
         */
        public function load_shipping_tax_content($post, $post_id)
        {
        }
        /**
         * Render linked product content
         *
         * @since 2.6.6
         *
         * @return void
         */
        public function load_linked_product_content($post, $post_id)
        {
        }
        /**
         * Get taxes options value
         *
         * @since 2.4
         *
         * @return array
         */
        public function get_tax_class_option()
        {
        }
        /**
         * Save extra product data
         *
         * @since  2.5.3
         *
         * @param  integer $post_id
         *
         * @return void
         */
        public function save_pro_product_data($post_id)
        {
        }
        /**
         * Set new product tags
         *
         * @since 2.8.4
         *
         * @param int   $product_id
         * @param array $posted_data
         *
         * @return void
         */
        public function set_product_tags($product_id, $posted_data = [])
        {
        }
        /**
         * Added duplicate row action
         *
         * @since 2.6.3
         *
         * @param array $row_action List of row actions for product.
         * @param \WC_Product $post Product object.
         *
         * @return array
         */
        public function product_row_action($row_action, $post)
        {
        }
        /**
         * Handle duplicate product action
         *
         * @since 2.6.3
         *
         * @return void
         */
        public function handle_duplicate_product()
        {
        }
        /**
         * Duplicates a product.
         *
         * @since 3.7.14
         *
         * @param int $product_id The ID of the product to be duplicated
         *
         * @return \WC_Product|WP_Error
         */
        public function duplicate_product($product_id)
        {
        }
        /**
         * Show duplicate success message
         *
         * @since 2.6.3
         *
         * @return void
         */
        public function display_duplicate_message($type)
        {
        }
        /**
         * Set product type
         *
         * @since 2.5.3
         *
         * @param integer $post_id
         */
        public function set_product_type($post_id)
        {
        }
        /**
         * Set Additional product Post Data
         *
         * @since 2.6.3
         *
         * @param array $data Product post data
         *
         * @return array
         */
        public function change_product_status($data)
        {
        }
        /**
         * Set default product types
         *
         * @since 2.6
         *
         * @param array $product_types
         *
         * @return array
         */
        public function set_default_product_types($product_types)
        {
        }
        /**
         * Send email to admin once a product is updated
         *
         * @since 2.6.5
         *
         * @param int $product_id
         * @param array $post_data
         *
         * @return void
         */
        public function updated_product_email($product_id, $post_data)
        {
        }
        /**
         * Group product content
         *
         * @since 2.6.6
         *
         * @return void
         */
        public function group_product_content($post, $post_id)
        {
        }
        /**
         * External product content
         *
         * @since 3.2.1
         *
         * @return void
         */
        public function external_product_content($post, $post_id)
        {
        }
        /**
         * Remove unwanted meta_keys while duplicating product
         *
         * @param  array $meta_keys
         *
         * @since 2.7.6
         *
         * @return array $meta_keys
         */
        public function remove_unwanted_meta($meta_keys)
        {
        }
        /**
         * Add Dokan Pro localized vars
         *
         * @since 2.8.4
         *
         * @param array $args
         *
         * @return array
         */
        public function dokan_pro_localized_args($args)
        {
        }
        /**
         * Inline edit form
         *
         * @since 2.9.0
         *
         * @param WC_Product $product
         * @param WP_Post    $post
         *
         * @return void
         */
        public function add_product_inline_edit_form($product, $post)
        {
        }
        /**
         * Save quick edit product data
         *
         * @since 2.9.0
         *
         * @return void|WP_Error
         */
        public function product_inline_edit()
        {
        }
        /**
         * Prevent duplicate sku when multiple vendor add same product
         *
         * @param $duplicate
         *
         * @return void
         */
        public function prevent_duplicate_sku($duplicate, $product)
        {
        }
        /**
         * Check recursively if sku exist
         *
         * @param $sku
         *
         * @return mixed
         */
        public function get_unique_sku($sku)
        {
        }
        /**
         * Set product edit status
         *
         * @since 3.8.3
         *
         * @param array $all_statuses
         * @param int $product_id
         *
         * @return array
         */
        public function set_product_status($all_statuses, $product_id)
        {
        }
        /**
         * Set default product status for new product
         *
         * @since 3.8.3
         *
         * @param $current_status
         * @param $product
         *
         * @return mixed|string|void
         */
        public function post_edit_default_status($current_status, $product)
        {
        }
        /**
         * Set new product status based on admin settings
         *
         * @since 3.8.3
         *
         * @param string $status
         *
         * @return string
         */
        public function new_product_status($status)
        {
        }
    }
}
namespace WeDevs\DokanPro\REST {
    /**
     * REST API Announcement controller
     */
    class AnnouncementController extends \WeDevs\Dokan\Abstracts\DokanRESTController
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route name
         *
         * @var string
         */
        protected $rest_base = 'announcement';
        /**
         * Rest route base.
         *
         * @var string
         */
        protected $base = 'announcement';
        /**
         * Post type.
         *
         * @var string
         */
        protected $post_type = 'dokan_announcement';
        /**
         * Post type.
         *
         * @var string
         */
        protected $post_status = ['publish'];
        /**
         * Announcement manager
         *
         * @var \WeDevs\DokanPro\Announcement\Manager
         */
        protected $manager;
        /**
         * AnnouncementController constructor.
         *
         * @since 3.9.4
         */
        public function __construct()
        {
        }
        /**
         * Register all announcement routes
         *
         * @since 2.8.2
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get a single announcement object
         *
         * @since 2.8.2
         *
         * @return WP_Error|Single
         */
        public function get_object($id)
        {
        }
        /**
         * Get all announcements
         *
         * @since 2.8.2
         *
         * @return WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * Get single announcement object
         *
         * @since 2.8.2
         *
         * @return WP_Error|WP_REST_Response
         */
        public function get_item($request)
        {
        }
        /**
         * Create announcement
         *
         * @since 2.8.2
         *
         * @args  WP_Rest_Request $request
         *
         * @return WP_REST_Response
         */
        public function create_item($request)
        {
        }
        /**
         * Update announcement
         *
         * @since 2.8.2
         *
         * @args  WP_Rest_Request $request
         *
         * @return WP_REST_Response
         */
        public function update_item($request)
        {
        }
        /**
         * Delete announcement
         *
         * @since 2.8.2
         *
         * @args  WP_Rest_Request $request
         *
         * @return WP_REST_Response
         */
        public function delete_announcement($request)
        {
        }
        /**
         * Restore announcement
         *
         * @since 2.8.2
         *
         * @return WP_REST_Response
         */
        public function restore_item($request)
        {
        }
        /**
         * Trash, delete and restore bulk action
         *
         * JSON data format for sending to API
         *     {
         *         "trash" : [
         *             "1", "9", "7"
         *         ],
         *         "delete" : [
         *             "2"
         *         ],
         *         "restore" : [
         *             "4"
         *         ]
         *     }
         *
         * @since 2.8.2
         *
         * @return WP_REST_Response
         */
        public function batch_items($request)
        {
        }
        /**
         * Get a single notice
         *
         * @since 3.9.4
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function get_notice($request)
        {
        }
        /**
         * Update read status for a notice
         *
         * @since 3.9.4
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function update_read_status($request)
        {
        }
        /**
         * Delete a vendor notice
         *
         * @since 3.9.4
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function delete_notice($request)
        {
        }
        /**
         * Get Items permission checking.
         *
         * @since 3.9.4
         *
         * @param WP_REST_Request $request Request object.
         *
         * @return bool|WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Get Item permission checking.
         *
         * @since 3.9.4
         *
         * @param WP_REST_Request $request Request object.
         *
         * @return bool|WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Create announcement permissions check
         *
         * @since 2.8.2
         *
         * @param WP_REST_Request $request
         *
         * @return bool
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Update announcement permissions check
         *
         * @since 2.8.2
         *
         * @param WP_REST_Request $request
         *
         * @return bool
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Delete announcement permissions check
         *
         * @since 2.8.2
         *
         * @param WP_REST_Request $request
         *
         * @return bool
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Check permission for getting withdraw
         *
         * @since 2.8.0
         *
         * @return bool
         */
        public function batch_items_permissions_check()
        {
        }
        /**
         * Get restore announcement permissions check
         *
         * @since 2.8.2
         *
         * @return bool
         */
        public function restore_item_permissions_check()
        {
        }
        /**
         * Get a single notice permission check
         *
         * @since 3.9.4
         *
         * @param WP_REST_Request $request Request object.
         *
         * @return bool|WP_Error
         */
        public function get_notice_permissions_check($request)
        {
        }
        /**
         * Update read status permission check.
         *
         * @since 3.9.4
         *
         * @param WP_REST_Request $request Request object.
         *
         * @return bool|WP_Error
         */
        public function update_read_status_permissions_check($request)
        {
        }
        /**
         * Update read status permission check.
         *
         * @since 3.9.4
         *
         * @param WP_REST_Request $request Request object.
         *
         * @return bool|WP_Error
         */
        public function delete_notice_permissions_check($request)
        {
        }
        /**
         * Prepare Item for response.
         *
         * @since 3.9.4
         *
         * @param Single          $item    Item.
         * @param WP_REST_Request $request Request object.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepare links for the request.
         *
         * @param Single          $item    Object data.
         * @param WP_REST_Request $request Request object.
         *
         * @return array                   Links for the given post.
         */
        protected function prepare_links($item, $request)
        {
        }
        /**
         * This method will check if an announcement exists with given id
         *
         * @since 3.9.4
         *
         * @param $value
         * @param $request WP_REST_Request
         * @param $key
         *
         * @return bool|WP_Error
         */
        public function rest_validate_announcement_id($value, $request, $key)
        {
        }
        /**
         * This method will check if a notice exists with given id
         *
         * @since 3.9.4
         *
         * @param $value
         * @param $request WP_REST_Request
         * @param $key
         *
         * @return bool|WP_Error
         */
        public function rest_validate_notice_id($value, $request, $key)
        {
        }
        /**
         * Get Announcement schema.
         *
         * @since 3.9.4
         *
         * @return array
         */
        public function get_item_schema(): array
        {
        }
    }
    /**
     * Dokan Changelog handler class
     *
     * @since 3.4.3
     */
    class ChangeLogController extends \WeDevs\Dokan\Abstracts\DokanRESTAdminController
    {
        /**
         * Route base.
         *
         * @var string
         */
        protected $base = 'changelog';
        /**
         * Register all routes related with stores
         *
         * @since 3.4.3
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get Change Logs
         *
         * @since 3.4.3
         *
         * @return WP_REST_Response
         */
        public function get_change_log()
        {
        }
    }
    class CouponController extends \WeDevs\Dokan\Abstracts\DokanRESTController
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'coupons';
        /**
         * Post type.
         *
         * @var string
         */
        protected $post_type = 'shop_coupon';
        /**
         * Post type.
         *
         * @var string
         */
        protected $post_status = array('publish');
        /**
         * Register all routes related with coupons
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get Coupon by id
         *
         * @param object|int $data
         *
         * @return WC_Coupon
         */
        protected function get_object($data)
        {
        }
        /**
         * validation_before_create_product
         *
         * @since 2.8.0
         *
         * @return WP_Error|bool
         */
        public function validation_before_create_item($request)
        {
        }
        /**
         * Validation before update product
         *
         * @since 2.8.0
         *
         * @return WP_Error|bool
         */
        public function validation_before_update_item($request)
        {
        }
        /**
         * validation_before_delete_item
         *
         * @since 2.8.0
         *
         * @return WP_Error|bool
         */
        public function validation_before_delete_item($request)
        {
        }
        /**
         * Get coupon permission check
         *
         * @since 2.8.0
         *
         * @return bool
         */
        public function get_coupon_permission_check()
        {
        }
        /**
         * Create coupon permission check
         *
         * @since 2.8.0
         *
         * @return bool
         */
        public function create_coupon_permission_check()
        {
        }
        /**
         * Create coupon permission check
         *
         * @since 2.8.0
         *
         * @return bool
         */
        public function edit_coupon_permission_check()
        {
        }
        /**
         * Create coupon permission check
         *
         * @since 2.8.0
         *
         * @return bool
         */
        public function delete_coupon_permission_check()
        {
        }
        /**
         * Get item
         *
         * @since 2.8.0
         *
         * @return bool|object|WP_Error
         */
        public function get_item($request)
        {
        }
        /**
         * Prepare data for response
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function prepare_data_for_response($object, $request)
        {
        }
        /**
         * Get formatted item data.
         *
         * @since  2.8.0
         *
         * @param  WC_Data $object WC_Data instance.
         *
         * @return array
         */
        protected function get_formatted_item_data($object)
        {
        }
        /**
         * Prepare a single coupon for create or update.
         *
         * @param  WP_REST_Request $request Request object.
         * @param  bool            $creating If is creating a new object.
         *
         * @return WP_Error|WC_Data
         */
        protected function prepare_object_for_database($request, $creating = false)
        {
        }
        /**
         * Prepare objects query.
         *
         * @since  2.8.0
         *
         * @param  WP_REST_Request $request Full details about the request.
         *
         * @return array
         */
        protected function prepare_objects_query($request)
        {
        }
        /**
         * Only return writable props from schema.
         *
         * @param  array $schema
         * @return bool
         */
        protected function filter_writable_props($schema)
        {
        }
        /**
         * Prepare links for the request.
         *
         * @param WC_Data         $object  Object data.
         * @param WP_REST_Request $request Request object.
         *
         * @return array                   Links for the given post.
         */
        protected function prepare_links($object, $request)
        {
        }
        /**
         * Get the Coupon's schema, conforming to JSON Schema.
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * Get the query params for collections of attachments.
         *
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
    /**
     * Dashboard API controller
     *
     * @package dokan
     * @since 3.7.13
     *
     * @author weDevs
     */
    class DashboardController extends \WeDevs\Dokan\Abstracts\DokanRESTController
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'vendor-dashboard';
        /**
         * Register all routes related with dashboard.
         *
         * @since 3.7.13
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Check permission if the current user can see profile progress bar data.
         *
         * Only seller will get the access to get profile progressbar.
         *
         * @since 3.7.13
         *
         * @return boolean
         */
        public function permission_check_to_get_profile_progressbar()
        {
        }
        /**
         * Get profile progressbar data.
         *
         * @since 3.7.13
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function get_profile_progressbar($request)
        {
        }
    }
    class LogsController extends \WeDevs\Dokan\Abstracts\DokanRESTAdminController
    {
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'logs';
        /**
         * Register all routes related with logs
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Retrieves the query params for the collections.
         *
         * @since 3.4.1
         *
         * @return array Query parameters for the collection.
         */
        public function get_logs_params()
        {
        }
        /**
         * Get all logs
         *
         * @since 2.9.4
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|WP_Error
         */
        public function get_logs($request)
        {
        }
        /**
         * Export all logs, send a json response after writing chunk data in file
         *
         * @since 3.4.1
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|WP_Error
         */
        public function export_logs($request)
        {
        }
        /**
         * Prepare Log items for response
         *
         * @param mixed           $results
         * @param WP_REST_Request $request
         *
         * @return array
         */
        public function prepare_logs_data($results, $request)
        {
        }
    }
    class Manager
    {
        /**
         * Register Dokan Pro REST Controllers
         *
         * @since 3.0.0
         *
         * @param array $class_map
         *
         * @return array
         */
        public static function register_rest_routes($class_map)
        {
        }
    }
    class ModulesController extends \WeDevs\Dokan\Abstracts\DokanRESTAdminController
    {
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'modules';
        /**
         * Register all routes related with modules
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Activation/deactivation request args
         *
         * @return array
         */
        public function module_toggle_request_args()
        {
        }
        /**
         * Validate module ids
         *
         * @since 3.0.0
         *
         * @param array $modules
         *
         * @return bool|WP_Error
         */
        public function validate_modules($modules)
        {
        }
        /**
         * Get all modules
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * Activate modules
         *
         * @param  WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function activate_modules($request)
        {
        }
        /**
         * Deactivate modules
         *
         * @param  WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function deactivate_modules($request)
        {
        }
    }
    /**
    * Product Variation controller
    *
    * @since 3.7.14
    *
    * @package dokan
    */
    class ProductController extends \WeDevs\Dokan\REST\ProductControllerV2
    {
        /**
         * Register the routes for products.
         *
         * @since 3.7.14
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Returns linked products.
         *
         * @param \WP_REST_Request $request
         *
         * @return \WP_Error|\WP_HTTP_Response|\WP_REST_Response
         */
        public function get_linked_products(\WP_REST_Request $request)
        {
        }
        /**
         * Checks the permission for product duplication.
         *
         * @since 3.7.14
         *
         * @return bool
         */
        public function duplicate_product_permissions_check()
        {
        }
        /**
         * Create a duplicate copy of a product.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function duplicate_product(\WP_REST_Request $request)
        {
        }
    }
    /**
     * Product Variation Block API.
     *
     * @since 3.7.13
     *
     * @package dokan
     */
    class ProductVariationBlockController extends \WeDevs\Dokan\REST\ProductBlockController
    {
        /**
         * Route base name.
         *
         * @var string
         */
        protected $base = 'blocks/product-variation';
        /**
         * Register all routes related with stores.
         *
         * @since 3.7.13
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get Variable product block detail.
         *
         * @since 3.7.13
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|array
         */
        public function get_item($request)
        {
        }
    }
    /**
    * Product Variation controller
    *
    * @since 2.8.0
    *
    * @package dokan
    */
    class ProductVariationController extends \WeDevs\Dokan\REST\ProductController
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route base.
         *
         * @var string
         */
        protected $rest_base = 'products/(?P<product_id>[\d]+)/variations';
        /**
         * Post type.
         *
         * @var string
         */
        protected $post_type = 'product_variation';
        /**
         * Register the routes for products.
         */
        public function register_routes()
        {
        }
        /**
         * Get object.
         *
         * @since  2.8.0
         * @param  int $id Object ID | Object.
         * @return WC_Product|null|false
         */
        public function get_object($id)
        {
        }
        /**
         * Get a collection of posts.
         *
         * @since 3.11.3
         *
         * @param WP_REST_Request $request Full details about the request.
         * @return WP_Error|WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * Prepare objects query.
         *
         * @since  3.11.3
         *
         * @param  WP_REST_Request $request Full details about the request.
         * @return array
         */
        protected function prepare_items_query($prepared_args = array(), $request = null)
        {
        }
        /**
         * Validation before create variation item
         *
         * @param WP_REST_Request $request
         *
         * @since 2.8.0
         *
         * @return bool|WP_Error
         */
        public function validation_before_create_item($request)
        {
        }
        /**
         * Validation before create variation item
         *
         * @param WP_REST_Request $request
         *
         * @since 2.8.0
         *
         * @return bool|WP_Error
         */
        public function validate_batch_items($request)
        {
        }
        /**
         * Check if a given request has access to batch modification of items.
         *
         * @since 3.7.13
         *
         * @param  WP_REST_Request $request Details about the request.
         *
         * @return bool
         */
        public function batch_items_permissions_check($request)
        {
        }
        /**
         * Get product data.
         *
         * @param WC_Product      $data_object Product instance.
         * @param WP_REST_Request $request     Request
         *
         * @return WP_REST_Response
         */
        protected function prepare_data_for_response($data_object, $request)
        {
        }
        /**
         * Prepare a single variation for create or update.
         *
         * @param  WP_REST_Request $request Request object.
         * @param  bool            $creating If is creating a new object.
         *
         * @return WP_Error|WC_Data
         */
        protected function prepare_object_for_database($request, $creating = false)
        {
        }
        /**
         * Prepare objects query.
         *
         * @since  3.0.0
         * @param  WP_REST_Request $request Full details about the request.
         * @return array
         */
        protected function prepare_objects_query($request)
        {
        }
        /**
         * Delete a variation.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return bool|WP_Error|WP_REST_Response
         */
        public function delete_item($request)
        {
        }
        /**
         * Prepare links for the request.
         *
         * @param WC_Data         $data_object Object data.
         * @param WP_REST_Request $request     Request object.
         *
         * @return array                   Links for the given post.
         */
        protected function prepare_links($data_object, $request)
        {
        }
        /**
         * Get the Variation's schema, conforming to JSON Schema.
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * Bulk update items.
         *
         * For now, we only support bulk update batch-items.
         * @todo: We can add create, delete support later.
         *
         * @since 3.7.13
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return array|bool|WP_Error Of WP_Error or WP_REST_Response.
         */
        public function batch_items($request)
        {
        }
        /**
         * Check batch limit.
         *
         * @since 3.7.13
         *
         * @param array $items Request items.
         *
         * @return bool|WP_Error
         */
        protected function check_batch_limit($items)
        {
        }
        /**
         * Get the batch variations schema, conforming to JSON Schema.
         *
         * @since 3.7.13
         *
         * @return array
         */
        public function get_batch_schema()
        {
        }
    }
    class RefundController extends \WP_REST_Controller
    {
        use \WeDevs\Dokan\Traits\RESTResponseError;
        /**
         * API namespace
         *
         * @since 3.0.0
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * API base
         *
         * @since 3.0.0
         *
         * @var string
         */
        protected $rest_base = 'refunds';
        /**
         * Register REST routes
         *
         * @since 3.0.0
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get refunds permission callback
         *
         * @since 3.0.0
         *
         * @param WP_REST_Request $request
         *
         * @return bool
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Update refund permission callback
         *
         * @since 3.0.0
         *
         * @param WP_REST_Request $request
         *
         * @return bool
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Delete refund permission callback
         *
         * @since 3.0.0
         *
         * @param WP_REST_Request $request
         *
         * @return bool
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Batch refunds permission callback
         *
         * @since 3.0.0
         *
         * @param WP_REST_Request $request
         *
         * @return bool
         */
        public function batch_items_permissions_check()
        {
        }
        /**
         * Get refunds
         *
         * @since 3.0.0
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|WP_Error
         */
        public function get_items($request)
        {
        }
        /**
         * Approve a refund request
         *
         * @since 3.0.0
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|WP_Error
         */
        public function approve_item($request)
        {
        }
        /**
         * Cancel a refund request
         *
         * @since 3.0.0
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|WP_Error
         */
        public function cancel_item($request)
        {
        }
        /**
         * Delete a refund
         *
         * @since 3.0.0
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response|WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * Approve, Pending and cancel bulk action
         * JSON data format for sending to API
         *     {
         *         "approved" : [
         *             "1", "9", "7"
         *         ],
         *         "pending" : [
         *             "2"
         *         ],
         *         "delete" : [
         *             "4"
         *         ],
         *         "cancelled" : [
         *             "5"
         *         ]
         *     }
         *
         * @since 2.8.0
         *
         * @return WP_Error|WP_REST_Response
         */
        public function batch_items($request)
        {
        }
        /**
         * Refund REST request item schema
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * Schema for batch processing
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_public_batch_schema()
        {
        }
        /**
         * Prepare refund for response
         *
         * @since 3.0.0
         *
         * @param \WeDevs\DokanPro\Refund\Refund $refund
         * @param WP_REST_Request               $request
         *
         * @return WP_REST_Response
         */
        public function prepare_item_for_response($refund, $request)
        {
        }
        /**
         * Format collection response
         *
         * @since 3.0.0
         *
         * @param WP_REST_Response $response
         * @param WP_REST_Request  $request
         * @param int               $total_items
         *
         * @return WP_REST_Response
         */
        public function format_collection_response($response, $request, $total_items)
        {
        }
        /**
         * Prepare links for the request.
         *
         * @since 3.0.0
         *
         * @param \WeDevs\DokanPro\Refund\Refund $object  Object data.
         * @param WP_REST_Request               $request Request object.
         *
         * @return array Links for the given post.
         */
        protected function prepare_links($refund, $request)
        {
        }
    }
    class ReportsController extends \WP_REST_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'reports';
        /**
         * Register all routes related with reports
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Check permission to view this report
         *
         * @since 2.8.0
         *
         * @param WP_REST_Request $request
         *
         * @return bool
         */
        public function check_sales_overview_permission($request)
        {
        }
        /**
         * Check permission to view this top_selling
         *
         * @since 2.8.0
         *
         * @return bool
         */
        public function check_top_selling_permission()
        {
        }
        /**
         * Check permission to view this top_selling
         *
         * @since 2.8.0
         *
         * @return bool
         */
        public function check_top_earners_permission()
        {
        }
        /**
         * Check permission to view this top_selling
         *
         * @since 2.8.0
         *
         * @return bool
         */
        public function check_report_summary_permission()
        {
        }
        /**
         * Get report summary
         *
         * @since 2.8.0
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function get_report_summary($request)
        {
        }
        /**
         * Get report data for Sales Overview
         *
         * @since 2.8.0
         * @since 3.8.0 rewritten whole method
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function get_sales_overview($request)
        {
        }
        /**
         * Get report data for Top Selling products
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function get_top_selling($request)
        {
        }
        /**
         * Get report data for Top Earning products
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function get_top_earners($request)
        {
        }
        /**
         * Get collection params
         *
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
    /**
     * Reviews API controller
     *
     * @package dokan
     * @since 2.8.0
     *
     * @author weDevs
     */
    class ReviewsController extends \WeDevs\Dokan\Abstracts\DokanRESTController
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'reviews';
        /**
         * Register all routes related with coupons
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Validate store
         *
         * @param mixed $value
         * @param \WP_REST_Request $request
         * @param string $param
         *
         * @since 2.9.5
         *
         * @return bool|\WP_Error
         */
        public function is_valid_store($value, $request, $param)
        {
        }
        /**
         * Get reviews permissions
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function get_reviews_permission_check()
        {
        }
        /**
         * Get reviews permissions
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function manage_reviews_permission_check()
        {
        }
        /**
         * Get reviews permissions
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function check_reviews_summary_permission()
        {
        }
        /**
         * Get all reviews
         *
         * @since 2.8.0
         *
         * @return object
         */
        public function get_reviews($request)
        {
        }
        /**
         * Create review permission callback
         *
         * @param \WP_REST_Request $request
         *
         * @since 2.9.5
         *
         * @return bool
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Validate rating
         *
         * @param mixed $value
         * @param \WP_REST_Request $request
         * @param string $param
         *
         * @since 2.9.5
         *
         * @return bool|\WP_Error
         */
        public function is_valid_rating($value, $request, $param)
        {
        }
        /**
         * Creates a store review
         *
         * @param \WP_REST_Request $request
         *
         * @since 2.9.5
         *
         * @return \WP_Error|\WP_REST_Response
         */
        public function create_item($request)
        {
        }
        /**
         * Manaage reviews
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function update_review_status($request)
        {
        }
        /**
         * Get review status
         *
         * @since 2.8.0
         *
         * @return mixed
         */
        public function get_status($request)
        {
        }
        /**
         * Get total count of comment
         *
         * @param $status
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function get_total_count($status)
        {
        }
        /**
         * Get review summary
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function get_reviews_summary($request)
        {
        }
        /**
         * Prepare a single product review output for response.
         *
         * @param WP_Comment $review Product review object.
         * @param WP_REST_Request $request Request object.
         *
         * @return WP_REST_Response $response Response data.
         */
        public function prepare_item_for_response($review, $request)
        {
        }
        /**
         * Get the Product Review's schema, conforming to JSON Schema.
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    /**
     * Shipping status api controller.
     *
     * @since 3.12.0
     */
    class ShippingStatusController extends \WP_REST_Controller
    {
        protected $namespace = 'dokan/v1';
        protected $rest_base = 'shipping-status';
        /**
         * Register the routes for the objects of the controller.
         *
         * @since 3.12.0
         */
        public function register_routes()
        {
        }
        /**
         * Retrieves shipping status.
         *
         * @since 3.12.0
         *
         * @param WP_REST_Request $request Rest request.
         *
         * @return WP_Error|WP_REST_Response
         */
        public function get_shipping_status(\WP_REST_Request $request)
        {
        }
        /**
         * Retrieves a list of items.
         *
         * @since 3.12.0
         *
         * @param WP_REST_Request $request Rest request.
         *
         * @return WP_Error|WP_REST_Response
         */
        public function get_items_by_order($request)
        {
        }
        /**
         * Create a shipping status.
         *
         * @since 3.12.0
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_REST_Response|WP_Error
         */
        public function create_item_by_order($request)
        {
        }
        /**
         * Retrieves a shipping status.
         *
         * @since 3.12.0
         *
         * @param WP_REST_Request $request Rest request.
         *
         * @return WP_Error|WP_REST_Response
         */
        public function get_item($request)
        {
        }
        /**
         * Updates a shipping status.
         *
         * @since 3.12.0
         *
         * @param WP_REST_Request $request Rest request.
         *
         * @return WP_Error|WP_REST_Response
         */
        public function update_item($request)
        {
        }
        /**
         * Delete Shipping status.
         *
         * @since 3.12.0
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error
         */
        public function delete_item($request)
        {
        }
        /**
         * Checks if a given request has permission to read shipping status.
         *
         * @since 3.12.0
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return true|WP_Error
         */
        public function get_shipping_status_permissions_check($request)
        {
        }
        /**
         * Checks if a given request has permission to read shipping status list.
         *
         * @since 3.12.0
         *
         * @param WP_REST_Request $request
         *
         * @return true|WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Checks if a given request has permission to create shipping status.
         *
         * @since 3.12.0
         *
         * @param WP_REST_Request $request
         *
         * @return true|WP_Error
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Checks if a given request has permission to get shipping status.
         *
         * @since 3.12.0
         *
         * @param WP_REST_Request $request
         *
         * @return true|WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Checks if a given request has permission to update shipping status.
         *
         * @since 3.12.0
         *
         * @param WP_REST_Request $request
         *
         * @return true|WP_Error
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Checks if a given request has permission to delete shipping status.
         *
         * @since 3.12.0
         *
         * @param WP_REST_Request $request
         *
         * @return true|WP_Error
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Prepare the item for the REST response.
         *
         * @param mixed           $item WordPress representation of the item.
         * @param WP_REST_Request $request Request object.
         *
         * @return WP_REST_Response $response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepare links for the request.
         *
         * @param stdClass $item data.
         * @param WP_REST_Request $request Request object.
         *
         * @return array Links for the given item.
         */
        protected function prepare_links($item, $request): array
        {
        }
        /**
         * Item schema.
         *
         * @return array
         */
        public function get_item_schema(): array
        {
        }
    }
    class StoreCategoryController extends \WP_REST_Terms_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @since 2.9.2
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route name
         *
         * @since 2.9.2
         *
         * @var string
         */
        protected $base = 'store-categories';
        /**
         * Taxonomy key.
         *
         * @since 2.9.2
         *
         * @var string
         */
        protected $taxonomy = 'store_category';
        /**
         * Class constructor
         *
         * @since 2.9.2
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Register routes
         *
         * @since 2.9.2
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get Categories
         *
         * @since 2.9.2
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * Get default store category
         *
         * @since 2.9.2
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function get_default_category($request)
        {
        }
        /**
         * Set default store category
         *
         * @since 2.9.2
         *
         * @param WP_REST_Request $request
         *
         * @return mixed
         */
        public function set_default_category($request)
        {
        }
    }
    /**
     * Store API Controller
     *
     * @package dokan
     *
     * @author  weDevs <info@wedevs.com>
     */
    class StoreController extends \WeDevs\Dokan\REST\StoreController
    {
        /**
         * Register all routes releated with stores
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Update_vendor_status.
         *
         * @since 1.0.0
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function update_vendor_status($request)
        {
        }
        /**
         * Batch udpate for vendor listing
         *
         * @since 2.8.0
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function batch_update($request)
        {
        }
        /**
         * Undocumented function.
         *
         * @since 1.0.0
         *
         * @return boolean
         */
        public function permission_check_for_manageable_part()
        {
        }
        /**
         * Get stats for the vendor
         *
         * @param WP_REST_Request $request
         *
         * @return boolean
         */
        public function permission_check_for_stats($request)
        {
        }
        /**
         * Fetch stats for the store
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function get_store_stats($request)
        {
        }
        /**
         * Send email to the vendor
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function send_email($request)
        {
        }
        /**
         * Get the current admin information
         * visiting the vendor page.
         *
         * @since 3.2.1
         *
         * @return WP_REST_Response
         */
        public function get_current_visitor_information()
        {
        }
    }
    class WithdrawControllerV2 extends \WeDevs\Dokan\REST\WithdrawControllerV2
    {
        /**
         * Register all routes releated with stores.
         *
         * @since 3.7.23
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Checks endpoint access permission.
         *
         * @since 3.7.23
         *
         * @return bool
         */
        public function get_permissions_check()
        {
        }
        /**
         * Returns withdraw disbursement data.
         *
         * @param WP_REST_Request $request
         *
         * @since 3.7.23
         *
         * @return WP_Error|WP_REST_Response
         */
        public function get_withdraw_disbursement(\WP_REST_Request $request)
        {
        }
        /**
         * Prepares withdraw disbursement data.
         *
         * @since 3.7.23
         *
         * @param array $schedule_data The schedule data.
         * @param WP_REST_Request $request Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function prepare_item_for_response($schedule_data, $request)
        {
        }
        /**
         * Saves withdraw disbursement.
         *
         * @since 3.7.23
         *
         * @param WP_REST_Request $requests Request object.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function save_withdraw_disbursement($requests)
        {
        }
        /**
         * Saves withdraw disbursement enable status.
         *
         * @since 3.7.23
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function save_withdraw_disbursement_disable_status()
        {
        }
        /**
         * Withdraw disbursement REST request item schema.
         *
         * @since 3.7.23
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * Withdraw disbursement REST request item schema
         *
         * @since 3.7.23
         *
         * @return array
         */
        public function get_item_schema_for_enable_status()
        {
        }
    }
}
namespace WeDevs\DokanPro\Refund {
    class Ajax
    {
        use \WeDevs\Dokan\Traits\AjaxResponseError;
        /**
         * Create refund request Ajax hook
         *
         * @since 3.0.0
         *
         * @param array $data
         *
         * @throws DokanException
         *
         * @return Refund|WP_Error
         */
        public static function create_refund_request($data)
        {
        }
        /**
         * Insert refund request via ajax
         *
         * @since 2.4.11
         * @since 3.0.0 Refactor with new refund api
         *
         * @return void
         */
        public static function dokan_refund_request($exception_handler = null)
        {
        }
        /**
         * Intercept wc ajax request from wp-admin product edit page
         *
         * @since 2.4.11
         * @since 3.0.0 Refactor with new refund api
         *
         * @return void
         */
        public static function intercept_wc_ajax_request()
        {
        }
        /**
         * Exception handler for WC error response
         *
         * @since 3.0.0
         *
         * @param \Exception $e
         *
         * @return void
         */
        public static function wc_ajax_request_error_handler(\Exception $e)
        {
        }
    }
    class Hooks
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Hooks related to Dokan Pro Refund
         *
         * @since 3.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * After refund approval hook
         *
         * @since 3.0.0
         *
         * @param \WeDevs\DokanPro\Refund\Refund $refund
         *
         * @return void
         */
        public static function after_refund_approved($refund)
        {
        }
        /**
         * @since 3.3.2
         *
         * @param \WeDevs\DokanPro\Refund\Refund $refund
         *
         * @param bool                           $ret
         *
         * @return bool
         */
        public function exclude_cod_payment($ret, $refund)
        {
        }
        /**
         * Add an Order note on refund request create.
         *
         * @since 3.4.2
         *
         * @param Refund $refund
         *
         * @return void
         */
        public function add_order_note_on_refund_request_create($refund)
        {
        }
    }
    class Manager
    {
        /**
         * Get a collection of Dokan refunds
         *
         * @since 3.0.0
         *
         * @param array $args
         *
         * @return array|object Return an object with `total` and `max_num_pages` when `paginate` arg
         *                      is provided
         */
        public function all($args = [])
        {
        }
        /**
         * Get a single refund object
         *
         * @since 3.0.0
         *
         * @param int $id
         *
         * @return Refund|null
         */
        public function get($id)
        {
        }
        /**
         * Create a refund
         *
         * @since 3.0.0
         *
         * @param array $args
         *
         * @return Refund|WP_Error
         */
        public function create($args)
        {
        }
        /**
         * Get refund statuses
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_statuses()
        {
        }
        /**
         * Get status code by status name
         *
         * @since 3.0.0
         *
         * @param string
         *
         * @return integer
         */
        public function get_status_code($status)
        {
        }
        /**
         * Get status codes
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_status_codes()
        {
        }
        /**
         * Get status names
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_status_names()
        {
        }
        /**
         * Get status code name for a code number
         *
         * @since 3.0.0
         *
         * @param int $status_code
         *
         * @return string
         */
        public function get_status_name($status_code)
        {
        }
        /**
         * Refund status counts for a seller
         *
         * @since 3.0.0
         *
         * @param int $seller_id
         *
         * @return array
         */
        public function get_status_counts($seller_id = null)
        {
        }
        /**
         * Find if an order has any pending request
         *
         * @since 3.0.0
         *
         * @param int $order_id
         *
         * @return bool
         */
        public function has_pending_request($order_id)
        {
        }
        /**
         * Checks if an order is eligible to approve
         *
         * @since 3.0.0
         *
         * @param int $order_id
         *
         * @return bool
         */
        public function is_approvable($order_id)
        {
        }
    }
    /**
     * Class AutomaticRefundProcess
     *
     * Processing refund request and refunding with API automatically for
     * non Dokan payment gateways.
     *
     * @since   3.3.7
     *
     * @package WeDevs\DokanPro\Refund
     */
    class ProcessAutomaticRefund
    {
        use \WeDevs\Dokan\Traits\Singleton;
        /**
         * Excludes payment gateways from auto process API refund.
         *
         * @since 3.10.2
         *
         * @return array
         */
        public function excluded_dokan_payment_gateways()
        {
        }
        /**
         * Process Refund request after creation.
         *
         * If the refund auto process settings is `true` means it is a refund request for
         * API processing if the gateway allows it.
         *
         * @since 3.3.7
         * @since 3.4.2 Manual refund button support added. We are no longer automatically approving the refund request.
         *
         * @param Refund $refund Created refund request.
         *
         * @return void|WP_Error
         */
        public function auto_approve_api_refund_request($refund)
        {
        }
        /**
         * Is auto refund request processing enabled from admin.
         *
         * @since 3.3.7
         * @since 3.9.1 Value changed from admin settings to `true` and filter support added.
         *
         * @return bool
         */
        public function is_auto_refund_process_enabled(): bool
        {
        }
        /**
         * Check if gateway can process refund.
         *
         * @since 3.3.7
         *
         * @param Refund $refund
         *
         * @return bool
         */
        public function is_auto_refundable_gateway($refund)
        {
        }
        /**
         * Set api_refund in refund.
         *
         * @since 3.3.7
         * @since 3.4.2 Manual refund button support added.
         *
         * @param bool   $api_refund
         * @param Refund $refund
         *
         * @return bool
         */
        public function set_auto_process_api_refund($api_refund, $refund)
        {
        }
        /**
         * Is excluded payment gateway.
         *
         * @since 3.9.1
         *
         * @param string $payment_method Payment method ID
         *
         * @return bool
         */
        public function is_excluded_payment_gateway(string $payment_method): bool
        {
        }
    }
    class Refund extends \WeDevs\Dokan\Abstracts\DokanModel
    {
        /**
         * The model data
         *
         * @since 3.0.0
         *
         * @var array
         */
        protected $data = [];
        /**
         * Class constructor
         *
         * @since 3.0.0
         *
         * @param array $data
         */
        public function __construct($data = [])
        {
        }
        /**
         * Set model data
         *
         * @since 3.0.0
         *
         * @param array $data
         *
         * @return void
         */
        protected function set_data($data)
        {
        }
        /**
         * Set `id` property
         *
         * @since 3.0.0
         *
         * @param int $id
         *
         * @return Refund
         */
        public function set_id($id)
        {
        }
        /**
         * Set `order_id` property
         *
         * @since 3.0.0
         *
         * @param int $order_id
         *
         * @return Refund
         */
        public function set_order_id($order_id)
        {
        }
        /**
         * Set `seller_id` property
         *
         * @since 3.0.0
         *
         * @param int $seller_id
         *
         * @return Refund
         */
        public function set_seller_id($seller_id)
        {
        }
        /**
         * Set `refund_amount` property
         *
         * @since 3.0.0
         *
         * @param string $refund_amount
         *
         * @return Refund
         */
        public function set_refund_amount($refund_amount)
        {
        }
        /**
         * Set `refund_reason` property
         *
         * @since 3.0.0
         *
         * @param string $refund_reason
         *
         * @return Refund
         */
        public function set_refund_reason($refund_reason)
        {
        }
        /**
         * Set `item_qtys` property
         *
         * @since 3.0.0
         *
         * @param array $item_qtys
         *
         * @return Refund
         */
        public function set_item_qtys($item_qtys)
        {
        }
        /**
         * Set `item_totals` property
         *
         * @since 3.0.0
         *
         * @param array $item_totals
         *
         * @return Refund
         */
        public function set_item_totals($item_totals)
        {
        }
        /**
         * Set `item_tax_totals` property
         *
         * @since 3.0.0
         *
         * @param array $item_tax_totals
         *
         * @return Refund
         */
        public function set_item_tax_totals($item_tax_totals)
        {
        }
        /**
         * Set `restock_items` property
         *
         * @since 3.0.0
         *
         * @param array $restock_items
         *
         * @return Refund
         */
        public function set_restock_items($restock_items)
        {
        }
        /**
         * Set `date` property
         *
         * @since 3.0.0
         *
         * @param string $set_date
         *
         * @return Refund
         */
        public function set_date($date)
        {
        }
        /**
         * Set `status` property
         *
         * @since 3.0.0
         *
         * @param string $set_status
         *
         * @return Refund
         */
        public function set_status($status)
        {
        }
        /**
         * Set `method` property
         *
         * @since 3.0.0
         *
         * @param string $set_method
         *
         * @return Refund
         */
        public function set_method($method)
        {
        }
        /**
         * Get `id` property
         *
         * @since 3.0.0
         *
         * @return int
         */
        public function get_id()
        {
        }
        /**
         * Get `order_id` property
         *
         * @since 3.0.0
         *
         * @return int
         */
        public function get_order_id()
        {
        }
        /**
         * Get `seller_id` property
         *
         * @since 3.0.0
         *
         * @return int
         */
        public function get_seller_id()
        {
        }
        /**
         * Get `refund_amount` property
         *
         * @since 3.0.0
         *
         * @return string
         */
        public function get_refund_amount()
        {
        }
        /**
         * Get `refund_reason` property
         *
         * @since 3.0.0
         *
         * @return string
         */
        public function get_refund_reason()
        {
        }
        /**
         * Get `item_qtys` property
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_item_qtys()
        {
        }
        /**
         * Get `item_totals` property
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_item_totals()
        {
        }
        /**
         * Get `item_tax_totals` property
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_item_tax_totals()
        {
        }
        /**
         * Get `restock_items` property
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_restock_items()
        {
        }
        /**
         * Get `date` property
         *
         * @since 3.0.0
         *
         * @return string
         */
        public function get_date()
        {
        }
        /**
         * Get `status` property
         *
         * @since 3.0.0
         *
         * @return string
         */
        public function get_status()
        {
        }
        /**
         * Get `status_name` property
         *
         * @since 3.0.0
         *
         * @return string
         */
        public function get_status_name()
        {
        }
        /**
         * Get `method` property
         *
         * @since 3.0.0
         *
         * @return string
         */
        public function get_method()
        {
        }
        /**
         * Prepare model for DB insertion
         *
         * @since 3.0.0
         * @since 3.4.2 Refund method changed to `1` for API, `0` for manual.
         *
         * @return array
         */
        protected function prepare_for_db()
        {
        }
        /**
         * Save a model
         *
         * @since 3.0.0
         *
         * @return Refund
         */
        public function save()
        {
        }
        /**
         * Create a model
         *
         * @since 3.0.0
         *
         * @return Refund|WP_Error
         */
        protected function create()
        {
        }
        /**
         * Update a model
         *
         * @since 3.0.0
         *
         * @return Refund|WP_Error
         */
        protected function update()
        {
        }
        /**
         * Delete a model
         *
         * @since 3.0.0
         *
         * @return Refund|WP_Error
         */
        public function delete()
        {
        }
        /**
         * Approve a refund
         *
         * @since 3.0.0
         *
         * @param array $args
         *
         * @throws Exception
         *
         * @return Refund|WP_Error
         */
        public function approve($args = [])
        {
        }
        /**
         * Cancel a refund request
         *
         * @since 3.0.0
         * @since 3.3.6 Adding Order note to suborder and parent order.
         *
         * @return Refund|WP_Error
         */
        public function cancel()
        {
        }
        /**
         * Check if refund is via API.
         *
         * @since 3.4.2
         *
         * @return bool
         */
        public function is_via_api()
        {
        }
        /**
         * Check if refund is manual.
         *
         * @since 3.4.2
         *
         * @return bool
         */
        public function is_manual()
        {
        }
    }
    /**
     * Refund Cache class.
     *
     * Manage all caches for refund.
     *
     * @since 3.4.2
     *
     * @see \WeDevs\Dokan\Cache
     */
    class RefundCache
    {
        public function __construct()
        {
        }
        /**
         * Clear Refund Related caches.
         *
         * @since 3.4.2
         *
         * @param Refund $refund
         *
         * @return void
         */
        public function clear_refund_cache($refund)
        {
        }
        /**
         * Clear Refund caches after woocommerce order.
         *
         * @since 3.4.2
         *
         * @param int $order_id
         *
         * @return void
         */
        public function after_woocommerce_order_refunded($order_id)
        {
        }
        /**
         * Delete refund caches.
         *
         * @since 3.4.2
         *
         * @param int $seller_id
         *
         * @return void
         */
        public static function delete($seller_id)
        {
        }
    }
    class Refunds
    {
        const STATUS_PENDING = 0;
        const STATUS_COMPLETED = 1;
        const STATUS_CANCELLED = 2;
        /**
         * Query arguments
         *
         * @var array
         */
        protected $args = [];
        /**
         * Refund results
         *
         * @var array
         */
        protected $refunds = [];
        /**
         * Total refund found
         *
         * @var null|int
         */
        protected $total = null;
        /**
         * Maximum number of pages
         *
         * @var null|int
         */
        protected $max_num_pages = null;
        /**
         * Class constructor
         *
         * @since 3.0.0
         *
         * @param array $args
         *
         * @return void
         */
        public function __construct($args = [])
        {
        }
        /**
         * Get refunds
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_refunds()
        {
        }
        /**
         * Query refunds
         *
         * @since 3.0.0
         *
         * @return $this
         */
        public function query()
        {
        }
        /**
         * Get total number of refunds
         *
         * @since 3.0.0
         *
         * @return int
         */
        public function get_total()
        {
        }
        /**
         * Get maximum number of pages
         *
         * @since 3.0.0
         *
         * @return int
         */
        public function get_maximum_num_pages()
        {
        }
    }
    /**
     * A helper class to mimic WP_REST_Request
     *
     * Useful when a request comes from other than REST, for example Ajax request.
     *
     * @see \WeDevs\DokanPro\Refund\Ajax for usage
     */
    class Request implements \ArrayAccess
    {
        /**
         * The refund model
         *
         * @since 3.0.0
         *
         * @var null|Refund
         */
        protected $model = null;
        /**
         * Required params
         *
         * @since 3.0.0
         *
         * @var null|array
         */
        protected $required = null;
        /**
         * Errors during request process
         *
         * @since 3.0.0
         *
         * @var null|WP_Error
         */
        protected $error = null;
        /**
         * Class constructor
         *
         * @since 3.0.0
         *
         * @param array $data
         */
        public function __construct($data)
        {
        }
        /**
         * ArrayAccess method override
         *
         * @since 3.0.0
         *
         * @param string $offset
         *
         * @return bool
         */
        public function offsetExists($offset): bool
        {
        }
        /**
         * ArrayAccess offset method override
         *
         * @since 3.0.0
         *
         * @param string $offset
         * @param mixed  $value
         *
         * @return void
         */
        #[\ReturnTypeWillChange]
        public function offsetSet($offset, $value)
        {
        }
        /**
         * ArrayAccess method override
         *
         * @since 3.0.0
         *
         * @param string $offset
         *
         * @return mixed
         */
        #[\ReturnTypeWillChange]
        public function offsetGet($offset)
        {
        }
        /**
         * ArrayAccess method override
         *
         * @since 3.0.0
         *
         * @param string $offset
         *
         * @return void
         */
        #[\ReturnTypeWillChange]
        public function offsetUnset($offset)
        {
        }
        /**
         * Get the refund model
         *
         * @since 3.0.0
         *
         * @return Refund
         */
        public function get_model()
        {
        }
        /**
         * Get model data
         *
         * @since 3.0.0
         *
         * @return array
         */
        public function get_params()
        {
        }
        /**
         * Set model param/data
         *
         * @since 3.0.0
         *
         * @param string $param
         * @param mixed  $value
         *
         * @return void
         */
        public function set_param($param, $value)
        {
        }
        /**
         * Get a model param value
         *
         * @since 3.0.0
         *
         * @param string $param
         *
         * @return mixed
         */
        public function get_param($param)
        {
        }
        /**
         * Add error
         *
         * @since 3.0.0
         *
         * @param WP_Error $error
         *
         * @return void
         */
        protected function add_error($error)
        {
        }
        /**
         * Set required fields/params
         *
         * @since 3.0.0
         *
         * @param array $required
         *
         * @return void
         */
        public function set_required($required)
        {
        }
        /**
         * Checks if Request has any error
         *
         * @since 3.0.0
         *
         * @return bool
         */
        public function has_error()
        {
        }
        /**
         * Get request error
         *
         * @since 3.0.0
         *
         * @return WP_Error
         */
        public function get_error()
        {
        }
        /**
         * Validate a request
         *
         * @since 3.0.0
         *
         * @return void
         */
        public function validate()
        {
        }
        /**
         * Sanitize a request
         *
         * @since 3.0.0
         *
         * @return void
         */
        public function sanitize()
        {
        }
        /**
         * Validate amount for over issue.
         *
         * @param array $data Refund request data.
         *
         * @since 3.2.3
         * @since 3.3.3 Approvable and pending request validation added.
         * @since 3.3.3 LineItem name added with validation message.
         *
         * @return bool
         */
        public function validate_refund_amount($data): bool
        {
        }
    }
    class Sanitizer
    {
        /**
         * Sanitize amount
         *
         * @since 3.0.0
         *
         * @param string $amount
         *
         * @return string
         */
        protected static function sanitize_amount($amount)
        {
        }
        /**
         * Sanitize id
         *
         * @since 3.0.0
         *
         * @param int $id
         *
         * @return int
         */
        public static function sanitize_id($id)
        {
        }
        /**
         * Sanitize order_id
         *
         * @since 3.0.0
         *
         * @param int $order_id
         *
         * @return int
         */
        public static function sanitize_order_id($order_id)
        {
        }
        /**
         * Sanitize refund_amount
         *
         * @since 3.0.0
         *
         * @param string $refund_amount
         *
         * @return string
         */
        public static function sanitize_refund_amount($refund_amount)
        {
        }
        /**
         * Sanitize refund_reason
         *
         * @since 3.0.0
         *
         * @param string $refund_reason
         *
         * @return string
         */
        public static function sanitize_refund_reason($refund_reason)
        {
        }
        /**
         * Sanitize item_qtys
         *
         * @since 3.0.0
         *
         * @param string|array $item_qtys
         *
         * @return array
         */
        public static function sanitize_item_qtys($item_qtys)
        {
        }
        /**
         * Sanitize item_totals
         *
         * @since 3.0.0
         *
         * @param string|array $item_totals
         *
         * @return array
         */
        public static function sanitize_item_totals($item_totals)
        {
        }
        /**
         * Sanitize item_tax_totals
         *
         * @since 3.0.0
         *
         * @param mixed $item_tax_totals
         *
         * @return array
         */
        public static function sanitize_item_tax_totals($item_tax_totals)
        {
        }
        /**
         * Sanitize restock_items
         *
         * @since 3.0.0
         *
         * @param mixed $restock_items
         *
         * @return array|null|mixed
         */
        public static function sanitize_restock_items($restock_items)
        {
        }
        /**
         * Sanitize date
         *
         * @since 3.0.0
         *
         * @param string $date
         *
         * @return string
         */
        public static function sanitize_date($date)
        {
        }
        /**
         * Sanitize status
         *
         * @since 3.0.0
         *
         * @param string $status
         *
         * @return int
         */
        public static function sanitize_status($status)
        {
        }
    }
    class Validator
    {
        /**
         * Validate id
         *
         * @since 3.0.0
         *
         * @param int $id
         *
         * @return bool|WP_Error
         */
        public static function validate_id($id)
        {
        }
        /**
         * Validate order_id
         *
         * @since 3.0.0
         *
         * @param int $id
         *
         * @return bool|WP_Error
         */
        public static function validate_order_id($order_id)
        {
        }
        /**
         * Validate refund_amount
         *
         * @since 3.0.0
         *
         * @param string  $refund_amount
         * @param Request $request
         *
         * @return bool|WP_Error
         */
        public static function validate_refund_amount($refund_amount, $request)
        {
        }
        /**
         * Validate item_qtys
         *
         * @since 3.0.0
         *
         * @param array   $item_qtys
         * @param Request $request
         *
         * @return bool|WP_Error
         */
        public static function validate_item_qtys($item_qtys, $request)
        {
        }
        /**
         * Validate item_totals
         *
         * @since 3.0.0
         *
         * @param array   $item_totals
         * @param Request $request
         *
         * @return bool|WP_Error
         */
        public static function validate_item_totals($item_totals, $request)
        {
        }
    }
}
namespace WeDevs\DokanPro {
    /**
     * Dokan Pro Report Class
     *
     * @since 2.4
     *
     * @package dokan
     */
    class Reports
    {
        /**
         * Load automatically when class inistantiate
         *
         * @since 2.4
         *
         * @uses actions|filter hooks
         */
        public function __construct()
        {
        }
        /**
         * Export statement
         *
         * @return void
         */
        public function handle_statement()
        {
        }
        /**
         * Show Seller Enable Error Message
         *
         * @since 2.4
         *
         * @return void
         */
        public function show_seller_enable_message()
        {
        }
        /**
         * Add Report Menu
         *
         * @since 2.4
         *
         * @param array $urls
         *
         * @return array
         */
        public function add_reports_menu($urls)
        {
        }
        /**
         * Load Report Main Template
         *
         * @since 2.4
         *
         * @param  array $query_vars
         *
         * @return void
         */
        public function load_reports_template($query_vars)
        {
        }
        /**
         * Render Report Header Template
         *
         * @since 2.4
         *
         * @return void
         */
        public function report_header_render()
        {
        }
        /**
         * Render Review Content
         *
         * @return void
         */
        public function render_review_content()
        {
        }
        /**
         * Returns the definitions for the reports and charts
         *
         * @since 1.0
         *
         * @return array
         */
        protected function get_reports_charts()
        {
        }
        /**
         * Download exported log file
         *
         * @since 3.4.1
         */
        public function download_log_export_file()
        {
        }
    }
}
namespace WeDevs\DokanPro\Reports {
    /**
     * Dokan Reports Manager Class
     *
     * @since 3.8.0
     */
    class Manager extends \WC_Admin_Report
    {
        /**
         * Get the current range and calculate the start and end dates.
         *
         * @since 3.8.0
         *
         * @param  string $current_range Type of range.
         */
        public function calculate_current_range($current_range)
        {
        }
        /**
         * Check nonce for current range.
         *
         * @since  3.8.0
         *
         * @param  string $current_range Current range.
         */
        public function check_current_range_nonce($current_range)
        {
        }
        /**
         * Output the report.
         *
         * @since 3.8.0
         *
         * @return void
         */
        public function output_report()
        {
        }
        /**
         * Get sales overview data
         *
         * @since 3.8.0
         *
         * @param int    $seller_id
         * @param string $start_date
         * @param string $end_date
         *
         * @return array
         */
        public function get_top_selling_data($seller_id, $start_date, $end_date)
        {
        }
        /**
         * Get top earners data
         *
         * @since 3.8.0
         *
         * @param int    $seller_id
         * @param string $start_date
         * @param string $end_date
         *
         * @return array
         */
        public function get_top_earners_data($seller_id, $start_date, $end_date)
        {
        }
    }
    /**
     * SalesByDate class.
     *
     * @since 3.8.0
     */
    class SalesByDate extends \WeDevs\DokanPro\Reports\Manager
    {
        /**
         * Chart colors.
         *
         * @since 3.8.0
         *
         * @var array
         */
        public $chart_colours = [];
        /**
         * Chart Heading
         *
         * @since 3.8.0
         *
         * @var string|null
         */
        public $heading;
        /**
         * Show or hide chart legend.
         *
         * @since 3.8.0
         *
         * @var true
         */
        public $hide_sidebar;
        /**
         * Date range.
         *
         * @since 3.8.0
         *
         * @var string
         */
        public $current_range = 'custom';
        /**
         * Get report data.
         *
         * @since 3.8.0
         *
         * @param int|null $seller_id
         *
         * @return stdClass
         */
        public function get_report_data($seller_id = null)
        {
        }
        /**
         * Get the legend for the main chart sidebar.
         *
         * @since 3.8.0
         *
         * @return array
         */
        public function get_chart_legend()
        {
        }
        /**
         * Output the report.
         *
         * @since 3.8.0
         *
         * @return void
         */
        public function output_report()
        {
        }
        /**
         * Get the main chart.
         *
         * @since 3.8.0
         *
         * @return void
         */
        public function get_main_chart()
        {
        }
    }
}
namespace WeDevs\DokanPro {
    /**
     * Class ReverseWithdrawal
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro
     */
    class ReverseWithdrawal
    {
        /**
         * Class constructor
         *
         * @since 3.6.1
         */
        public function __construct()
        {
        }
        /**
         * This method will remove delivery time module section from checkout page
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function remove_delivery_time_section_from_checkout()
        {
        }
        /**
         * This method will send an announcement to vendor when balance threshold is exceeded
         *
         * @since 3.6.1
         *
         * @param int $vendor_id
         * @param array $balance
         *
         * @return void
         */
        public function send_balance_threshold_exceeded_announcement($vendor_id, $due_status)
        {
        }
        /**
         * After refund request approved
         *
         * @since 3.6.1
         *
         * @param Refund $refund
         * @param array $args
         * @param float $vendor_refund
         *
         * @return void
         */
        public function after_refund_request_approved($refund, $args, $vendor_refund)
        {
        }
    }
    class Review
    {
        /**
         * Load automatically when class inistantiate
         *
         * @since 2.4
         *
         * @uses actions|filter hooks
         */
        public function __construct()
        {
        }
        /**
         * Show Seller Enable Error Message
         *
         * @since 2.4
         *
         * @return void
         */
        public function show_seller_enable_message()
        {
        }
        /**
         * Add Review menu
         *
         * @param array $urls
         *
         * @since 2.4
         *
         * @return array $urls
         */
        public function add_review_menu($urls)
        {
        }
        /**
         * Load Review template
         *
         * @since 2.4
         *
         * @param  array $query_vars
         *
         * @return void [require once template]
         */
        public function load_review_template($query_vars)
        {
        }
        /**
         * Render Review Template Header content
         *
         * @since 2.4
         *
         * @return void
         */
        public function dokan_review_header_render()
        {
        }
        /**
         * Render dokan review content
         *
         * @since  2.4
         *
         * @return void
         */
        public function dokan_review_content_render()
        {
        }
        /**
         * Counting spam, pending, trash and save it private variable
         *
         * @since 2.4
         *
         * @global object $wpdb
         * @global object $current_user
         *
         * @param string  $post_type
         *
         * @return void
         */
        public function get_count($post_type)
        {
        }
        /**
         * Hanlde Ajax Comment Status
         *
         * @since 2.4
         *
         * @return josn
         */
        public function ajax_comment_status()
        {
        }
        /**
         * Reviews View
         *
         * Reviews Comments this shortcode activation function
         *
         * @since 2.4
         *
         * @return void
         */
        public function reviews_view()
        {
        }
        /**
         * Dokan Render Review Status filter
         *
         * @since 2.4
         *
         * @param  string $post_type
         * @param  object $counts
         *
         * @return void
         */
        public function dokan_review_status_filter($post_type, $counts)
        {
        }
        /**
         * Render Review Listing content
         *
         * @since 2.4
         * @since 3.7.13 Updated method name from 'dokan_review_content_listing' to 'review_content_listing'.
         *
         * @param string $post_type
         *
         * @return void
         */
        public function review_content_listing($post_type)
        {
        }
        /**
         * Show manage reviews form.
         *
         * @since 3.7.13
         *
         * @param string $comment_status
         *
         * @return void
         */
        public function render_manage_reviews_form($comment_status = 'all')
        {
        }
        /**
         * Render Reviews Edit underscores template
         *
         * @since 2,4
         *
         * @return void
         */
        public function dokan_render_listing_table_script_template()
        {
        }
        /**
         * Pagination
         *
         * @since 2.4
         *
         * @param string  $post_type
         *
         * @return string
         */
        public function pagination($post_type)
        {
        }
        /**
         * Review Pagination
         *
         * @since 2.4
         * @since 3.3.4 `$wp_query` used for pagination generation.
         *
         * @param int     $id
         * @param string  $post_type
         * @param int     $limit
         * @param string  $status
         *
         * @return string
         */
        public function review_pagination($id, $post_type, $limit, $status)
        {
        }
        /**
         * Review Pagination with query param
         *
         * @since 3.3.4
         *
         * @param int     $id
         * @param string  $post_type
         * @param int     $limit
         * @param string  $status
         *
         * @return string
         */
        public function review_pagination_with_query($id, $post_type, $limit, $status, $pagenum = 1)
        {
        }
        /**
         * Render Page status
         *
         * Return current page status.
         * Is it panding, spam, trash or all
         *
         * @since 2.4
         *
         * @return string
         */
        public function page_status()
        {
        }
        /**
         * Get Comment Status
         *
         * @since 2.4
         *
         * @param  string $status
         *
         * @return string
         */
        public function get_comment_status($status)
        {
        }
        /**
         * Return all comments by comments status
         *
         * @since 2.4
         *
         * @global object $current_user
         * @global object $wpdb
         *
         * @param string  $post_type
         *
         * @return string
         */
        public function dokan_render_listing_table_body($post_type)
        {
        }
        /**
         * Comment Query
         *
         * @since 2.4
         *
         * @param  integer $id
         * @param  string $post_type
         * @param  integer $limit
         * @param  string $status
         *
         * @return object
         */
        public function comment_query($id, $post_type, $limit, $status, $offset = false)
        {
        }
        /**
         * Render Comments Row
         *
         * @since 2.4
         *
         * @param  object $comment
         * @param  string $post_type
         *
         * @return void
         */
        public function render_row($comment, $post_type)
        {
        }
        /**
         * Update Comment via Ajax
         *
         * @since 2.4
         *
         * @return josn
         */
        public function ajax_update_comment()
        {
        }
        /**
         * Process bulk action
         *
         * @since 2.4
         */
        public function handle_status()
        {
        }
        /**
         * Show Comment filter menu
         *
         * @since 2.4
         *
         * @param string  $post_type
         *
         * @return void
         */
        public function review_comments_menu($post_type, $counts)
        {
        }
        /**
         * Count all, pending, spam, trash Comments
         *
         * @since 2.4
         *
         * @param string $post_type
         * @param string $status
         *
         * @return object
         */
        public function count_status($post_type, $status)
        {
        }
        public function render_store_tab_comment_list($comments, $store_id)
        {
        }
        /**
         * Clear review cache, on create new review.
         *
         * @since 3.4.2
         *
         * @param int        $comment_id
         * @param int|string $comment_approved
         * @param array      $comment_data
         *
         * @return void
         */
        public function clear_review_cache($comment_id, $comment_approved, $comment_data)
        {
        }
    }
    /**
     * Dokan Pro Template Settings class
     *
     * @since 2.4
     *
     * @package dokan
     */
    class Settings extends \WeDevs\Dokan\Dashboard\Templates\Settings
    {
        /**
         * Load automatically when class initiate
         *
         * @since 2.4
         *
         * @uses actions hook
         * @uses filter hook
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Settings related hooks.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * filter_nav_active
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function filter_nav_active($active_menu, $request, $active)
        {
        }
        /**
         * Load Settings Menu for Pro
         *
         * @since 2.4
         *
         * @param  array $sub_settins
         *
         * @return array
         */
        public function load_settings_menu($sub_settins)
        {
        }
        /**
         * Load Settings Template
         *
         * @since 2.4
         *
         * @param  string $template
         * @param  array $query_vars
         *
         * @return void
         */
        public function load_settings_template($template, $query_vars)
        {
        }
        /**
         * Load Settings Header
         *
         * @since 2.4
         *
         * @param  string $header
         * @param  array $query_vars
         *
         * @return string
         */
        public function load_settings_header($header, $query_vars)
        {
        }
        /**
         * Load Settings Progressbar
         *
         * @since 2.4
         *
         * @param  $array $query_vars
         *
         * @return void
         */
        public function render_pro_settings_load_progressbar()
        {
        }
        /**
         * Add progressbar in settings save feedback message
         *
         * @since 2.4
         *
         * @param array $message
         *
         * @return array
         */
        public function add_progressbar_in_settings_save_response($message)
        {
        }
        /**
         * Load Settings page helper
         *
         * @since 2.4
         *
         * @param  string $help_text
         * @param  array $query_vars
         *
         * @return string
         */
        public function load_settings_helper_text($help_text, $query_vars)
        {
        }
        /**
         * Load Settings Content
         *
         * @since 2.4
         *
         * @param  array $query_vars
         *
         * @return void
         */
        public function load_settings_content($query_vars)
        {
        }
        /**
         * Load Social Page Content
         *
         * @since 2.4
         *
         * @return void
         */
        public function load_social_content()
        {
        }
        /**
         * Load Shipping Page Content
         *
         * @since 2.4
         *
         * @return void
         */
        public function load_shipping_content()
        {
        }
        /**
         * Render Shipping status message
         *
         * @since 2.4
         *
         * @return void
         */
        public function render_shipping_status_message()
        {
        }
        /**
         * Load SEO Content
         *
         * @since 2.4
         *
         * @return void
         */
        public function load_seo_content()
        {
        }
        /**
         * Save doscount settings data
         *
         * @since 2.6
         *
         * @return void
         **/
        public function save_store_data($store_id, $dokan_settings = [])
        {
        }
        /**
         * Calculate Profile Completeness meta value
         *
         * @since 2.1
         *
         * @param  array  $dokan_settings
         *
         * @return array
         */
        public function calculate_profile_completeness_value($dokan_settings)
        {
        }
        /**
         * Render biography form
         *
         * @since 2.9.10
         *
         * @return void
         */
        public function render_biography_form($vendor_id, $store_info)
        {
        }
        /**
         * Save biography data
         *
         * @since 2.9.10
         *
         * @return void
         */
        public function save_biography_data($vendor_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\SettingsApi {
    /**
     * Dokan Pro Vendor Settings API Manager.
     *
     * @since 3.7.13
     */
    class Manager
    {
        /**
         * Constructor
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Initialize settings class instance.
         *
         * @since 3.7.13
         *
         * @return void
         */
        public function init()
        {
        }
    }
    /**
     * Store settings page.
     *
     * @since 3.7.13
     */
    class Store
    {
        /**
         * Constructor.
         *
         * @since 3.7.13
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add biography card api to vendor settings
         *
         * @since 3.7.13
         *
         * @param array $settings array of settings.
         *
         * @return array
         */
        public function add_biography_card_api(array $settings): array
        {
        }
        /**
         * Add store category to business info card.
         *
         * @since 3.7.13
         *
         * @param array $business_info_card array of settings.
         *
         * @return array
         */
        public function add_store_category_to_business_info_card(array $business_info_card): array
        {
        }
        /**
         * Add support card to advance tab.
         *
         * @since 3.7.13
         *
         * @param array $advance_tab Advance tab data.
         *
         * @return array
         */
        public function add_support_card_to_vendor_settings_api(array $advance_tab): array
        {
        }
        /**
         * Add storewide discount to advance tab.
         *
         * @since 3.7.13
         *
         * @param array $advance_tab Advance tab data.
         *
         * @return array
         */
        public function add_storewide_discount_card_to_vendor_settings_api(array $advance_tab): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Shipping {
    /**
     * Manages dokan free shipping.
     *
     * @since 3.11.2
     */
    class FreeShippingHandler
    {
        /**
         * Shipping package for a specific vendor.
         *
         * @var array
         *
         * @since 3.11.2
         */
        protected array $shipping_package;
        /**
         * Min amount to be valid.
         *
         * @var integer
         *
         * @since 3.11.2
         */
        protected $min_amount = 0;
        /**
         * Requires option.
         *
         * @var string
         *
         * @since 3.11.2
         */
        protected $requires = '';
        /**
         * Ignore discounts.
         *
         * If set, free shipping would be available based on pre-discount order amount.
         *
         * @var string
         *
         * @since 3.11.2
         */
        protected string $ignore_discounts;
        /**
         * Free shipping availability.
         *
         * @var bool Indicates if free shipping is available.
         *
         * @since 3.11.2
         */
        protected bool $is_available = false;
        /**
         * Remaining value from free shipping.
         *
         * @var float Remaining amount to qualify for free shipping.
         *
         * @since 3.11.2
         */
        protected float $remaining = 0.0;
        /**
         * Check coupon need for availability.
         *
         * @var bool Indicates if a coupon is needed for free shipping.
         *
         * @since 3.11.2
         */
        protected bool $needs_coupon = false;
        /**
         * Coupon seller id.
         *
         * @var int
         *
         * @since 3.11.2
         */
        protected int $vendor_id = 0;
        /**
         * Check the coupon scope.
         *
         * @var bool
         *
         * @since 3.11.2
         */
        protected bool $is_admin_shipping = false;
        /**
         * Initializes the FreeShipping object.
         *
         * @since 3.11.2
         *
         * @param \WC_Shipping_Free_Shipping|array $method
         * @param array                            $shipping_package
         *
         * @return void
         */
        public function __construct($method, array $shipping_package)
        {
        }
        /**
         * Check and set free shipping eligibility based on the conditions.
         *
         * This method checks if the current shipping package qualifies for free shipping
         * based on the set requirements (minimum amount, coupon, both, or either). It updates
         * the class properties to reflect the free shipping status, the remaining amount to
         * qualify for free shipping, and whether a coupon is needed for free shipping.
         *
         * @since 3.11.2
         *
         * @see \WC_Discounts::set_items_from_cart()
         *
         * @return void
         */
        protected function check_free_shipping_eligibility()
        {
        }
        /**
         * Formats the shipping package contents as discount items.
         *
         * This method processes the shipping package contents and formats them as discount items.
         * Each item in the shipping package is converted into an object containing key, object,
         * product, quantity, and price properties. The items are then sorted in descending order
         * based on the total price (price * quantity).
         *
         * @since 3.11.2
         *
         * @return array An array of formatted discount items.
         */
        protected function format_shipping_package_content_as_discount_items(): array
        {
        }
        /**
         * Checks if free shipping is available.
         *
         * @since 3.11.2
         *
         * @return bool True if free shipping is available, false otherwise
         */
        public function is_free_shipping_available(): bool
        {
        }
        /**
         * Retrieves the remaining amount to qualify for free shipping.
         *
         * @since 3.11.2
         *
         * @return float The remaining amount needed to qualify for free shipping
         */
        public function get_remaining_amount(): float
        {
        }
        /**
         * Checks if a coupon is needed for free shipping.
         *
         * @since 3.11.2
         *
         * @return bool True if a coupon is needed, false otherwise
         */
        public function needs_coupon_for_free_shipping(): bool
        {
        }
    }
    /**
     * Class ShippingHelper
     *
     * @since 3.11.4
     */
    class Helper
    {
        /**
         * Checks if the "Mark as Received" feature is enabled for customers.
         *
         * This method verifies whether the shipment tracking and "Mark as Received"
         * features are enabled in the admin settings.
         *
         * @since 3.11.4
         *
         * @return bool True if both shipment tracking and "Mark as Received" features are enabled, false otherwise.
         */
        public static function is_mark_as_received_allowed_for_customers(): bool
        {
        }
        /**
         * Check shipment complete availability for orders.
         *
         * @since 3.11.4
         *
         * @param \WC_Order $order
         *
         * @return bool
         */
        public static function is_order_fully_shipped($order): bool
        {
        }
        /**
         * Check the order receiving complete from customer.
         *
         * @since 3.11.4
         *
         * @param int $order_id
         * @param int $shipment_id
         *
         * @return bool
         */
        public static function is_order_marked_as_received($order_id, $shipment_id)
        {
        }
    }
    /**
     * Dokan Shipping Class
     *
     * @author weDevs
     */
    class Hooks
    {
        /**
         * Load automatically when class inistantiate
         *
         * @since 2.4
         *
         * @uses actions|filter hooks
         */
        public function __construct()
        {
        }
        /**
         * Disable product shipping tab
         *
         * @since 3.3.0
         *
         * @param array $settings_fields
         *
         * @return array
         */
        public function add_settings_shipping_tab($settings_fields)
        {
        }
        /**
         * Register shipping method
         *
         * @since 2.0
         *
         * @param array $methods
         *
         * @return array
         */
        public function register_shipping($methods)
        {
        }
        /**
         * Set cart page title fix script in cart checkout page.
         *
         * @since 3.10.1
         *
         * @return void
         */
        public function set_shipping_asset_in_cart_checkout_page()
        {
        }
        /**
         * Validate the shipping area
         *
         * @since 2.0
         *
         * @param  array $posted
         *
         * @return void
         */
        public function validate_country($posted)
        {
        }
        /**
         *  Handle Shipping post submit
         *
         *  @since  2.0
         *
         *  @return void
         */
        public function handle_shipping()
        {
        }
        /**
         * Adds a seller tab in product single page
         *
         * @since 2.0
         *
         * @param array $tabs
         *
         * @return array
         */
        public function register_product_tab($tabs)
        {
        }
        /**
         * Callback for Register_prouduct_tab function
         *
         * @since 2.0
         *
         * @return void
         */
        public function shipping_tab()
        {
        }
        /**
         * WooCommerce calculate taxes cart wise (cart as a whole), not vendor wise.
         * So if there is any tax for non-taxable product, lets remove that tax
         *
         * @since 3.0.3
         *
         * @see https://github.com/weDevsOfficial/dokan/issues/820
         * @see https://github.com/woocommerce/woocommerce/issues/20600
         *
         * @param \WC_Shipping_Rate $package_rates Shipping rates
         * @param array $package Shipping package
         *
         * @return \WC_Shipping_Rate
         */
        public function calculate_shipping_tax($package_rates, $package)
        {
        }
        /**
         * Filter pakcages, remove shipping data from cart if no shipping is required.
         *
         * Vendor A sales digital product with no shipping, but Vendor B sales physical product with shipping.
         * When Vendor A’s product is added in the cart, there is no shipping as expected.
         * But on adding Vendor B’s product, shipping is shown for both products.
         *
         * We'll remove package only if all the products of a vendor are non-shippable
         *
         * @since 3.0.3
         * @since DOKAN_PRO_VERSION Remove packages those are not have contents
         *
         * @param array $packages
         *
         * @return array
         */
        public function filter_packages($packages)
        {
        }
        /**
         * Delete shipping data when zone deleted from admin
         *
         * @since 3.2.2
         *
         * @param int $zone_id Shipping zone id
         *
         * @return void
         */
        public function delete_shipping_zone_data($zone_id)
        {
        }
        /**
         * Vendors shipping data syncronize when zone update by admin
         *
         * @since 3.2.2
         *
         * @param \WC_Shipping_Zone $zone Shipping zone.
         *
         * @return void
         */
        public function vendor_zone_data_sync($zone)
        {
        }
        /**
         * Handle free shipping availability for vendors.
         *
         * @since 3.7.16
         *
         * @param bool $is_available Is available.
         * @param array $package Package to check with.
         * @param WC_Shipping_Free_Shipping $shipping_instance Shipping instance.
         *
         * @return bool
         */
        public function handle_free_shipping_validity(bool $is_available, array $package, \WC_Shipping_Free_Shipping $shipping_instance): bool
        {
        }
        /**
         * Display Free shipping information.
         *
         * @since 3.7.27
         *
         * @param string $shipping_label Existing shipping label.
         * @param int $i Index.
         * @param array $package Package.
         *
         * @return string
         */
        public function display_free_shipping_remaining_amount($shipping_label, $i, $package): string
        {
        }
        /**
         * Display Free shipping information for vendor shipping.
         *
         * @since 3.7.27
         *
         * @param string $shipping_label Existing shipping label.
         * @param int $i Index.
         * @param array $package Package.
         *
         * @return string
         */
        public function display_free_shipping_remaining_amount_for_vendor_shipping($shipping_label, $i, $package): string
        {
        }
    }
}
namespace WeDevs\DokanPro\Shipping\Methods {
    /**
     *  Dokan regular Shipping Class
     *
     *  Register WooCommerce gateway as
     *  Dokan Shipping
     *
     *  @author weDevs <info@wedevs.com>
     */
    class ProductShipping extends \WC_Shipping_Method
    {
        /**
         * Constructor for your shipping class
         *
         * @access public
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Init your settings
         *
         * @access public
         * @return void
         */
        public function init()
        {
        }
        /**
         * Checking is gateway enabled or not
         *
         * @return boolean [description]
         */
        public function is_method_enabled()
        {
        }
        /**
         * Initialise Gateway Settings Form Fields
         *
         * @access public
         * @return void
         */
        public function init_form_fields()
        {
        }
        /**
         * Calculate_shipping function.
         *
         * @access public
         *
         * @param mixed $package
         *
         * @return void
         */
        public function calculate_shipping($package = array())
        {
        }
        /**
         * Check if shipping for this product is enabled
         *
         * @param integet $product_id
         *
         * @return boolean
         */
        public static function is_product_disable_shipping($product_id)
        {
        }
        /**
         * Check if shipping for this product is enabled
         *
         * @param  integet  $product_id
         *
         * @return boolean
         */
        public static function is_shipping_enabled_for_seller($seller_id)
        {
        }
        /**
         * Check if seller has any shipping enable product in this order
         *
         * @since  2.4.11
         *
         * @param  array $products
         *
         * @return boolean
         */
        public function has_shipping_enabled_product($products)
        {
        }
        /**
         * Get product shipping costs
         *
         * @param  integer $product_id
         *
         * @return array
         */
        public static function get_seller_country_shipping_costs($seller_id)
        {
        }
        /**
         * Calculate shipping per seller
         *
         * @param  array $products
         * @param  array $destination
         *
         * @return float
         */
        public function calculate_per_seller($products, $destination_country, $destination_state)
        {
        }
    }
    class VendorShipping extends \WC_Shipping_Method
    {
        /**
         * Default value.
         *
         * @var string $default
         */
        public $default = '';
        /**
         * Table Rates from Database
         */
        protected $options_save_name;
        /**
         * Table Rates from Database
         */
        public $default_option;
        /**
         * Cloning is forbidden. Will deactivate prior 'instances' users are running
         *
         * @since 4.0
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 4.0
         */
        public function __wakeup()
        {
        }
        /**
         * __construct function.
         *
         * @access public
         * @return void
         */
        public function __construct($instance_id = 0)
        {
        }
        /**
         * Get items in package.
         *
         * @param  array $package
         *
         * @return int
         */
        public function get_package_item_qty($package)
        {
        }
        /**
         * Finds and returns shipping classes and the products with said class.
         *
         * @param mixed $package
         *
         * @return array
         */
        public function find_shipping_classes($package)
        {
        }
        /**
         * Init function.
         * initialize variables to be used
         *
         * @access public
         * @return void
         */
        public function init()
        {
        }
        /**
         * Calculate_shipping function.
         *
         * @access public
         * @param array $package (default: array())
         * @return void
         */
        public function calculate_shipping($package = array())
        {
        }
        /**
         * See if free shipping is available based on the package, cart and coupon
         *
         * @param array $package Shipping package.
         * @param array $method Shipping methods
         *
         * @return bool
         */
        public function free_shipping_is_available(array $package, array $method): bool
        {
        }
        /**
         * Is available in specific zone locations
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function is_available($package)
        {
        }
        /**
         * Split state code from country:state string
         *
         * @param string $value [like: BD:DHA]
         *
         * @return string [like: DHA ]
         */
        public function split_state_code($value)
        {
        }
        /**
         * Alter the default rate if one is chosen in settings.
         *
         * @access public
         *
         *  @param mixed $package
         *
         * @return bool
         */
        public function select_default_rate($chosen_method, $_available_methods)
        {
        }
        /**
         * Hide shipping rates when free shipping is available.
         * Updated to support WooCommerce 2.6 Shipping Zones.
         *
         * @access public
         *
         * @param array $rates Array of rates found for the package.
         *
         * @return array
         */
        public function hide_shipping_when_free_is_available($rates)
        {
        }
        /**
         * Hide shipping rates when one has option enabled.
         *
         * @access public
         *
         * @param array $rates Array of rates found for the package.
         *
         * @return array
         */
        public function hide_other_options($rates)
        {
        }
        /**
         * Get shpping method id
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function get_method_rate_id($method)
        {
        }
        /**
         * Sort coupons so discounts apply consistently across installs. . This function follows the method `sort_coupons_callback` from class-wc-cart-totals.php
         *
         * @since 3.6.0
         *
         * In order of priority;
         *  - sort param
         *  - usage restriction
         *  - coupon value
         *  - ID
         *
         * @param \WC_Coupon $a Coupon object.
         * @param \WC_Coupon $b Coupon object.
         * @return int
         */
        protected function sort_coupons_callback($a, $b)
        {
        }
        /**
         * Delete Vendor shipping methods if Admin delete 'Vendor Shipping' in WC > Settings > Shipping > Zone
         *
         * @since 3.7.0
         *
         * @param int $instance_id
         * @param string $method_id
         * @param int $zone_id
         */
        public function delete_vendor_shipping_methods($instance_id, $method_id, $zone_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Shipping {
    /**
     * This class holds some helper methods to sanitize cost.
     *
     * @since 3.7.7
     */
    class SanitizeCost
    {
        /*
         * @var $fee_cost
         */
        public $fee_cost;
        /**
         * Evaluate a cost from a sum/string.
         *
         * @param  string $sum
         * @param  array  $args
         *
         * @return string
         */
        public function evaluate_cost($sum, $args = [])
        {
        }
        /**
         * Sanitize the cost field.
         *
         * @param string $value Un-sanitized value.
         *
         * @throws \Exception Last error triggered.
         *
         * @return string
         */
        public function sanitize_cost($value)
        {
        }
        /**
         * Work out fee (shortcode).
         *
         * @param  array $atts Attributes.
         *
         * @return string
         */
        public function fee($atts)
        {
        }
    }
    /**
     * Shipping Status Class
     *
     * @package dokan
     */
    class ShippingStatus
    {
        /**
         * Shipping status option
         *
         * @since 3.2.4
         */
        public $enabled;
        /**
         * Shipping status option
         *
         * @since 3.2.4
         */
        public $wc_shipping_enabled;
        /**
         * Shipping Status class construct
         *
         * @since 3.2.4
         */
        public function __construct()
        {
        }
        /**
         * Load hooks for this shippping
         * tracking
         *
         * @since 3.2.4
         *
         * @return void
         */
        public function load_hooks()
        {
        }
        /**
         * Add a shipping status section in Dokan settings
         *
         * @since 3.2.4
         *
         * @param array $sections
         *
         * @return array
         */
        public function render_shipping_status_section($sections)
        {
        }
        /**
         * Load all settings fields
         *
         * @since 3.2.4
         *
         * @return void
         */
        public function render_shipping_status_settings($fields)
        {
        }
        /**
         * Add default shipping status when get blank
         *
         * @since 3.2.4
         *
         * @return void
         */
        public function add_default_shipping_status()
        {
        }
        /**
         * After Save Admin Settings.
         *
         * @since 3.10.0
         *
         * @param string $option_name  Option Key (Section Key).
         * @param array  $option_value Option value.
         *
         * @return void
         */
        public function after_save_settings($option_name, $option_value)
        {
        }
        /**
         * Get shipping status main content
         *
         * @since 3.2.4
         *
         * @return void
         */
        public function render_shipment_content()
        {
        }
        /**
         * Get order shipment status
         *
         * @since 3.2.4
         *
         * @param WC_Order $order
         *
         * @return bool
         */
        public function is_order_shipped($order = '')
        {
        }
        /**
         * Create shipping tracking status.
         *
         * @since 3.12.0
         *
         * @param int   $order_id Order ID.
         * @param array $data     Shipping tracking data.
         * @param int   $user_id  User Id.
         *
         * @return int
         * @throws Exception If necessary data not provided or shipping status data not created.
         */
        public function create(int $order_id, array $data, int $user_id = 0): int
        {
        }
        /**
         * Schedule an action to mark the order as received after a specified time.
         *
         * @since 3.11.4
         *
         * @param array $info Information required to mark the order as received.
         *
         * @return void
         */
        protected function schedule_to_mark_order_as_received(array $info)
        {
        }
        /**
         * Mark the order as received based on the scheduled action.
         *
         * @since 3.11.4
         *
         * @param int $order_id    WC Order object.
         * @param int $shipment_id The ID of the shipment related to the order.
         *
         * @return void
         */
        public function marked_order_as_recieve($order_id, $shipment_id)
        {
        }
        /**
         * Handle mark order receive actions for via ajax.
         *
         * @since 3.11.4
         *
         * @return void
         */
        public function handle_mark_receive_actions()
        {
        }
        /**
         * Update Shipping tracking data.
         *
         * @since 3.12.0
         *
         * @param int   $shipment_id Shipment ID.
         * @param int   $order_id    Order Id.
         * @param array $data        Shipping tracking shipment data.
         * @param int   $user_id     User Id.
         *
         * @return stdClass
         * @throws Exception
         */
        public function update(int $shipment_id, int $order_id, array $data, int $user_id = 0): \stdClass
        {
        }
        /**
         * Add shipping tracking info via ajax
         *
         * @since 3.2.4
         *
         * @param void
         */
        public function add_shipping_status_tracking_info()
        {
        }
        /**
         * Update shipping tracking info via ajax
         *
         * @since 3.2.4
         *
         * @param void
         */
        public function update_shipping_status_tracking_info()
        {
        }
        /**
         * Add shipping tracking info as customer notes
         *
         * @since 3.2.4
         *
         * @param int      $post_id
         * @param int      $shipment_id
         * @param string   $ship_info
         * @param WC_Order $order
         *
         * @return false|int
         */
        public function add_shipping_status_tracking_notes($post_id, $shipment_id, $ship_info, $order)
        {
        }
        /**
         * Get all approved shipment tracking notes
         *
         * @since 3.2.4
         *
         * @param int $order_id
         * @param int $shipment_id
         *
         * @return array $notes
         */
        public function custom_get_order_notes($order_id, $shipment_id, $make_clickable = true)
        {
        }
        /**
         * Create a shipping tracking info
         *
         * @since 3.2.4
         *
         * @param array $data
         *
         * @return int insert_id
         */
        public function create_shipping_tracking($data)
        {
        }
        /**
         * Prepare shipping tracking data
         *
         * @since 3.2.4
         *
         * @param array $post_data
         *
         * @return array|bool
         * @throws Exception
         */
        public function prepare_for_db($post_data)
        {
        }
        /**
         * Get shipping tracking data by order id
         *
         * @since 3.2.4
         *
         * @param int   $order_id
         *
         * @param array $shipment
         */
        public function get_shipping_tracking_data($order_id)
        {
        }
        /**
         * Change the columns shown in admin area
         *
         * @since 3.2.4
         *
         * @param array $existing_columns
         *
         * @return array
         */
        public function admin_shipping_status_tracking_columns($existing_columns)
        {
        }
        /**
         * Adds custom column on dokan admin shop order table
         *
         * @since 3.2.4
         *
         * @param string       $col
         * @param int|WC_Order $post_id
         *
         * @return void
         */
        public function shop_order_shipping_status_columns($col, $post_id)
        {
        }
        /**
         * Shipment order meta box for admin order page
         *
         * @since 3.2.4
         *
         * $param string $post_type
         * $param WP_POST|WC_Order $post
         *
         * @return void
         */
        public function shipment_order_add_meta_boxes($post_type, $post)
        {
        }
        /**
         * Get shipping tracking info by order/shipment id
         *
         * @since 3.2.4
         *
         * @param int    $id
         * @param string $context
         * @param bool   $ignore_cancelled
         *
         * @return array|stdClass  $shipment
         */
        public function get_shipping_tracking_info($id, $context = 'shipment_info', $ignore_cancelled = false)
        {
        }
        /**
         * Is order item fully shiptted
         *
         * @since 3.2.4
         *
         * @param int $order_id
         * @param int $item_id
         * @param int $item_qty
         * @param int $need_available
         *
         * @return  bool|int
         */
        public function get_status_order_item_shipped($order_id, $item_id, $item_qty = 0, $need_available = 0)
        {
        }
        /**
         * Shipment order details meta box for admin area order page
         *
         * @since 3.2.4
         *
         * @return void
         */
        public static function shipment_order_details_add_meta_boxes($post_object)
        {
        }
        /**
         * Shipment order details show after order table WC my account
         *
         * @since 3.2.4
         *
         * @param WC_Order $order
         *
         * @return void
         */
        public function shipment_order_details_after_order_table($order)
        {
        }
        /**
         * Shipment column added on my account page order listing page
         *
         * @since 3.2.4
         *
         * @param array $columns
         *
         * @return array
         */
        public function shipment_my_account_my_orders_columns($columns)
        {
        }
        /**
         * Shipment data show on my account page order listing page
         *
         * @since 3.2.4
         *
         * @param WC_Order $order
         *
         * @return void
         */
        public function shipment_my_account_orders_column_data($order)
        {
        }
        /**
         * Add Dokan Pro localized vars
         *
         * @since 3.2.4
         *
         * @param array $args
         *
         * @return array
         */
        public function set_localized_data($args)
        {
        }
        /**
         * Adds localized data for the "Mark as Received" feature.
         *
         * This method sets the localization data for the "Mark as Received" feature,
         * which will be used in the frontend.
         *
         * @since 3.11.4
         *
         * @param array $data The existing localization data.
         *
         * @return array The modified localization data with "Mark as Received" feature information.
         */
        public function add_localize_data_for_mark_received(array $data): array
        {
        }
        /**
         * Adds admin localized data for the "Mark as Received" feature.
         *
         * This method sets the localization data for the "Mark as Received" feature,
         * which will be used in the admin panel.
         *
         * @since 3.11.4
         *
         * @param array $data The existing localization data.
         *
         * @return array The modified localization data with "Mark as Received" feature information.
         */
        public function add_localize_data_for_admin_mark_received(array $data): array
        {
        }
    }
    /**
     * Dokan Shipping Zone Class
     *
     * @package dokan
     */
    class ShippingZone
    {
        /**
         * Get All Zone
         *
         * @since 1.0.0
         *
         * @return array
         */
        public static function get_zones()
        {
        }
        /**
         * Get single zone info
         *
         * @since 2.8.0
         *
         * @return array
         */
        public static function get_zone($zone_id)
        {
        }
        /**
         * Add Shipping Method for a zone
         *
         * @since 2.8.0
         *
         * @return int|\WP_Error
         */
        public static function add_shipping_methods($data)
        {
        }
        /**
         * Delete shipping method
         *
         * @since 2.8.0
         *
         * @return bool|\mysqli_result|\WP_Error
         */
        public static function delete_shipping_methods($data)
        {
        }
        /**
         * Get Shipping Methods for a zone
         *
         * @since 2.8.0
         *
         * @return array
         */
        public static function get_shipping_methods($zone_id, $seller_id)
        {
        }
        /**
         * Update shipping method settings
         *
         * @since 2.8.0
         *
         * @return array|false
         */
        public static function update_shipping_method($args)
        {
        }
        /**
         * Toggle shipping method
         *
         * @since 2.8.0
         *
         * @return bool|\WP_Error
         */
        public static function toggle_shipping_method($data)
        {
        }
        /**
         * Get zone locations
         *
         * @since 2.8.0
         *
         * @return array
         */
        public static function get_locations($zone_id, $seller_id = null)
        {
        }
        /**
         * Save zone location for seller
         *
         * @since 2.8.0
         *
         * @return bool
         */
        public static function save_location($location, $zone_id, $seller_id = 0)
        {
        }
        /**
         * Get Shipping method label
         *
         * @since 2.8.0
         *
         * @return void
         */
        public static function get_method_label($method_id)
        {
        }
        /**
         * Find a matching zone for a given package.
         *
         * @param  array $package Shipping package.
         *
         * @return \WC_Shipping_Zone
         */
        public static function get_zone_matching_package($package)
        {
        }
        /**
         * Find a matching zone ID for a given package.
         *
         * @param  object $package Package information.
         *
         * @return int
         */
        public static function get_zone_id_from_package($package)
        {
        }
        /**
         * Get vendor id from package
         *
         * @param  int $package
         *
         * @return int
         */
        public static function get_vendor_id_from_package($package)
        {
        }
        /**
         * Get all the zone ids of a vendor
         *
         * @param  object $package
         *
         * @return array
         */
        public static function get_vendor_all_zone_ids($package)
        {
        }
        /**
         * Get zone id by postcode
         *
         * @since  2.9.14
         *
         * @param  int $postcode
         * @param  int $vendor_id Deprecated
         *
         * @return int|false on failure
         */
        public static function get_zone_id_by_postcode($postcode, $vendor_id = false)
        {
        }
        /**
         * Get all avilable shipping methods
         *
         * @param object $zone
         *
         * @return array
         */
        public static function available_shipping_methods($zone)
        {
        }
    }
}
namespace WeDevs\DokanPro\Shortcodes {
    class BecomeAVendor extends \WeDevs\Dokan\Abstracts\DokanShortcode
    {
        /**
         * Shortcode name
         *
         * @since 3.7.25
         *
         * @var string Shortcode name
         */
        protected $shortcode = 'dokan-customer-migration';
        /**
         * Render best selling products
         *
         * @since 3.7.25
         *
         * @param array $atts
         *
         * @return string
         */
        public function render_shortcode($atts)
        {
        }
    }
    class Shortcodes
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Shortcodes container
         *
         * @since 3.7.25
         */
        public function __construct()
        {
        }
    }
}
namespace WeDevs\DokanPro {
    class SocialLogin
    {
        /**
         * Load automatically when class instantiated
         *
         * @since 2.4
         *
         * @uses actions|filter hooks
         */
        public function __construct()
        {
        }
        /**
         * Call actions and hooks
         */
        public function init_hooks()
        {
        }
        /**
         * Returns Enabled social login platforms.
         *
         * @3.9.4
         *
         * @return array
         */
        public function get_enabled_social_login(): array
        {
        }
        /**
         * Monitors Url for Hauth Request and process Hauth for authentication
         *
         * @return void
         */
        public function monitor_autheticate_requests()
        {
        }
        /**
         * Filter admin menu settings section
         *
         * @param array $sections
         *
         * @return array
         */
        public function dokan_social_api_settings($sections)
        {
        }
        /**
         * Render settings fields for admin settings section
         *
         * @param array $settings_fields
         *
         * @return array
         */
        public function dokan_social_settings_fields($settings_fields)
        {
        }
        /**
         * Register dokan query vars
         *
         * @since 1.0
         *
         * @param array $vars
         *
         * @return array new $vars
         */
        public function register_support_queryvar($vars)
        {
        }
        /**
         * Register page templates
         *
         * @since 1.0
         *
         * @param array $query_vars
         *
         * @return array $query_vars
         */
        public function load_template_from_plugin($query_vars)
        {
        }
        /**
         * Render social login icons
         *
         * @return void
         */
        public function render_social_logins()
        {
        }
        /**
         * Enqueue social style on vendor registration page created via [dokan-vendor-registration] shortcode
         *
         * @since 2.9.13
         *
         * @return void
         */
        public function enqueue_style()
        {
        }
    }
}
namespace WeDevs\DokanPro\Storage {
    /**
     * Cookie Based Session Storage Manager for Dokan with Hybridauth session storage support
     *
     * @since 3.3.6
     */
    class Session implements \Hybridauth\Storage\StorageInterface
    {
        /**
         * Key prefix
         *
         * @var string
         */
        protected $key_prefix = 'dokan_';
        /**
         * Cookie prefix
         *
         * @var string
         */
        protected $cookie_prefix = 'session_storage';
        /**
         * Customer ID.
         *
         * @var int $customer_id Customer ID.
         */
        protected $customer_id;
        /**
         * Session Data.
         *
         * @var array $_data Data array.
         */
        protected $data = [];
        /**
         * Cookie name used for the session.
         *
         * @var string cookie name
         */
        protected $cookie;
        /**
         * Stores session due to expire timestamp.
         *
         * @var string session expiration timestamp
         */
        protected $session_expiration;
        /**
         * Session constructor.
         *
         * @param string $prefix cookie prefix
         * @param float|int $expiration expiration time in second
         *
         * @since 3.3.6
         */
        public function __construct($prefix = '', $expiration = 60 * 60 * 48)
        {
        }
        /**
         * Setup cookie and customer ID.
         *
         * @since 3.3.6
         */
        public function init_session_cookie()
        {
        }
        /**
         * Get the session cookie, if set. Otherwise return false.
         *
         * Session cookies without a customer ID are invalid.
         *
         * @since 3.3.6
         *
         * @return bool|array
         */
        public function get_session_cookie()
        {
        }
        /**
         * Sets the session cookie on-demand (usually after adding an item to the cart).
         *
         * Warning: Cookies will only be set if this is called before the headers are sent.
         *
         * @param bool $set Should the session cookie be set.
         *
         * @since 3.3.6
         *
         * @return void
         */
        public function set_customer_session_cookie($set)
        {
        }
        /**
         * Should the session cookie be secure?
         *
         * @since 3.3.6
         *
         * @return bool
         */
        protected function use_secure_cookie()
        {
        }
        /**
         * Check if the home URL is https. If it is, we don't need to do things such as 'force ssl'.
         *
         * @since  3.3.6
         * @return bool
         */
        public function site_is_https()
        {
        }
        /**
         * Generate a unique customer ID.
         *
         * Uses Portable PHP password hashing framework to generate a unique cryptographically strong ID.
         *
         * @since 3.3.6
         *
         * @return string
         */
        public function generate_customer_id()
        {
        }
        /**
         * Get customer ID.
         *
         * @since 3.3.6
         *
         * @return int
         */
        public function get_customer_id()
        {
        }
        /**
         * Destroy all session data.
         *
         * @since 3.3.6
         */
        public function destroy_session()
        {
        }
        /**
         * Forget all session data without destroying it.
         *
         * @since 3.3.6
         */
        public function forget_session()
        {
        }
        /**
         * @param string $key
         *
         * @since 3.3.6
         *
         * @return mixed|null
         */
        public function get($key)
        {
        }
        /**
         * @param string $key
         * @param string|array $value
         *
         * @since 3.3.6
         */
        public function set($key, $value)
        {
        }
        /**
         * Clear session data
         *
         * @since 3.3.6
         */
        public function clear()
        {
        }
        /**
         * @param string $key
         *
         * @since 3.3.6
         */
        public function delete($key)
        {
        }
        /**
         * @param string $key
         *
         * @since 3.3.6
         */
        public function deleteMatch($key)
        {
        }
    }
}
namespace WeDevs\DokanPro {
    /**
     * Dokan Notice Class
     *
     * @since  2.4.3
     *
     * @author weDevs  <info@wedevs.com>
     */
    class Store
    {
        /**
         * Load automatically when class initiate
         *
         * @since 2.4.3
         *
         * @uses action hook
         * @uses filter hook
         */
        public function __construct()
        {
        }
        /**
         * Load Store Review query vars for store page
         *
         * @since 2.4.3
         *
         * @param  array $vars
         *
         * @return array
         */
        public function load_store_review_query_var($vars)
        {
        }
        /**
         * Load Rewrite Rules for store page
         *
         * @since 2.4.3
         *
         * @param  string $custom_store_url
         *
         * @return void
         */
        public function load_rewrite_rules($custom_store_url)
        {
        }
        /**
         * Add Review Tab in Store Page
         *
         * @since 2.4.3
         *
         * @param array $tabs
         * @param integer $store_id
         *
         * @return array
         */
        public function add_review_tab_in_store($tabs, $store_id)
        {
        }
        /**
         * Returns the store review template
         *
         * @since 2.4.3
         *
         * @param string  $template
         *
         * @return string
         */
        public function store_review_template($template)
        {
        }
        /**
         * Get store coupons
         *
         * @since 3.4.0
         *
         * @param WP_User $store_user
         * @param array   $store_info
         * @param bool    $marketplace
         *
         * @return string
         */
        public function get_store_coupons($store_user, $store_info, $marketplace = false)
        {
        }
        /**
         * Show seller coupons in the store page
         *
         * @param WP_User $store_user
         * @param array   $store_info
         *
         * @since 2.4.12
         *
         * @return void
         */
        public function show_store_coupons($store_user, $store_info)
        {
        }
        /**
         * Add vendor biography tab
         *
         * @param array $tabs
         * @param int $store_id
         *
         * @since 2.9.10
         *
         * @return array
         */
        public function add_vendor_biography_tab($tabs, $store_id)
        {
        }
        /**
         * Load biography rewrite rules
         *
         * @param string $store_url
         *
         * @since 2.9.10
         *
         * @return void
         */
        public function load_biography_rewrite_rules($store_url)
        {
        }
        /**
         * Load biography query var
         *
         * @param array $query_vars
         *
         * @since 2.9.10
         *
         * @return array
         */
        public function load_biography_query_var($query_vars)
        {
        }
        /**
         * Load vendor biography template
         *
         * @param string $template
         *
         * @since 2.9.10
         *
         * @return string
         */
        public function load_vendor_biography_template($template)
        {
        }
    }
    class StoreCategory
    {
        /**
         * Class constructor
         *
         * @since 2.9.2
         */
        public function __construct()
        {
        }
        /**
         * Add admin settings
         *
         * @since 2.9.2
         *
         * @param array $dokan_settings_fields
         *
         * @return array
         */
        public function add_admin_settings($dokan_settings_fields)
        {
        }
        /**
         * Set default category
         *
         * @since 2.9.2
         *
         * @param string $option_key
         * @param array  $option_value
         */
        public function set_default_category($option_key, $option_value)
        {
        }
        /**
         * Add localized script data in admin panel
         *
         * @since 2.9.8
         *
         * @param array $data
         *
         * @return array
         */
        public function add_localized_data($data)
        {
        }
        /**
         * Set localized data
         *
         * @since 3.0.0
         *
         * @param array $data
         *
         * @return array
         */
        public function set_localized_data($data)
        {
        }
        /**
         * Add store category option in provided template
         *
         * @since 2.9.2
         *
         * @param int    $current_user
         * @param array  $args
         * @param string $template_name
         *
         * @return void
         */
        public function add_store_category_option($current_user, $args = array(), $template_name = 'settings/store-form-categories')
        {
        }
        /**
         * Add store categories option in seller wizard
         *
         * @since 2.9.2
         *
         * @param \WeDevs\Dokan\Vendor\SetupWizard $wizard
         *
         * @return void
         */
        public function seller_wizard_add_store_category_option($wizard)
        {
        }
        /**
         * Set default category to a newly created store
         *
         * @since 2.9.2
         *
         * @param int $user_id
         *
         * @return void
         */
        public function after_dokan_new_seller_created($user_id)
        {
        }
        /**
         * Set store categories after store file is saved
         *
         * @since 2.9.2
         *
         * @param int $store_id
         *
         * @return void
         */
        public function after_store_profile_saved($store_id)
        {
        }
        /**
         * Set store categories after wizard settings is saved
         *
         * @since 2.9.2
         *
         * @param \WeDevs\Dokan\Vendor\SetupWizard $wizard
         *
         * @return void
         */
        public function after_seller_wizard_store_field_save($wizard)
        {
        }
        /**
         * Add store categories in \WeDevs\Dokan\Vendor\Vendor shop_data
         *
         * @since 2.9.2
         *
         * @param array        $shop_info
         * @param \WeDevs\Dokan\Vendor\Vendor $vendor
         *
         * @return array
         */
        public function add_store_categories_in_vendor_shop_data($shop_info, $vendor)
        {
        }
        /**
         * Add store categories in \WeDevs\Dokan\Vendor\Vendor to_array data
         *
         * @since 2.9.2
         *
         * @param array        $data
         * @param \WeDevs\Dokan\Vendor\Vendor $vendor
         *
         * @return array
         */
        public function add_store_categories_vendor_to_array($data, $vendor)
        {
        }
        /**
         * Add store category to new seller.
         *
         * @since 3.7.17
         *
         * @param int   $user_id  User id
         * @param array $userdata User data
         *
         * @return void
         */
        public function add_store_category_to_new_seller($user_id, $userdata)
        {
        }
        /**
         * Remove store categories by user ID.
         *
         * @since 3.7.21
         *
         * @param int $user_id  User id
         *
         * @return void
         */
        public function remove_store_categories_by_user_id($user_id)
        {
        }
        /**
         * Transform store categories data in REST response
         *
         * @since 2.9.2
         *
         * @param WP_REST_Response $response
         *
         * @return WP_REST_Response
         */
        public function rest_prepare_store_item_for_response($response)
        {
        }
        /**
         * Store update hook to update store categories
         *
         * @since 2.9.2
         *
         * @param \WeDevs\Dokan\Vendor\Vendor    $store
         * @param WP_REST_Request $request
         *
         * @return void
         */
        public function rest_stores_update_store_category($store, $request)
        {
        }
        /**
         * Add store category dropdown in seller search form
         *
         * @since 2.9.2
         *
         * @return void
         */
        public function add_category_dropdown_in_seller_search_form()
        {
        }
        /**
         * Add tax_query arg in WP_User_Query used in dokan()->vendor->get_vendors()
         *
         * @since 2.9.2
         *
         * @param array $args
         *
         * @return array
         */
        public function add_store_category_query_arg($args, $request)
        {
        }
        /**
         * Add store category filter to WP_User_Query
         *
         * @since 2.9.2
         *
         * @param WP_User_Query $wp_user_query
         *
         * @return void
         */
        public function add_store_category_query($wp_user_query)
        {
        }
        /**
         * Add store category query parameters.
         *
         * @since 3.7.30
         *
         * @param array $params Query params.
         *
         * @return mixed
         */
        public function add_store_category_rest_collection_param($params)
        {
        }
    }
    /**
     * Store Lists Filter Pro Class
     *
     * @since 3.0.0
     */
    class StoreListsFilter
    {
        /**
         * Constructor method
         *
         * @since 3.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Init hooks
         *
         * @since  3.0.0
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Category area template
         *
         * @since  3.0.0
         *
         * @param  array $stores
         *
         * @return void
         */
        public function category_area($stores)
        {
        }
        /**
         * Featured store template
         *
         * @since  3.0.0
         *
         * @param  array $stores
         * @return void
         */
        public function featured_store($stores)
        {
        }
        /**
         * Get store categories
         *
         * @since  3.0.0
         *
         * @return array | null on failure
         */
        public function get_categories()
        {
        }
        public function store_args($args, $request)
        {
        }
        /**
         * Add sort by options
         *
         * @since  3.0.0
         *
         * @param array
         */
        public function add_sort_by_options($options)
        {
        }
        /**
         * Get filtered stores
         *
         * @since  3.0.0
         *
         * @param  WP_User_Query $query
         *
         * @return void
         */
        public function get_filtered_stores($query)
        {
        }
        /**
         * Filter user query
         *
         * @since  3.0.0
         *
         * @param  WP_User_Query $query
         * @param  string $orderby
         *
         * @return void
         */
        public function filter_user_query($query, $orderby)
        {
        }
    }
    /**
     * Dokan SEO class
     *
     * Integrates Dokan SEO template in front-end Settings menu and provides
     * SEO settings for single stores
     *
     * @since 2.3
     */
    class StoreSeo
    {
        public $feedback = false;
        /**
         * Load automatically when class initiate
         *
         * @uses actions hook
         * @uses filter hook
         */
        public function __construct()
        {
        }
        /**
         * Init hooks and filters
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Adds proper hooks for output of meta tags
         *
         * @return void
         */
        public function output_meta_tags()
        {
        }
        /**
         * Register dokan_sellers sitemap on yoast SEO
         */
        public function register_sitemap()
        {
        }
        /**
         * Add dokan_sellers sitemap url to sitemap_index list
         */
        public function add_sellers_sitemap()
        {
        }
        /**
         * Generate output for dokan_sellers sitemap
         */
        public function sitemap_output()
        {
        }
        /**
         * Prints out default meta tags from user meta.
         *
         * @since 2.3
         *
         * @return void
         */
        public function print_tags()
        {
        }
        /**
         * Prints out social tags
         *
         * @since 2.3
         */
        public function print_social_tags()
        {
        }
        /**
         * Generic meta replacer for meta tags
         *
         * @since 2.3
         *
         * @param string $val_default
         * @param string $meta
         * @param string $type
         *
         * @return string $meta
         */
        public function replace_meta($val_default, $meta, $type = '')
        {
        }
        /**
         * Replace title meta of other SEO plugin
         *
         * @since 2.3
         *
         * @param string $title
         *
         * @return string
         */
        public function replace_title($title)
        {
        }
        /**
         * Replace title meta of other SEO plugin
         * for WP version greater than 4.4.0
         *
         * @since 3.2.4
         *
         * @param array $title_array
         *
         * @return array
         */
        public function replace_title_new($title_array)
        {
        }
        /**
         * Replace keywords meta of other SEO plugin
         *
         * @since 2.3
         *
         * @param string $keywords
         *
         * @return string $keywords
         */
        public function replace_keywords($keywords)
        {
        }
        /**
         * Replace description meta of other SEO plugin
         *
         * @since 2.3
         *
         * @param string $desc
         *
         * @return string $desc
         */
        public function replace_desc($desc)
        {
        }
        /**
         * Replace OG tag title for WP_SEO
         *
         * @since 2.3
         *
         * @param string $title
         *
         * @return string $title
         */
        public function replace_og_title($title)
        {
        }
        /**
         * Replace OG tag description for WP_SEO
         *
         * @since 2.3
         *
         * @param string $desc
         *
         * @return string $desc
         */
        public function replace_og_desc($desc)
        {
        }
        /**
         * Replace OG tag Image for WP_SEO
         *
         * @since 2.3
         *
         * @param string $img
         *
         * @return string $img
         */
        public function replace_og_img($img)
        {
        }
        /**
         * Print og img
         *
         * @since 2.3
         *
         * @return void
         */
        public function print_og_img()
        {
        }
        /**
         * Replace twitter tag title for WP_SEO
         *
         * @since 2.3
         *
         * @param string $val_default
         *
         * @return string
         */
        public function replace_twitter_title($val_default)
        {
        }
        /**
         * Replace twitter tag description for WP_SEO.
         *
         * @since 2.3
         *
         * @param string $val_default
         *
         * @return string
         */
        public function replace_twitter_desc($val_default)
        {
        }
        /**
         * Replace twitter image tag for WP_SEO
         *
         * @since 2.3
         *
         * @param string $img
         *
         * @return string
         */
        public function replace_twitter_img($img)
        {
        }
        /**
         * Prints out twitter image tag
         *
         * @since 2.3
         *
         * @return void
         */
        public function print_twitter_img()
        {
        }
        /**
         * Print SEO meta input form on frontend
         *
         * @since 2.3
         *
         * @return void
         */
        public function frontend_meta_form()
        {
        }
        /**
         * Check meta data and print
         *
         * @since 2.3
         *
         * @param string|boolean $val
         *
         * @return string|empty
         */
        public function print_saved_meta($val)
        {
        }
        /**
         * Submit handler for settings form
         *
         * @since 2.3
         *
         * @return void
         */
        public function dokan_seo_form_handler()
        {
        }
        public function replace_og_url()
        {
        }
    }
    /**
     * Dokan Store Social Share class
     *
     * Integrates Social sharing buttons inside store page
     * Settings for single stores
     *
     * @since 2.6.6
     */
    class StoreShare
    {
        /**
         * Loads automatically when class initiate
         *
         * @uses actions hook
         * @uses filter hook
         */
        public function __construct()
        {
        }
        /**
         * Init hooks and filters
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Register all scripts
         *
         * @return void
         **/
        public function register_scripts()
        {
        }
        /**
         * Enqueue all scripts
         *
         * @return void
         **/
        public function enqueue_scripts()
        {
        }
        /**
         * Render Share Buttons HTML
         *
         * @return string
         */
        public function render_html()
        {
        }
        /**
         * Render Share pop up button
         *
         * @return void
         */
        public function render_share_button()
        {
        }
        /**
         * Render JS
         *
         * @return void
         */
        public function render_script()
        {
        }
    }
}
namespace WeDevs\DokanPro\StoreTime {
    /**
     * Dokan Pro Store Open Close
     * Multiple Time Settings.
     *
     * @since 3.5.0
     */
    class Settings
    {
        /**
         * Load automatically when class initiate
         *
         * @since 3.5.0
         *
         * @uses actions hook
         * @uses filter hook
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Added script for store open close multiple time.
         *
         * @since 3.5.0
         *
         * @param array $scripts
         *
         * @return array
         */
        public function register_scripts($scripts)
        {
        }
        /**
         * Load frontend scripts
         *
         * @since 3.7.6
         *
         * @return void
         */
        public function load_frontend_scripts()
        {
        }
        /**
         * Save store open close times here.
         *
         * @since 3.5.0
         *
         * @param array $dokan_store_time
         *
         * @return void|array
         */
        public function save_store_times($dokan_store_time)
        {
        }
        /**
         * Check vendor store is open or close.
         *
         * @since 3.5.0
         *
         * @param bool   $store_open
         * @param string $today
         * @param array  $dokan_store_times
         *
         * @return bool
         */
        public function check_seller_store_is_open($store_open, $today, $dokan_store_times)
        {
        }
        /**
         * Update store time template location for multi slot times.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public function update_store_time_template()
        {
        }
        /**
         * Update store time template arguments for load multiple store times.
         *
         * @since 3.5.0
         *
         * @param array $args
         *
         * @return array
         */
        public function update_store_time_template_args($args)
        {
        }
        /**
         * Show stores multiple time settings field here.
         *
         * @since 3.5.0
         *
         * @param string $current_day
         * @param string $store_status
         *
         * @return void
         */
        public function added_store_times($current_day, $store_status)
        {
        }
    }
}
namespace WeDevs\DokanPro {
    /**
     * Dokan Update class
     *
     * Performs license validation and update checking
     */
    class Update
    {
        /**
         * Initialize the class
         */
        public function __construct()
        {
        }
        /**
         * Initialize the updater
         *
         * @return void
         */
        protected function init_appsero()
        {
        }
        /**
         * Prompts the user to add license key if it's not already filled out
         *
         * @param array $notices
         *
         * @return array
         */
        public function license_enter_notice($notices)
        {
        }
        /**
         * Show plugin udpate message
         *
         * @since  2.7.1
         *
         * @param array $args
         *
         * @return void
         */
        public function plugin_update_message($args)
        {
        }
        /**
         * If license is valid.
         *
         * @since 3.10.0
         *
         * @return bool|null
         */
        public function is_valid()
        {
        }
        /**
         * Get the count of days that after the license will expire.
         *
         * @since 3.10.0
         *
         * @return integer|bool
         */
        public function get_expiry_days()
        {
        }
        /**
         * Refresh dokan pro license
         *
         * @since 3.10.0
         *
         * @return void
         */
        public function refresh_license()
        {
        }
        /**
         * Returns license source id.
         *
         * @since 3.10.0
         *
         * @return string
         */
        public function get_license_source_id()
        {
        }
        /**
         * Returns dokan pro license plan.
         *
         * @since 3.10.0
         *
         * @return array|string|string[]
         */
        public function get_plan()
        {
        }
        /**
         * Returns dokan pro license has key or not.
         *
         * @since 3.10.0
         *
         * @return bool
         */
        public function has_license_key()
        {
        }
    }
}
namespace WeDevs\DokanPro\Upgrade {
    class Hooks
    {
        /**
         * Class constructor
         *
         * @since 3.0.0
         */
        public function __construct()
        {
        }
    }
}
namespace WeDevs\DokanPro\Upgrade\Upgraders\BackgroundProcesses {
    class V_3_0_7_ShippingLocations extends \WeDevs\Dokan\Abstracts\DokanBackgroundProcesses
    {
        /**
         * Sync the missing shipping locations data
         *
         * @since 3.0.7
         *
         * @param int $page
         *
         * @return int|bool
         */
        public function task($page)
        {
        }
    }
    class V_3_1_1_UpdateSubscriptionEnddate extends \WeDevs\Dokan\Abstracts\DokanBackgroundProcesses
    {
        /**
         * Action
         *
         * Override this action in your processor class
         *
         * @since 3.1.4
         *
         * @var string
         */
        protected $action = 'dokan_pro_bg_action_3_1_1';
        /**
         * Sync the missing shipping locations data
         *
         * @since 3.1.1
         *
         * @param int $page
         *
         * @return bool
         */
        public function task($subscription_data)
        {
        }
    }
    class V_3_2_0_UpdateSubscriptionMeta extends \WeDevs\Dokan\Abstracts\DokanBackgroundProcesses
    {
        /**
         * Action
         *
         * Override this action in your processor class
         *
         * @since 3.2.0
         *
         * @var string
         */
        protected $action = 'dokan_pro_bg_action_3_2_0';
        /**
         * Sync Dokan Subscription old meta key data with new key
         *
         * @since 3.2.01
         *
         * @param int $page
         *
         * @return bool
         */
        public function task($subscription_data)
        {
        }
    }
    class V_3_7_4_UpdateSubscriptionVendorCategories extends \WeDevs\Dokan\Abstracts\DokanBackgroundProcesses
    {
        /**
         * Update vendor subscription category meta data.
         *
         * @since 3.7.4
         *
         * @param array $data
         *
         * @return bool
         */
        public function task($data)
        {
        }
    }
    /**
     * Dokan vendor delivery times upgrader class.
     *
     * @since 3.7.8
     */
    class V_3_7_8_VendorDeliveryTimes extends \WeDevs\Dokan\Abstracts\DokanBackgroundProcesses
    {
        /**
         * Action
         *
         * Override this action in your processor class
         *
         * @since 3.7.8
         *
         * @var string
         */
        protected $action = 'dokan_pro_bg_action_3_7_8';
        /**
         * Update vendors delivery time.
         *
         * @param array $vendors
         *
         * @since 3.7.8
         *
         * @return bool
         */
        public function task($vendors)
        {
        }
    }
    /**
     * Dokan remove store categories upgrader class.
     *
     * @since 3.7.8
     */
    class V_3_7_17_RemoveStoreCategories extends \WeDevs\Dokan\Abstracts\DokanBackgroundProcesses
    {
        /**
         * Action
         *
         * Override this action in your processor class
         *
         * @since 3.7.17
         *
         * @var string
         */
        protected $action = 'dokan_pro_bg_action_3_7_17';
        /**
         * Remove store categories.
         *
         * @param array $user_ids
         *
         * @since 3.7.17
         *
         * @return bool
         */
        public function task($user_ids)
        {
        }
    }
    /**
     * Dokan remove store categories upgrader class.
     *
     * @since 3.8.0
     */
    class V_3_8_0 extends \WeDevs\Dokan\Abstracts\DokanBackgroundProcesses
    {
        /**
         * Action
         *
         * Override this action in your processor class
         *
         * @since 3.8.0
         *
         * @var string
         */
        protected $action = 'dokan_pro_bg_action_3_8_0';
        /**
         * Remove store categories.
         *
         * @since 3.8.0
         *
         * @param \WC_Subscription[] $subscriptions An array of WC_Subscription objects
         *
         * @return bool
         */
        public function task($subscriptions)
        {
        }
    }
    /**
     * Dokan Store Phone Verification Info Updater Class.
     *
     * @since 3.8.3
     */
    class V_3_8_3_UpdateStorePhoneVerificationInfo extends \WeDevs\Dokan\Abstracts\DokanBackgroundProcesses
    {
        /**
         * Perform Updates.
         *
         * @since 3.8.3
         *
         * @param mixed $item
         *
         * @return mixed
         */
        public function task($item)
        {
        }
    }
    /**
     * Dokan V_3_9_0 Upgrade Background Processor Class.
     *
     * @since 3.9.0
     */
    class V_3_9_0 extends \WeDevs\Dokan\Abstracts\DokanBackgroundProcesses
    {
        /**
         * Action
         *
         * Override this action in processor class
         *
         * @since 3.9.0
         *
         * @var string
         */
        protected $action = 'dokan_pro_bg_action_3_9_0';
        /**
         * Perform Updates.
         *
         * @since 3.9.0
         *
         * @param mixed $item
         *
         * @return mixed
         */
        public function task($item)
        {
        }
        /**
         * Add id in product addon data.
         *
         * @since 3.9.0
         *
         * @return bool
         */
        public function add_product_addon_ids($meta_datas)
        {
        }
        /**
         * Checks and adds id key in product addon array.
         *
         * @since 3.9.0
         *
         * @param $meta_values
         *
         * @return mixed|string
         */
        public function process_meta_values($meta_values)
        {
        }
    }
    /**
     * Dokan V_3_9_7 Upgrade Background Processor Class.
     *
     * @since DOAKN_PRO_SINCE
     */
    class V_3_9_7 extends \WeDevs\Dokan\Abstracts\DokanBackgroundProcesses
    {
        /**
         * Action
         *
         * Override this action in processor class
         *
         * @since 3.9.7
         *
         * @var string
         */
        protected $action = 'dokan_pro_bg_action_3_9_7';
        /**
         * Perform Updates.
         *
         * @since 3.9.7
         *
         * @param mixed $item
         *
         * @return mixed
         */
        public function task($item)
        {
        }
        /**
         * Update Stripe Express Account Info.
         *
         * @since 3.9.7
         *
         * @param array $item
         *
         * @return bool
         */
        public function update_stripe_express_account_info($item)
        {
        }
    }
    /**
     * Dokan V_3_9_2 Upgrade Background Processor Class.
     *
     * @since 3.11.1
     */
    class V_3_11_1 extends \WeDevs\Dokan\Abstracts\DokanBackgroundProcesses
    {
        /**
         * Action
         * Override this action in processor class
         *
         * @since 3.11.1
         * @var string
         */
        protected $action = 'dokan_pro_bg_action_3_11_1';
        /**
         * Perform Updates.
         *
         * @since 3.11.1
         *
         * @param array $item
         *
         * @return array|false
         */
        public function task($item)
        {
        }
        /**
         * Create Verifications Submissions.
         *
         * @since 3.11.1
         *
         * @param Vendor $vendor Vendor.
         *
         * @return void
         */
        protected function create_verification_submission(\WeDevs\Dokan\Vendor\Vendor $vendor)
        {
        }
    }
    /**
     * Dokan V_3_12_6 Upgrade Background Processor Class.
     *
     * @since 3.13.0
     */
    class V_3_12_6 extends \WeDevs\Dokan\Abstracts\DokanBackgroundProcesses
    {
        /**
         * Action
         * Override this action in processor class
         *
         * @since 3.13.0
         *
         * @var string
         */
        protected $action = 'dokan_pro_bg_action_3_12_6';
        /**
         * Perform Update Task.
         *
         * @since 3.13.0
         *
         * @param array $item
         *
         * @return array|false
         */
        public function task($item)
        {
        }
        /**
         * Update Vendor Subscription Orders Meta.
         *
         * @since 3.13.0
         *
         * @param WC_Order $order Order
         *
         * @return void
         */
        protected function update_vendor_subscription_orders_meta($order)
        {
        }
    }
}
namespace WeDevs\DokanPro\Upgrade\Upgraders {
    class V_3_0_7 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Update the missing shipping zone locations table data
         *
         * @since 3.0.7
         *
         * @return void
         */
        public static function update_shipping_zone_locations_table()
        {
        }
    }
    /**
     * Upgraders in Dokan Pro was introduced in v3.0.7, but there was
     * a bug for which, the upgrader updates the db version without
     * running the upgrades. So in 3.0.8 we are going to run the upgrade
     * from 3.0.7.
     */
    class V_3_0_8 extends \WeDevs\DokanPro\Upgrade\Upgraders\V_3_0_7
    {
    }
    class V_3_1_1 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Upgrade the license key
         *
         * @return void
         */
        public static function upgrade_license_key()
        {
        }
        /**
         * Update the missing shipping zone locations table data
         *
         * @since 3.0.7
         *
         * @return void
         */
        public static function update_subscription_product_pack_enddate()
        {
        }
    }
    class V_3_2_0 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Update the missing shipping zone locations table data
         *
         * @since 3.2.0
         *
         * @return void
         */
        public static function update_dokan_subscription_meta()
        {
        }
    }
    class V_3_2_4 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Create dokan shipping tracking table
         *
         * @since 3.2.3
         *
         * @return void
         */
        public static function create_dokan_shipping_tracking_table()
        {
        }
    }
    class V_3_3_7 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Update PayPal Marketplace Webhooks
         *
         * @since 3.3.7
         *
         * @return void
         */
        public static function update_paypal_marketplace_webhooks()
        {
        }
        /**
         * Give default dokan_export_product capability
         * to vendor_staff to export the order list
         *
         * @since 3.3.7
         *
         * @return void
         */
        public static function add_dokan_export_product_capability_to_staff()
        {
        }
        /**
         * Updates Delivery time database table
         *
         * @since 3.3.7
         *
         * @return void
         */
        public static function update_delivery_time_table()
        {
        }
    }
    class V_3_5_2 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Updates Delivery time database table
         *
         * @since 3.5.2
         *
         * @return void
         */
        public static function update_delivery_time_table()
        {
        }
        /**
         * Update booking relationships table.
         *
         * @since 3.5.2
         *
         * @return void
         */
        public static function update_booking_relationships_table()
        {
        }
    }
    class V_3_7_0 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Updates dokan color settings data.
         *
         * @since 3.7.0
         *
         * @return void
         */
        public static function update_dokan_color_settings()
        {
        }
        /**
         * Updates dokan rma settings data.
         *
         * @since 3.7.0
         *
         * @return void
         */
        public static function update_dokan_rma_settings()
        {
        }
        /**
         * Updates Distance rate rules database table
         *
         * @since 3.7.0
         *
         * @return void
         */
        public static function update_distance_rate_rules_table()
        {
        }
    }
    class V_3_7_4 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Updates categories for vendor subscription products.
         *
         * @since DOKAN_SINCE
         *
         * @return void
         */
        public static function update_vendor_subscription_products_categories()
        {
        }
        /**
         * Remove unfiltered_html capability from vendor staff role.
         *
         * @since 3.7.4
         *
         * @return void
         */
        public static function remove_unfiltered_html_capability()
        {
        }
    }
    class V_3_7_8 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Updates admin delivery time settings data.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public static function update_admin_delivery_settings()
        {
        }
        /**
         * Updates usermeta database table column. Before on,
         * delivery time gets single data in usermeta. Now, we
         * are setting data as array for multiple delivery times.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public static function update_vendor_delivery_times()
        {
        }
    }
    class V_3_7_17 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Remove store categories from non-seller users.
         *
         * @since 3.7.17
         *
         * @return void
         */
        public static function remove_store_categories()
        {
        }
    }
    class V_3_7_21 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Remove store categories from deleted users.
         *
         * @since 3.7.21
         *
         * @return void
         */
        public static function remove_store_categories()
        {
        }
        /**
         * Add missing store name meta key for admin users.
         *
         * @since 3.7.21
         *
         * @return void
         */
        public static function add_store_name_metakey()
        {
        }
    }
    class V_3_8_0 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Add _dokan_vendor_id metadata if not exists for subscription orders.
         *
         * @since 3.8.0
         *
         * @return void
         */
        public static function add_vendor_id_for_vps_recurring_orders()
        {
        }
        /**
         * Store webhook secret for stripe express under payment gateway settings.
         *
         * @since 3.8.0
         *
         * @return void
         */
        public static function add_stripe_express_webhook_secret()
        {
        }
    }
    /**
     * Dokan Pro V_3_8_3 Upgrader Class.
     *
     * @since 3.8.3
     */
    class V_3_8_3 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Update Store Phone Verification Info.
         *
         * @since 3.8.3
         *
         * @return void
         */
        public static function dokan_update_store_phone_verification_info()
        {
        }
    }
    /**
     * Dokan Pro V_3_9_0 Upgrader Class.
     *
     * @since 3.9.0
     */
    class V_3_9_0 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Update Product Status to Publish from Vacation.
         *
         * @since 3.9.0
         *
         * @return void
         */
        public static function update_product_status_to_publish_from_vacation()
        {
        }
        /**
         * Adds id key in woocommerce product addon.
         *
         * @since 3.9.0
         *
         * @return void
         */
        public static function add_id_in_woocommerce_product_addon()
        {
        }
    }
    /**
     * Dokan Pro V_3_8_4 Upgrader Class.
     *
     * @since 3.8.4
     */
    class V_3_9_4 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Update Store Phone Verification Info.
         *
         * @since 3.9.4
         *
         * @return void
         */
        public static function dokan_update_auction_product_duplicate_permission()
        {
        }
    }
    /**
     * Dokan Pro V_3_9_7 Upgrader Class.
     *
     * @since 3.9.7
     */
    class V_3_9_7 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Update Store Phone Verification Info.
         *
         * @since 3.9.7
         *
         * @return void
         */
        public static function update_stripe_express_account_info()
        {
        }
        /**
         * Update Stripe Express Webhook Events.
         *
         * @since 3.9.7
         *
         * @return void
         */
        public static function update_stripe_express_webhook_events()
        {
        }
    }
    /**
     * Dokan Pro V_3_9_11 Upgrader Class.
     *
     * @since 3.10.0
     */
    class V_3_10_0 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Updates inbox menu permission for administrator
         *
         * @since 3.10.0
         *
         * @return void
         */
        public static function dokanUpdateMenuManagerInboxMenuPermission()
        {
        }
        /**
         * Update Stripe Express Webhook Events.
         *
         * @since 3.10.0
         *
         * @return void
         */
        public static function update_stripe_express_webhook_events()
        {
        }
    }
    /**
     * Migrate Previously submitted Verification requests.
     *
     * @since 3.11.1
     */
    class V_3_11_1 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Migrate the Previous submissions.
         *
         * @since 3.11.1
         *
         * @return void
         */
        public static function migrate_verification_submissions()
        {
        }
    }
    class V_3_12_3 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Updates RFQ database table.
         *
         * @since 3.12.3
         *
         * @return void
         */
        public static function update_request_for_quote_table()
        {
        }
    }
    /**
     * V_3_12_6 Upgrader Class.
     *
     * @since 3.13.0
     */
    class V_3_12_6 extends \WeDevs\DokanPro\Abstracts\DokanProUpgrader
    {
        /**
         * Update Meta Data for Vendor Subscription Orders.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public static function update_vendor_subscription_orders_meta_data()
        {
        }
    }
}
namespace WeDevs\DokanPro\Upgrade {
    class Upgrades
    {
        /**
         * Get DB installed version number
         *
         * @since 3.0.0
         *
         * @return string
         */
        public static function get_db_installed_version()
        {
        }
        /**
         * Detects if upgrade is required
         *
         * @since 3.0.0
         *
         * @param bool $is_required
         *
         * @return bool
         */
        public static function is_upgrade_required($is_required = false)
        {
        }
        /**
         * Update Dokan Pro version number in DB
         *
         * @since 3.0.0
         *
         * @return void
         */
        public static function update_db_dokan_pro_version()
        {
        }
        /**
         * Get upgrades
         *
         * @since 3.0.0
         *
         * @param array $upgrades
         *
         * @return array
         */
        public static function get_upgrades($upgrades = [])
        {
        }
    }
}
namespace WeDevs\DokanPro\VendorDiscount\Abstracts {
    /**
     * Abstract Class VendorDiscount
     *
     * @since   3.9.4
     *
     * @package WeDevs\DokanPro\VendorDiscount\Abstracts
     */
    abstract class VendorDiscount
    {
        /**
         * Cart item key.
         *
         * @since 3.9.4
         *
         * @var mixed|string
         */
        protected $cart_item_key = '';
        /**
         * Get coupon code
         *
         * @since 3.9.4
         *
         * @return string
         */
        abstract public function get_coupon_code(): string;
        /**
         * Check if coupon is capable to apply.
         *
         * @since 3.9.4
         *
         * @return bool
         */
        abstract public function is_applicable(): bool;
        /**
         * Is product or order discount being enabled
         *
         * @since 3.9.4
         *
         * @return bool
         */
        abstract public function enabled(): bool;
        /**
         * Apply coupon.
         *
         * @since 3.9.4
         *
         * @return bool
         */
        abstract public function apply(): bool;
        /**
         * Get a cart item key.
         *
         * @since 3.9.4
         *
         * @return mixed|string
         */
        public function get_cart_item_key()
        {
        }
        /**
         * Sets a cart item key.
         *
         * @since 3.9.4
         *
         * @param $cart_item_key
         *
         * @return $this
         */
        public function set_cart_item_key($cart_item_key): self
        {
        }
        /**
         * If the generated coupon is already applied to the cart.
         *
         * @since 3.9.4
         *
         * @return bool
         */
        public function is_already_applied(): bool
        {
        }
        /**
         * Remove coupon from cart.
         *
         * @since 3.9.4
         *
         * @return static
         */
        public function remove(): self
        {
        }
        /**
         * Delete coupon.
         *
         * @since 3.9.4
         *
         * @return static
         */
        public function delete_coupon(): self
        {
        }
        /**
         * Generate and get coupon.
         *
         * @since 3.9.4
         *
         * @param array $args
         *
         * @return WC_Coupon
         */
        public function generate_and_get_coupon(array $args = []): \WC_Coupon
        {
        }
    }
}
namespace WeDevs\DokanPro\VendorDiscount\Admin {
    class Discount
    {
        /**
         * Class constructor.
         *
         * @since 3.10.0
         */
        public function __construct()
        {
        }
        /**
         * Add license valid/invalid key in localize data.
         *
         * @since 3.10.0
         *
         * @param $data
         *
         * @return mixed
         */
        public function add_is_valid($data)
        {
        }
        /**
         * Add `is_lite` key to all dokan lit admin settings fields.
         *
         * @since DOKAN_SINCE
         *
         * @param array $settings_data
         *
         * @return mixed
         */
        public function add_dokan_lite_key_to_all_dokan_lite_settings_field($settings_data)
        {
        }
        /**
         * Show license expire warning notice when 7 days remaining and show expired alert notice when license expired.
         *
         * @since 3.10.0
         *
         * @param $notices
         *
         * @return mixed
         */
        public function show_notice($notices)
        {
        }
        /**
         * Refresh dokan pro-license and if invalid license then deactivate all dokan pro modules.
         *
         * @since 3.10.0
         *
         * @return void
         */
        public function check_and_disable_dokan_pro_functionality()
        {
        }
    }
    /**
     * Class Settings
     *
     * @since   3.9.4
     *
     * @package WeDevs\DokanPro\VendorDiscount\Admin
     */
    class Hooks
    {
        /**
         * Class constructor
         *
         * @since 3.9.4
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Remove vendor discount coupons from admin coupon list table
         *
         * @since 3.9.4
         *
         * @return void
         */
        public function remove_vendor_discount_coupons()
        {
        }
        /**
         * Delete vendor discount coupons
         *
         * @since 3.9.4
         *
         * @return void
         */
        public function delete_vendor_discount_coupons()
        {
        }
        /**
         * Display vendor discounts data
         *
         * @since 3.9.4
         *
         * @param int $order_id
         *
         * @return void
         */
        public function display_order_discounts($order_id)
        {
        }
    }
    /**
     * Class Settings
     *
     * @since   3.9.4
     *
     * @package WeDevs\DokanPro\VendorDiscount\Admin
     */
    class Settings
    {
        /**
         * Class constructor
         *
         * @since 3.9.4
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add discount settings
         *
         * @since 2.9.13
         * @since 3.9.4 extracted this method from add_settings_selling_option_vendor_capability() under includes/Admin/Admin.php to here
         *
         * @param array $settings_fields
         *
         * @return array
         */
        public function add_discount_settings($settings_fields)
        {
        }
        /**
         * Check if admin enabled order discount for vendors
         *
         * @since 3.9.4
         *
         * @return bool
         */
        public function is_order_discount_enabled()
        {
        }
        /**
         * Check if admin enabled product quantity discount for vendors
         *
         * @since 3.9.4
         *
         * @return bool
         */
        public function is_product_discount_enabled()
        {
        }
    }
}
namespace WeDevs\DokanPro\VendorDiscount {
    /**
     * Class Controller
     *
     * @since   3.9.4
     *
     * @package WeDevs\DokanPro\VendorDiscount
     *
     * @property Admin\Settings         $admin_settings     Admin settings controller
     * @property Admin\Hooks            $admin_hooks        Admin settings controller
     * @property Frontend\Dashboard     $frontend_dashboard Frontend dashboard controller
     * @property Frontend\StoreSettings $store_settings     Frontend store controller
     * @property Hooks                  $woocommerce_hooks  WooCommerce hooks controller
     * @property DeprecatedMethods      $deprecated_methods Deprecated methods controller
     */
    class Controller
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Class constructor
         *
         * @since 3.9.4
         *
         * @return void
         */
        public function __construct()
        {
        }
    }
    /**
     * After rewriting the discount system, we have to keep the old discount system to keep the backward compatibility.
     *
     * @since 3.9.4
     */
    class DeprecatedMethods
    {
        /**
         * Class constructor
         *
         * @since 3.9.4
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Display order discounts on orders
         *
         * @since 2.9.13
         * @since 3.9.4 Moved here
         *
         * @param array    $table_rows
         * @param WC_Order $order
         *
         * @return array
         */
        public function display_order_discounts($table_rows, $order)
        {
        }
        /**
         * Display order discounts on wc admin order table
         *
         * @since 2.9.13
         * @since 3.9.4 Moved here
         *
         * @param int $order_id
         *
         * @return void
         */
        public function display_order_discounts_on_wc_admin_order($order_id)
        {
        }
        /**
         * Get discount by order
         *
         * @since 2.9.13
         * @since 3.9.4 Moved here
         *
         * @param int $order_id
         *
         * @return array
         */
        public function dokan_get_discount_by_order($order_id)
        {
        }
        /**
         * Update item total price if product-based discount is applied
         *
         * @since 3.4.0
         * @since 3.9.4 moved here
         *
         * @param float         $get_total
         * @param WC_Order_Item $item
         * @param WC_Order      $order
         *
         * @return float $get_total
         */
        public function update_item_price_for_discount($get_total, $item, $order)
        {
        }
        /**
         * Get product quantity discount
         *
         * @since 3.9.4
         *
         * @param WC_Order $order
         *
         * @return float
         */
        public function get_product_quantity_discount(\WC_Order $order): float
        {
        }
        /**
         * Get order discount
         *
         * @since 3.9.4
         *
         * @param WC_Order $order
         *
         * @return float
         */
        public function get_order_discount(\WC_Order $order): float
        {
        }
    }
}
namespace WeDevs\DokanPro\VendorDiscount\Frontend {
    /**
     * Class Dashboard
     *
     * @since   3.9.4
     *
     * @package WeDevs\DokanPro\VendorDiscount\Frontend
     */
    class Dashboard
    {
        /**
         * Class constructor
         *
         * @since 3.9.4
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Render product lot discount options
         *
         * @since 2.6
         * @since 3.9.4 moved this method from load_lot_discount_content() method under includes/Products.php
         *
         * @param \WP_Post $post
         * @param int      $post_id
         *
         * @return void
         */
        public function load_discount_content($post, $post_id)
        {
        }
        /**
         * Save discount data
         *
         * @since 2.6
         * @since 3.9.4 extracted this method from save_pro_product_data() method under includes/Products.php
         *
         * @param int $post_id
         * @param array|\WP_REST_Request $post_data
         *
         * @return void
         */
        public function save_discount_data($post_id, $post_data)
        {
        }
        /**
         * Replace coupon name with the discount label.
         *
         * @since 3.9.4
         *
         * @param string               $item_link
         * @param WC_Order_Item_Coupon $item
         *
         * @return string
         */
        public function order_item_coupon_url($item_link, $item): string
        {
        }
    }
    /**
     * Class StoreSettings
     *
     * @since   3.9.4
     *
     * @package WeDevs\DokanPro\VendorDiscount\Frontend
     */
    class StoreSettings
    {
        /**
         * Class constructor
         *
         * @since 3.9.4
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Render discount options
         *
         * @since 2.6
         * @since 3.9.4 moved this method from includes/Settings.php
         *
         * @param \WP_User $current_user
         * @param array    $profile_info
         *
         * @return void
         **/
        public function add_order_discount($current_user, $profile_info)
        {
        }
        /**
         * Save discount settings data
         *
         * @since 2.6
         * @since 3.9.4 moved this file from includes/Settings.php
         *
         * @param array $dokan_settings
         * @param int   $store_id
         *
         * @return array
         **/
        public function save_order_discount_settings($dokan_settings)
        {
        }
        /**
         * Update order discount coupon value when order discount value is updated in vendor settings.
         *
         * @since 3.9.4
         *
         * @param int $store_id
         *
         * @return void
         */
        public function update_order_discount_coupon_value(int $store_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\VendorDiscount {
    /**
     * Class Helper
     *
     * @since   3.9.4
     *
     * @package WeDevs\DokanPro\VendorDiscount
     */
    class Helper
    {
        /**
         * Get discounts by order
         *
         * @since 3.9.4
         *
         * @param WC_Order|int $order
         *
         * @return array
         */
        public static function get_discounts_by_order($order)
        {
        }
        /**
         * Check if coupon is a vendor discount coupon
         *
         * @since 3.9.4
         *
         * @param WC_Coupon $coupon
         *
         * @return bool
         */
        public static function is_vendor_discount_coupon(\WC_Coupon $coupon)
        {
        }
        /**
         * Check if coupon is a vendor order discount coupon
         *
         * @since 3.9.4
         *
         * @param WC_Coupon $coupon
         *
         * @return bool
         */
        public static function is_vendor_order_discount_coupon(\WC_Coupon $coupon)
        {
        }
        /**
         * Check if coupon is a vendor product quantity discount coupon
         *
         * @since 3.9.4
         *
         * @param WC_Coupon $coupon
         *
         * @return bool
         */
        public static function is_vendor_product_quantity_discount_coupon(\WC_Coupon $coupon)
        {
        }
    }
    /**
     * Class Hooks
     *
     * @since   3.9.4
     *
     * @package WeDevs\DokanPro\VendorDiscount
     */
    class Hooks
    {
        /**
         * Hooks constructor.
         *
         * @since 3.9.4
         */
        public function __construct()
        {
        }
        /**
         * Generate and apply coupon for order and product quantity discount.
         *
         * @since 3.9.4
         *
         * @return void
         */
        public function generate_and_apply_coupon_for_discount(): void
        {
        }
        /**
         * Apply product quantity discount.
         *
         * @since 3.9.4
         *
         * @return void
         */
        public function apply_product_discounts(): void
        {
        }
        /**
         * Apply order total discount.
         *
         * @since 3.9.4
         *
         * @return void
         */
        public function apply_order_discounts(): void
        {
        }
        /**
         * Delete coupon if it is a vendor discount coupon.
         *
         * @since 3.9.4
         *
         * @param string    $err
         * @param string    $err_code
         * @param WC_Coupon $coupon
         *
         * @return string
         */
        public function maybe_delete_coupon($err, $err_code, $coupon)
        {
        }
        /**
         * Erase remove coupon button.
         *
         * @since 3.9.4
         *
         * @param string    $coupon_html
         * @param WC_Coupon $coupon
         * @param string    $discount_amount_html
         *
         * @return string
         */
        public function erase_remove_coupon_button(string $coupon_html, \WC_Coupon $coupon, string $discount_amount_html): string
        {
        }
        /**
         * Change coupon label text in a cart totals section.
         *
         * @since 3.9.4
         *
         * @param string    $label
         * @param WC_Coupon $coupon
         *
         * @return string
         */
        public function change_coupon_label(string $label, \WC_Coupon $coupon): string
        {
        }
        /**
         * Change coupon applied success message for product quantity and order discount.
         *
         * @since 3.9.4
         *
         * @param string    $msg
         * @param string    $msg_code
         * @param WC_Coupon $coupon
         *
         * @return string
         */
        public function change_coupon_success_message(string $msg, string $msg_code, \WC_Coupon $coupon): string
        {
        }
        /**
         * Update product quantity discount coupon value when product quantity discount is updated.
         *
         * @since 3.9.4
         *
         * @param int   $product_id
         * @param array $data
         *
         * @return void
         */
        public function update_product_discount_coupon_value(int $product_id, array $data)
        {
        }
        /**
         * Update product quantity discount coupon value when product quantity discount is updated.
         *
         * @since 3.9.4
         *
         * @param int $order_id
         *
         * @return void
         */
        public function delete_product_discount_coupon_after_order_completed(int $order_id)
        {
        }
        /**
         * Replace coupon name with the discount label.
         *
         * @since 3.9.4
         *
         * @param array             $items
         * @param WC_Order          $order
         * @param array|null|string $types
         *
         * @return array
         */
        public function replace_coupon_name(array $items, $order, $types)
        {
        }
        /**
         * Display order discounts under customer orders
         *
         * @since 3.9.4
         *
         * @param array    $table_rows
         * @param WC_Order $order
         *
         * @return array
         */
        public function display_order_discounts($table_rows, $order): array
        {
        }
        /**
         * Skip copying coupon to sub order if the coupon is not for the current vendor
         *
         * @since 3.9.4
         *
         * @param bool                 $copy
         * @param WC_Coupon            $coupon
         * @param WC_Order_Item_Coupon $item
         * @param WC_Order             $order
         *
         * @return bool
         */
        public function copy_coupon_to_sub_order($copy, $coupon, $item, $order)
        {
        }
        /**
         * Show product on cart line item.
         *
         * @since 3.11.4
         *
         * @param string $price_html
         * @param array  $cart_item
         * @param string $cart_item_key
         *
         * @return mixed|string
         */
        public function show_product_discount_on_cart_line_item($price_html, $cart_item, $cart_item_key)
        {
        }
        /**
         * Show order discount on dokan store page.
         *
         * @since 3.11.4
         *
         * @param \WP_User $store_user
         *
         * @return void
         */
        public function show_order_discount_on_store_page($store_user)
        {
        }
        /**
         * Show product discount below product price label.
         *
         * @since 3.11.4
         *
         * @param string      $price_html
         * @param \WC_Product $product
         *
         * @return mixed|string
         */
        public function add_product_discount_text_below_product_price($price_html, $product)
        {
        }
    }
    /**
     * Class OrderDiscount
     *
     * @since   3.9.4
     *
     * @package WeDevs\DokanPro\VendorDiscount
     */
    class OrderDiscount extends \WeDevs\DokanPro\VendorDiscount\Abstracts\VendorDiscount
    {
        /**
         * Is the minimum order discount being enabled or not?
         *
         * @since 3.9.4
         *
         * @var string
         */
        const SHOW_MIN_ORDER_DISCOUNT = 'show_min_order_discount';
        /**
         * Enable `minimum order discount` setting key.
         *
         * @since 3.9.4
         *
         * @var string
         */
        const SETTING_SHOW_MIN_ORDER_DISCOUNT = 'setting_show_minimum_order_discount_option';
        /**
         * Minimum order amount setting key.
         *
         * @since 3.9.4
         *
         * @var string
         */
        const SETTING_MINIMUM_ORDER_AMOUNT = 'setting_minimum_order_amount';
        /**
         * Order percentage setting key.
         *
         * @since 3.9.4
         *
         * @var string
         */
        const SETTING_ORDER_PERCENTAGE = 'setting_order_percentage';
        /**
         * Order discount-type key.
         *
         * @since 3.9.4
         *
         * @var string
         */
        const DISCOUNT_TYPE_KEY = 'dokan_order_total_discount';
        /**
         * Returns coupon label
         *
         * @since 3.9.4
         *
         * @param        $percentage
         * @param        $min_order
         * @param string $store_name
         *
         * @return string
         */
        public static function get_coupon_label($percentage, $min_order, string $store_name = ''): string
        {
        }
        /**
         * Returns order ids.
         *
         * @since 3.9.4
         *
         * @return string|array|mixed
         */
        public function get_product_ids()
        {
        }
        /**
         * Returns total amount.
         *
         * @since 3.9.4
         *
         * @return float
         */
        public function get_total_amount(): float
        {
        }
        /**
         * Sets vendor.
         *
         * @since 3.9.4
         *
         * @param Vendor $vendor
         *
         * @return $this
         */
        public function set_vendor(\WeDevs\Dokan\Vendor\Vendor $vendor): self
        {
        }
        /**
         * Sets total amount.
         *
         * @since 3.9.4
         *
         * @param float $total_amount
         *
         * @return $this
         */
        public function set_total_amount(float $total_amount): self
        {
        }
        /**
         * Get vendor.
         *
         * @since 3.9.4
         *
         * @return Vendor
         */
        public function get_vendor(): \WeDevs\Dokan\Vendor\Vendor
        {
        }
        /**
         * Get minimum order amount.
         *
         * @since 3.9.4
         *
         * @return float
         */
        public function get_minimum_order_amount(): float
        {
        }
        /**
         * Get discount percentage.
         *
         * @since 3.9.4
         *
         * @return float
         */
        public function get_discount_percentage(): float
        {
        }
        /**
         * The minimum order discount is enabled or not.
         *
         * @since 3.9.4
         *
         * @return bool
         */
        public function enabled(): bool
        {
        }
        /**
         * Is the discount applicable or not?
         *
         * @since 3.9.4
         *
         * @return bool
         */
        public function is_applicable(): bool
        {
        }
        /**
         * Apply discount.
         *
         * @since 3.9.4
         *
         * @return bool
         */
        public function apply(): bool
        {
        }
        /**
         * Get coupon code.
         *
         * @since 3.9.4
         *
         * @return string
         */
        public function get_coupon_code(): string
        {
        }
        /**
         * Sets product ids.
         *
         * @since 3.9.4
         *
         * @param int|array|mixed $product_ids
         *
         * @return $this
         */
        public function set_product_ids($product_ids): self
        {
        }
    }
    /**
     * Class OrderItemCouponMeta
     *
     * @since   3.9.4
     *
     * @package WeDevs\DokanPro\VendorDiscount
     */
    class OrderItemCouponMeta extends \WC_Order_Item_Coupon
    {
        /**
         * Coupon id.
         *
         * @since 3.9.4
         *
         * @var int
         */
        protected $coupon_id = 0;
        /**
         * Coupon code.
         *
         * @since 3.9.4
         *
         * @var string
         */
        protected $coupon_code = '';
        /**
         * OrderItemCouponMeta constructor.
         *
         * @since 3.9.4
         *
         * @param WC_Order_Item_Coupon $item
         */
        public function __construct(\WC_Order_Item_Coupon $item)
        {
        }
        /**
         * Get coupon id.
         *
         * @since 3.9.4
         *
         * @return int
         */
        public function get_coupon_id()
        {
        }
        /**
         * Get coupon code.
         *
         * @since 3.9.4
         *
         * @return string
         */
        public function get_coupon_code()
        {
        }
        /**
         * Get coupon meta data's.
         *
         * @since 3.9.4
         *
         * @return array
         */
        public function get_coupon_meta_datas(): array
        {
        }
        /**
         * Get meta value.
         *
         * @since 3.9.4
         *
         * @param string $key
         * @param mixed  $default
         *
         * @return mixed
         */
        public function get_coupon_meta(string $key, $default = false)
        {
        }
        /**
         * Check if coupon is vendor discount coupon.
         *
         * @since 3.9.4
         *
         * @return bool
         */
        public function is_vendor_discount_coupon()
        {
        }
        /**
         * Check if coupon is vendor order discount coupon.
         *
         * @since 3.9.4
         *
         * @return bool
         */
        public function is_vendor_order_discount_coupon()
        {
        }
        /**
         * Check if coupon is vendor product discount coupon.
         *
         * @since 3.9.4
         *
         * @return bool
         */
        public function is_vendor_product_quantity_discount_coupon()
        {
        }
        /**
         * Get coupon vendor id.
         *
         * @since 3.9.4
         *
         * @return int
         */
        public function get_coupon_vendor_id()
        {
        }
    }
    /**
     * Class ProductDiscount
     *
     * @since   3.9.4
     *
     * @package WeDevs\DokanPro\VendorDiscount
     */
    class ProductDiscount extends \WeDevs\DokanPro\VendorDiscount\Abstracts\VendorDiscount
    {
        /**
         * Product discount type.
         *
         * @since 3.9.4
         *
         * @var string
         */
        const DISCOUNT_TYPE_KEY = 'dokan_product_quantity_discount';
        /**
         * Product discount meta keys.
         *
         * @since 3.9.4
         *
         * @var string
         */
        const LOT_DISCOUNT_QUANTITY = '_lot_discount_quantity';
        /**
         * Product discount meta keys.
         *
         * @since 3.9.4
         *
         * @var string
         */
        const LOT_DISCOUNT_AMOUNT = '_lot_discount_amount';
        /**
         * Product discount meta keys.
         *
         * @since 3.9.4
         *
         * @var string
         */
        const IS_LOT_DISCOUNT = '_is_lot_discount';
        /**
         * Returns coupon label
         *
         * @since 3.9.4
         */
        public static function get_coupon_label($percentage, $product_name, $product_count): string
        {
        }
        /**
         * Apply coupon for those products that has discount.
         *
         * @since 3.9.4
         *
         * @return bool
         */
        public function apply(): bool
        {
        }
        /**
         * Is the discount applicable to product?
         *
         * @since 3.9.4
         *
         * @return bool
         */
        public function is_applicable(): bool
        {
        }
        /**
         * Is product discount being enabled?
         *
         * @since 3.9.4
         *
         * @return bool
         */
        public function enabled(): bool
        {
        }
        /**
         * Generate and get coupon.
         *
         * @since 3.9.4
         *
         * @return string
         */
        public function get_coupon_code(): string
        {
        }
        /**
         * Get product discount values.
         *
         * @since 3.9.4
         *
         * @return int
         */
        public function get_discount_quantity(): int
        {
        }
        /**
         * Get product discount percentage.
         *
         * @since 3.9.4
         *
         * @return float
         */
        public function get_discount_percentage(): float
        {
        }
        /**
         * Get product id.
         *
         * @since 3.9.4
         *
         * @return int|mixed
         */
        public function get_product_id()
        {
        }
        /**
         * Get product quantity.
         *
         * @since 3.9.4
         *
         * @return int|mixed
         */
        public function get_quantity()
        {
        }
        /**
         * Get item product.
         *
         * @since 3.9.4
         *
         * @return false|WC_Product|null
         */
        public function get_item_product(): \WC_Product
        {
        }
        /**
         * Set item product.
         *
         * @since 3.9.4
         *
         * @param false|WC_Product|null $item_product
         *
         * @return $this
         */
        public function set_item_product($item_product): \WeDevs\DokanPro\VendorDiscount\ProductDiscount
        {
        }
        /**
         * Set product quantity.
         *
         * @since 3.9.4
         *
         * @param $quantity
         *
         * @return $this
         */
        public function set_quantity($quantity): self
        {
        }
        /**
         * Set product id.
         *
         * @since 3.9.4
         *
         * @param int|mixed $product_id
         */
        public function set_product_id($product_id): self
        {
        }
    }
}
namespace WeDevs\DokanPro\Widgets {
    /**
     * Dokan Best Seller Widget Class
     *
     * @since 1.0
     *
     * @package dokan
     */
    class BestSeller extends \WP_Widget
    {
        /**
         * Constructor
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Outputs the HTML for this widget.
         *
         * @param array $args An array of standard parameters for widgets in this theme.
         * @param array $instance An array of settings for this widget instance.
         *
         * @return void Echoes it's output
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Deals with the settings when they are saved by the admin. Here is
         * where any validation should be dealt with.
         *
         * @param array $new_instance An array of new settings as submitted by the admin.
         * @param array $old_instance An array of the previous settings.
         *
         * @return array The validated and (if necessary) amended settings
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Displays the form for this widget on the Widgets page of the WP Admin area.
         *
         * @param array $instance An array of the current settings for this widget.
         *
         * @return void Echoes it's output
         */
        public function form($instance)
        {
        }
    }
    /**
     * Dokan Featured Seller Widget
     *
     * Note: this is `featured` seller not `feature` seller
     *
     * @since 1.0
     *
     * @package dokan
     */
    class FeatureSeller extends \WP_Widget
    {
        /**
         * Constructor
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Outputs the HTML for this widget.
         *
         * @param array $args An array of standard parameters for widgets in this theme.
         * @param array $instance An array of settings for this widget instance.
         *
         * @return void Echoes it's output
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Deals with the settings when they are saved by the admin. Here is
         * where any validation should be dealt with.
         *
         * @param array $new_instance An array of new settings as submitted by the admin.
         * @param array $old_instance An array of the previous settings.
         *
         * @return array The validated and (if necessary) amended settings.
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Displays the form for this widget on the Widgets page of the WP Admin area.
         *
         * @param array $instance An array of the current settings for this widget.
         *
         * @return void Echoes it's output
         */
        public function form($instance)
        {
        }
    }
}
namespace WeDevs\DokanPro\Withdraw {
    /**
     * Helper class for withdraw and disbursement functionality.
     */
    class Helper
    {
        /**
         * Check if Biweekly schedule active.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_biweekly_schedule_active()
        {
        }
        /**
         * Check if Monthly schedule active
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_monthly_schedule_active()
        {
        }
        /**
         * Get the months to run the quarterly schedule.
         *
         * @since 3.5.0
         *
         * @param string $quarter_month Starting month for the quarter.
         *
         * @return array
         */
        public static function get_quarterly_schedule_months($quarter_month)
        {
        }
        /**
         * Get array of weeks in month.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_weeks_of_month_list()
        {
        }
        /**
         * Get disbursement methods.
         *
         * @since 3.7.2
         *
         * @return array
         */
        public static function get_disbursement_schedules()
        {
        }
        /**
         * Get day of week for cron.
         *
         * @since 3.5.0
         *
         * @param string $week_day
         *
         * @return string
         */
        public static function get_cron_day_of_week($week_day)
        {
        }
        /**
         * Get every schedule execution or start time on 24-hour format
         * or cron schedule format (minuit hour).
         *
         * @since 3.5.0
         *
         * @param bool $twenty_four_hour_format Want to get 24-hour format back?
         *
         * @return string
         */
        public static function get_schedule_start_time($twenty_four_hour_format = false)
        {
        }
        /**
         * Get human-readable week of month.
         *
         * @since 3.5.0
         *
         * @param string $week
         *
         * @return string
         */
        public static function get_human_readable_week_of_month($week)
        {
        }
        /**
         * Get descriptive week of month like first, second, last etc.
         *
         * @since 3.5.0
         *
         * @param string $week
         *
         * @return string
         */
        public static function get_descriptive_week_of_month($week)
        {
        }
        /**
         * Check if weekly schedule active.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_weekly_schedule_active()
        {
        }
        /**
         * Check if withdraw disbursement enabled in admin settings.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_withdraw_disbursement_enabled()
        {
        }
        /**
         * Get the admin selected starting month for quarterly schedule.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_option_quarterly_schedule()
        {
        }
        /**
         * Get the admin selected day of week for weekly schedule.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_option_weekly_schedule()
        {
        }
        /**
         * Get the admin selected starting week for biweekly schedule.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_option_biweekly_schedule()
        {
        }
        /**
         * Get active withdraw system by admin.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_active_withdraw_systems()
        {
        }
        /**
         * Check if Quarterly schedule active
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_quarterly_schedule_active()
        {
        }
        /**
         * Get vendor's currently selected schedule.
         *
         * @since 3.5.0
         *
         * @param int $vendor_id (Optional)
         *
         * @return string
         */
        public static function get_selected_schedule($vendor_id = 0)
        {
        }
        /**
         * Get vendor's currently selected minimum withdraw amount.
         *
         * @since 3.5.0
         *
         * @param int $vendor_id (Optional)
         *
         * @return int
         */
        public static function get_selected_minimum_withdraw_amount($vendor_id = 0)
        {
        }
        /**
         * Check if manual withdraw enabled in admin settings.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_manual_withdraw_enabled()
        {
        }
        /**
         * Get array of days in week for cron.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_cron_days_of_week_list()
        {
        }
        /**
         * Get human-readable day of week.
         *
         * @since 3.5.0
         *
         * @param string $day
         *
         * @return string
         */
        public static function get_human_readable_day_of_week($day)
        {
        }
        /**
         * Get array of weeks in month like first, second, last etc.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_descriptive_weeks_of_month_list()
        {
        }
        /**
         * Get the admin selected day for monthly schedule.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_option_monthly_schedule()
        {
        }
        /**
         * Get array of days in week.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_days_of_week_list()
        {
        }
        /**
         * Get the weeks to run the biweekly schedule.
         *
         * @since 3.5.0
         *
         * @param $biweekly_week
         *
         * @return array
         */
        public static function get_biweekly_schedule_weeks($biweekly_week)
        {
        }
        /**
         * Get withdraw schedule title.
         *
         * @since 3.5.0
         *
         * @param string $schedule
         *
         * @return string
         */
        public static function get_schedule_title($schedule)
        {
        }
        /**
         * Get array of month.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_month_list()
        {
        }
        /**
         * Check if withdraw operation is enabled.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_withdraw_operation_enabled()
        {
        }
        /**
         * Get quarterly starting month in `int`.
         *
         * @since 3.5.0
         *
         * @param string $month
         *
         * @return string
         */
        public static function get_quarterly_start_month($month)
        {
        }
        /**
         * Get Active Schedules from admin settings
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_active_schedules()
        {
        }
        /**
         * Get minimum withdraw amount.
         * if no minimum amount return `false`.
         *
         * @since 3.5.0
         *
         * @return false|string
         */
        public static function get_minimum_withdraw_amount()
        {
        }
        /**
         * Get human-readable month
         *
         * @since 3.5.0
         *
         * @param string $month
         *
         * @return string
         */
        public static function get_human_readable_month($month)
        {
        }
        /**
         * Get Minimum Withdraw Amount limit list.
         *
         * @since 3.5.0
         *
         * @param string|int|float $get_minimum_withdraw_amount
         *
         * @return array
         */
        public static function get_nearest_minimum_withdraw_amount_list($get_minimum_withdraw_amount)
        {
        }
        /**
         * Get minimum remaining balance list.
         *
         * @since 3.5.0
         *
         * @return int[]
         */
        public static function get_minimum_reserve_balance_list()
        {
        }
        /**
         * Get vendor's selected minimum remaining balance after withdraw.
         *
         * @since 3.5.0
         *
         * @param $vendor_id
         *
         * @return int
         */
        public static function get_selected_reserve_balance($vendor_id = 0)
        {
        }
        /**
         * Withdraw schedule change data.
         *
         * @since 3.7.23
         *
         * @param string $schedule
         * @param string $minimum_withdraw_amount
         * @param string $reserve_amount
         * @param string $method
         *
         * @return void
         */
        public static function save_withdraw_schedule($schedule, $minimum_withdraw_amount, $reserve_amount, $method)
        {
        }
    }
    /**
     * This class maps and calculate the minimum withdraw amount list.
     */
    class Limiter
    {
        /**
         * @var int $minimum_value Minimum or starting value.
         */
        public $minimum_value;
        /**
         * @var int $increment_value Increment value.
         */
        public $increment_value = 10;
        /**
         * @var int $max_incremented_value Maximum incremented value.
         */
        public $max_incremented_value = 100;
        /**
         * @var int[][] $increment_values Increment value map.
         */
        public $increment_values = [1 => [1, 10], 2 => [10, 100], 3 => [100, 1000], 4 => [1000, 100000], 5 => [5000, 100000], 6 => [10000, 100000], 7 => [50000, 500000]];
        public function __construct(int $minimum_value)
        {
        }
        /**
         * Get the increment value list.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public function get_list()
        {
        }
        /**
         * Set the increment value dynamically.
         * This method will set the increment value based on the minimum value.
         * If the minimum value is less than 100, then the increment value will be 10.
         * If the minimum value is less than 1000, then the increment value will be 100.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function set_increment_value()
        {
        }
        /**
         * Get the increment values.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public function get_values()
        {
        }
    }
    /**
     * Withdraw Functionality class
     *
     * @since 2.4
     * @since 3.5.0 Automatic Withdraw Disbursement added.
     *
     * @author weDevs <info@wedevs.com>
     */
    class Manager
    {
        /**
         * Constructor for the Manager class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Load withdraw method
         *
         * @since 2.4
         *
         * @param  array $methods
         *
         * @return array
         */
        public function load_withdraw_method($methods)
        {
        }
        /**
         * Callback for Skrill in store settings
         *
         * @since 2.4
         *
         * @global WP_User $current_user
         *
         * @param array $store_settings
         *
         * @return void
         */
        public function dokan_withdraw_method_skrill($store_settings)
        {
        }
        /**
         * Add withdraw disbursement schedule settings subsection.
         *
         * @since 3.5.0
         *
         * @param array $settings
         *
         * @return array
         */
        public function withdraw_disbursement_schedule_settings($settings)
        {
        }
        /**
         * Include Withdraw schedule Section on Withdraw dashboard.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function add_withdraw_schedule_section()
        {
        }
        /**
         * Include Withdraw schedule popup.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function add_withdraw_schedule_popup_template()
        {
        }
        /**
         * Returns withdraw schedule data.
         *
         * @since 3.7.23
         *
         * @return array $schedule_data{
         *     @type boolean $enabled
         *     @type string $selected_schedule
         *     @type array $schedules {
         *          @type string next
         *          @type string title
         *          @type string description
         *     }
         *     @type array $minimum_amount_list
         *     @type integer $minimum_amount_selected
         *     @type array $reserve_balance_list
         *     @type integer $reserve_balance_selected
         *     @type string $active_methods
         *     @type string $default_method
         * }
         */
        public function withdraw_schedule_data()
        {
        }
        /**
         * Get the next scheduled run day of timestamp for selected schedule.
         *
         * @since 3.5.0
         *
         * @param string $schedule_type
         * @param bool $is_timestamp
         *
         * @return int|string
         */
        public function next_scheduled_day_for_withdraw($schedule_type, $is_timestamp = false)
        {
        }
        /**
         * Handle Withdraw schedule change request.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function handle_withdraw_schedule_change_request()
        {
        }
        /**
         * Handle Withdraw schedule remove request.
         *
         * @since 3.7.16
         *
         * @return void
         */
        public function handle_withdraw_schedule_remove_request()
        {
        }
        /**
         * Get the human-readable schedule timing.
         *
         * @since 3.5.0
         *
         * @param string $schedule
         *
         * @return string
         */
        public function get_schedule_description($schedule)
        {
        }
        /**
         * Reschedule on some events like settings save or WP timestamp change.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function reschedule()
        {
        }
        /**
         * Register or set admin selected schedules for withdraw.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function set_schedules()
        {
        }
        /**
         * Set single onetime disbursement schedule for withdraw.
         * It will run as soon as possible.
         *
         * @since 3.5.0
         *
         * @param array $args Schedule argument.
         * @param string $group Schedule group.
         *
         * @return void
         */
        public function set_single_disbursement_schedule($args, $group)
        {
        }
        /**
         * Cancel all schedules for withdraw.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public static function cancel_all_schedules()
        {
        }
        /**
         * Register or set quarterly schedules for withdraw.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function set_quarterly_schedule()
        {
        }
        /**
         * Set monthly schedules for withdraw.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function set_monthly_schedule()
        {
        }
        /**
         * Set biweekly schedules for withdraw.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function set_biweekly_schedule()
        {
        }
        /**
         * Set weekly schedules for withdraw.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function set_weekly_schedule()
        {
        }
        /**
         * Process quarterly schedule.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function process_quarterly_schedule()
        {
        }
        /**
         * Process monthly schedule.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function process_monthly_schedule()
        {
        }
        /**
         * Process biweekly schedule.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function process_biweekly_schedule()
        {
        }
        /**
         * Process weekly schedule.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function process_weekly_schedule()
        {
        }
        /**
         * Process schedule.
         *
         * @since 3.5.0
         *
         * @param string $group_key
         *
         * @return void
         */
        public function process_schedule($group_key)
        {
        }
        /**
         * Process individual onetime schedule.
         *
         * @since 3.5.0
         *
         * @param int $user_id
         *
         * @return void|\WP_Error
         */
        public function process_individual_schedule($user_id)
        {
        }
        /**
         * Process announcement schedule.
         *
         * @since 3.5.0
         *
         * @param array $options
         *
         * @return void
         */
        public function process_announcement_schedule($options)
        {
        }
        /**
         * Process disbursement schedule change announcement schedule.
         *
         * @since 3.7.16
         *
         * @param array $options
         *
         * @return void
         */
        public function process_schedule_change_announcement_schedule($options)
        {
        }
        /**
         * Handle timezone change.
         *
         * @since 3.5.0
         *
         * @param array $old_value
         * @param array $value
         * @param string $option
         *
         * @return void
         */
        public function handle_timezone_change($old_value, $value, $option)
        {
        }
        /**
         * Handle Schedule change.
         *
         * @since 3.5.0
         * @since 3.7.16 Handle admin withdrawal schedule change.
         *
         * @param array $old_value
         * @param array $value
         * @param string $option
         *
         * @return void
         */
        public function handle_schedule_change($old_value, $value, $option)
        {
        }
        /**
         * Handle Schedule settings change.
         *
         * @since 3.5.0
         *
         * @param array $old_value
         * @param array $value
         * @param string $option
         *
         * @return void
         */
        public function handle_schedule_settings_change($old_value, $value, $option)
        {
        }
        /**
         * Handle withdraw operation enable disable.
         *
         * @since 3.5.0
         *
         * @param array $old_value
         * @param array $value
         * @param string $option
         *
         * @return void
         */
        public function handle_withdraw_operation_enable_disable($old_value, $value, $option)
        {
        }
        /**
         * Handle withdraw methods enable disable.
         *
         * @since 3.5.0
         *
         * @param array $old_value
         * @param array $value
         * @param string $option
         *
         * @return void
         */
        public function handle_admin_withdraw_method_change($old_value, $value, $option)
        {
        }
        /**
         * Handle withdraw disbursement schedule enable disable.
         *
         * @since 3.7.16
         *
         * @param array $old_value
         * @param array $value
         * @param string $option
         *
         * @return void
         */
        public function handle_admin_withdraw_schedule_change($old_value, $value, $option)
        {
        }
        /**
         * Unset Seller dashboard withdraw page.
         *
         * @since 3.5.0
         *
         * @param array $urls
         *
         * @return array
         */
        public function unset_withdraw_page_menu($urls)
        {
        }
        /**
         * Validate Withdraw Disbursement system admin settings.
         *
         * @since 3.5.0
         *
         * @param array $option_name
         * @param array $option_value
         *
         * @return void
         */
        public function validate_withdraw_schedule_option($option_name, $option_value)
        {
        }
        /**
         * Disable manual withdraw system.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public function enable_manual_withdraw()
        {
        }
        /**
         * Save Skrill progress settings data
         *
         * @since 3.5.6
         *
         * @return void
         **/
        public function save_skrill_progress($store_id, $dokan_settings)
        {
        }
        /**
         * Get the Withdrawal method icon
         *
         * @since 3.5.6
         *
         * @param string $method_icon
         * @param string $method_key
         *
         * @return string
         */
        public function get_icon($method_icon, $method_key)
        {
        }
        /**
         * Get the heading for this payment's settings page
         *
         * @since 3.5.6
         *
         * @param string $heading
         * @param string $slug
         *
         * @return string
         */
        public function get_heading($heading, $slug)
        {
        }
        /**
         * Maps the required fields for custom withdraw method settings.
         *
         * @since 3.6.1
         *
         * @param array      $required_fields
         * @param string     $method_key
         * @param int|string $seller_id
         *
         * @return array
         */
        public function map_required_fields($required_fields, $method_key, $seller_id)
        {
        }
        /**
         * Include Skrill to withdrawable payment methods
         *
         * @since 3.7.1
         *
         * @param array $payment_methods
         *
         * @return array
         */
        public function include_skrill_to_payment_methods($payment_methods)
        {
        }
        /**
         * Mask custom withdraw payment method.
         *
         * @since 3.7.27
         *
         * @param string $method_info Withdraw method information
         * @param string $method_key  Withdraw Method key
         *
         * @return string
         */
        public function mask_custom_withdraw_method($method_info, $method_key)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Booking {
    /**
     * Dokan Booking Cache Class.
     *
     * Manage all of the cachings for booking module.
     *
     * @since 3.4.2
     *
     * @see \WeDevs\Dokan\Cache
     */
    class BookingCache
    {
        /**
         * Constructor.
         *
         * Managed Cachings for the following groups:
         * 1. booking_products_[seller_id] => For Seller's Bookable Products
         * 2. bookings_[seller_id]         => For Seller's Booking Activities
         *
         * @since 3.4.2
         */
        public function __construct()
        {
        }
        /**
         * Clear Booking activity data caches.
         *
         * @since 3.4.2
         *
         * @param \WC_Booking|int $booking    Booking product object or ID.
         * @param array           $data_store Booking data store.
         *
         * @return void
         */
        public function clear_booking_data_caches($booking, $data_store = [])
        {
        }
        /**
         * Clear Booking Product Caches.
         *
         * If come here, then there must be a product id and it is booking type
         *
         * @since 3.4.2
         *
         * @param int $product_id
         *
         * @return void
         */
        public function clear_product_caches($product_id)
        {
        }
        /**
         * Clear Booking Product caches.
         *
         * @since 3.4.2
         *
         * @param int|\WC_Product   $product    Product ID or object.
         * @param array|\WC_Product $post_data
         *
         * @return void
         */
        public function clear_booking_type_product_caches($product, $post_data = [])
        {
        }
    }
    /**
     * Dependency Notice Handler Class
     *
     * @since 3.5.0
     */
    class DependencyNotice
    {
        /**
         * Whether the module is loadable or not.
         *
         * @var bool
         */
        protected $missing_dependency = false;
        /**
         * Class constructor
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Check has missing dependency
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public function is_missing_dependency()
        {
        }
        /**
         * WooCommerce Booking activation notice
         *
         * @since 3.5.0
         *
         * @param array $notices
         *
         * @return array
         */
        public function wc_booking_activation_notice($notices)
        {
        }
        /**
         * Activate Woocommerce Booking plugin
         *
         * @since 3.5.0
         *
         * @return void
         * */
        public function activate_wc_booking()
        {
        }
    }
}
namespace {
    /**
     * Dokan booking accommodation admin manager
     *
     * @since 3.4.2
     */
    class Dokan_Booking_Accommodation_Admin
    {
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * Register scripts
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue scripts
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Adds accommodation fields to WooCommerce product data - general tab
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function add_accommodation_fields()
        {
        }
        /**
         * Adds accommodation type option
         *
         * @since 3.4.2
         *
         * @param  array $options
         *
         * @return array
         */
        public function add_booking_accommodation_option($options)
        {
        }
        /**
         * Handles accommodation booking meta save
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function handle_accommodation_booking_meta_save()
        {
        }
    }
    /**
     * Dokan booking accommodation helper
     *
     * @since 3.4.2
     */
    class Dokan_Booking_Accommodation_Helper
    {
        /**
         * Gets accommodation booking i18n strings
         *
         * @since 3.4.2
         *
         * @return array
         */
        public static function get_accommodation_booking_i18n_strings()
        {
        }
        /**
         * Checks if the product is accommodation booking
         *
         * @since 3.4.2
         *
         * @param $product_id integer
         *
         * @return bool
         */
        public static function is_accommodation_booking($product_id)
        {
        }
        /**
         * Gets formatted check-in time label
         *
         * @since 3.4.2
         *
         * @param string $checkin_time
         *
         * @return string
         */
        public static function get_formatted_checkin_time_label($checkin_time)
        {
        }
        /**
         * Gets formatted check-out time label
         *
         * @since 3.4.2
         *
         * @param string $checkout_time
         *
         * @return string
         */
        public static function get_formatted_checkout_time_label($checkout_time)
        {
        }
    }
    /**
     * Dokan booking accommodation manager
     *
     * @since 3.4.2
     */
    class Dokan_Booking_Accommodation_Manager
    {
        /**
         * Constructor
         */
        public function __construct()
        {
        }
        /**
         * Handles accommodation booking save
         *
         * @since 3.4.2
         *
         * @param int $post_id
         *
         * @return void
         */
        public function handle_accommodation_product_save($product)
        {
        }
        /**
         * Renders checkin-checkout template to single product page
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function render_checkin_checkout_template()
        {
        }
        /**
         * Changes the start label to "Check-in"
         *
         * @since 3.4.2
         *
         * @param string $label
         *
         * @return string
         */
        public function modify_accommodation_checkin_label($label)
        {
        }
        /**
         * Changes the end label to "Check-out"
         *
         * @since 3.4.2
         *
         * @param string $label
         *
         * @return string
         */
        public function modify_accommodation_checkout_label($label)
        {
        }
        /**
         * Display check-in and check-out info to cart
         *
         * @since 3.4.2
         *
         * @param array $other_data
         *
         * @param array $cart_item
         *
         * @return array
         */
        public function get_accommodation_item_data($other_data, $cart_item)
        {
        }
    }
    /**
     * Booking Cost Calculation
     *
     * @since 3.3.6
     */
    class WC_Dokan_WC_Booking_Cost_Calculation extends \WC_Bookings_Cost_Calculation
    {
        /**
         * Calculate costs from posted values
         *
         * @since 3.3.6
         *
         * @param array $data
         *
         * @return string cost
         */
        public static function calculate_booking_cost($data, $product)
        {
        }
    }
    /**
     * Create new bookings page.
     *
     * @since 3.3.6
     */
    class Dokan_WC_Bookings_Create
    {
        /**
         * Output the form.
         *
         * @version  3.3.6
         */
        public function output()
        {
        }
        /**
         * Create order.
         *
         * @param  float $total
         * @param  int $customer_id
         * @return int
         *
         * @since 3.3.6
         */
        public function create_order($total, $customer_id)
        {
        }
        /**
         * Output any errors
         */
        public function show_errors()
        {
        }
        /**
         * Use default template form from the extension.
         *
         * This prevents any overridden template via theme being used in
         * create booking screen.
         *
         * @since WooCommerce 1.9.11
         * @see https://github.com/woothemes/woocommerce-bookings/issues/773
         */
        public function use_default_form_template($located, $template_name, $args, $template_path, $default_path)
        {
        }
        /**
         * Redirects to add booking
         *
         * @since 3.3.6
         */
        public function redirect_to_add_booking()
        {
        }
    }
    /**
     * Class Dokan_WC_Booking_Helper
     *
     * @since 3.3.6
     */
    class Dokan_WC_Booking_Helper
    {
        /**
         * Gets vendor booking products
         *
         * @since 3.3.6
         *
         * @return array
         */
        public static function get_vendor_booking_products()
        {
        }
        /**
         * Filters vendor booking products
         *
         * @since 3.3.6
         *
         * @param array $args
         *
         * @return array
         */
        public static function filter_vendor_booking_products($args)
        {
        }
        /**
         * Checks if global addon rma is active
         *
         * @since 3.3.6
         *
         * @return bool
         */
        public static function is_global_addon_rma_active()
        {
        }
        /**
         * This method will return booking status counts by seller id
         *
         * @since 3.7.1 moved this function here from module.php
         *
         * @param $seller_id
         *
         * @return object
         */
        public static function get_booking_status_counts_by($seller_id)
        {
        }
    }
    class Dokan_WC_Bookings_Calendar
    {
        /**
         * Output the calendar view
         */
        public function output()
        {
        }
        /**
         * List bookings for a day
         *
         * @param  [type] $day
         * @param  [type] $month
         * @param  [type] $year
         * @return [type]
         */
        public function list_bookings($day, $month, $year)
        {
        }
        /**
         * List bookings on a day
         */
        public function list_bookings_for_day()
        {
        }
        /**
         * Get a random colour
         */
        public function random_color()
        {
        }
        /**
         * Get a tooltip in day view
         * @param  object $booking
         * @return string
         */
        public function get_tip($booking)
        {
        }
        /**
         * Filters products for narrowing search
         */
        public function product_filters()
        {
        }
        /**
         * Filters resources for narrowing search
         */
        public function resources_filters()
        {
        }
        /**
         * Get formatted time from timestamp with shortened time format.
         * Shortened format removes minutes when time is on the hour and removes
         * space between time and AM/PM.
         *
         * @param int $timestamp Timestamp to format.
         * @return string
         *
         * @since 1.15.0
         */
        public function get_short_time($timestamp)
        {
        }
        /**
         * Get Bookings data to be included in the html element on the calendar.
         *
         * @since 3.10.4
         *
         * @param WC_Booking $booking
         * @param integer    $check_date Timestamp during day to be checked. Defaults to $_REQUEST['calendar_day'] or current day.
         *
         * @return array|null
         */
        protected function get_booking_data($event, $check_date = \null)
        {
        }
        /**
         * Get color CSS styles for a given list of events.
         *
         * @param array $events
         * @return array Hash event_id => color styles
         */
        protected function get_event_color_styles($events)
        {
        }
        /**
         * Determine font color based on background color.
         * Calculations rely on perceptive luminance (contrast).
         *
         * @param string $bg_color Background color as a hex code.
         *
         * @return string Font color as a hex code.
         */
        protected function get_font_color($bg_color)
        {
        }
    }
    /**
     * New Product Published Email to vendor.
     *
     * An email sent to the vendor when a pending Product is published by admin.
     *
     * @class       Dokan_Email_Booking_Cancelled
     * @version     2.6.8
     * @author      weDevs
     * @extends     WC_Email
     */
    class Dokan_Email_Booking_Cancelled extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * trigger function.
         *
         * @access public
         * @return void
         */
        public function trigger($booking_id)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * New Booking Email to vendor.
     *
     * An email sent to the vendor when a new booking request for confirmation.
     *
     * @class       Dokan_Email_Booking_New
     *
     * @extends     WC_Email
     */
    class Dokan_Email_Booking_New extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        public function get_subject()
        {
        }
        /**
         * get_heading function.
         *
         * @return string
         */
        public function get_heading()
        {
        }
        /**
         * trigger function.
         *
         * @access public
         * @return void
         */
        public function trigger($booking_id)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Booking {
    /**
     * Dokan_WC_Booking class
     *
     * @class Dokan_WC_Booking The class that holds the entire Dokan_WC_Booking plugin
     */
    class Module
    {
        /**
         * Constructor for the Dokan_WC_Booking class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @uses register_activation_hook()
         * @uses register_deactivation_hook()
         * @uses is_admin()
         * @uses add_action()
         */
        public function __construct()
        {
        }
        /**
         * Get plugin path
         *
         * @since 2.0
         *
         * @return void
         **/
        public function plugin_path()
        {
        }
        /**
         * Load Dokan Booking templates
         *
         * @since 2.0
         *
         * @return void
         **/
        public function load_booking_templates($template_path, $template, $args)
        {
        }
        /**
         * Insert bookable product type
         *
         * @param  array $types
         *
         * @return array
         */
        public function insert_bookable_product_type($types)
        {
        }
        /**
         * Placeholder for activation function
         *
         * Nothing being called here yet.
         */
        public function activate()
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        /**
         * Enqueue admin scripts
         *
         * Allows plugin assets to be loaded.
         *
         * @uses wp_enqueue_script()
         * @uses wp_localize_script()
         * @uses wp_enqueue_style
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Register Scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Loaded all dependency hooks
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        public function load_dokan_booking_cancelled_emails($wc_emails)
        {
        }
        public function register_dokan_booking_cancelled_actions($actions)
        {
        }
        public function load_dokan_booking_new_emails($wc_emails)
        {
        }
        public function register_dokan_booking_new_actions($actions)
        {
        }
        /**
         * Filter template for New Booking Email template path
         *
         * @since 1.1.2
         *
         * @param array $emails
         *
         * @return $emails
         */
        public function setup_emails($emails)
        {
        }
        /**
         * Filter Email recipient for New booking orders
         *
         * @since 1.1.2
         *
         * @param string $recipient
         *
         * @param WC_Booking $booking
         *
         * @return $recipient
         */
        public function set_seller_as_email_recipient($recipient, $booking)
        {
        }
        /**
         * Add menu on seller dashboard
         * @since 1.0
         * @param array $urls
         * @return array $urls
         */
        public function add_booking_page($urls)
        {
        }
        /**
         * Register page templates
         *
         * @since 1.0
         *
         * @param array $query_vars
         *
         * @return array $query_vars
         */
        public function load_template_from_plugin($query_vars)
        {
        }
        /**
         * Register dokan query vars
         *
         * @since 1.0
         *
         * @param array $vars
         *
         * @return array new $vars
         */
        public function register_booking_queryvar($vars)
        {
        }
        /**
         * Save Booking meta data
         *
         * @since 1.0
         *
         * @global Array $wpdb
         *
         * @param int $post_id
         *
         * @return void
         */
        public function save_booking_data($post_id)
        {
        }
        /**
         * Filter Redirect url after new booking product added
         *
         * @since 1.0
         *
         * @param string $url
         *
         * @param int $product_id
         *
         * @return $url
         */
        public function set_redirect_url($url, $product_id)
        {
        }
        /**
         * Add new resource via ajax
         *
         * @since 1.0
         *
         * @return void
         */
        public function add_new_resource()
        {
        }
        /**
         * Update Resource Data via ajax
         *
         * @since 1.0
         *
         * @return void
         */
        public function update_resource_data()
        {
        }
        /**
         * Delete Booking resource
         *
         * @since 1.0
         *
         * @return JSON Success | Error
         */
        public function delete_resource()
        {
        }
        /**
         * Highlight Booking menu as active on Dokan Dashboard
         *
         * @since 1.0
         *
         * @param string $active_menu
         *
         * @return string
         */
        public function set_booking_menu_as_active($active_menu)
        {
        }
        /**
         * Add Seller meta to newly created Booking
         *
         * @since 1.0
         *
         * @param int $booking_id Newly created booking id
         *
         * @return void
         */
        public function add_seller_id_meta($booking_id)
        {
        }
        /**
         * Exclude Booking type products from dokan product listing
         *
         * @since 1.0
         *
         * @param array $product_types
         *
         * @return array $product_types
         */
        public function exclude_booking_type_from_product_listing($product_types)
        {
        }
        /**
         * Add Booking Manage capability to seller
         *
         * @since 1.0
         *
         * @global type $wp_roles
         *
         * @return void
         */
        public function add_seller_manage_cap()
        {
        }
        /**
         * Confirm bookings from seller dashboard with additional security checks
         *
         * @since 1.0
         *
         * @return void
         */
        public function mark_booking_confirmed()
        {
        }
        public function change_booking_status()
        {
        }
        /**
         * Returns the Booking menu Items
         *
         * @since 1.1
         * @return array
         */
        public function dokan_get_bookings_menu($bookings)
        {
        }
        /**
         * Returns the Booking menu Items Title
         *
         * @since 1.1
         * @return array
         */
        public function dokan_get_bookings_menu_title($current_page)
        {
        }
        /**
         * Delete bookable person type
         * @since 2.7.3
         */
        public function dokan_remove_bookable_person()
        {
        }
        /**
         * Add capabilities
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function add_capabilities($capabilities)
        {
        }
        /**
         * Add caps labels
         *
         * @since 3.0.0
         *
         * @param string $caps
         *
         * @return array
         */
        public function add_caps_labels($caps)
        {
        }
        /**
         * Add booking discount type
         *
         * @since 2.9.13
         *
         * @param array $types
         *
         * @return array
         */
        public function add_booking_discount($types)
        {
        }
        /**
         * @since 3.1.4
         * @param $url
         * @param $product
         *
         * @return mixed|string
         */
        public function modify_edit_product_url($url, $product)
        {
        }
        /**
         * Set Proper template directory.
         *
         * @param array $template_array
         *
         * @return array
         */
        public function set_email_template_directory($template_array)
        {
        }
        /**
         * Clears addon validation notices while creating manual booking
         *
         * @since 3.3.6
         */
        public function clear_addons_validation_notices()
        {
        }
        /**
         * Get Booking duration unit label.
         *
         * @since 3.3.4
         *
         * @param string $unit Duration unit.
         *
         * @return string
         */
        public static function get_booking_duration_unit_label($unit)
        {
        }
        /**
         * Enqueue scripts and styles for Accommodation Booking
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function enqueue_accommodation_scripts()
        {
        }
        /**
         * Unlink the resources on delete of bookable products
         *
         * @since 3.5.2
         *
         * @param $post_id
         */
        public function handle_deleted_bookable_product($post_id)
        {
        }
        /**
         * Returns new category select ui html elements.
         *
         * @since 3.7.5
         *
         * @return void
         */
        public function load_add_category_modal()
        {
        }
        /**
         * Fix order edit link for vendor.
         *
         * @since 3.7.15
         *
         * @param \WC_Order $order Order Instance.
         * @param bool $sent_to_admin send to admin.
         * @param bool $plain_text Plain text.
         * @param \WC_Email $email The email class.
         *
         * @return void
         */
        public function fix_order_edit_link($order, $sent_to_admin, $plain_text, $email)
        {
        }
        /**
         * Remove product type filter from booking product list
         *
         * @since 3.7.25
         *
         * @param array $args
         *
         * @return array
         */
        public function remove_product_type_filter($args)
        {
        }
        /**
         * Render linked product content.
         *
         * @since 3.9.4
         *
         * @return void
         */
        public function load_linked_product_content($post, $post_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ColorSchemeCustomizer {
    /**
     * Dokan_Apperance class
     *
     * @class Dokan_Apperance The class that holds the entire Dokan_Apperance plugin
     */
    class Module
    {
        /**
         * Constructor for the Dokan_Apperance class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @uses register_activation_hook()
         * @uses register_deactivation_hook()
         * @uses is_admin()
         * @uses add_action()
         */
        public function __construct()
        {
        }
        /**
         * Define all constants
         *
         * @since 3.7.0
         *
         * @return void
         */
        public function define_constant()
        {
        }
        /**
         * Loaded all actions & filters.
         *
         * @since 3.7.0
         *
         * @return void
         */
        public function load_actions()
        {
        }
        /**
         * Enqueue admin scripts
         *
         * Allows plugin assets to be loaded.
         *
         * @uses wp_enqueue_script()
         * @uses wp_localize_script()
         * @uses wp_enqueue_style
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Registers admin scripts
         *
         * @since 3.7.0
         *
         * @return void
         */
        public function register_admin_scripts()
        {
        }
        /**
         * Load admin scripts in dokan settings.
         *
         * @since 3.7.0
         *
         * @param string $hook
         *
         * @return void
         */
        public function load_admin_scripts($hook)
        {
        }
        /**
         * Add Settings section in Dokan Settings
         *
         * @since 1.0
         *
         * @param array $sections
         *
         * @return array
         */
        public function render_apperance_section($sections)
        {
        }
        /**
         * Get default colors for vendor dashboard.
         *
         * @since 3.7.0
         *
         * @return array
         */
        public function get_default_color_settings()
        {
        }
        /**
         * Add Color pick options on Dokan Settings under Color section
         *
         * @since 1.0
         *
         * @param array $settings_fields
         *
         * @return array
         */
        public function render_apperance_settings($settings_fields)
        {
        }
        /**
         * Render header styles to override default styles
         *
         * @since 3.7.6
         *
         * return $args
         */
        public function render_header_section($args)
        {
        }
        /**
         * Render styles to override default styles
         *
         * @since 1.0
         *
         * return void
         */
        public function load_styles()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\DeliveryTime {
    /**
     * Class Admin
     *
     * @since 3.3.0
     *
     * @package WeDevs\DokanPro\Modules\DeliveryTime
     */
    class Admin
    {
        /**
         * Delivery time admin constructor
         *
         * @since 3.3.0
         */
        public function __construct()
        {
        }
        /**
         * Enqueue scripts
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function enqueue_scripts($hook)
        {
        }
        /**
         * Adds admin delivery meta box to WC order details page
         *
         * @since 3.3.0
         *
         * @param string   $post_type
         * @param \WP_Post $post
         *
         * @return void
         */
        public function add_admin_delivery_time_meta_box($post_type, $post)
        {
        }
        /**
         * Load dokan admin template
         *
         * @since 3.3.0
         *
         * @param \WP_Post $post
         *
         * @return void
         */
        public function render_delivery_time_meta_box($post_object)
        {
        }
        /**
         * Saves admin delivery time meta box args
         *
         * @since 3.3.0
         *
         * @param int $order_id
         *
         * @return void
         */
        public function save_admin_delivery_time_meta_box($order_id)
        {
        }
        /**
         * Sends json response for available and disabled weekdays for a specific vendor
         *
         * @since 3.9.4
         *
         * @return void
         */
        public function get_vendor_delivery_days()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\DeliveryTime\Emails {
    class Manager
    {
        /**
         * Manager constructor.
         *
         * @since 3.7.8
         */
        public function __construct()
        {
        }
        /**
         * Load delivery time related emails.
         *
         * @since 3.7.8
         *
         * @param array $wc_emails
         *
         * @return array
         */
        public function load_delivery_time_emails($wc_emails)
        {
        }
        /**
         * Set email template directory from here.
         *
         * @since 3.7.8
         *
         * @param array $dokan_emails
         *
         * @return array
         */
        public function set_delivery_time_email_template_directory($dokan_emails)
        {
        }
        /**
         * Register Dokan Delivery Time Email actions.
         *
         * @since 3.7.8
         *
         * @param array $actions
         *
         * @return array
         */
        public function register_delivery_time_email_actions($actions)
        {
        }
        /**
         * Add order metas to email.
         *
         * @param array $metas Metas to display.
         * @param bool $sent_to_admin Is the email sent to the admin.
         * @param WC_Order $order The order object.
         *
         * @return array
         */
        public function add_delivery_time_order_metas(array $metas, bool $sent_to_admin, \WC_Order $order): array
        {
        }
    }
    /**
     * Notify seller & customer when update order delivery/pickup time via admin.
     *
     * @since 3.7.8
     */
    class UpdateAdminOrderDeliveryTime extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.7.8
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Default content to show below main email content.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_default_additional_content()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @since 3.7.8
         *
         * @param int   $seller_id
         * @param array $updated_data
         *
         * @return void
         */
        public function trigger($seller_id, $updated_data)
        {
        }
        /**
         * Get content html.
         *
         * @since 3.7.8
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @since 3.7.8
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * Notify customer when update order delivery/pickup time via seller.
     *
     * @since 3.7.8
     */
    class UpdateVendorOrderDeliveryTime extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.7.8
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Default content to show below main email content.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_default_additional_content()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @since 3.7.8
         *
         * @param int   $seller_id
         * @param array $updated_data
         *
         * @return void
         */
        public function trigger($seller_id, $updated_data)
        {
        }
        /**
         * Get content html.
         *
         * @since 3.7.8
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @since 3.7.8
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\DeliveryTime {
    /**
     * Class Frontend
     *
     * @since 3.3.0
     *
     * @package WeDevs\DokanPro\Modules\DeliveryTime
     */
    class Frontend
    {
        /**
         * Delivery time Frontend constructor
         *
         * @since 3.3.0
         */
        public function __construct()
        {
        }
        /**
         * Renders Delivery time box to checkout page
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function render_delivery_time_template()
        {
        }
        /**
         * Loads scripts
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function load_scripts()
        {
        }
        /**
         * Add vendor delivery time information as an inline script.
         *
         * @since 3.12.2
         *
         * @return void
         */
        protected function add_inline_scripts()
        {
        }
        /**
         * Gets vendor delivery time infos for customers
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function get_vendor_delivery_time_info()
        {
        }
        /**
         * Saves delivery time args for single and sub orders
         *
         * @since 3.3.0
         *
         * @param /WC_Order $order
         * @param int $vendor_id
         *
         * @return void
         */
        public function save_delivery_time_args($order, $vendor_id)
        {
        }
        /**
         * Renders delivery time details on wc order details page
         *
         * @since 3.3.0
         *
         * @param \WC_Order $order
         *
         * @return void
         */
        public function render_delivery_time_wc_order_details($order)
        {
        }
        /**
         * Gets vendor delivery time slot from ajax request
         *
         * @since 3.3.0
         */
        public function get_vendor_delivery_time_slot()
        {
        }
        /**
         * Validates delivery time slot args from wc checkout
         *
         * @since 3.3.0
         *
         * @param array $wc_data
         * @param object $errors
         *
         * @return void
         */
        public function validate_delivery_time_slot_args($wc_data, $errors)
        {
        }
        /**
         * Add i18n variable to frontend
         *
         * @since 3.3.0
         *
         * @param array $args
         *
         * @return array
         */
        public function add_i18n_date_format_localized_variable($args)
        {
        }
    }
    /**
     * Class DeliveryTimeHelper
     */
    class Helper
    {
        /**
         * Gets all time slots for a day
         *
         * @since 3.3.0
         *
         * @return array
         */
        public static function get_all_delivery_time_slots()
        {
        }
        /**
         * Generates time slot based on start, end time and defined slot duration
         *
         * @since 3.3.0
         *
         * @param int    $duration
         * @param string $starts
         * @param string $ends
         *
         * @return array
         */
        public static function generate_delivery_time_slots($duration, $starts, $ends)
        {
        }
        /**
         * Gets available delivery slots by date for a vendor
         *
         * @since 3.3.0
         *
         * @param int $vendor_id
         * @param int $vendor_order_per_slot
         * @param string $date
         *
         * @return array
         */
        public static function get_available_delivery_slots_by_date($vendor_id, $vendor_order_per_slot, $date)
        {
        }
        /**
         * Saves dokan delivery time date slot for tracking the slot availability on a date
         *
         * @since 3.3.0
         *
         * @param array $data
         * @param WC_Order|null $order
         *
         * @return void
         */
        public static function save_delivery_time_date_slot($data, $order = null)
        {
        }
        /**
         * Gets delivery time settings for vendor
         *
         * @since 3.3.0
         *
         * @param int $vendor_id
         *
         * @return array
         */
        public static function get_delivery_time_settings($vendor_id)
        {
        }
        /**
         * Collect delivery times here.
         *
         * @since 3.7.8
         *
         * @param string       $current_day
         * @param array|string $delivery_times
         * @param int          $index
         *
         * @return mixed|string
         */
        public static function get_delivery_times($current_day, $delivery_times, $index = 0)
        {
        }
        /**
         * Gets delivery slot settings for a vendor
         *
         * @since 3.3.0
         *
         * @param int    $vendor_id
         * @param string $date
         *
         * @return array
         */
        public static function get_delivery_slot_settings($vendor_id, $date)
        {
        }
        /**
         * Formats delivery date and time slot string
         *
         * @since 3.3.0
         *
         * @param string $date
         * @param string $slot
         *
         * @return string
         * @throws \Exception
         */
        public static function get_formatted_delivery_date_time_string($date, $slot)
        {
        }
        /**
         * Checks if delivery date and time is updated
         *
         * @since 3.9.4
         *
         * @param int|string $vendor_id
         * @param int|string $order_id
         * @param array $new_data
         *
         * @return bool
         */
        public static function is_delivery_data_updated($vendor_id, $order_id, $new_data)
        {
        }
        /**
         * Updates the delivery time date slot
         *
         * @since 3.3.0
         *
         * @param array $data
         *
         * @return void
         */
        public static function update_delivery_time_date_slot($data)
        {
        }
        /**
         * Gets delivery event additional infos
         *
         * @since 3.3.7
         *
         * @param int $order_id
         * @param string $type
         * @param string $date
         * @param string $slot
         *
         * @return array
         */
        public static function get_delivery_event_additional_info($order_id, $type, $date, $slot)
        {
        }
        /**
         * Get formatted delivery slot.
         *
         * @since 3.7.8
         *
         * @param string $slot_string
         *
         * @return string
         */
        public static function get_formatted_delivery_slot_string($slot_string)
        {
        }
        /**
         * Collect current order delivery type data.
         *
         * @since 3.7.8
         *
         * @param int $seller_id
         * @param int $order_id
         *
         * @return mixed
         */
        public static function get_order_delivery_info($seller_id, $order_id)
        {
        }
        /**
         * Collect active delivery time slots for current date.
         *
         * @since 3.7.8
         *
         * @param int    $vendor_id
         * @param string $date
         *
         * @return array
         */
        public static function get_current_date_active_delivery_time_slots($vendor_id, $date)
        {
        }
        /**
         * Check if vendor can override delivery time settings
         *
         * @since 3.7.8
         *
         * @return bool
         */
        public static function vendor_can_override_settings()
        {
        }
    }
    /**
     * Class Settings
     *
     * @since 3.3.0
     *
     * @package WeDevs\DokanPro\Modules\DeliveryTime
     */
    class Settings
    {
        /**
         * Settings constructor
         *
         * @since 3.3.0
         */
        public function __construct()
        {
        }
        /**
         * Load admin settings section
         *
         * @since 3.3.0
         *
         * @param array $section
         *
         * @return array
         */
        public function load_settings_section($section)
        {
        }
        /**
         * Load all settings fields
         *
         * @since 3.3.0
         *
         * @param array $fields
         *
         * @return array
         */
        public function load_settings_fields($fields)
        {
        }
        /**
         * Validates admin delivery settings
         *
         * @since 3.3.0
         *
         * @param string $option_name
         * @param array $option_value
         *
         * @return void
         */
        public function validate_admin_delivery_settings($option_name, $option_value)
        {
        }
        /**
         * Generates admin default delivery time settings for vendors
         *
         * @since 3.3.0
         *
         * @param string $option_name
         * @param array  $option_value
         *
         * @return void
         */
        public function generate_admin_delivery_time_settings($option_name, $option_value)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\DeliveryTime\StorePickup {
    /**
     * Class Store Pickup Frontend
     *
     * @package WeDevs\DokanPro\Modules\DeliveryTime\StorePickup
     */
    class Frontend
    {
        /**
         * Store location pickup Frontend constructor
         *
         * @since 3.3.7
         */
        public function __construct()
        {
        }
        /**
         * Renders store pickup location selector section
         *
         * @since 3.3.7
         *
         * @param int $vendor_id
         * @param array $vendor_info
         *
         * @return void
         */
        public function render_store_pickup_location_type_selector_section($vendor_id, $vendor_info)
        {
        }
        /**
         * Renders store pickup location select option section
         *
         * @since 3.3.7
         *
         * @param int $vendor_id
         * @param array $vendor_info
         *
         * @return void
         */
        public function render_store_pickup_location_select_option_section($vendor_id, $vendor_info)
        {
        }
        /**
         * Ajax request for getting vendor store locations
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function store_location_get_items()
        {
        }
        /**
         * Store pickup location checkout args
         *
         * @since 3.3.7
         *
         * @param array $args
         * @param array $data
         * @param int $vendor_id
         *
         * @return array
         */
        public function handle_store_location_checkout_args($args, $data, $vendor_id)
        {
        }
        /**
         * Renders store location on WC order details page
         *
         * @since 3.3.7
         *
         * @param \WC_Order $order
         *
         * @return void
         */
        public function render_store_location_wc_order_details($order)
        {
        }
        /**
         * Saves meta for store pickup location
         *
         * @since 3.3.7
         *
         * @param \WC_Order $order
         * @param array data
         *
         * @return void
         */
        public function save_store_pickup_location_meta($order, $data)
        {
        }
    }
    /**
     * Class Helper
     *
     * @package WeDevs\DokanPro\Modules\DeliveryTime\StorePickup
     */
    class Helper
    {
        /**
         * Gets all location of a specific vendors
         *
         * @since 3.3.7
         *
         * @param int $vendor_id
         * @param bool $exclude_default (Optional)
         * @param bool $multiple_check (Optional)
         *
         * @return array
         */
        public static function get_vendor_store_pickup_locations($vendor_id, $exclude_default = false, $multiple_check = false)
        {
        }
        /**
         * Gets vendor selected store order pickup location.
         *
         * @since 3.7.8
         *
         * @param int    $vendor_id
         * @param string $location_key
         *
         * @return string
         */
        public static function get_selected_order_pickup_location($vendor_id, $location_key)
        {
        }
        /**
         * Gets formatted store pickup location
         *
         * @since 3.3.7
         *
         * @param array $address
         * @param string $separator (Optional)
         * @param string $location_name (Optional)
         *
         * @return string
         */
        public static function get_formatted_vendor_store_pickup_location($address, $separator = '<br/>', $location_name = '')
        {
        }
        /**
         * Get formatted store pickup location by location index
         *
         * @since 3.3.7
         *
         * @param int $vendor_id
         * @param string $location_index
         *
         * @return string
         */
        public static function get_formatted_vendor_store_pickup_location_by_index($vendor_id, $location_index)
        {
        }
        /**
         * Is enable setting for vendor store pickup location,
         * pass $bool = false for getting active status on 'yes' or 'no'
         *
         * @since 3.3.7
         *
         * @param int $vendor_id
         * @param bool $bool (Optional)
         *
         * @return bool|string
         */
        public static function is_store_pickup_location_active($vendor_id, $bool = true)
        {
        }
        /**
         * Gets formatted date and store location string
         *
         * @since 3.3.7
         *
         * @param $date
         * @param $location
         *
         * @return string
         */
        public static function get_formatted_date_store_location_string($date, $location, $slot)
        {
        }
        /**
         * Checks if multiple store location is active for vendor
         *
         * @param int $vendor_id
         *
         * @return bool
         */
        public static function is_multiple_store_location_active_for_vendor($vendor_id)
        {
        }
        /**
         * Checks if vendor has default address
         *
         * @param $vendor_settings
         *
         * @return bool
         */
        public static function vendor_has_default_address($vendor_settings)
        {
        }
        /**
         *Get translated delivary type string
         *
         * @param string $type
         *
         * @return string
         */
        public static function get_formatted_delivery_type($type)
        {
        }
    }
    /**
     * Class StoreSettings
     *
     * @package WeDevs\DokanPro\Modules\DeliveryTime\StorePickup
     */
    class StoreSettings
    {
        /**
         * StoreSettings constructor
         *
         * @since 3.3.7
         */
        public function __construct()
        {
        }
        /**
         * Renders add store location pickup template
         *
         * @since 3.3.7
         *
         * @param int $current_user
         * @param array $profile_info
         *
         * @return void
         */
        public function render_store_location_template($current_user, $profile_info)
        {
        }
        /**
         * Loads scripts
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function load_scripts()
        {
        }
        /**
         * AJAX request to save location item
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function store_location_save_item()
        {
        }
        /**
         * AJAX request to delete location item
         *
         * @since DOKAN_SINCE_PRO
         *
         * @return void
         */
        public function store_location_delete_item()
        {
        }
        /**
         * Restores vendor default address
         *
         * @since 3.3.7
         *
         * @param array $dokan_settings
         * @param int $store_id
         *
         * @return array
         */
        public function restore_vendor_default_address($dokan_settings, $store_id)
        {
        }
        /**
         * Saves enable setting for vendor store pickup location
         *
         * @since 3.3.7
         *
         * @param int $vendor_id
         * @param array $profile_info
         *
         * @return void
         */
        public function save_enable_vendor_store_pickup_location_args($vendor_id)
        {
        }
    }
    /**
     * Class Store Pickup Vendor
     *
     * @package WeDevs\DokanPro\Modules\DeliveryTime\StorePickup
     */
    class Vendor
    {
        /**
         * Store location pickup Vendor constructor
         *
         * @since 3.3.7
         */
        public function __construct()
        {
        }
        /**
         * Renders store pickup location order details
         *
         * @since 3.3.7
         *
         * @param /WC_Order $order
         *
         * @return void
         */
        public function render_store_pickup_location_order_details($order)
        {
        }
        /**
         * Renders store location enable checkbox
         *
         * @since 3.3.7
         *
         * @param array $vendor_settings
         *
         * @return void
         */
        public function render_store_location_enable_checkbox($vendor_settings)
        {
        }
        /**
         * Save store location allow setting
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function save_store_location_allow_setting()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\DeliveryTime {
    /**
     * Class Vendor
     * @package WeDevs\DokanPro\Modules\DeliveryTime
     */
    class Vendor
    {
        /**
         * Delivery time vendor constructor
         *
         * @since 3.3.0
         */
        public function __construct()
        {
        }
        /**
         * @param $urls
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function register_dashboard_menu($urls)
        {
        }
        /**
         * Registers calender menu for delivery time
         *
         * @since 3.3.0
         *
         * @param array $urls
         *
         * @return array
         */
        public function register_delivery_calender_menu($urls)
        {
        }
        /**
         * Show multiple delivery time settings field here.
         *
         * @since 3.7.8
         *
         * @param string $current_day
         * @param string $working_status
         * @param array  $vendor_delivery_settings
         *
         * @return void
         */
        public function load_multiple_delivery_slots($current_day, $working_status, $vendor_delivery_settings)
        {
        }
        /**
         * Loads scripts
         *
         * @since 3.3.0
         */
        public function load_scripts()
        {
        }
        /**
         * @since 3.3.0
         *
         * @param array $query_var
         *
         * @return array
         */
        public function delivery_time_template_endpoint($query_var)
        {
        }
        /**
         * @since 3.3.0
         *
         * @param $query_vars
         *
         * @return void
         */
        public function load_settings_content($query_vars)
        {
        }
        /**
         * Loads delivery time dashboard content
         *
         * @since 3.3.0
         *
         * @param array $query_vars
         */
        public function load_dashboard_content($query_vars)
        {
        }
        /**
         * Handle saving of vendor delivery time settings
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function save_delivery_time_settings()
        {
        }
        /**
         * Renders vendor delivery time box
         *
         * @since 3.3.0
         *
         * @param \WC_Order $order
         *
         * @return void
         */
        public function render_vendor_delivery_box($order)
        {
        }
        /**
         * Saves vendor delivery time box args
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function save_vendor_delivery_time_box()
        {
        }
        /**
         * Gets dashboard calendar events from AJAX request
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function get_dashboard_calendar_event()
        {
        }
    }
    /**
     * Class Module
     *
     * @package WeDevs\DokanPro\DeliveryTime
     */
    class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Delivery Time Manager constructor
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Define all constants
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function define_constant()
        {
        }
        /**
         * Initiates the classes
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function initiate()
        {
        }
        /**
         * Activates the module
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function activate()
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        /**
         * Set template path for Wholesale
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function load_templates($template_path, $template, $args)
        {
        }
        /**
         * Registers frontend scripts
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function register_frontend_scripts()
        {
        }
        /**
         * Registers admin scripts
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function register_admin_scripts()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Elementor\Abstracts {
    abstract class DataTagBase extends \Elementor\Core\DynamicTags\Data_Tag
    {
        /**
         * Tag group
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_group()
        {
        }
        /**
         * Tag categories
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_categories()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Elementor\Traits {
    trait PositionControls
    {
        /**
         * Add css position controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function add_position_controls()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Elementor\Abstracts {
    abstract class DokanButton extends \Elementor\Widget_Button
    {
        use \WeDevs\DokanPro\Modules\Elementor\Traits\PositionControls;
        /**
         * Widget categories
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Register widget controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
        /**
         * Button wrapper class
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_button_wrapper_class()
        {
        }
        /**
         * Set wrapper classes
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_html_wrapper_class()
        {
        }
        /**
         * Button class
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_button_class()
        {
        }
        /**
         * Frontend render method
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function render()
        {
        }
    }
    abstract class DokanStoreProducts extends \Elementor\Widget_Base
    {
        /**
         * Get products type.
         *
         * @since 3.7.4
         *
         * @return string
         */
        abstract protected function get_products_type();
        /**
         * Get widget control section data.
         *
         * @since 3.7.4
         *
         * @return array
         */
        abstract protected function get_widget_control_data();
        /**
         * Get widget output data.
         *
         * @since 3.7.4
         *
         * @return array
         */
        abstract protected function get_widget_output_data();
        /**
         * Widget icon class.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget categories.
         *
         * @since 3.7.4
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Widget keywords.
         *
         * @since 3.7.4
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register HTML widget controls.
         *
         * Adds different input fields to allow the user to change and customize the widget settings.
         *
         * @since 3.7.4
         * @access protected
         *
         * @return void
         */
        protected function register_controls()
        {
        }
        /**
         * Frontend render method.
         *
         * @since 3.7.4
         *
         * @return void
         */
        protected function render()
        {
        }
        /**
         * Check products block visibility settings in customizer.
         *
         * @since 3.7.4
         *
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * Check products block visibility settings in store.
         *
         * @since 3.7.4
         *
         * @param int $vendor_id
         *
         * @return bool
         */
        public function is_visible_by_vendor($vendor_id)
        {
        }
    }
    abstract class ModuleBase
    {
        use \WeDevs\Dokan\Traits\Singleton;
        /**
         * Runs after first instance
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function boot()
        {
        }
        /**
         * Module name
         *
         * @since 2.9.11
         *
         * @return void
         */
        abstract public function get_name();
        /**
         * Module widgets
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_widgets()
        {
        }
        /**
         * Register module widgets
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function init_widgets()
        {
        }
    }
    abstract class TagBase extends \Elementor\Core\DynamicTags\Tag
    {
        /**
         * Tag group
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_group()
        {
        }
        /**
         * Tag categories
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_categories()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Elementor {
    class Bootstrap extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\ModuleBase
    {
        /**
         * Document Types
         *
         * @var array $docs_types
         */
        protected $docs_types = [];
        /**
         * Widget group
         *
         * @since 2.9.11
         */
        const DOKAN_GROUP = 'dokan';
        /**
         * Run after first instance
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function boot()
        {
        }
        /**
         * Name of the elementor module
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Module widgets
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_widgets()
        {
        }
        /**
         * Register module documents
         *
         * @since 2.9.11
         *
         * @param Elementor\Core\Documents_Manager $documents_manager
         *
         * @return void
         */
        public function register_documents($documents_manager)
        {
        }
        /**
         * Register module tags
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function register_tags()
        {
        }
        /**
         * Register controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function register_controls()
        {
        }
        /**
         * Add editor templates
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function add_editor_templates()
        {
        }
        /**
         * Register condition for the module
         *
         * @since 2.9.11
         *
         * @param \ElementorPro\Modules\ThemeBuilder\Classes\Conditions_Manager $conditions_manager
         *
         * @return void
         */
        public function register_conditions($conditions_manager)
        {
        }
        /**
         * Filter to show the elementor built store template
         *
         * @since 2.9.11
         *
         * @param string $template
         * @param string $template_name
         * @param string $template_path
         *
         * @return string
         */
        public static function locate_template_for_store_page($template, $template_name, $template_path)
        {
        }
        /**
         * Add column wrapper padding control for sections
         *
         * @since 1.0.0
         *
         * @return void
         */
        public static function add_column_wrapper_padding_control($control_stack, $section_id, $args)
        {
        }
        /**
         * Store tab contents
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function store_tab_content()
        {
        }
        /**
         * Enqueue scripts in editing or preview mode
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function enqueue_editor_scripts()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Elementor\Conditions {
    class Store extends \ElementorPro\Modules\ThemeBuilder\Conditions\Condition_Base
    {
        /**
         * Type of condition
         *
         * @since 2.9.11
         *
         * @return string
         */
        public static function get_type()
        {
        }
        /**
         * Condition name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Condition label
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * Condition label for all items
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_all_label()
        {
        }
        /**
         * Check if proper conditions are met
         *
         * @since 2.9.11
         *
         * @param array $args
         *
         * @return bool
         */
        public function check($args)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Elementor\Controls {
    class DynamicHidden extends \Elementor\Control_Hidden
    {
        /**
         * Control type
         *
         * @since 2.9.11
         *
         * @var string
         */
        const CONTROL_TYPE = 'dynamic_hidden';
        /**
         * Get repeater control type.
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * Get default settings for the control
         *
         * @since 2.9.11
         *
         * @return array
         */
        protected function get_default_settings()
        {
        }
    }
    class SortableList extends \Elementor\Control_Repeater
    {
        /**
         * Control type
         *
         * @since 2.9.11
         *
         * @var string
         */
        const CONTROL_TYPE = 'sortable_list';
        /**
         * Get repeater control type.
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_type()
        {
        }
        /**
         * Get repeater control default settings.
         *
         * @since 2.9.11
         *
         * @return array
         */
        protected function get_default_settings()
        {
        }
        /**
         * Render repeater control output in the editor.
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function content_template()
        {
        }
        /**
         * Enqueue control scripts
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function enqueue()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Elementor {
    /**
     * Dependency Notice Handler Class.
     *
     * @since 3.5.1
     */
    class DependencyNotice
    {
        /**
         * Whether the module is loadable or not.
         *
         * @since 3.5.1
         *
         * @var bool
         */
        protected $missing_dependency = false;
        /**
         * Class constructor.
         *
         * @since 3.5.1
         */
        public function __construct()
        {
        }
        /**
         * Elementor not installed notice.
         *
         * @since 3.5.1
         *
         * @param array $notices
         *
         * @return array $notices
         */
        public function elementor_not_installed($notices)
        {
        }
        /**
         * Elementor Lite version mismatch notice.
         *
         * @since 3.5.1
         *
         * @param array $notices
         *
         * @return array $notices
         */
        public function elementor_lite_version_mismatch($notices)
        {
        }
        /**
         * Elementor Pro version mismatch notice.
         *
         * @since 3.5.1
         *
         * @param array $notices
         *
         * @return array $notices
         */
        public function elementor_pro_version_mismatch($notices)
        {
        }
        /**
         * Check dependency missing status.
         *
         * @since 3.5.1
         *
         * @return bool
         */
        public function is_missing_dependency()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Elementor\Documents {
    class Store extends \ElementorPro\Modules\ThemeBuilder\Documents\Single
    {
        /**
         * Class constructor
         *
         * @since 2.9.11
         *
         * @param array $data
         *
         * @return void
         */
        public function __construct($data = [])
        {
        }
        /**
         * Enqueue document related scripts
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         *
         * @return void
         */
        public function register_scripts()
        {
        }
        /**
         * Document properties
         *
         * @since 2.9.11
         *
         * @return array
         */
        public static function get_properties()
        {
        }
        /**
         * Document name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Document title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public static function get_title()
        {
        }
        /**
         * Elementor builder panel categories
         *
         * @since 2.9.11
         *
         * @return array
         */
        protected static function get_editor_panel_categories()
        {
        }
        /**
         * Document library type
         *
         * @since 2.9.11
         * @since 2.9.13 From elementor pro v2.4.0 it is deprecated
         *
         * @return string
         */
        public function get_remote_library_type()
        {
        }
        /**
         * Remote library config
         *
         * From elementor pro v2.4.0 `get_remote_library_config` is used
         * instead of `get_remote_library_type`
         *
         * @since 2.9.13
         *
         * @return array
         */
        public function get_remote_library_config()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Elementor {
    class StoreData
    {
        use \WeDevs\Dokan\Traits\Singleton;
        /**
         * Holds the store data for a real store
         *
         * @since 2.9.11
         *
         * @var array
         */
        protected $store_data = [];
        /**
         * Default dynamic store data for widgets
         *
         * @since 2.9.11
         *
         * @param string $prop
         *
         * @return mixed
         */
        public function get_data($prop = null)
        {
        }
        /**
         * Data for non-editing purpose
         *
         * @since 2.9.11
         *
         * @return array
         */
        protected function get_store_data()
        {
        }
        /**
         * Data for editing/previewing purpose
         *
         * @since 2.9.11
         *
         * @return array
         */
        protected function get_store_data_for_editing()
        {
        }
    }
    /**
     * Render Store Widgets in editing or preview mode
     */
    class StoreWPWidgets
    {
        use \WeDevs\Dokan\Traits\Singleton;
        /**
         * Run after first instance
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function boot()
        {
        }
        /**
         * Add store widget args in Elementor ecosystem
         *
         * @since 1.0.0
         *
         * @param array             $default_widget_args
         * @param \Widget_WordPress $widget_wordpress
         *
         * @return array
         */
        public static function add_widget_args($default_widget_args, $widget_wordpress)
        {
        }
        /**
         * Render dummy content for Store Support widget
         *
         * @since 2.9.11
         *
         * @param array                                    $args
         * @param array                                    $instance
         * @param \WeDevs\Dokan\Widgets\StoreSupportWidget $widget
         *
         * @return void
         */
        public function widget_store_support($args, $instance, $widget)
        {
        }
        /**
         * Render dummy content for Store Contact Form widget
         *
         * @since 2.9.11
         *
         * @param array                                  $args
         * @param array                                  $instance
         * @param \WeDevs\Dokan\Widgets\StoreContactForm $widget
         *
         * @return void
         */
        public function widget_store_contact_form($args, $instance, $widget)
        {
        }
        /**
         * Render dummy content for Store Location widget
         *
         * @since 2.9.11
         *
         * @param array                               $args
         * @param array                               $instance
         * @param \WeDevs\Dokan\Widgets\StoreLocation $widget
         *
         * @return void
         */
        public function widget_store_location($args, $instance, $widget)
        {
        }
        /**
         * Render dummy content for Store Categories widget
         *
         * @since 2.9.11
         *
         * @param array                                   $args
         * @param array                                   $instance
         * @param \WeDevs\Dokan\Widgets\StoreCategoryMenu $widget
         *
         * @return void
         */
        public function widget_store_categories($args, $instance, $widget)
        {
        }
        /**
         * Render dummy content for Store Open Close widget
         *
         * @since 2.9.11
         *
         * @param array                                   $args
         * @param array                                   $instance
         * @param \WeDevs\Dokan\Widgets\StoreCategoryMenu $widget
         *
         * @return void
         */
        public function widget_store_open_close($args, $instance, $widget)
        {
        }
        /**
         * Render dummy content for Store Vendor Verification widget
         *
         * @since 2.9.13
         *
         * @param array                          $args
         * @param array                          $instance
         * @param \Verificationlist $widget
         *
         * @return void
         */
        public function widget_store_vendor_verification($args, $instance, $widget)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Elementor\Tags {
    class ProductRMA extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\TagBase
    {
        /**
         * Tag name
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Render tag
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function render()
        {
        }
    }
    class ProductReportAbuse extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\TagBase
    {
        /**
         * Tag name
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Render tag
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function render()
        {
        }
    }
    class ProductSPMV extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\TagBase
    {
        /**
         * Tag name
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Render tag
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function render()
        {
        }
    }
    class ProductSPMVList extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\TagBase
    {
        /**
         * Tag name
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Render tag
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function render()
        {
        }
    }
    class StoreBanner extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\DataTagBase
    {
        /**
         * Tag name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Tag categories
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Store profile picture
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function get_value(array $options = [])
        {
        }
        /**
         * Register tag controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
    }
    class StoreCoupons extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\TagBase
    {
        /**
         * Tag name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Render tag
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function render()
        {
        }
    }
    class StoreDummyProducts extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\TagBase
    {
        /**
         * Tag name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Render tag
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function render()
        {
        }
    }
    class StoreFollowButton extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\TagBase
    {
        /**
         * Tag name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Render tag
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function render()
        {
        }
    }
    class StoreInfo extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\TagBase
    {
        /**
         * Tag name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Render Tag
         *
         * @since 2.9.11
         *
         * @return array
         */
        protected function get_value()
        {
        }
        protected function render()
        {
        }
    }
    class StoreLiveChatButton extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\TagBase
    {
        /**
         * Tag name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Render tag
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function render()
        {
        }
    }
    class StoreName extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\TagBase
    {
        /**
         * Tag name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Render tag
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function render()
        {
        }
    }
    class StoreProductFilter extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\TagBase
    {
        /**
         * Tag name
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Render tag
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function render()
        {
        }
    }
    class StoreProfilePicture extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\DataTagBase
    {
        /**
         * Tag name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Store profile picture
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function get_value(array $options = [])
        {
        }
        /**
         * Register tag controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
    }
    class StoreSocialProfile extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\TagBase
    {
        /**
         * Tag name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Render tag
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function render()
        {
        }
    }
    class StoreSupportButton extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\TagBase
    {
        /**
         * Tag name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Render tag
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function render()
        {
        }
    }
    class StoreTabItems extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\TagBase
    {
        /**
         * Tag name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Render Tag
         *
         * @since 2.9.11
         *
         * @return array
         */
        protected function get_value()
        {
        }
        protected function render()
        {
        }
        /**
         * Store tab items for Elementor Builder
         *
         * @since 2.9.14
         *
         * @return array
         */
        protected function get_store_tab_items()
        {
        }
    }
    class StoreVacationMessage extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\TagBase
    {
        /**
         * Tag name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Tag title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Render tag
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function render()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Elementor {
    class Templates
    {
        use \WeDevs\Dokan\Traits\Singleton;
        public function boot()
        {
        }
        /**
         * Filter elementor https request
         *
         * @since 2.9.11
         *
         * @param array $body_args
         */
        public static function add_http_request_filter($body_args)
        {
        }
        /**
         * Returns dokan templates for related request
         *
         * @since 2.9.11
         *
         * @param bool   $pre
         * @param array  $r
         * @param string $url
         *
         * @return bool|array
         */
        public static function pre_http_request($pre, $r, $url)
        {
        }
        /**
         * Add Dokan templates as remote template source
         *
         * @since 2.9.11
         *
         * @param array $value
         */
        public static function add_template_library($value)
        {
        }
        /**
         * Add template library data to transient.
         *
         * @since 3.7.14
         *
         * @param  array|bool $data Template library data
         *
         * @return array|bool $data Template library data
         */
        public static function add_template_library_data_to_transient($data)
        {
        }
        /**
         * Get dokan elementor templates.
         *
         * @since 3.7.14
         *
         * @return array $templates_data Elementor templates data
         */
        public static function get_dokan_elementor_templates()
        {
        }
        /**
         * Template preview
         *
         * @since 2.9.11
         *
         * @return void
         */
        public static function template_preview()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Elementor\Widgets {
    class ProductRMA extends \Elementor\Widget_Base
    {
        /**
         * Widget name
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget categories
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Widget keywords
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register HTML widget controls.
         *
         * Adds different input fields to allow the user to change and customize the widget settings.
         *
         * @since 3.3.0
         * @access protected
         */
        protected function register_controls()
        {
        }
        /**
         * Frontend render method
         *
         * @since 3.3.0
         *
         * @return void
         */
        protected function render()
        {
        }
        /**
         * Get setting value
         *
         * @since 1.0.0
         *
         * @return array
         */
        public function get_rma_settings($product_id = 0)
        {
        }
    }
    class ProductReportAbuse extends \Elementor\Widget_Base
    {
        /**
         * Widget name
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget categories
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Widget keywords
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register HTML widget controls.
         *
         * Adds different input fields to allow the user to change and customize the widget settings.
         *
         * @since 3.3.0
         * @access protected
         */
        protected function register_controls()
        {
        }
        /**
         * Frontend render method
         *
         * @since 3.3.0
         *
         * @return void
         */
        protected function render()
        {
        }
    }
    class ProductSPMV extends \Elementor\Widget_Base
    {
        /**
         * Widget name
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget categories
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Widget keywords
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register HTML widget controls.
         *
         * Adds different input fields to allow the user to change and customize the widget settings.
         *
         * @since 3.3.0
         * @access protected
         */
        protected function register_controls()
        {
        }
        /**
         * Frontend render method
         *
         * @since 3.3.0
         *
         * @return void
         */
        protected function render()
        {
        }
        /**
         * Check is seller is elligible for sell this item
         *
         * @since 1.0.0
         *
         * @return bool
         */
        public function is_valid_user($product_id)
        {
        }
        /**
         * Check already cloned this product
         *
         * @since 1.0.0
         *
         * @return bool
         */
        public function check_already_cloned($product_id)
        {
        }
    }
    class ProductSPMVList extends \Elementor\Widget_Base
    {
        /**
         * Widget name
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget categories
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Widget keywords
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register HTML widget controls.
         *
         * Adds different input fields to allow the user to change and customize the widget settings.
         *
         * @since 3.3.0
         * @access protected
         */
        protected function register_controls()
        {
        }
        /**
         * Frontend render method
         *
         * @since 3.3.0
         *
         * @return void
         */
        protected function render()
        {
        }
        /**
         * Get other reseller vendors
         *
         * @since 3.3.0
         *
         * @param integer $product_id
         *
         * @return bool
         */
        public function get_other_reseller_vendors($product_id)
        {
        }
    }
    class StoreBanner extends \Elementor\Widget_Image
    {
        use \WeDevs\DokanPro\Modules\Elementor\Traits\PositionControls;
        /**
         * Widget name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget categories
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Widget keywords
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register widget controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
        /**
         * Html wrapper class
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_html_wrapper_class()
        {
        }
    }
    class StoreBestSellingProducts extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\DokanStoreProducts
    {
        /**
         * Widget name.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Get products type.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_products_type()
        {
        }
        /**
         * Widget icon class.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Get widget control section data.
         *
         * @since 3.7.4
         *
         * @return array
         */
        protected function get_widget_control_data()
        {
        }
        /**
         * Get widget output data.
         *
         * @since 3.7.4
         *
         * @return array
         */
        protected function get_widget_output_data()
        {
        }
    }
    class StoreCoupons extends \Elementor\Widget_Base
    {
        /**
         * Widget name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget categories
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Widget keywords
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register widget controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
        /**
         * Frontend render method
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function render()
        {
        }
        /**
         * Elementor builder content template
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function content_template()
        {
        }
        /**
         * Render widget plain content
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function render_plain_content()
        {
        }
        /**
         * Add default inline style for coupons
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function add_inline_style()
        {
        }
    }
    class StoreFeaturedProducts extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\DokanStoreProducts
    {
        /**
         * Widget name.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Get products type.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_products_type()
        {
        }
        /**
         * Widget icon class.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Get widget control section data.
         *
         * @since 3.7.4
         *
         * @return array
         */
        protected function get_widget_control_data()
        {
        }
        /**
         * Get widget output data.
         *
         * @since 3.7.4
         *
         * @return array
         */
        protected function get_widget_output_data()
        {
        }
    }
    class StoreFollowButton extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\DokanButton
    {
        protected $button_args = [];
        /**
         * Widget name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget keywords
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register widget controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
        /**
         * Button wrapper class
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_button_wrapper_class()
        {
        }
        /**
         * Button class
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_button_class()
        {
        }
        /**
         * Render button
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function render()
        {
        }
        /**
         * Render button text.
         *
         * Render button widget text.
         *
         * @since 1.5.0
         *
         * @param \Elementor\Widget_Base|null $instance
         * @access protected
         */
        protected function render_text(\Elementor\Widget_Base $instance = null)
        {
        }
    }
    class StoreInfo extends \Elementor\Widget_Icon_List
    {
        use \WeDevs\DokanPro\Modules\Elementor\Traits\PositionControls;
        /**
         * Widget name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget categories
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Widget keywords
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register widget controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
        /**
         * Set wrapper classes
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_html_wrapper_class()
        {
        }
        /**
         * Render icon list widget output on the frontend.
         *
         * Written in PHP and used to generate the final HTML.
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function render()
        {
        }
        /**
         * Render icon list widget output in the editor.
         *
         * Written as a Backbone JavaScript template and used to generate the live preview.
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function content_template()
        {
        }
        /**
         * Render widget plain content
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function render_plain_content()
        {
        }
    }
    class StoreLatestProducts extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\DokanStoreProducts
    {
        /**
         * Widget name.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Get products type.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_products_type()
        {
        }
        /**
         * Widget icon class.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Get widget control section data.
         *
         * @since 3.7.4
         *
         * @return array
         */
        protected function get_widget_control_data()
        {
        }
        /**
         * Get widget output data.
         *
         * @since 3.7.4
         *
         * @return array
         */
        protected function get_widget_output_data()
        {
        }
    }
    class StoreLiveChatButton extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\DokanButton
    {
        /**
         * Widget name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget keywords
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register widget controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
        /**
         * Button wrapper class
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_button_wrapper_class()
        {
        }
        /**
         * Button class
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_button_class()
        {
        }
        /**
         * Render button
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function render()
        {
        }
    }
    class StoreName extends \Elementor\Widget_Heading
    {
        use \WeDevs\DokanPro\Modules\Elementor\Traits\PositionControls;
        /**
         * Widget name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget categories
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Widget keywords
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register widget controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
        /**
         * Set wrapper classes
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_html_wrapper_class()
        {
        }
        /**
         * Frontend render method
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function render()
        {
        }
        /**
         * Elementor builder content template
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function content_template()
        {
        }
        /**
         * Render widget plain content
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function render_plain_content()
        {
        }
    }
    class StoreProductFilter extends \Elementor\Widget_Base
    {
        /**
         * Widget name
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget categories
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Widget keywords
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register HTML widget controls.
         *
         * Adds different input fields to allow the user to change and customize the widget settings.
         *
         * @since 3.3.0
         * @access protected
         */
        protected function register_controls()
        {
        }
        /**
         * Frontend render method
         *
         * @since 3.3.0
         *
         * @return void
         */
        protected function render()
        {
        }
    }
    class StoreProfilePicture extends \Elementor\Widget_Image
    {
        use \WeDevs\DokanPro\Modules\Elementor\Traits\PositionControls;
        /**
         * Widget name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget categories
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Widget keywords
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register widget controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
        protected function get_html_wrapper_class()
        {
        }
    }
    class StoreShareButton extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\DokanButton
    {
        /**
         * Widget name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget keywords
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register widget controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
        /**
         * Button wrapper class
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_button_wrapper_class()
        {
        }
        /**
         * Button class
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_button_class()
        {
        }
    }
    class StoreSocialProfile extends \Elementor\Widget_Social_Icons
    {
        use \WeDevs\DokanPro\Modules\Elementor\Traits\PositionControls;
        /**
         * Widget name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget categories
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Widget keywords
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register widget controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
        /**
         * Set wrapper classes
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_html_wrapper_class()
        {
        }
        /**
         * Frontend render method
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function render()
        {
        }
        /**
         * Elementor builder content template
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function content_template()
        {
        }
        /**
         * Render widget plain content
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function render_plain_content()
        {
        }
    }
    class StoreSupportButton extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\DokanButton
    {
        /**
         * Widget name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget keywords
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register widget controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
        /**
         * Button wrapper class
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_button_wrapper_class()
        {
        }
        /**
         * Button class
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_button_class()
        {
        }
        /**
         * Render button
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function render()
        {
        }
    }
    class StoreTabContents extends \WeDevs\DokanPro\Modules\Elementor\Widgets\StoreName
    {
        /**
         * Widget name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget categories
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Widget keywords
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register widget controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
        /**
         * Set wrapper classes
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_html_wrapper_class()
        {
        }
        /**
         * Frontend render method
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function render()
        {
        }
        /**
         * Elementor builder content template
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function content_template()
        {
        }
    }
    class StoreTabItems extends \WeDevs\DokanPro\Modules\Elementor\Widgets\StoreInfo
    {
        /**
         * Widget name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget keywords
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register widget controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
        /**
         * Set wrapper classes
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_html_wrapper_class()
        {
        }
        /**
         * Render icon list widget output on the frontend.
         *
         * Written in PHP and used to generate the final HTML.
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function render()
        {
        }
        /**
         * Render icon list widget output in the editor.
         *
         * Written as a Backbone JavaScript template and used to generate the live preview.
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function content_template()
        {
        }
    }
    class StoreTopRatedProducts extends \WeDevs\DokanPro\Modules\Elementor\Abstracts\DokanStoreProducts
    {
        /**
         * Widget name.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Get products type.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_products_type()
        {
        }
        /**
         * Widget icon class.
         *
         * @since 3.7.4
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Get widget control section data.
         *
         * @since 3.7.4
         *
         * @return array
         */
        protected function get_widget_control_data()
        {
        }
        /**
         * Get widget output data.
         *
         * @since 3.7.4
         *
         * @return array
         */
        protected function get_widget_output_data()
        {
        }
    }
    class StoreVacationMessage extends \Elementor\Widget_Alert
    {
        /**
         * Widget name
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Widget title
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Widget icon class
         *
         * @since 2.9.11
         *
         * @return string
         */
        public function get_icon()
        {
        }
        /**
         * Widget categories
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_categories()
        {
        }
        /**
         * Widget keywords
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_keywords()
        {
        }
        /**
         * Register widget controls
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function register_controls()
        {
        }
        /**
         * Set wrapper classes
         *
         * @since 2.9.11
         *
         * @return string
         */
        protected function get_html_wrapper_class()
        {
        }
        /**
         * Frontend render method
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function render()
        {
        }
        /**
         * Elementor builder content template
         *
         * @since 2.9.11
         *
         * @return void
         */
        protected function content_template()
        {
        }
        /**
         * Render widget plain content
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function render_plain_content()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Elementor {
    final class Module
    {
        /**
         * Module version
         *
         * @since 2.9.11
         *
         * @var string
         */
        public $version = '2.9.11';
        /**
         * Exec after first instance has been created
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Load module
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function init()
        {
        }
        /**
         * This method will check if Elementor dependencies is missing
         *
         * @since 3.7.4
         *
         * @return bool
         */
        public function missing_dependencies()
        {
        }
        /**
         * Elementor\Plugin instance
         *
         * @since 2.9.11
         *
         * @return \Elementor\Plugin
         */
        public function elementor()
        {
        }
        /**
         * Is editing or preview mode running
         *
         * @since 2.9.11
         *
         * @return bool
         */
        public function is_edit_or_preview_mode()
        {
        }
        /**
         * Default dynamic store data for widgets
         *
         * @since 2.9.11
         *
         * @param string $prop
         *
         * @return mixed
         */
        public function get_store_data($prop = null)
        {
        }
        /**
         * Social network name mapping to elementor icon names
         *
         * @since 2.9.11
         *
         * @return array
         */
        public function get_social_networks_map()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ExIm\Export {
    class ProductCsvExporter extends \WC_Product_CSV_Exporter
    {
        /**
         * Dokan_Product_CSV_Exporter constructor.
         */
        public function __construct()
        {
        }
        /**
         * Add author filter in product query.
         *
         * @since 3.3.3
         * @param $args
         *
         * @return array
         */
        public function only_export_current_vendors_product($args)
        {
        }
        /**
         * Product types to export.
         *
         * @since 3.3.3
         * @param array $product_types_to_export
         */
        public function set_product_types_to_export($product_types_to_export)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ExIm\Import {
    /**
     * Class ProductCsvImporter
     *
     * Dokan Product CSv Importer from vendor dashboard.
     *
     * @package WeDevs\DokanPro\Modules\ExIm\Import
     * @since 3.3.3
     * @use WC_Product_CSV_Importer
     */
    class ProductCsvImporter extends \WC_Product_CSV_Importer
    {
        /**
         * ProductCsvImporter constructor.
         *
         * @param $file
         * @param array $params
         */
        public function __construct($file, $params = array())
        {
        }
        /**
         * Parse a field that is generally '1' or '0' but can be something else.
         *
         * We are overriding this method to give support for the value
         * Draft or Pending Review (-1)
         *
         * @param string $value Field value.
         *
         * @return bool|string
         */
        public function parse_bool_field($value)
        {
        }
        /**
         * Process importer.
         *
         * Do not import products with IDs or SKUs that already exist if option
         * update existing is false, and likewise, if updating products, do not
         * process rows which do not exist if an ID/SKU is provided.
         *
         * @return array
         */
        public function import()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ExIm\Importers {
    /**
     * Class Controller
     *
     * Dokan product CSV importer controller.
     *
     * @since 3.3.3
     * @package WeDevs\DokanPro\Modules\ExIm\Importers
     */
    class Controller extends \WC_Product_CSV_Importer_Controller
    {
        /**
         * Output header view with dokan template hooks.
         * This override the WC Import screen header.
         *
         * @since 3.3.3
         * @return void
         */
        protected function output_header()
        {
        }
        /**
         * Output footer view with dokan template hooks.
         * This override the WC Import screen footer.
         *
         * @since 3.3.3
         * @return void
         */
        protected function output_footer()
        {
        }
        /**
         * Output information about the uploading process.
         * A sample file download link added.
         *
         * @since 3.3.7
         *
         * @return void
         */
        protected function upload_form()
        {
        }
        /**
         * Done step.
         *
         * Checking the nonce and displaying custom done screen
         * with the product import message and show product
         * button pointed to the vendor product page.
         *
         * @since 3.3.3
         * @return void
         */
        protected function done()
        {
        }
    }
}
namespace {
    /**
     * WordPress eXtended RSS file parser implementations
     *
     * @package WordPress
     * @subpackage Importer
     */
    /**
     * WordPress Importer class for managing parsing of WXR files.
     */
    class Dokan_WXR_Parser
    {
        function parse($file)
        {
        }
    }
    /**
     * WXR Parser that makes use of the SimpleXML PHP extension.
     */
    class Dokan_WXR_Parser_SimpleXML
    {
        function parse($file)
        {
        }
    }
    /**
     * WXR Parser that makes use of the XML Parser PHP extension.
     */
    class Dokan_WXR_Parser_XML
    {
        var $wp_tags = array('wp:post_id', 'wp:post_date', 'wp:post_date_gmt', 'wp:comment_status', 'wp:ping_status', 'wp:attachment_url', 'wp:status', 'wp:post_name', 'wp:post_parent', 'wp:menu_order', 'wp:post_type', 'wp:post_password', 'wp:is_sticky', 'wp:term_id', 'wp:category_nicename', 'wp:category_parent', 'wp:cat_name', 'wp:category_description', 'wp:tag_slug', 'wp:tag_name', 'wp:tag_description', 'wp:term_taxonomy', 'wp:term_parent', 'wp:term_name', 'wp:term_description', 'wp:author_id', 'wp:author_login', 'wp:author_email', 'wp:author_display_name', 'wp:author_first_name', 'wp:author_last_name');
        var $wp_sub_tags = array('wp:comment_id', 'wp:comment_author', 'wp:comment_author_email', 'wp:comment_author_url', 'wp:comment_author_IP', 'wp:comment_date', 'wp:comment_date_gmt', 'wp:comment_content', 'wp:comment_approved', 'wp:comment_type', 'wp:comment_parent', 'wp:comment_user_id');
        function parse($file)
        {
        }
        function tag_open($parse, $tag, $attr)
        {
        }
        function cdata($parser, $cdata)
        {
        }
        function tag_close($parser, $tag)
        {
        }
    }
    /**
     * WXR Parser that uses regular expressions. Fallback for installs without an XML parser.
     */
    class Dokan_WXR_Parser_Regex
    {
        var $authors = array();
        var $posts = array();
        var $categories = array();
        var $tags = array();
        var $terms = array();
        var $base_url = '';
        function WXR_Parser_Regex()
        {
        }
        function __construct()
        {
        }
        function parse($file)
        {
        }
        function get_tag($string, $tag)
        {
        }
        function process_category($c)
        {
        }
        function process_tag($t)
        {
        }
        function process_term($t)
        {
        }
        function process_author($a)
        {
        }
        function process_post($post)
        {
        }
        function _normalize_tag($matches)
        {
        }
        function fopen($filename, $mode = 'r')
        {
        }
        function feof($fp)
        {
        }
        function fgets($fp, $len = 8192)
        {
        }
        function fclose($fp)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ExIm {
    /**
     * Dokan_Product_Importer class
     *
     * @class Dokan_Product_Importer The class that holds the entire Dokan_Product_Importer plugin
     */
    class Module
    {
        public $version;
        public $authors = [];
        public $posts = [];
        public $terms = [];
        public $categories = [];
        public $tags = [];
        public $base_url = '';
        // mappings from old information to new
        public $processed_authors = [];
        public $author_mapping = [];
        public $processed_terms = [];
        public $processed_posts = [];
        public $post_orphans = [];
        public $processed_menu_items = [];
        public $menu_item_orphans = [];
        public $missing_menu_items = [];
        public $fetch_attachments = true;
        public $url_remap = [];
        public $featured_images = [];
        /**
         * Constructor for the Dokan_Product_Importer class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @uses register_activation_hook()
         * @uses register_deactivation_hook()
         * @uses is_admin()
         * @uses add_action()
         */
        public function __construct()
        {
        }
        public function handle_step_submission()
        {
        }
        /**
         * Check is Dokan is plugin or nor
         *
         * @return bool true|false
         */
        public static function is_dokan_plugin()
        {
        }
        /**
         * Placeholder for activation function
         *
         * Nothing being called here yet.
         */
        public function activate()
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         *
         * @return void
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue admin scripts
         *
         * Allows plugin assets to be loaded.
         *
         * @uses wp_enqueue_style
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Add Subscription endpoint to the end of Dashboard
         *
         * @param array $query_var
         */
        public function add_endpoint($query_var)
        {
        }
        /**
         * Add Importer page in seller dashboard
         *
         * @param array $urls
         *
         * @return array $urls
         */
        public function add_importer_page($urls)
        {
        }
        public function dashboard_template($template_part)
        {
        }
        /**
         * Get plugin path
         *
         * @since 2.8
         *
         * @return void
         **/
        public function plugin_path()
        {
        }
        /**
         * Load Dokan Export-Import templates
         *
         * @since 2.8
         *
         * @return void
         **/
        public function load_export_import_templates($template_path, $template, $args)
        {
        }
        /**
         * Load tools template
         *
         * @since  0.4
         *
         * @param array $query_vars
         *
         * @return string
         */
        public function load_tools_template_from_plugin($query_vars)
        {
        }
        /**
         * Add capabilities
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function add_capabilities($capabilities)
        {
        }
        /**
         * Do export in product
         */
        public function do_product_export()
        {
        }
        /**
         * The main controller for the actual import stage.
         *
         * @param string $file Path to the WXR file for importing
         */
        public function import($file)
        {
        }
        /**
         * Create new categories based on import information
         *
         * Doesn't create a new category if its slug already exists
         */
        public function process_categories()
        {
        }
        /**
         * Create new post tags based on import information
         *
         * Doesn't create a tag if its slug already exists
         */
        public function process_tags()
        {
        }
        /**
         * Create new terms based on import information
         *
         * Doesn't create a term its slug already exists
         */
        public function process_terms()
        {
        }
        /**
         * Create new posts based on import information
         *
         * Posts marked as having a parent which doesn't exist will become top level items.
         * Doesn't create a new post if: the post type doesn't exist, the given post ID
         * is already noted as imported or a post with the same title and date already exists.
         * Note that new/updated terms, comments and meta are imported for the last of the above.
         */
        public function process_posts()
        {
        }
        /**
         * If fetching attachments is enabled then attempt to create a new attachment
         *
         * @param array  $post Attachment post details from WXR
         * @param string $url  URL to fetch attachment from
         *
         * @return int|WP_Error Post ID on success, WP_Error otherwise
         */
        public function process_attachment($post, $url)
        {
        }
        /**
         * Attempt to download a remote file attachment
         *
         * @param string $url  URL of item to fetch
         * @param array  $post Attachment details
         *
         * @return array|WP_Error Local file location details on success, WP_Error otherwise
         */
        public function fetch_remote_file($url, $post)
        {
        }
        /**
         * Performs post-import cleanup of files and the cache
         */
        public function import_end()
        {
        }
        /**
         * Parses the WXR file and prepares us for the task of processing parsed data
         *
         * @param string $file Path to the WXR file for importing
         */
        public function import_start($file)
        {
        }
        /**
         * Attempt to associate posts and menu items with previously missing parents
         *
         * An imported post's parent may not have been imported when it was first created
         * so try again. Similarly for child menu items and menu items which were missing
         * the object (e.g. post) they represent in the menu
         */
        public function backfill_parents()
        {
        }
        /**
         * Use stored mapping information to update old attachment URLs
         */
        public function backfill_attachment_urls()
        {
        }
        /**
         * Update _thumbnail_id meta to new, imported attachment IDs
         */
        public function remap_featured_images()
        {
        }
        /**
         * Decide if the given meta key maps to information we will want to import
         *
         * @param string $key The meta key to check
         *
         * @return string|bool The key if we do want to import, false if not
         */
        public function is_valid_meta_key($key)
        {
        }
        /**
         * Added to http_request_timeout filter to force timeout at 60 seconds during import
         *
         * @return int 60
         */
        public function bump_request_timeout()
        {
        }
        /**
         * Check if psot exists or not
         *
         * @param string $title   [description]
         * @param string $content [description]
         * @param string $date    [description]
         *
         * @return [type] [description]
         */
        public function post_exists($title, $content = '', $date = '')
        {
        }
        /**
         * Determine if a comment exists based on author and date.
         *
         * @since 2.0.0
         *
         * @uses $wpdb
         *
         * @param string $comment_author Author of the comment
         * @param string $comment_date   Date of the comment
         *
         * @return mixed comment post ID on success
         */
        public function comment_exists($comment_author, $comment_date)
        {
        }
        // return the difference in length between two strings
        public function cmpr_strlen($a, $b)
        {
        }
        /**
         * Decide what the maximum file size for downloaded attachments is.
         * Default is 0 (unlimited), can be filtered via import_attachment_size_limit
         *
         * @return int Maximum attachment file size to import
         */
        public function max_attachment_size()
        {
        }
        /**
         * Ajax callback for importing one batch of products from a CSV.
         */
        public function do_ajax_product_import()
        {
        }
        /**
         * Export page UI.
         */
        public function product_exporter()
        {
        }
        /**
         * Serve the generated file.
         */
        public function download_export_file()
        {
        }
        /**
         * AJAX callback for doing the actual export to the CSV file.
         */
        public function do_ajax_product_export()
        {
        }
        /**
         * Render Import Export button on product listing
         */
        public function render_import_export_button()
        {
        }
        /**
         * Set auction active menu in dokan dashboard
         *
         * @param string $active_menu
         *
         * @return string
         */
        public function dashboard_active_menu($active_menu)
        {
        }
        /**
         * Change imported product status
         *
         * @param object $object
         * @param array  $item
         *
         * @since  2.8.3
         *
         * @return object
         */
        public function change_product_status($object, $item)
        {
        }
        /**
         * Bind global ajax url
         *
         * @since 0.5
         *
         * @return void
         */
        public function bind_global_ajaxurl()
        {
        }
        /**
         * CSV import is_feature to false if not admin
         *
         * @param $data
         *
         * @return $data
         */
        public function feature_column_to_false($data)
        {
        }
        /**
         * Non scalar to scalar due to wc export escape non-scalar value
         *
         * @param $meta_value
         * @param $meta
         *
         * @return $string
         */
        public function non_neumeric_wholesale_handle($meta_value, $meta)
        {
        }
        /**
         * Prevent vendor create new category from product import.
         *
         * @since 3.4.0
         *
         * @param string|WP_Error $term     The term name to add, or a WP_Error object if there's an error.
         * @param string          $taxonomy Taxonomy slug.
         *
         * @return array|WP_Error
         */
        public function protect_vendor_create_category($term, $taxonomy)
        {
        }
        /**
         * Filters the product block configurations.
         *
         * @since 3.7.14
         *
         * @param array $config Array of the configurations of product block.
         *
         * @return array
         */
        public function get_product_block_config($config)
        {
        }
        /**
         * Determines whether products can be imported.
         *
         * @since 3.7.14
         *
         * @return boolean
         */
        public function can_import_products()
        {
        }
        /**
         * Determines whether products can be exported.
         *
         * @since 3.7.14
         *
         * @return boolean
         */
        public function can_export_products()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\FollowStore {
    /**
     * Follow Store Cache class.
     *
     * @since 3.4.2
     *
     * @see \WeDevs\Dokan\Cache
     */
    class FollowStoreCache
    {
        /**
         * Constructor
         *
         * @since 3.4.2
         */
        public function __construct()
        {
        }
        /**
         * Clear Cache for Follow Stores Module
         *
         * @since 3.4.2
         *
         * @param int    $vendor_id
         * @param int    $follower_id
         * @param string $status
         * @param string $current_time
         *
         * @return void
         */
        public function clear_cache($vendor_id, $follower_id, $status, $current_time)
        {
        }
    }
}
namespace {
    class Dokan_Follow_Store_Ajax
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Toggle follow store status
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function toggle_follow_status()
        {
        }
        /**
         * Get current follow status
         *
         * @since 2.9.7
         *
         * @return void
         */
        public function get_current_status()
        {
        }
    }
    class Dokan_Follow_Store_Cron
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Unschedule cron
         *
         * Fires when module deactivate
         *
         * @since 1.0.0
         *
         * @return void
         */
        public static function unschedule_event()
        {
        }
        /**
         * Cron action hook method
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function send_updates()
        {
        }
    }
    class Dokan_Follow_Store_Email_Loader
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return array
         */
        public function __construct()
        {
        }
        /**
         * Add email class
         *
         * @since 1.0.0
         *
         * @param array $wc_emails
         *
         * @return array
         */
        public function add_email_class($wc_emails)
        {
        }
        /**
         * Add email template
         *
         * @since 1.0.0
         *
         * @param array $template_files
         *
         * @return array
         */
        public function add_email_template_file($template_files)
        {
        }
        /**
         * Add email action
         *
         * @since 1.0.0
         *
         * @param array $actions
         *
         * @return array
         */
        public function add_email_action($actions)
        {
        }
    }
    class Dokan_Follow_Store_Email extends \WC_Email
    {
        /**
         * Store Follower
         *
         * @since 1.0.0
         *
         * @var null|WP_User
         */
        public $follower = \null;
        /**
         * Following stores
         *
         * @since 1.0.0
         *
         * @var null|array
         */
        public $vendors = \null;
        public function __construct()
        {
        }
        /**
         * Email settings
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
        /**
         * Email default subject
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Email default heading
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Send email
         *
         * @since 1.0.0
         *
         * @param WP_User $follower
         * @param array   $vendors
         *
         * @return void
         */
        public function trigger($follower, $vendors)
        {
        }
        /**
         * Follower email
         *
         * @since 1.0.0
         *
         * @return string|null
         */
        public function get_recipient()
        {
        }
        /**
         * Email content
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_content()
        {
        }
    }
    class Dokan_Follow_Store_Follow_Button
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add follow store button
         *
         * @since 1.0.0
         *
         * @param WP_User $vendor
         * @param array   $button_classes
         *
         * @return void
         */
        public function add_follow_button($vendor, $button_classes = array())
        {
        }
        /**
         * Add follow button in single store tabs
         *
         * @since 1.0.0
         *
         * @param void $vendor_id
         *
         * @return void
         */
        public function add_follow_button_after_store_tabs($vendor_id)
        {
        }
    }
    class Dokan_Follow_Store_Install
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Fires after module activated
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function activate()
        {
        }
        /**
         * Fires after module deactivated
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function deactivate()
        {
        }
    }
    class Dokan_Follow_Store_My_Account
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Register new endpoint for My Account page
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function add_endpoint()
        {
        }
        /**
         * Add Vendor tab in customer dashboard
         *
         * @since 1.0.0
         *
         * @param array $items
         *
         * @return array
         */
        public function add_wc_account_menu_items($items)
        {
        }
        /**
         * Add content to the new endpoint
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function add_wc_account_content()
        {
        }
    }
    /**
     * Class DokanFollowStoreRestController
     *
     * @since  3.2.1
     *
     * @author weDevs
     */
    class DokanFollowStoreRestController extends \WeDevs\Dokan\Abstracts\DokanRESTController
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'follow-store';
        /**
         * Register follow-store routes
         *
         * @since 3.2.1
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Checks if a given request has access to get items.
         *
         * @since 3.7.17
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return bool True if the request has read access, WP_Error object otherwise.
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Toggle follow status of a store
         *
         * @since 3.2.1
         *
         * @param $request
         *
         * @return WP_Error|WP_REST_Response
         */
        public function toggle_follow_status($request)
        {
        }
        /**
         * Checks if a given request has access to get items.
         *
         * @since 3.7.17
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return bool True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Get the followers of a vendor
         *
         * @since 3.7.17
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_Error|WP_REST_Response
         */
        public function get_followers($request)
        {
        }
        /**
         * Prepare badge data for response
         *
         * @since 3.7.17
         *
         * @param object          $item
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Checks if a given request has access to get items.
         *
         * @since 3.7.17
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return bool True if the request has read access, WP_Error object otherwise.
         */
        public function get_is_following_permissions_check($request)
        {
        }
        /**
         * Get current follow status for a store
         *
         * @since 3.2.1
         *
         * @param $request
         *
         * @return WP_Error|WP_REST_Response
         */
        public function is_following($request)
        {
        }
        /**
         * This method will verify per page item value, will be used only with rest api validate callback
         *
         * @since 3.7.17
         *
         * @param $value
         * @param $request WP_REST_Request
         * @param $key
         *
         * @return bool|WP_Error
         */
        public function validate_per_page($value, $request, $key)
        {
        }
        /**
         * Get is following collection params.
         *
         * @since 3.7.17
         *
         * @return array
         */
        public function get_is_following_collection_params()
        {
        }
        /**
         * Get is following collection params.
         *
         * @since 3.7.17
         *
         * @return array
         */
        public function get_toggle_follow_status_collection_params()
        {
        }
        /**
         * Get follow store collection params.
         *
         * @since 3.7.17
         *
         * @return array
         */
        public function get_followers_collection_params()
        {
        }
        /**
         * Get follow store schema, conforming to JSON Schema
         *
         * @since 3.7.17
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
    }
    class Dokan_Follow_Store_Scripts
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue module scripts
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function enqueue_scripts()
        {
        }
    }
    class Dokan_Follow_Store_Send_Updates extends \Abstract_Dokan_Background_Processes
    {
        /**
         * Process action id
         *
         * @since 1.0.0
         *
         * @var string
         */
        protected $action = 'Dokan_Follow_Store_Send_Updates';
        /**
         * Perform task
         *
         * @since 1.0.0
         *
         * @param array $args
         *
         * @return array
         */
        public function task($args)
        {
        }
        /**
         * Fetch active followers with pagination
         *
         * @since 1.0.0
         *
         * @param int $page
         *
         * @return array
         */
        public function get_followers($page = 1)
        {
        }
    }
    class Dokan_Follow_Store_Vendor_Dashboard
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Register new endpoint for Vendor Dashbaord page
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function add_endpoint()
        {
        }
        /**
         * Add settings nav in settings page
         *
         * @since 1.0.0
         *
         * @param array $settings
         */
        public function add_dashboard_nav($settings)
        {
        }
        /**
         * Load dashboard page template
         *
         * @since 1.0.0
         *
         * @param array $query_vars
         *
         * @return void
         */
        public function load_dashboard_template($query_vars)
        {
        }
    }
    class Dokan_Follow_Store_Vendor_Email extends \WC_Email
    {
        /**
         * Store Follower
         *
         * @since 1.0.0
         *
         * @var null|WP_User
         */
        public $follower = \null;
        /**
         * Following stores
         *
         * @since 1.0.0
         *
         * @var null|int
         */
        public $vendor = \null;
        /**
         * Follow status
         *
         * @since 1.0.1
         *
         * @var null|string
         */
        public $status = \null;
        /**
         * Constructor Method
         */
        public function __construct()
        {
        }
        /**
         * Email settings
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
        /**
         * Email default subject
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Email default heading
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Send email
         *
         * @since 1.0.0
         *
         * @param WP_User $follower
         * @param array   $vendors
         *
         * @return void
         */
        public function trigger($vendor_id, $follower_id, $status)
        {
        }
        /**
         * Follower email
         *
         * @since 1.0.0
         *
         * @return string|null
         */
        public function get_email_recipient()
        {
        }
        /**
         * Email content
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_content()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\FollowStore {
    final class Module
    {
        /**
         * Module version
         *
         * @since 1.0.0
         *
         * @var string
         */
        public $version = '1.0.0';
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Load hooks for this modules
         *
         * @since 3.2.1
         *
         * @return void
         */
        public function load_hooks()
        {
        }
        /**
         * Plugin activation hook
         *
         * @since 3.7.17
         *
         * @return void
         */
        public function activate()
        {
        }
        /**
         * Plugin deactivation hook
         *
         * @since 3.7.17
         *
         * @return void
         */
        public function deactivate()
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.7.17
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        public function rest_api_class_map($class_map)
        {
        }
        public function load_background_class()
        {
        }
    }
}
namespace {
    /**
     * Dokan_Geolocation_Product_Import
     *
     * @since 1.0.0
     */
    class Dokan_Geolocation_Product_Import
    {
        /**
         * Constructor method
         */
        public function __construct()
        {
        }
        /**
         * Dokan format geo data
         *
         * @since 2.9.5
         *
         * @param array $data
         *
         * @return array
         */
        public static function format_geo_data($data)
        {
        }
    }
    /**
     * Module related WP_Query filters for WC Products
     *
     * @since 1.0.0
     */
    class Dokan_Geolocation_Product_Query
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add WooCommerce product query filters
         *
         * @since 1.0.0
         *
         * @param \WP_Query $query
         */
        public function add_query_filters($query)
        {
        }
        /**
         * Add extra select fields
         *
         * @since 1.0.0
         *
         * @param string $fields
         *
         * @return string
         */
        public function posts_fields_request($fields)
        {
        }
        /**
         * Add extra join SQL statements
         *
         * @since 1.0.0
         *
         * @param string $join
         *
         * @return string
         */
        public function posts_join_request($join)
        {
        }
        /**
         * Add HAVING clause after GROUP BY clause
         *
         * @since 1.0.0
         *
         * @param string $groupby
         *
         * @return string
         */
        public function posts_groupby_request($groupby)
        {
        }
        /**
         * Is geolocation show on shop page
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public function is_geolocation_show_on_shop_page()
        {
        }
    }
    /**
     * Geolocation Module Product Tab in product single page
     *
     * @since 1.0.0
     */
    class Dokan_Geolocation_Product_Single
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add Product Location tab in product single page
         *
         * @since 1.0.0
         *
         * @param array $tabs
         *
         * @return array
         */
        public function add_tab($tabs)
        {
        }
        /**
         * Location tab callback
         *
         * Prints google map with product location
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function location_tab()
        {
        }
        /**
         * Add product location data in product single page
         *
         * @todo This should be a reusable function
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function add_product_location_data()
        {
        }
    }
    /**
     * Shows location maps for WC Products
     *
     * @since 1.0.0
     */
    class Dokan_Geolocation_Product_View
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Enqueue locations map scripts in WC shop page
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Include locations map template in WC shop page when layout is set to left or right
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function start_column_layout()
        {
        }
        /**
         * Include locations map template in WC shop page when layout is set to left or right
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function end_column_layout()
        {
        }
        /**
         * Include locations map template in WC shop page
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function before_shop_loop()
        {
        }
        /**
         * Include geolocation data for every product
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function after_shop_loop_item()
        {
        }
        /**
         * Is geolocation show on shop page
         *
         * @since 3.2.0
         *
         * @return bool
         */
        public function is_geolocation_show_on_shop_page()
        {
        }
    }
    /**
     * Geolocation Module Scripts
     *
     * @since 1.0.0
     */
    class Dokan_Geolocation_Scripts
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Register module styles
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function register_styles()
        {
        }
        /**
         * Register module scripts
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function register_scripts()
        {
        }
        /**
         * Add google map script url query args
         *
         * Geolocation module requires 'places' library for autocomple feature
         *
         * @since 1.0.0
         *
         * @param array $query_args
         */
        public function add_gmap_script_query_args($query_args)
        {
        }
    }
    /**
     * Geolocation Module Shortcodes
     *
     * @since 1.0.0
     */
    class Dokan_Geolocation_Shortcode
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Geolocation Shortcode
         *
         * @since 1.0.0
         *
         * @param array $attrs
         *
         * @return string
         */
        public function shortcode($attrs)
        {
        }
        /**
         * Add Geolocation shortocde to Dokan shortcode menu
         *
         * @since 1.0.0
         *
         * @param array $shortcodes
         *
         * @return array
         */
        public function add_to_dokan_shortcode_menu($shortcodes)
        {
        }
    }
    /**
     * Update vendor and product geolocation data
     *
     * @since 1.0.0
     */
    class Dokan_Geolocation_Update_Location_Data extends \WeDevs\Dokan\Abstracts\DokanBackgroundProcesses
    {
        /**
         * Action
         *
         * @since 1.0.0
         *
         * @var string
         */
        protected $action = 'Dokan_Geolocation_Update_Location_Data';
        /**
         * Perform updates
         *
         * @since 1.0.0
         *
         * @param mixed $item
         *
         * @return mixed
         */
        public function task($item)
        {
        }
    }
    /**
     * Update vendor and product geolocation data
     *
     * @since 1.0.0
     */
    class Dokan_Geolocation_Update_Product_Location_Data extends \WeDevs\Dokan\Abstracts\DokanBackgroundProcesses
    {
        /**
         * Action
         *
         * @since 1.0.0
         *
         * @var string
         */
        protected $action = 'Dokan_Geolocation_Update_Product_Location_Data';
        /**
         * Perform updates
         *
         * @since 1.0.0
         *
         * @param mixed $item
         *
         * @return mixed
         */
        public function task($item)
        {
        }
    }
    /**
     * Vendor dashboard functionalities
     *
     * @since 1.0.0
     */
    class Dokan_Geolocation_Vendor_Dashboard
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Use store settings option
         *
         * @since 1.0.0
         *
         * @param int $post_id
         *
         * @return string
         */
        public function use_store_settings($post_id)
        {
        }
        /**
         * Save vendor geodata
         *
         * @since 1.0.0
         *
         * @param int   $store_id
         * @param array $dokan_settings
         *
         * @return void
         */
        public function save_vendor_geodata($store_id, $dokan_settings)
        {
        }
        /**
         * Add product editor options/settings
         *
         * @since 1.0.0
         *
         * @param int $post_id
         *
         * @return void
         */
        public function add_product_editor_options($post_id)
        {
        }
        /**
         * Update product settings
         *
         * @since 1.0.0
         *
         * @param int $post_id
         *
         * @return void
         */
        public function update_product_settings($post_id)
        {
        }
    }
    /**
     * Module related WP_User_Query filters
     *
     * @since 1.0.0
     */
    class Dokan_Geolocation_Vendor_Query
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add action to filter vendor sql query
         *
         * @since 1.0.0
         *
         * @param array $seller_args
         *
         * @return array
         */
        public function filter_pre_user_query($seller_args)
        {
        }
        /**
         * WP_User_Query hook
         *
         * @since 1.0.0
         *
         * @param WP_User_Query $user_query
         */
        public function add_user_query($user_query)
        {
        }
    }
    /**
     * Shows location maps for Dokan Vendors/Sellers
     *
     * @since 1.0.0
     */
    class Dokan_Geolocation_Vendor_View
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Include locations map template in store listing page
         *
         * @since 1.0.0
         *
         * @return void
         */
        public static function before_seller_listing_loop()
        {
        }
        /**
         * Include locations map template in store listing page
         *
         * @since 3.0.0
         *
         * @return void
         */
        public static function before_store_lists_filter_left()
        {
        }
        /**
         * Include location filter form in store listing page
         *
         * @since  3.0.0
         *
         * @return void
         */
        public static function before_store_lists_filter_category()
        {
        }
        /**
         * Include locations map template in store listing page
         *
         * @since 1.0.0
         *
         * @return void
         */
        public static function after_seller_listing_loop()
        {
        }
        /**
         * Include geolocation data for every vendor
         *
         * @since 1.0.0
         *
         * @param WP_User $seller
         *
         * @return void
         */
        public static function seller_listing_footer_content($seller)
        {
        }
        /**
         * Load store lists filter
         *
         * @since  3.0.0
         *
         * @return void
         */
        public static function load_store_lists_filter()
        {
        }
        /**
         * Is geolocation show on store listing page
         *
         * @since 3.2.0
         *
         * @return bool
         */
        public static function is_geolocation_show_on_store_listing_page()
        {
        }
    }
    /**
     * Geolocation Module Widget Filter Form
     *
     * @since 1.0.0
     */
    class Dokan_Geolocation_Widget_Filters extends \WP_Widget
    {
        /**
         * Instance key to keep track of the widget inside widget container in dokan-lite
         *
         * @since 3.10.2
         *
         * @var string
         */
        const INSTANCE_KEY = 'geolocation__Dokan_Geolocation_Widget_Filters';
        // Naming Structure: {module_slug}__{ClassName}
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Widget settings form in widget settings
         *
         * @since 1.0.0
         *
         * @param array $instance
         *
         * @return void
         */
        public function form($instance)
        {
        }
        /**
         * Update or save widget settings
         *
         * @since 1.0.0
         *
         * @param array $new_instance
         * @param array $old_instance
         *
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Display widget in frontend
         *
         * @since 1.0.0
         *
         * @param array $args
         * @param array $instance
         *
         * @return void
         */
        public function widget($args, $instance)
        {
        }
    }
    /**
     * Geolocation Module Product Location Widget
     *
     * @since 1.0.0
     */
    class Dokan_Geolocation_Widget_Product_Location extends \WP_Widget
    {
        /**
         * Instance key to keep track of the widget inside widget container in dokan-lite
         *
         * @since 3.10.2
         *
         * @var string
         */
        const INSTANCE_KEY = 'geolocation__Dokan_Geolocation_Widget_Product_Location';
        // Naming Structure: {module_slug}__{ClassName}
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Widget settings form in widget settings
         *
         * @since 1.0.0
         *
         * @param array $instance
         *
         * @return void
         */
        public function form($instance)
        {
        }
        /**
         * Update or save widget settings
         *
         * @since 1.0.0
         *
         * @param array $new_instance
         * @param array $old_instance
         *
         * @return array
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Display widget in frontend
         *
         * @since 1.0.0
         *
         * @param array $args
         * @param array $instance
         *
         * @return void
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Add product location data in product single page
         *
         * @todo This should be a reusable function
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function add_product_location_data()
        {
        }
    }
    /**
     * Dokan Geolocation Admin Settings
     *
     * @since 1.0.0
     */
    class Dokan_Geolocation_Admin_Settings
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add admin settings section
         *
         * @since 1.0.0
         *
         * @param array $sections
         *
         * @return array
         */
        public function add_settings_section($sections)
        {
        }
        /**
         * Add admin settings fields
         *
         * @since 1.0.0
         *
         * @param array $settings_fields
         *
         * @return array
         */
        public function add_settings_fields($settings_fields)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Geolocation {
    /**
     * Block data handler.
     *
     * @since 3.7.17
     */
    class BlockData
    {
        /**
         * Block section name.
         *
         * @since 3.7.17
         *
         * @var string
         */
        public $section;
        /**
         * Constructor class.
         *
         * @since 3.7.17
         */
        public function __construct()
        {
        }
        /**
         * Registers necessary hooks.
         *
         * @since 3.7.17
         *
         * @return void
         */
        protected function hooks()
        {
        }
        /**
         * Get eu compliance product data for Dokan-pro.
         *
         * @since 3.7.17
         *
         * @param array      $block
         * @param WC_Product $product
         * @param string     $context
         *
         * @return array
         */
        public function get_product_block_data(array $block, $product, string $context)
        {
        }
        /**
         * Save order-min-max data after REST-API insert or update.
         *
         * @since 3.7.17
         *
         * @param WC_Product      $product  Inserted object.
         * @param WP_REST_Request $request  Request object.
         * @param boolean         $creating True when creating object, false when updating.
         *
         * @return void
         */
        public function set_product_block_data($product, $request, $creating = true)
        {
        }
    }
    class Module
    {
        /**
         * Checks admin has set google map api key
         *
         * @since 1.0.0
         *
         * @var bool
         */
        public $has_map_api_key = false;
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Run upon module activation
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function activate()
        {
        }
        public function register_scripts()
        {
        }
        /**
         * Enqueue module scripts
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Register module widgets
         *
         * @since 1.0.0
         * @since 3.10.2 Updated to comply with `dokan-lite` widget registration process
         *
         * @param array $widgets List of widgets to be registered
         *
         * @return array
         */
        public function register_widget(array $widgets): array
        {
        }
        /**
         * Show admin notices
         *
         * @since 1.0.0
         *
         * @param array $notices
         *
         * @return array
         */
        public function admin_notices($notices)
        {
        }
        /**
         * Show mapbox some extra scripts only for RTL
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function render_mapbox_script()
        {
        }
        /**
         * Geolocation data add when new seller
         *
         * @since 3.3.0
         *
         * @param $user_id
         */
        public function set_default_geolocation_data($user_id)
        {
        }
        /**
         * Set product geo location meta information on product import
         *
         * @since 3.4.1
         *
         * @param WC_Product $product
         * @param array $csv_line_item   product line item data
         *
         * @return array $product
         */
        public function set_product_geo_location_meta_on_import($product, $csv_line_item)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Germanized\Admin {
    /**
    * Admin class
    */
    class Settings
    {
        /**
         * Load automatically when class initiate
         *
         * @since 3.3.1
         */
        public function __construct()
        {
        }
        /**
         * Load admin settings section
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function load_settings_section($section)
        {
        }
        /**
         * Load all settings fields
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function load_settings_fields($fields)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Germanized {
    /**
     * Eu compliance/Germanized Module block data.
     *
     * @since 3.7.13
     */
    class BlockData
    {
        /**
         * Block section name.
         *
         * @since 3.7.13
         *
         * @var string
         */
        public $section;
        /**
         * Constructor class.
         *
         * @since 3.7.13
         */
        public function __construct()
        {
        }
        /**
         * Get eu-compliance fields module product block configurations.
         *
         * @since 3.7.13
         *
         * @param array $configuration
         *
         * @return array
         */
        public function get_product_block_configurations($configuration = [])
        {
        }
        /**
         * Get eu compliance product data for Dokan-pro.
         *
         * @since 3.7.13
         *
         * @param array      $block
         * @param WC_Product $product
         * @param string     $context
         *
         * @return array
         */
        public function get_product_block_data(array $block, $product, string $context)
        {
        }
        /**
         * Save order-min-max data after REST-API insert or update.
         *
         * @since 3.7.13
         *
         * @param WC_Product      $product  Inserted object.
         * @param WP_REST_Request $request  Request object.
         * @param boolean         $creating True when creating object, false when updating.
         *
         * @return void
         */
        public function set_product_block_data($product, $request, $creating = true)
        {
        }
        /**
         * Returns Eu compliance fields data of variable products
         *
         * @since 3.7.13
         *
         * @param array                 $data
         * @param WC_Product|null|false $product
         * @param string                $context
         *
         * @return array $data
         */
        public function get_eu_fields_data_for_variable_products($data, $_product, $context)
        {
        }
        /**
         * Saves eu-compliance fields data for variation products.
         *
         * @since 3.7.13
         *
         * @param integer $product_id
         *
         * @return void
         */
        public function save_eu_fields_data_for_product_variations($product_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Germanized\CustomFields {
    /**
     * Class Admin
     * @package WeDevs\DokanPro\Modules\Germanized\CustomFields
     * @since 3.3.1
     */
    class Admin
    {
        /**
         * Admin constructor.
         */
        public function __construct()
        {
        }
        /**
         * Custom fields label to use in js files
         *
         * @param array $localized_data
         *
         * @since 3.3.1
         * @return array
         */
        public function add_localized_data($localized_data)
        {
        }
        /**
         * Populated custom fields data during creating vendor instance
         *
         * @param array $shop_info
         * @param Vendor $vendor
         * @since 3.3.1
         * @return array
         */
        public function populate_shop_data($shop_info, $vendor)
        {
        }
        /**
         * Store custom fields data during add/edit vendors
         *
         * @param int $vendor
         * @param array $data
         *
         * @return Vendor
         * @since 3.3.1
         */
        public function update_vendor_custom_fields($vendor_id, $data)
        {
        }
    }
    /**
     * Class Billing
     *
     * @package WeDevs\DokanPro\Modules\Germanized\CustomFields
     *
     * @since 3.3.1
     */
    class Billing
    {
        /**
         * Billing constructor.
         */
        public function __construct()
        {
        }
        /**
         * Add Customer Custom fields to customer profile billing fields
         *
         * @since 3.5.2
         *
         * @param $fields
         *
         * @return array
         */
        public function cf_in_user_profile($fields)
        {
        }
        /**
         * Add styles for form fields in Order Billing info
         *
         * @since 3.5.2
         *
         * @param $order
         */
        public function cf_field_styles($order)
        {
        }
        /**
         * Add Customer Custom fields to billing data
         *
         * @since 3.5.2
         *
         * @param array $billing_fields
         *
         * @return array
         */
        public function cf_in_order_details_billing($billing_fields)
        {
        }
        /**
         * Add custom fields under customer billing details
         *
         * @param array $fields
         *
         * @since 3.3.1
         * @return array
         */
        public function custom_billing_checkout_fields($fields)
        {
        }
    }
    /**
     * Class Dashboard
     * @package WeDevs\DokanPro\Modules\Germanized\CustomFields
     * @since 3.3.1
     */
    class Dashboard
    {
        /**
         * Dashboard constructor.
         */
        public function __construct()
        {
        }
        /**
         * Add custom meta on vendor dashboard settings page
         *
         * @param int $user_id
         * @param array $store_settings
         *
         * @since 3.3.1
         * @return void
         */
        public function vendor_dashboard_custom_fields($user_id, $store_settings)
        {
        }
        /**
         * Save vendor dashboard custom fields data
         *
         * @param int $store_id
         * @param array $dokan_settings
         *
         * @since 3.3.1
         * @return void
         */
        public function save_vendor_dashboard_custom_fields($store_id, $dokan_settings)
        {
        }
    }
    /**
     * Class Invoice
     *
     * @package WeDevs\DokanPro\Modules\Germanized\CustomFields
     *
     * @since 3.3.1
     */
    class Invoice
    {
        /**
         * Invoice constructor.
         */
        public function __construct()
        {
        }
        /**
         * Dokan Invoice: add custom fields after customer billing address
         *
         * @param string $type
         * @param \WC_Order $order
         *
         * @since 3.3.1
         * @return void
         */
        public function invoice_customer_after_billing_address($type, $order)
        {
        }
        /**
         * Dokan Invoice: add custom fields before customer billing address
         *
         * @param string $type
         * @param \WC_Order $order
         *
         * @since 3.3.1
         * @return void
         */
        public function invoice_customer_before_billing_address($type, $order)
        {
        }
        /**
         * Dokan invoice: add custom fields on vendor address
         *
         * @param string $shop_address
         * @param int $vendor_id
         * @param int $order_id
         *
         * @since 3.3.1
         * @return string
         */
        public function invoice_single_seller_address($shop_address, $vendor_id, $order_id)
        {
        }
    }
    /**
     * Class Registration
     *
     * @since   3.3.1
     *
     * @package WeDevs\DokanPro\Modules\Germanized\CustomFields
     */
    class Registration
    {
        /**
         * Registration constructor.
         */
        public function __construct()
        {
        }
        /**
         * @since 3.3.1
         * @return void
         */
        public function registration_form_custom_fields()
        {
        }
        /**
         * Inject custom fields to WooCommerce for new vendor registraion
         *
         * @since 3.3.1
         *
         * @param array $data
         *
         * @return array
         */
        public function set_new_vendor_reg_data($data)
        {
        }
        /**
         * Adds default dokan store settings when a new vendor registers
         *
         * @param int   $user_id
         * @param array $data
         *
         * @return void
         */
        public function save_vendor_reg_custom_fields($user_id, $data)
        {
        }
    }
    /**
     * Class SingleStore
     * @package WeDevs\DokanPro\Modules\Germanized\CustomFields
     * @since 3.3.1
     */
    class SingleStore
    {
        /**
         * SingleStore constructor.
         */
        public function __construct()
        {
        }
        /**
         * Add customizer settings for single store header info fields
         *
         * @param \WP_Customize_Manager $wp_customize
         *
         * @since 3.3.1
         * @return void
         */
        public function store_header_info_customizer_settings($wp_customize)
        {
        }
        /**
         * Display custom fields on single store header section
         *
         * @param $store_id
         *
         * @since 3.3.1
         * @return void
         */
        public function store_header_info_custom_fields($store_id)
        {
        }
    }
    /**
     * Class UserProfile
     * @package WeDevs\DokanPro\Modules\Germanized\CustomFields
     * @since 3.3.1
     */
    class UserProfile
    {
        /**
         * UserProfile constructor.
         */
        public function __construct()
        {
        }
        /**
         * Add custom meta on user profile
         *
         * @param array $store_settings
         * @param \WP_User $user
         *
         * @since 3.3.1
         * @return void
         */
        public function user_profile_custom_fields($store_settings, $user)
        {
        }
        /**
         * Save user data
         *
         * @param int $user_id
         *
         * @return void
         */
        public function save_user_profile_custom_fields($user_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Germanized\Dashboard {
    /**
     * Class Product
     * @package WeDevs\DokanPro\Modules\Germanized\Dashboard
     * @since 3.3.1
     */
    class Product
    {
        /**
         * Product constructor.
         *
         * @since 3.3.1
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Call all actions and filters
         *
         * @since 3.3.1
         */
        public function add_actions()
        {
        }
        /**
         * This method will load template for simple product
         *
         * @since 3.3.1
         * @param \WC_Product $post
         * @param int $post_id
         * @return void
         */
        public function load_simple_product_template($post, $post_id)
        {
        }
        /**
         * This method will load template for variable product
         *
         * @since 3.3.1
         * @param $loop
         * @param $variation_data
         * @param $variation
         * @return void
         */
        public function load_variable_product_template($loop, $variation_data, $variation)
        {
        }
        /**
         * This method will save simple product data
         *
         * @since 3.3.1
         * @param int $post_id
         * @return void
         */
        public function save_simple_product_data($post_id)
        {
        }
        /**
         * This method will save variable product data
         *
         * @since 3.3.1
         * @param $variation_id
         * @param $i
         *
         * @return void
         */
        public function save_variation_product_data($variation_id, $i)
        {
        }
    }
    class WCPDF
    {
        /**
         * Product constructor.
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Call all actions and filters
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function add_actions()
        {
        }
        /**
         * This method will add vendor id and currenty year prefix to invoice filename
         *
         * @param string $filename
         * @param string $document_type
         * @param array $order_ids
         * @param string $context
         *
         * @since 3.3.1
         *
         * @return string
         */
        public function wcpdf_filename($filename, $document_type, $order_ids, $context)
        {
        }
        /**
         * This method will override default invoice number for a vendor
         *
         * @param string|null $invoice_number
         * @param \WPO\WC\PDF_Invoices\Documents\Invoice $invoice
         *
         * @since 3.3.1
         *
         * @return string|Document_Number returning empty string will trigger creating invoice number from wcpdf plugin
         */
        public function generate_invoice_number($invoice_number, $invoice)
        {
        }
        /**
         * This method will add custom fields so that vendor's can modify their pdf invoice number
         *
         * @param int $store_id
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function vendor_dashboard_custom_pdf_fields($store_id)
        {
        }
        /**
         * Save vendor dashboard custom fields data
         *
         * @param int $store_id
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function save_vendor_dashboard_custom_pdf_fields($store_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Germanized {
    /**
     * Class Helper
     * @package WeDevs\DokanPro\Modules\Germanized
     * @since 3.3.1
     */
    class Helper
    {
        /**
         * This method will check if Germanized For WooCommerce is installed and active
         *
         * @since 3.3.1
         *
         * @return bool
         */
        public static function is_germanized_installed()
        {
        }
        /**
         * This method will check if Gernamized is installed and enabled for vendors
         *
         * @since 3.3.1
         *
         * @return bool
         */
        public static function is_germanized_enabled_for_vendors()
        {
        }
        /**
         * This method will check if Gernamized is installed and enabled for vendors
         *
         * @since 3.3.1
         *
         * @return bool
         */
        public static function is_enabled_on_registration_form()
        {
        }
        /**
         * This method will check if WooCommerce PDF Invoices & Packing Slips Plugin is installed and active
         *
         * @since 3.3.1
         *
         * @return bool
         */
        public static function is_wpo_wcpdf_installed()
        {
        }
        /**
         * This method will check if WooCommerce PDF Invoices & Packing Slips Plugin is installed and enabled for vendors
         *
         * @since 3.3.1
         *
         * @return bool
         */
        public static function is_wpo_wcpdf_enabled_for_vendors()
        {
        }
        /**
         * Get enabled customer extra fields
         *
         * @since 3.3.1
         *
         * @return array
         */
        public static function get_customer_fields()
        {
        }
        /**
         * This method will return true if custom fields is enabled for customer
         *
         * @since 3.3.1
         *
         * @return array
         */
        public static function is_fields_enabled_for_customer()
        {
        }
        /**
         * This method will return company name label
         *
         * @since 3.3.1
         *
         * @return string
         */
        public static function get_customer_company_id_label()
        {
        }
        /**
         * This method will return company name label
         *
         * @since 3.3.1
         *
         * @return string
         */
        public static function get_customer_vat_number_label()
        {
        }
        /**
         * This method will return company name label
         *
         * @since 3.3.1
         *
         * @return string
         */
        public static function get_customer_bank_name_label()
        {
        }
        /**
         * This method will return company name label
         *
         * @since 3.3.1
         *
         * @return string
         */
        public static function get_customer_bank_iban_label()
        {
        }
        /**
         * Get enabled vendor extra fields
         *
         * @since 3.3.1
         *
         * @return array
         */
        public static function get_seller_fields()
        {
        }
        /**
         * This method will return true if custom fields is enabled for vendors
         *
         * @since 3.3.1
         *
         * @return array
         */
        public static function is_fields_enabled_for_seller()
        {
        }
        /**
         * This method will return company name label
         *
         * @since 3.3.1
         *
         * @return string
         */
        public static function get_company_name_label()
        {
        }
        /**
         * This method will return company name label
         *
         * @since 3.3.1
         *
         * @return string
         */
        public static function get_company_id_label()
        {
        }
        /**
         * This method will return company name label
         *
         * @since 3.3.1
         *
         * @return string
         */
        public static function get_vat_number_label()
        {
        }
        /**
         * This method will return company name label
         *
         * @since 3.3.1
         *
         * @return string
         */
        public static function get_bank_name_label()
        {
        }
        /**
         * This method will return company name label
         *
         * @since 3.3.1
         *
         * @return string
         */
        public static function get_bank_iban_label()
        {
        }
        /**
         * Returns mixed units array
         *
         * @since 3.3.1
         * @param string $taxonomy
         * @param string $key
         *
         * @since 3.3.1
         *
         * @return mixed units as array
         */
        public static function get_terms($taxonomy, $key = 'name')
        {
        }
        /**
         * Display help tips
         *
         * @param string $tip
         * @param bool $echo
         * @param bool $allow_html
         *
         * @since 3.3.1
         *
         * @return string|void
         */
        public static function display_help_tips($tip, $echo = false, $allow_html = false)
        {
        }
        /**
         * Convert a boolean value to empty/string
         *
         * @param string $value
         *
         * @since 3.3.1
         *
         * @return bool
         */
        public static function bool_to_string($value, $obj)
        {
        }
        /**
         * Convert an empty value to boolean
         *
         * @param string $value
         *
         * @since 3.3.1
         *
         * @return bool
         */
        public static function empty_to_bool($value)
        {
        }
        /**
         * Insert a value or key/value pair after a specific key in an array.  If key doesn't exist, value is appended
         * to the end of the array.
         *
         * @param array $array
         * @param string $key
         * @param array $new
         *
         * @since 3.3.1
         *
         * @return array
         */
        public static function array_insert_after(array $array, $key, array $new)
        {
        }
        /**
         * This method will return last order date for a vendor
         *
         * @param int $vendor_id
         * @param int $current_order_id
         *
         * @since 3.3.1
         *
         * @return string|null Database query result (as string), or null on failure.
         */
        public static function get_vendor_last_order_date($vendor_id, $current_order_id)
        {
        }
        /**
         * This method will save simple product Eu compliance fields data.
         *
         * @since 3.7.13
         *
         * @param int   $post_id
         * @param array $data
         *
         * @return void
         */
        public static function save_simple_product_eu_data($post_id, $data)
        {
        }
        /**
         * Saves eu-fields for variable products variations.
         *
         * Call this after sanitizing and formatting the values.
         *
         * @since 3.7.13
         *
         * @param integer $variation_id Product variation id.
         * @param array   $data {
         *     Eu-fields data for variation products.
         *
         *     @type integer $_unit_product             Product Units.
         *     @type string  $_unit_price_auto          Calculation.
         *     @type integer $_unit_price_regular       Regular Unit Price.
         *     @type string  $_sale_price_label         Sale Label.
         *     @type string  $_sale_price_regular_label Sale Regular Label.
         *     @type integer $_unit_price_sale          Sale Unit Price.
         *     @type integer $_parent_unit_product
         *     @type string  $_parent_unit
         *     @type integer $_parent_unit_base
         *     @type string  $_mini_desc                Optional Mini Description.
         *     @type string  $_service
         *     @type string  $delivery_time             Delivery Time.
         *     @type integer $_min_age                  Minimum Age .
         *     @type string  $_sale_price_dates_from
         *     @type string  $_sale_price_dates_to
         *     @type string  $_sale_price
         * }
         * @param array   $store_trusted_data {
         *     Trusted store data.
         *
         *     @type string $_ts_gtin GITN
         *     @type string $_ts_mpn  MPN
         * }
         *
         * @return void
         */
        public static function save_variable_products_variations_eu_data($variation_id, $data, $store_trusted_data)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Germanized\SettingsApi {
    /**
     * Settings on Store page.
     *
     * @since 3.7.13
     */
    class Store
    {
        /**
         * Constructor function.
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add store page product section fields.
         *
         * @since 3.7.13
         *
         * @param array $fields array of section field.
         *
         * @return array
         */
        public function add_store_page_product_section_fields(array $fields): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Germanized {
    class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Load automatically when class initiate
         *
         * @since 3.3.1
         */
        public function __construct()
        {
        }
        /**
         * Initiate all classes
         *
         * @since 3.7.13
         *
         * @return void
         */
        public function initiate()
        {
        }
        /**
         * Define Constants
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function define()
        {
        }
        /**
         * Get plugin path
         *
         * @since 3.3.1
         * @return string
         */
        public function plugin_path()
        {
        }
        /**
         * Init all hooks
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Includes all necessary class a functions file
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function set_controllers()
        {
        }
        /**
         * Set template path for Wholesale
         *
         * @since 3.3.1
         *
         * @return string
         */
        public function load_templates($template_path, $template, $args)
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Load scripts and styles
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function enqueue_frontend_scripts()
        {
        }
        /**
         * Load scripts and styles
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function enqueue_admin_scripts($hook)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\LiveChat {
    /**
     * Dokan_Live_Chat_Settings Class
     */
    class AdminSettings
    {
        /**
         * Constructor method for this class
         */
        public function __construct()
        {
        }
        /**
         * Initialize all the hooks
         *
         * @since 1.0
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Add dokan live caht secitons in doakn admin settings
         *
         * @param array $sections
         *
         * @since 1.0
         *
         * @return array $sections;
         */
        public function dokan_live_chat_sections($sections)
        {
        }
        /**
         * Register dokan live chat settings
         *
         * @param array $settings
         *
         * @since 1.0
         *
         * @return array $settings
         */
        public function dokan_live_chat_settings($settings)
        {
        }
        /**
         * Check if live chat is enabled
         *
         * @since 3.0.0
         *
         * @return boolean
         */
        public static function is_enabled()
        {
        }
        /**
         * Get provider
         *
         * @since 3.0.3
         *
         * @return string
         */
        public static function get_provider()
        {
        }
        /**
         * Get theme color for fb messenger
         *
         * @since 3.0.3
         *
         * @return string
         */
        public static function get_theme_color()
        {
        }
        /**
         * Get the App ID
         *
         * @since 3.0.0
         *
         * @return string
         */
        public static function get_app_id()
        {
        }
        /**
         * Get the App Secret
         *
         * @since 3.0.0
         *
         * @return string
         */
        public static function get_app_secret()
        {
        }
        /**
         * Check whether chat button should be displaied on store page or not
         *
         * @since 3.0.0
         *
         * @return boolean
         */
        public static function show_chat_on_store_page()
        {
        }
        /**
         * Check whether chat button should be displaied on inside product tab or not
         *
         * @since 3.0.0
         *
         * @return boolean
         */
        public static function show_chat_on_product_tab()
        {
        }
        /**
         * Check whether chat button should be displaied on above product tab or not
         *
         * @since 3.0.0
         *
         * @return boolean
         */
        public static function show_chat_above_product_tab()
        {
        }
    }
    class Chat
    {
        /**
         * Hold provider class instance
         *
         * @since 3.0.3
         *
         * @var null
         */
        public $provider = null;
        public function __construct()
        {
        }
    }
    /**
     * Customer inbox class
     */
    class CustomerInbox
    {
        /**
         * Constructor of this class
         *
         * @since 1.1
         */
        public function __construct()
        {
        }
        /**
         * Init all the hooks
         *
         * @since  1.1
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Add customer inbox menu
         *
         * @param array $menus
         *
         * @since 1.1
         *
         * @return array
         */
        public function add_customer_inbox($menus)
        {
        }
        /**
         * Add endpoint
         *
         * @since 3.0.0
         *
         * @return void
         */
        public function add_enpoint()
        {
        }
        /**
         * Render content
         *
         * @since 3.0.0
         *
         * @return void
         */
        public function render_content()
        {
        }
    }
    class Messenger
    {
        const VERSION = 'v9.0';
        public function __construct()
        {
        }
        public function register_shortcode()
        {
        }
        public function shortcode($atts)
        {
        }
        public function enqueue_messenger_js()
        {
        }
        public function enqueue_chat_js()
        {
        }
        public function render_live_chat_button($vendor_id)
        {
        }
        public function render_live_chat_button_product_page()
        {
        }
        public function render_live_chat_button_product_tab($vendor, $store)
        {
        }
        /**
         * Get chat provider name
         *
         * @since 3.0.3
         *
         * @return string
         */
        public function get_name()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\LiveChat\SettingsApi {
    /**
     * Store Settings for LiveChat
     */
    class Store
    {
        /**
         * Constructor function
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Livechat settings API support card.
         *
         * @since 3.7.13
         *
         * @param array $support_card Settings.
         *
         * @return array
         */
        public function dokan_live_chat_settings_api_support_card(array $support_card): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\LiveChat {
    /**
     * Dokan Live Chat Start Class
     */
    class Talkjs
    {
        /**
         * API endpoint url
         *
         * @var string
         */
        const API_END_POINT = 'https://api.talkjs.com/';
        /**
         * Hold the app_id
         *
         * @var string
         */
        public $app_id;
        /**
         * Hold the app_secret
         *
         * @var string
         */
        public $app_secret;
        /**
         * Hold value of live chat on off
         *
         * @var string
         */
        public $enabled;
        /**
         * Constructor method for this class
         */
        public function __construct()
        {
        }
        /**
         * Initialize all hooks
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Register Scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue admin scripts
         *
         * Allows plugin assets to be loaded.
         *
         * @uses wp_enqueue_script()
         * @uses wp_localize_script()
         * @uses wp_enqueue_style
         */
        public function dokan_enqueue_scripts()
        {
        }
        /**
         * Check if it's dokan seller settings page
         *
         * @return bool
         *
         * @since 1.0
         */
        public function dokan_is_seller_settings_page()
        {
        }
        /**
         * Dokan is seller online
         *
         * @param  int user_id
         *
         * @since 1.0
         *
         * @return mixed true,false or error
         */
        public function dokan_is_seller_online()
        {
        }
        /**
         * Dokan ajax handler
         *
         * @since 1.0
         *
         * @return void
         */
        public function dokan_ajax_handler()
        {
        }
        /**
         * Initialize seller chat sessions on every page so that we can
         * get new message notifications
         *
         * @since 1.0
         *
         * @return void
         */
        public function init_chat_sessions()
        {
        }
        /**
         * Make the popup responsive
         *
         * @return string
         *
         * @since 1.1
         */
        public function make_popup_responsive()
        {
        }
        /**
         * Render chat javascript for seller
         *
         * @param  object $seller object
         *
         * @since 1.0
         *
         * @return void
         */
        public function render_seller_js($seller)
        {
        }
        /**
         * Get unread message count
         *
         * @since 1.0
         *
         * @return string
         */
        public function get_unread_message_count()
        {
        }
        /**
         * Render live chat button on seller store page
         *
         * @param  int store id
         *
         * @since 1.0
         *
         * @return string
         */
        public function dokan_render_live_chat_button($store_id)
        {
        }
        /**
         * Make a seller online
         *
         * @since 1.0
         *
         * @return string
         */
        public function make_seller_online()
        {
        }
        /**
         * Dokan render live chat button on product page
         *
         * @since 1.0
         *
         * @return string
         */
        public function dokan_render_live_chat_button_product_page()
        {
        }
        /**
         * Dokan render live chat button on product tab
         *
         * @param  object $author
         *
         * @param  array $store
         *
         * @since 1.0
         *
         * @return string
         */
        public function dokan_render_live_chat_button_product_tab($author, $store)
        {
        }
        /**
         * Get login to chat button
         *
         * @since 1.0
         *
         * @return string
         */
        public function get_login_to_chat_button()
        {
        }
        /**
         * Login to chat
         *
         * @since 1.0
         *
         * @return string;
         */
        public function login_to_chat()
        {
        }
        /**
         * Handles login data and sign in user
         *
         * @since 1.0
         *
         * @return string success|failed
         */
        public function login_data_submit()
        {
        }
        /**
         * Create all the shortcodes
         *
         * @since 1.0
         *
         * @return void
         */
        public function dokan_live_chat_shortcode()
        {
        }
        /**
         * Create seller chat inbox
         *
         * @since 1.0
         *
         * @return string
         */
        public function create_chat_inbox()
        {
        }
        /**
         * Create dokan-live-chat shortcode
         *
         * @since 1.0
         *
         * @return string
         */
        public function create_short_code()
        {
        }
        /**
         * Get main talkjs library
         *
         *@since 1.0
         *
         * @return string
         */
        public function get_talkjs_script()
        {
        }
        /**
         * Get customer seller chat js ( create customer seller chat )
         *
         * @since 1.0
         *
         * @return string;
         */
        public function get_customer_seller_chat_js()
        {
        }
        /**
         * Get chat provider name
         *
         * @since 3.0.3
         *
         * @return string
         */
        public function get_name()
        {
        }
    }
    /**
     * Class tawkto
     * @package WeDevs\DokanPro\Modules\LiveChat
     *
     * @since 3.2.0
     *
     * @author weDevs
     */
    class Tawkto
    {
        /**
         * tawkto constructor.
         *
         * @since 3.2.0
         */
        public function __construct()
        {
        }
        /**
         * Register shortcode
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function register_shortcode()
        {
        }
        /**
         * Create shortcode
         *
         * @param $atts
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function shortcode($atts)
        {
        }
        /**
         * Enqueue tawkto js
         *
         * @param $property_id
         * @param $widget_id
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function enqueue_tawkto_js($property_id, $widget_id)
        {
        }
        /**
         * Enqueue custom chat js
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function enqueue_chat_js()
        {
        }
        /**
         * Render live chat button
         *
         * @param $vendor_id
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function render_live_chat_button($vendor_id)
        {
        }
        /**
         * Render live chat button on product page
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function render_live_chat_button_product_page()
        {
        }
        /**
         * Render live chat button on product tab
         *
         * @param $vendor
         * @param $store
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function render_live_chat_button_product_tab($vendor, $store)
        {
        }
        /**
         * Get chat provider name
         *
         * @since 3.0.3
         *
         * @return string
         */
        public function get_name()
        {
        }
    }
    /**
     * Dokan seller inbox class
     *
     * @since 1.1
     */
    class VendorInbox
    {
        /**
         * Constructor method of this class
         *
         * @since 1.1
         */
        public function __construct()
        {
        }
        /**
         * Init all the hooks
         *
         * @since 1.1
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Register inbox menu on seller dashboard
         *
         * @param array $urls
         *
         * @since 1.0
         *
         * @return array
         */
        public function dokan_add_inbox_menu($urls)
        {
        }
        /**
         * Add inbox endpoint to Dashboard
         *
         * @param array $query_var
         *
         * @since 1.0
         *
         * @return array
         */
        public function dokan_add_endpoint($query_var)
        {
        }
        /**
         * Set template path
         *
         * @since DOKAN_PRO_SINEC
         *
         * @param string $template_path
         * @param string $template
         * @param array $args
         *
         * @return string
         */
        public function set_template_path($template_path, $template, $args)
        {
        }
        /**
         * Dokan Load inbox template
         *
         * @param  array $query_vars
         *
         * @since 1.0
         *
         * @return string
         */
        public function dokan_load_inbox_template($query_vars)
        {
        }
    }
    /**
     * Vendor Settings Class
     *
     * @since 1.0.0
     */
    class VendorSettings
    {
        /**
         * Constructor method
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Initialize all the hooks
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Register live caht seller settings on seller dashboard
         *
         * @param int $user_id
         *
         * @param object $profile
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function dokan_live_chat_seller_settings($user_id, $profile)
        {
        }
        /**
         * Save dokan live chat seller settings
         *
         * @param int $user_id
         *
         * @return void
         */
        public function dokan_live_chat_save_seller_settings($user_id)
        {
        }
    }
    /**
     * Class Whatsapp
     * @package WeDevs\DokanPro\Modules\LiveChat
     *
     * @since 3.2.0
     *
     * @author weDevs
     */
    class Whatsapp
    {
        /**
         * Whatsapp constructor.
         *
         * @since 3.2.0
         */
        public function __construct()
        {
        }
        /**
         * Register shortcode
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function register_shortcode()
        {
        }
        /**
         * Create shortcode
         *
         * @param $atts
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function shortcode($atts)
        {
        }
        /**
         * Register Scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue styles
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function enqueue_styles()
        {
        }
        /**
         * Enqueue custom chat js
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function enqueue_chat_js()
        {
        }
        /**
         * Render live chat button
         *
         * @param $seller_id
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function render_live_chat_button($seller_id)
        {
        }
        /**
         * Render live chat button on product page
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function render_live_chat_button_product_page()
        {
        }
        /**
         * Render live chat button on product tab
         *
         * @param $vendor
         * @param $store
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function render_live_chat_button_product_tab($vendor, $store)
        {
        }
        /**
         * Get chat provider name
         *
         * @since 3.0.3
         *
         * @return string
         */
        public function get_name()
        {
        }
        /**
         * Get pre-filled message dynamically filled if variable is present
         *
         * @since 3.2.0
         *
         * @return string
         */
        public function get_pre_filled_message()
        {
        }
    }
    class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Constructor method for this class
         */
        public function __construct()
        {
        }
        /**
         * Add permission on activation
         *
         * @since 1.0
         *
         * @return void
         */
        public function activate()
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        /**
         * Remove permission on deactivation
         *
         * @since 1.0
         *
         * @return void
         */
        public function deactivate()
        {
        }
    }
}
namespace {
    /**
     * Dokan_Live_Search_Widget class
     *
     * @extends WP_Widget
     * @class Dokan_Live_Search_Widget The class that registered a new widget
     * entire Dokan_Live_Search plugin
     */
    class Dokan_Live_Search_Widget extends \WP_Widget
    {
        /**
         * Instance key to keep track of the widget inside widget container in dokan-lite
         *
         * @since 3.10.2
         *
         * @var string
         */
        const INSTANCE_KEY = 'live_search__Dokan_Live_Search_Widget';
        // Naming Structure: {module_slug}__{ClassName}
        /**
         * Constructor for the Dokan_Live_Search_Widget class
         *
         * @uses is_admin()
         */
        public function __construct()
        {
        }
        /**
         * Front-end display of widget.
         *
         * @see WP_Widget::widget()
         *
         * @param array $args     Widget arguments.
         * @param array $instance Saved values from database.
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Back-end widget form.
         *
         * @see WP_Widget::form()
         *
         * @param array $instance Previously saved values from database.
         */
        public function form($instance)
        {
        }
        /**
         * Sanitize widget form values as they are saved.
         *
         * @see WP_Widget::update()
         *
         * @param array $new_instance Values just sent to be saved.
         * @param array $old_instance Previously saved values from database.
         *
         * @return array Updated safe values to be saved.
         */
        public function update($new_instance, $old_instance)
        {
        }
    }
    // class Dokan_Live_Search_Widget
    /**
     * Create HTML dropdown list of Categories.
     *
     * @uses Walker
     */
    class Dokan_LS_Walker_CategoryDropdown extends \Walker
    {
        /**
         * @see Walker::$tree_type
         * @var string
         */
        public $tree_type = 'category';
        /**
         * @see Walker::$db_fields
         * @var array
         */
        public $db_fields = array('parent' => 'parent', 'id' => 'term_id');
        /**
         * Start the element output.
         *
         * @see Walker::start_el()
         *
         * @param string $output   Passed by reference. Used to append additional content.
         * @param object $category Category data object.
         * @param int    $depth    Depth of category. Used for padding.
         * @param array  $args     Uses 'selected' and 'show_count' keys, if they exist. @see wp_dropdown_categories()
         */
        public function start_el(&$output, $category, $depth = 0, $args = array(), $id = 0)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\LiveSearch {
    /**
     * Dokan_Live_Search class
     *
     * @class Dokan_Live_Search The class that holds the entire Dokan_Live_Search plugin
     */
    class Module
    {
        /**
         * Constructor for the Dokan_Live_Search class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @uses is_admin()
         * @uses add_action()
         */
        public function __construct()
        {
        }
        /**
         * Enqueue admin scripts
         *
         * Allows plugin assets to be loaded.
         *
         * @uses wp_enqueue_script()
         * @uses wp_localize_script()
         * @uses wp_enqueue_style()
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Callback for Ajax Action Initialization
         *
         * @return void
         */
        public function dokan_suggestion_search_action()
        {
        }
        /**
         * Add Settings section in Dokan Settings
         *
         * @since 1.0
         *
         * @param array $sections
         *
         * @return array
         */
        public function render_live_search_section($sections)
        {
        }
        /**
         * Add live search options on Dokan Settings under General section
         *
         * @since 1.0
         *
         * @param array $settings_fields
         *
         * @return array
         */
        public function render_live_search_settings($settings_fields)
        {
        }
        /**
         * Callback for Widget Initialization
         *
         * @since 3.10.2 Updated to comply with `dokan-lite` widget registration process
         *
         * @param array $widgets List of widgets to be registered
         *
         * @return array
         */
        public function initialize_widget_register(array $widgets): array
        {
        }
        /**
         * Define constants
         *
         * @since 3.7.4
         */
        public function define_constants()
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\MangoPay\Abstracts {
    /**
     * Class WebhookEventsHandler
     *
     * @since 3.5.0
     *
     * @author weDevs
     */
    abstract class WebhookEvent
    {
        /**
         * Handle the event
         *
         * @since 3.5.0
         *
         * @return void
         */
        abstract public function handle($payload);
        /**
         * Set event
         *
         * @param string $event
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function set_event($event)
        {
        }
        /**
         * Get event
         *
         * @since 3.5.0
         *
         * @return string
         */
        public function get_event()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\MangoPay\Admin {
    /**
     * Class to handle admin assets.
     *
     * @since 3.5.0
     */
    class Assets
    {
        /**
         * Classs constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Registers admin scripts
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function register_scripts()
        {
        }
    }
    /**
     * Manager class for Admin.
     *
     * @since 3.5.0
     */
    class Manager
    {
        /**
         * Class constructor
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\MangoPay\BackgroundProcess {
    /**
     * Class for handling delayed disbursement.
     *
     * @since 3.5.0
     */
    class DelayedDisbursement extends \WC_Background_Process
    {
        /**
         * Class constructor
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Dispatches updater.
         *
         * Updater will still run via cron job
         * if this fails for any reason.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function dispatch()
        {
        }
        /**
         * Handles cron healthcheck
         *
         * Restart the background process if not
         * already running and data exists in the queue.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function handle_cron_healthcheck()
        {
        }
        /**
         * Schedule fallback event.
         *
         * @since 3.5.0
         *
         * @return void
         */
        protected function schedule_event()
        {
        }
        /**
         * handles the task.
         *
         * Override this method to perform any actions required on each
         * queue item. Return the modified item for further processing
         * in the next pass through. Or, return false to remove the
         * item from the queue.
         *
         * @since 3.5.0
         *
         * @param object $args
         *
         * @return string|bool
         */
        protected function task($args)
        {
        }
        /**
         * Complete
         *
         * Override if applicable, but ensure that the below actions are
         * performed, or, call parent::complete().
         */
        protected function complete()
        {
        }
    }
    /**
     * Class for handling failed payouts disbursement.
     *
     * @since 3.5.0
     */
    class FailedPayoutsDisbursement extends \WC_Background_Process
    {
        /**
         * Class constructor
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Dispatches updater.
         *
         * Updater will still run via cron job
         * if this fails for any reason.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function dispatch()
        {
        }
        /**
         * Handles cron healthcheck
         *
         * Restart the background process if not
         * already running and data exists in the queue.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function handle_cron_healthcheck()
        {
        }
        /**
         * Schedule fallback event.
         *
         * @since 3.5.0
         *
         * @return void
         */
        protected function schedule_event()
        {
        }
        /**
         * handles the task.
         *
         * Override this method to perform any actions required on each
         * queue item. Return the modified item for further processing
         * in the next pass through. Or, return false to remove the
         * item from the queue.
         *
         * @since 3.5.0
         *
         * @param object $payout
         *
         * @return string|bool
         */
        protected function task($payout)
        {
        }
        /**
         * Complete
         *
         * Override if applicable, but ensure that the below actions are
         * performed, or, call parent::complete().
         */
        protected function complete()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\MangoPay\Cart {
    /**
     * Class for managing Cart
     *
     * @since 3.5.0
     */
    class Manager
    {
        /**
         * Constructor for Cart manager.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Validates whether or not add to cart is allowed.
         *
         * If MangoPay is only payment gateway available
         * and vendor is not connected with MangoPay,
         * restrict adding product to cart for that vendor.
         *
         * @since 3.5.0
         *
         * @param bool $passed
         * @param int $product_id
         *
         * @return bool
         */
        public function validate_vendor_is_connected($passed, $product_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\MangoPay\Checkout {
    /**
     * Ajax handler class for checkout.
     *
     * @since 3.5.0
     */
    class Ajax
    {
        /**
         * Class constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Create a registration record for a card.
         *
         * @since 3.5.0
         *
         * @return mixed
         */
        public function register_card()
        {
        }
        /**
         * Updates card registration after saving card data.
         *
         * @since 3.5.0
         *
         * @return mixed
         */
        public function update_card()
        {
        }
        /**
         * Deactivates a registered card.
         *
         * @since 3.5.0
         *
         * @return mixed
         */
        public function deactivate_card()
        {
        }
        /**
         * Retrieves registered cards.
         *
         * @since 3.5.0
         *
         * @return mixed
         */
        public function get_registered_cards()
        {
        }
    }
    /**
     * CLass for managing checkout options
     *
     * @since 3.5.0
     */
    class Manager
    {
        /**
         * Class constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Save the extra register fields.
         * We need this to enforce mandatory/required fields
         * that we need for creating a mangopay user
         *
         * @param int   $customer_id ID of the current customer
         * @param array $data        Posted data from the checkout page
         *
         * @return void
         */
        public function save_extra_register_fields($customer_id, $data)
        {
        }
        /**
         * Fires up when WC shop settings have been saved.
         *
         * @since 3.5.0
         *
         * @param int $wp_user_id
         *
         * @return void
         */
        public function synchronize_account_data($wp_user_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\MangoPay\Factories {
    /**
     * Class EventFactory
     *
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace\Factories
     *
     * @since 3.5.0
     */
    class EventFactory
    {
        /**
         * Call the defined static methods
         *
         * @param $method
         * @param $args
         *
         * @since 3.5.0
         *
         * @return mixed
         */
        public static function __callStatic($method, $args)
        {
        }
        /**
         * Create required event class instance
         *
         * @param $event
         *
         * @since 3.5.0
         *
         * @return WebhookEventHandler|void instance
         * @throws DokanException
         */
        public static function get($event)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\MangoPay\Frontend {
    /**
     * Class for handling frontend assets
     *
     * @since 3.5.0
     */
    class Assets
    {
        /**
         * Class constructor
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Registers necessary scripts
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function register_scripts()
        {
        }
    }
    /**
     * Class for managing frontend
     *
     * @since 3.5.0
     */
    class Manager
    {
        /**
         * Class constructor
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function __construct()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\MangoPay\Orders {
    /**
     * Manager class for orders.
     *
     * @since 3.5.0
     */
    class Manager
    {
        /**
         * Class constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
    }
    /**
     * Refunds handler class
     *
     * @since 3.5.0
     */
    class Payment
    {
        // phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
        /**
         * Refund constructor.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Performs payment disbursement
         * according to settings when
         * order status is changed.
         *
         * @since 3.5.0
         *
         * @param int    $order_id
         * @param string $old_status
         * @param string $new_status
         *
         * @return mixed
         */
        public function handle_disbursement($order_id, $old_status, $new_status)
        {
        }
        /**
         * This method will add queue for payments
         * that needs to be disbursed.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function disburse_delayed_payment()
        {
        }
        /**
         * This method will add metadata param
         *
         * @param $query
         * @param $query_vars
         *
         * @since 3.5.0
         *
         * @return mixed
         */
        public function handle_custom_query_var($query, $query_vars)
        {
        }
        /**
         * This method will add queue for payments
         * that needs to be disbursed regarding all
         * failed payouts.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function disburse_failed_payouts()
        {
        }
        /**
         * Performs payin validation on order redirect.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function redirect_order()
        {
        }
        /**
         * Display bankwire ref at top of thankyou page
         * when new order received via bankwire
         *
         * @since 3.5.0
         *
         * @param int $order_id
         *
         * @return void
         */
        public function display_bankwire_ref($order_id)
        {
        }
        // phpcs:enable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
    }
    /**
     * Refunds handler class
     *
     * @since 3.5.0
     */
    class Refund
    {
        /**
         * Refund constructor.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Process refund request.
         *
         * @since 3.5.0
         *
         * @param object $refund
         *
         * @return void
         * @throws \Exception
         */
        public function process_refund($refund)
        {
        }
        /**
         * Withdraw entry for automatic refund as debit
         *
         * @param object $refund
         * @param array  $args
         * @param float  $vendor_refund
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function add_vendor_withdraw_entry($refund, $args, $vendor_refund)
        {
        }
        /**
         * Set vendor refund amount as Mangopay refund amount
         *
         * @param float  $amount
         * @param array  $args
         * @param object $refund
         *
         * @since 3.5.0
         *
         * @return float
         */
        public function vendor_refund_amount($amount, $args, $refund)
        {
        }
        /**
         * Excludes Mangopay gateway from auto processing API refund request.
         *
         * @since 3.5.0
         *
         * @param array $gateways
         *
         * @return array
         */
        public function exclude_from_auto_process_api_refund($gateways)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\MangoPay\PaymentMethod {
    /**
     * WooCommerce Payment Gateway class for MangoPay
     *
     * @since 3.5.0
     */
    class Gateway extends \WC_Payment_Gateway
    {
        /**
         * @var string $sandbox_mode
         */
        public $sandbox_mode;
        /**
         * @var string $client_id
         */
        public $client_id;
        /**
         * @var string $api_key
         */
        public $api_key;
        /**
         * @var string $sandbox_client_id
         */
        public $sandbox_client_id;
        /**
         * @var string $sandbox_api_key
         */
        public $sandbox_api_key;
        /**
         * @var string $debug
         */
        public $debug;
        /**
         * @var array $supported_locales
         */
        public $supported_locales;
        /**
         * @var string $saved_cards
         */
        public $saved_cards;
        /**
         * Class constructor
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Initiates all required info for payment gateway
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function init_fields()
        {
        }
        /**
         * Initiates form fields for admin settings
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
        /**
         * Check whether the payment gateway can be enabled
         *
         * @since 3.5.0
         *
         * @uses get_woocommerce_currency() Retrieves active currency of WooCommerce
         * @uses Helper::get_supported_currencies() To check if WooCommerce active currency exists in this
         *
         * @return boolean
         */
        public function is_valid_for_use()
        {
        }
        /**
         * Checks if the gateway is available for use
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public function is_available()
        {
        }
        /**
         * Output the admin options table.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function admin_options()
        {
        }
        /**
         * Processes the admin options.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function process_admin_options()
        {
        }
        /**
         * Checks whether an order is refundable through Mangopay.
         *
         * @since 3.5.0
         *
         * @param \WC_Order $order WooCommerce order object
         *
         * @return boolean
         */
        public function can_refund_order($order)
        {
        }
        /**
         * Display MangoPay payment related fields
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function payment_fields()
        {
        }
        /**
         * Redirects to MangoPay payment form to process the payment
         *
         * @since 3.5.0
         *
         * @param int|string $order_id Order ID
         *
         * @return array|void|null
         */
        public function process_payment($order_id)
        {
        }
        /**
         * Encrypts api passphrase before saving
         *
         * @since 3.5.0
         *
         * @param array $settings Gateway Settings
         *
         * @return array
         */
        public function encrypt_passphrase($settings)
        {
        }
    }
    /**
     * Class for managing Mangopay payment method
     *
     * @since 3.5.0
     */
    class Manager
    {
        /**
         * Class constructor
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Registers payment gateway
         *
         * @since 3.5.0
         *
         * @param array $gateways
         *
         * @return array
         */
        public function register_gateway($gateways)
        {
        }
        /**
         * Decrypts api passphrase before showing on frontend.
         *
         * @since 3.5.0
         *
         * @param array $settings
         *
         * @return array
         */
        public function decrypt_passphrase($settings)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\MangoPay\Support {
    /**
     * Class for processing gateway apis
     *
     * @since 3.5.0
     */
    class Processor
    {
        /**
         * Handles the configuration instance
         *
         * @since 3.5.0
         *
         * @return Config|null
         */
        protected static function config()
        {
        }
        /**
         * Processes browser data
         *
         * @since 3.5.0
         *
         * @param \MangoPay\PayIn $payin_obj
         *
         * @return \MangoPay\PayIn
         */
        protected static function process_browser_data($payin_obj)
        {
        }
        /**
         * Prepares billing and shipping data for orders
         *
         * @since 3.5.0
         *
         * @param \MangoPay\PayIn   $payin_obj Instance of MangoPay PayIn
         * @param int|string        $order_id
         *
         * @return \MangoPay\PayIn
         */
        public static function prepare_billing_shipping_data($payin_obj, $order_id)
        {
        }
        /**
         * Saves metadata for payment
         *
         * @since 3.5.0
         *
         * @param \WC_Order    $order           Order object
         * @param array|object $payment_data    Payment data
         * @param string       $payment_method  Payment method
         *
         * @return boolean
         */
        protected static function update_metadata($order, $payment_data, $payment_method)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\MangoPay\Processor {
    /**
     * Bank accounts handler class
     *
     * @since 3.5.0
     */
    class BankAccount extends \WeDevs\DokanPro\Modules\MangoPay\Support\Processor
    {
        /**
         * Retrieves a specific bank account data
         *
         * @since 3.5.0
         *
         * @param int|string $mp_user_id            Mangopay user ID
         * @param int|string $existing_account_id   Existing bank account ID
         *
         * @return boolean|MangoBankAccount
         */
        public static function get($mp_user_id, $existing_account_id)
        {
        }
        /**
         * Retrieves all bank accounts for a user.
         *
         * @since 3.5.0
         *
         * @param int|string $mp_user_id Mangopay user ID
         *
         * @return BankAccount[]|array
         */
        public static function all($mp_user_id)
        {
        }
        /**
         * Register a user's bank account in Mangopay profile
         *
         * @since 3.5.0
         *
         * @see: https://github.com/Mangopay/mangopay2-php-sdk/blob/master/demos/workflow/scripts/bankaccount.php
         *
         * @param int|string $mp_user_id    Mangopay user ID
         * @param int|string $wp_user_id    WordPress user ID
         * @param array      $account_data  Bank account data
         *
         * @return \WP_Error|null|string
         */
        public static function create($mp_user_id, $wp_user_id, $account_data)
        {
        }
        /**
         * Saves metadata for payment through bank
         *
         * @since 3.5.0
         *
         * @param \WC_Order         $order          The WooCommerce order object
         * @param \MangoPay\PayIn   $payment_data   The payment data
         *
         * @return void
         */
        public static function save_metadata($order, $payment_data)
        {
        }
    }
    /**
     * Card handler class
     *
     * @since 3.5.0
     */
    class Card extends \WeDevs\DokanPro\Modules\MangoPay\Support\Processor
    {
        /**
         * Register a credit card for mangopay user
         *
         * @since 3.5.0
         *
         * @param int|string $wp_user_id    WordPress user ID
         * @param string     $currency      Currency code
         * @param string     $card_type     Card type
         * @param string     $name
         *
         * @return array
         */
        public static function register($wp_user_id, $currency, $card_type, $name = '')
        {
        }
        /**
         * Update a registered card
         *
         * @since 3.5.0
         *
         * @param string|int $card_id   Card ID
         * @param array 	 $data      Card data
         *
         * @return array
         */
        public static function update($card_id, $data)
        {
        }
        /**
         * De-activate a pre-authorized card
         *
         * @since 3.5.0
         *
         * @param int|string $card_id  Card ID
         *
         * @return array
         */
        public static function deactivate($card_id)
        {
        }
        /**
         * Saves metadata for card payment
         *
         * @since 3.5.0
         *
         * @param \WC_Order $order
         * @param array $payment_data
         *
         * @return void
         */
        public static function save_metadata($order, $payment_data)
        {
        }
    }
    /**
     * Class to process KYC operations
     *
     * @since 3.5.0
     */
    class Kyc extends \WeDevs\DokanPro\Modules\MangoPay\Support\Processor
    {
        // phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
        /**
         * Retrieve info about an existing KYV document.
         *
         * @since 3.5.0
         *
         * @param int $kyc_document_id Mangopay ID of the KYC document
         *
         * @return KycDocument|false
         */
        public static function get($kyc_document_id)
        {
        }
        /**
         * Creates KYV document.
         *
         * @since 3.5.0
         *
         * @param int|string    $account_id     Mangopay ID of the user
         * @param KycDocument   $kyc_document  KYC document object
         *
         * @return KycDocument|\WP_Error
         */
        public static function create_document($account_id, $kyc_document)
        {
        }
        /**
         * Add page (file) to a document.
         *
         * @since 3.5.0
         *
         * @param int|string    $account_id         Mangopay ID of the user
         * @param int|string    $kyc_document_id    Mangopay ID of the KYC document
         * @param resource      $file               File resource
         *
         * @return true|\WP_Error
         */
        public static function create_page($account_id, $kyc_document_id, $file)
        {
        }
        /**
         * Updates a KYC document.
         *
         * @since 3.5.0
         *
         * @param int|string    $user_id        Mangopay ID of the user
         * @param KycDocument   $kyc_document   KYC document object
         *
         * @return KycDocument|\WP_Error
         */
        public static function update($user_id, $kyc_document)
        {
        }
        /**
         * Requests for validation of a KYC document.
         *
         * @since 3.7.4
         *
         * @param string $account_id    Mangopay ID of the user
         * @param string $document_id   Mangopay ID of the document
         *
         * @return KycDocument|\WP_Error
         */
        public static function ask_for_validation($account_id, $document_id)
        {
        }
        /**
         * Filters KYC documents
         *
         * @since 3.5.0
         *
         * @param int|string                   $user_id    Mangopay ID of the user
         * @param \MangoPay\Pagination         $pagination (Optional) Including pagination rules
         * @param \MangoPay\Sorting            $sorting    (Optional) Including sorting rules
         * @param \MangoPay\FilterKycDocuments $filter     (Optional) Including filtering rules
         *
         * @return array|\MangoPay\KycDocument[]
         */
        public static function filter($user_id, $pagination = null, $sorting = null, $filter = null)
        {
        }
        /**
         * Get the URL to upload a KYC Document for that user.
         *
         * @since 3.5.0
         *
         * @param string $mp_user_id
         *
         * @return string
         */
        public static function get_dashboard_url($mp_user_id)
        {
        }
        /**
         * Tests if KYC validation is successful
         *
         * @since 3.5.0
         *
         * @param string $mp_user_id
         *
         * @return boolean|string
         */
        public static function is_valid($mp_user_id)
        {
        }
        /**
         * Retrieves required document types for a specific person type.
         *
         * @since 3.5.0
         *
         * @param \MangoPay\User $user
         *
         * @return array
         */
        public static function get_doc_types(\MangoPay\User $user)
        {
        }
        /**
         * Retrieves refused reasons of KYC documents
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_refused_reasons()
        {
        }
        /**
         * Retrieves KYC document statuses.
         *
         * @since 3.7.8
         *
         * @return array<string,string>
         */
        public static function get_doc_statuses()
        {
        }
        // phpcs:enable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
    }
    /**
     * Class for processing orders
     *
     * @since 3.5.0
     */
    class Order extends \WeDevs\DokanPro\Modules\MangoPay\Support\Processor
    {
        /**
         * Switches the order to "Paid" status after validating.
         *
         * @since 3.5.0
         *
         * @param int|string $order_id
         *
         * @return void|boolean
         */
        public static function validate($order_id)
        {
        }
        /**
         * Perform payment disbursement to vendors
         *
         * @since 3.5.0
         *
         * @param int $order_id
         *
         * @return boolean|void
         */
        public static function disburse_payment($order_id)
        {
        }
        /**
         * Retrieves all wallet transfers that need to be performed in an order batch
         *
         * @since 3.5.0
         *
         * @param \WC_Order  $order          WC_Order object
         * @param int|string $transaction_id MangoPay transaction ID
         *
         * @return array|\WP_Error
         */
        public static function process_transfer_data($order, $transaction_id)
        {
        }
        /**
         * Processes vendor withdraw balance after processing orders.
         *
         * @since 3.5.0
         *
         * @param array $withdraw_data
         *
         * @return boolean
         */
        public static function process_vendor_withdraw($withdraw_data)
        {
        }
        /**
         * Processes vendor's withdraw balance.
         *
         * @since 3.5.0
         *
         * @param array $withdraw Withdraw data
         *
         * @return true|\WP_Error
         */
        public static function process_vendor_balance($withdraw)
        {
        }
        /**
         * Processes vendor's withdraw balance
         *
         * @since 3.5.0
         *
         * @param array $withdraw Withdraw data
         *
         * @return void|\WP_Error
         */
        public static function process_vendor_withdraw_balance($withdraw)
        {
        }
        /**
         * Creates a refund.
         *
         * @param array $args
         *
         * @since 3.5.0
         *
         * @return \WeDevs\DokanPro\Refund\Refund|\WP_Error
         */
        public static function create_refund($args = array())
        {
        }
        /**
         * Processes vendor withdraw threshold date.
         *
         * @since 3.5.0
         *
         * @param int    $order_id
         * @param int    $threshold_days
         * @param int    $vendor_id
         * @param string $transaction_type
         *
         * @return int|boolean
         */
        public static function process_withdraw_threshold($order_id, $threshold_days = 0, $vendor_id = 0, $transaction_type = 'dokan_orders')
        {
        }
        /**
         * Processes a refund.
         *
         * @since 3.5.0
         *
         * @param \WC_Order                      $order
         * @param \WeDevs\DokanPro\Refund\Refund $dokan_refund
         * @param \MangoPay\Refund               $mangopay_refund
         *
         * @return boolean
         */
        public static function process_refund($order, $dokan_refund, $mangopay_refund)
        {
        }
        /**
         * Saves transaction history
         *
         * @since 3.5.0
         *
         * @param \WC_Order $order WC_Order object
         * @param int|string $transaction_id Transaction ID
         *
         * @return void
         */
        public static function save_transaction_history($order, $transaction_id)
        {
        }
        /**
         * Saves transaction data in the order meta
         *
         * @since 3.5.0
         *
         * @param int|string $order_id
         * @param object     $transaction
         *
         * @return void
         */
        public static function save_transaction($order_id, $transaction)
        {
        }
    }
    /**
     * Class to process Mangopay Pay in.
     *
     * @since 3.5.0
     */
    class PayIn extends \WeDevs\DokanPro\Modules\MangoPay\Support\Processor
    {
        /**
         * Get payin info
         *
         * @since 3.5.0
         *
         * @param int $transaction_id
         *
         * @return false|MangoPayIn
         */
        public static function get($transaction_id)
        {
        }
        /**
         * Creates a payin
         *
         * @since 3.5.0
         *
         * @param MangoPayIn $pay_in
         *
         * @return MangoPayIn|WP_Error
         */
        public static function create($pay_in)
        {
        }
        /**
         * Call the appropriate payin url creation method depending on the card type.
         *
         * @since 3.5.0
         *
         * @param int|string $wp_user_id    User ID
         * @param int|string $order_id      Order ID
         * @param int|float  $amount        Amount
         * @param int|float  $fees          Fees
         * @param string 	 $return_url    Return URL
         * @param string 	 $currency      Currency
         * @param string 	 $card_type     Card type
         * @param string 	 $template_url  Template URL
         *
         * @return array|MangoPayIn|WP_Error
         */
        public static function default_card_transaction($wp_user_id, $order_id, $amount, $fees, $return_url, $currency = 'EUR', $card_type = 'CB_VISA_MASTERCARD', $template_url = '')
        {
        }
        /**
         * Generates url for card payin.
         *
         * @param int|string $wp_user_id
         * @param int|string $order_id
         * @param int|float  $amount
         * @param int|float  $fees
         * @param string 	 $return_url
         * @param string 	 $card_type
         * @param string 	 $currency
         * @param string 	 $template_url
         *
         * @return array|MangoPayIn|WP_Error
         * @since 3.5.0
         *
         */
        public static function card_transaction($wp_user_id, $order_id, $amount, $fees, $return_url, $card_type = 'CB_VISA_MASTERCARD', $currency = 'EUR', $template_url = '')
        {
        }
        /**
         * Generate url for direct debit web payment types (like Sofort & Giropay).
         *
         * @since 3.5.0
         *
         * @param int|string $wp_user_id    User ID
         * @param int|string $order_id      Order ID
         * @param int|float  $amount        Amount
         * @param int|float  $fees          Fees
         * @param string 	 $return_url    Return URL
         * @param string 	 $card_type     Card type
         * @param string 	 $currency      Currency
         * @param string 	 $template_url  Template URL
         *
         * @return array|WP_Error
         */
        public static function direct_debit_web_transaction($wp_user_id, $order_id, $amount, $fees, $return_url, $card_type = 'SOFORT', $currency = 'EUR', $template_url = '')
        {
        }
        /**
         * Generate URL for card web payment types.
         *
         * @since 3.5.0
         *
         * @param int|string $wp_user_id    User ID
         * @param int|string $order_id      Order ID
         * @param string 	 $card_id       Card ID
         * @param int|float  $amount        Amount
         * @param int|float  $fees          Fees
         * @param string 	 $return_url    Return URL
         * @param string 	 $currency      Currency
         *
         * @return array|WP_Error
         */
        public static function card_web_transaction($wp_user_id, $order_id, $card_id, $amount, $fees, $return_url, $currency = 'EUR')
        {
        }
        /**
         * Generates Wire Reference and Bank Account data for a bank wire payment.
         *
         * @since 3.5.0
         *
         * @param int|string $wp_user_id    User ID
         * @param int|string $order_id      Order ID
         * @param int|float  $amount        Amount
         * @param int|float  $fees          Fees
         * @param string 	 $currency      Currency
         *
         * @return MangoPayIn|WP_Error
         */
        public static function bankwire_transaction($wp_user_id, $order_id, $amount, $fees, $currency = 'EUR')
        {
        }
        /**
         * Processes card payin refund.
         *
         * @since 3.5.0
         *
         * @see: https://github.com/Mangopay/mangopay2-php-sdk/blob/master/demos/workflow/scripts/refund-payin.php
         *
         * @param int|string $order_id
         * @param int|string $transaction_id
         * @param int|string $wp_user_id
         * @param int|float  $amount
         * @param string 	 $currency
         * @param string 	 $reason
         *
         * @return object|WP_Error
         */
        public static function refund($order_id, $transaction_id, $wp_user_id, $amount, $currency, $reason = '')
        {
        }
        /**
         * Processes payin data before creating
         *
         * @since 3.5.0
         *
         * @param string 	 $payment_type
         * @param int|string $user_id
         * @param array 	 $data
         *
         * @return MangoPayIn|\WP_Error
         */
        public static function prepare($payment_type, $user_id, $data)
        {
        }
        /**
         * Checks if the payment is okay and conveys all requirements
         *
         * @since 3.5.0
         *
         * @param \MangoPay\PayIn $transaction
         * @param array  $payload
         *
         * @return int|false
         */
        public static function verify($transaction, $payload)
        {
        }
        /**
         * Logs debug info
         *
         * @since 3.5.0
         *
         * @param mixed  $message
         * @param string $level
         *
         * @return void
         */
        public static function log($message, $level = 'error')
        {
        }
    }
    /**
     * Class for processing payouts.
     *
     * @since 3.5.0
     */
    class PayOut extends \WeDevs\DokanPro\Modules\MangoPay\Support\Processor
    {
        /**
         * Retrieve info about an existing (past) payout.
         *
         * @since 3.5.0
         *
         * @param int $payout_id Payout ID
         *
         * @return array|MangoPayOut|false
         */
        public static function get($payout_id)
        {
        }
        /**
         * Makes a transaction for Mangopay payout to user
         *
         * @since 3.5.0
         *
         * @see: https://github.com/Mangopay/mangopay2-php-sdk/blob/master/demos/workflow/scripts/payout.php
         *
         * @param int       $wp_user_id User ID
         * @param int       $order_id   Order ID
         * @param string    $currency   Currency code
         * @param float     $amount     Amount to payout
         * @param float     $fees       Fees to payout
         *
         * @return MangoPayOut|WP_Error
         */
        public static function create($wp_user_id, $order_id, $currency, $amount, $fees)
        {
        }
        /**
         * Test if vendor is eligible for payout
         *
         * The vendor is valid if the vendor has his data up to date,
         * has a valid KYC, also for business account type, UBO and
         * company number will be checked.
         *
         * @since 3.5.0
         *
         * @param int|string $wp_user_id User ID
         *
         * @return boolean
         */
        public static function is_user_eligible($wp_user_id)
        {
        }
    }
    /**
     * Class to process Mangopay refund.
     *
     * @since 3.5.0
     */
    class Refund extends \WeDevs\DokanPro\Modules\MangoPay\Support\Processor
    {
        /**
         * Retrieves a refund data.
         *
         * @since 3.5.0
         *
         * @param int|string $refund_id
         *
         * @return \MangoPay\Refund|false
         */
        public static function get($refund_id)
        {
        }
    }
    /**
     * Class for handling wallet transfers
     *
     * @since 3.5.0
     */
    class Transfer extends \WeDevs\DokanPro\Modules\MangoPay\Support\Processor
    {
        /**
         * Retrieves a transfer data.
         *
         * @since 3.5.0
         *
         * @param int|string $transfer_id
         *
         * @return MangoTransfer|false
         */
        public static function get($transfer_id)
        {
        }
        /**
         * Perform Mangopay wallet-to-wallet transfer with retained fees
         *
         * @since 3.5.0
         *
         * @see: https://github.com/Mangopay/mangopay2-php-sdk/blob/master/demos/workflow/scripts/transfer.php
         *
         * @param int|string $order_id          The order ID
         * @param int|string $transaction_id    The transaction ID
         * @param int|string $customer_id       The customer ID
         * @param int|string $vendor_id         The vendor ID
         * @param int|float  $amount            The amount to transfer
         * @param int|float  $fees              The fees to retain
         * @param string     $currency          The currency
         *
         * @return MangoTransfer|WP_Error
         */
        public static function create($order_id, $transaction_id, $customer_id, $vendor_id, $amount, $fees, $currency)
        {
        }
        /**
         * Refunds a transfer
         *
         * @since 3.5.0
         *
         * @param int|string $order_id      The order ID
         * @param int|string $transfer_id   The transfer ID
         * @param int|string $wp_user_id    The WordPress user ID
         * @param string     $reason        The refund reason
         *
         * @return Refund|WP_Error
         */
        public static function refund($order_id, $transfer_id, $wp_user_id, $reason = '')
        {
        }
    }
    /**
     * Class to process UBO.
     *
     * @since 3.5.0
     */
    class Ubo extends \WeDevs\DokanPro\Modules\MangoPay\Support\Processor
    {
        /**
         * Retrieves UBO declarations of a user.
         *
         * @param int|string $user_id
         * @param object 	 $pagination
         * @param object 	 $sorting
         *
         * @return bool|UboDeclaration[]
         * @since 3.5.0
         *
         */
        public static function get_declarations($user_id, $pagination = null, $sorting = null)
        {
        }
        /**
         * Retrieves data of a single declaration.
         *
         * @since 3.5.0
         *
         * @param int|string $user_id   User ID
         * @param int|string $ubo_id    UBO ID
         *
         * @return UboDeclaration|bool
         */
        public static function get_declaration($user_id, $ubo_id)
        {
        }
        /**
         * Retrieves element of a UBO declaration
         *
         * @since 3.5.0
         *
         * @param int|string $user_id           User ID
         * @param int|string $declaration_id    Declaration ID
         * @param int|string $ubo_id            UBO ID
         *
         * @return \MangoPay\Ubo|bool
         */
        public static function get_element($user_id, $declaration_id, $ubo_id)
        {
        }
        /**
         * Creates a UBO declaration
         *
         * @since 3.5.0
         *
         * @param int|string $user_id User ID
         *
         * @return UboDeclaration|WP_Error
         */
        public static function create_declaration($user_id)
        {
        }
        /**
         * Creates an element for UBO declaration.
         *
         * @since 3.5.0
         *
         * @param int|string    $user_id        User ID
         * @param int|string    $declaration_id Declaration ID
         * @param \MangoPay\Ubo $ubo            UBO object
         *
         * @return \MangoPay\Ubo|WP_Error
         */
        public static function create_element($user_id, $declaration_id, $ubo)
        {
        }
        /**
         * Updates an UBO element.
         *
         * @since 3.5.0
         *
         * @param int|string    $user_id        User ID
         * @param int|string    $declaration_id Declaration ID
         * @param \MangoPay\Ubo $ubo            UBO object
         *
         * @return \MangoPay\Ubo|WP_Error
         */
        public static function update_element($user_id, $declaration_id, $ubo)
        {
        }
        /**
         * Requests for a UBO validation.
         *
         * @since 3.5.0
         *
         * @param int|string $user_id           User ID
         * @param int|string $declaration_id    Declaration ID
         *
         * @return UboDeclaration|WP_Error
         */
        public static function ask_for_validation($user_id, $declaration_id)
        {
        }
        /**
         * Check's if a user's UBO is verified.
         *
         * @since 3.5.0
         *
         * @param int|string $wp_user_id User ID
         *
         * @return boolean
         */
        public static function is_user_eligible($wp_user_id)
        {
        }
        /**
         * Retrieves status details of documents.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_status_details()
        {
        }
    }
    /**
     * Class for processing mangopay users
     *
     * @since 3.5.0
     */
    class User extends \WeDevs\DokanPro\Modules\MangoPay\Support\Processor
    {
        /**
         * User type for customers.
         *
         * @var string
         *
         * @since 3.7.8
         */
        const PAYER_TYPE = 'PAYER';
        /**
         * User type for sellers.
         *
         * @var string
         *
         * @since 3.7.8
         */
        const OWNER_TYPE = 'OWNER';
        /**
         * Retrieves a mangopay user data
         *
         * @since 3.5.0
         *
         * @param int|string $mangopay_user_id
         *
         * @return UserNatural|UserLegal|false
         */
        public static function get($mangopay_user_id)
        {
        }
        /**
         * Creates a Mangopay user.
         *
         * Checks if wp_user already has associated mangopay account
         * if yes, it updates the user. else creates it.
         *
         * @since 3.5.0
         * @since 3.7.8 Added parameter `$is_buyer`
         *
         * @param string $wp_user_id The WP user ID
         * @param array  $data       Array of data for the user
         * @param bool   $is_buyer   Whether the user is a BUYER or OWNER. Default `true` (BUYER)
         *
         * @return int|\WP_Error
         */
        public static function create($wp_user_id, $data = [], $is_buyer = true)
        {
        }
        /**
         * Updates a mangopay user.
         *
         * @since 3.5.0
         * @since 3.7.8 Removed parameter `$mp_user_id` and added parameter `$is_buyer`
         *
         * @param string|int wp_user_id The WP user ID
         * @param array 	 $data      Array of data to update
         * @param bool       $is_buyer  Whether the user is a BUYER or OWNER. Default `true` (BUYER)
         *
         * @return object|\WP_Error
         */
        public static function update($wp_user_id, $data, $is_buyer = true)
        {
        }
        /**
         * Get the URL to access a User's Mangopay dashboard page.
         *
         * @since 3.5.0
         *
         * @param int $mp_user_id
         *
         * @return string
         */
        public static function get_dashboard_url($mp_user_id)
        {
        }
        /**
         * Get the URL to access a User's Mangopay transactions page.
         *
         * @since 3.5.0
         *
         * @param int $mp_user_id
         *
         * @return string
         */
        public static function get_transaction_url($mp_user_id)
        {
        }
        /**
         * Get the URL to access a Wallet's MP Transactions page.
         *
         * @since 3.5.0
         *
         * @param int $mp_user_id
         * @param int $mp_wallet_id
         *
         * @return string
         */
        public static function get_wallet_transaction_url($mp_user_id, $mp_wallet_id)
        {
        }
        /**
         * Get document by mp doc id.
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         * @param int|string $kyc_doc_id
         *
         * @return object
         */
        public static function get_kyc($user_id, $kyc_doc_id)
        {
        }
        /**
         * Get all registered cards for this user ID.
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         *
         * @return array
         */
        public static function get_cards($user_id)
        {
        }
        /**
         * Synchronizes users account data
         *
         * @since 3.5.0
         *
         * @param int|string $wp_user_id
         *
         * @return int|object|WP_Error
         */
        public static function sync_account_data($wp_user_id)
        {
        }
        /**
         * Logs user related debugging info.
         *
         * @since 3.5.0
         *
         * @param string $message
         * @param string $level
         *
         * @return void
         */
        public static function log($message, $level = 'debug')
        {
        }
    }
    /**
     * Class for processing wallets
     *
     * @since 3.5.0
     */
    class Wallet extends \WeDevs\DokanPro\Modules\MangoPay\Support\Processor
    {
        /**
         * Retrieves all wallets of a specific user.
         *
         * @since 3.5.0
         *
         * @param string|int $mangopay_user_id
         *
         * @return \MangoPay\Wallet[]|false
         */
        public static function get($mangopay_user_id)
        {
        }
        /**
         * Creates a Mangopay wallet.
         * If a wallet already exists, returns that.
         *
         * @since 3.5.0
         *
         * @param int|string $mangopay_user_id
         *
         * @return MangoWallet|\WP_Error
         */
        public static function create($mangopay_user_id)
        {
        }
        /**
         * Logs wallet related debugging info.
         *
         * @since 3.5.0
         *
         * @param string $message
         * @param string $level
         *
         * @return void
         */
        public static function log($message, $level = 'debug')
        {
        }
    }
    /**
     * Webhook processor class
     *
     * @since 3.5.0
     */
    class Webhook extends \WeDevs\DokanPro\Modules\MangoPay\Support\Processor
    {
        /**
         * Retrieves prefix for webhook
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_prefix()
        {
        }
        /**
         * Retrieves all webhooks
         *
         * @since 3.5.0
         *
         * @return object|\WP_Error
         */
        public static function all()
        {
        }
        /**
         * Registers a new webhook for Mangopay
         *
         * @since 3.5.0
         *
         * @param string $event_type
         *
         * @return int|false
         */
        public static function create($event_type)
        {
        }
        /**
         * Updates an existing webhook
         *
         * @since 3.5.0
         *
         * @param object $hook
         * @param string $event_type
         *
         * @return int|false
         */
        public static function update($existing_hook, $event_type)
        {
        }
        /**
         * Retrieves list of supported webhook events
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_supported_events()
        {
        }
        /**
         * Retrieves webhook key
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_key()
        {
        }
        /**
         * Retrieves payload of a webhook request
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_payload()
        {
        }
        /**
         * Check that a mangopay incoming webhook is enabled & valid
         *
         * @since 3.5.0
         *
         * @param object $hook
         *
         * @return boolean
         */
        public static function is_valid($hook)
        {
        }
        /**
         * Get the URL of the webhooks dashboard
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_dashboard_url()
        {
        }
        /**
         * Generate webhook url
         *
         * @since 3.5.0
         *
         * @param string $event_type
         *
         * @return string
         */
        public static function generate_url($event)
        {
        }
        /**
         * Generates event slug for webhook url
         *
         * @since 3.5.0
         *
         * @param string $event
         *
         * @return string
         */
        public static function generate_event_slug($event)
        {
        }
        /**
         * Get a webhook registered in the Mangopay api by its type
         *
         * @since 3.5.0
         *
         * @return object|false
         */
        public static function get_by_type($webhook_type)
        {
        }
        /**
         * Check that a webhook of the specified type is registered
         *
         * @since 3.5.0
         *
         * @param string $event_type
         *
         * @return boolean
         */
        public static function verify($event_type)
        {
        }
        /**
         * Checks if webhook is authentic
         *
         * @since 3.5.0
         *
         * @param string $event_type
         * @param array $payload
         *
         * @return boolean
         */
        public static function is_authentic($event_type, $payload)
        {
        }
        /**
         * Checks that the webhook key is present and valid
         *
         * @since 3.5.0
         *
         * @return boolean
         */
        public static function is_valid_event($event_type)
        {
        }
        /**
         * Retrives endpoint suffix from webhook url
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_suffix()
        {
        }
        /**
         * Registers all webhook events
         *
         * @since 3.5.0
         *
         * @return void
         */
        public static function register_all()
        {
        }
        /**
         * Deregisters a hook.
         *
         * @since 3.5.0
         *
         * @param object \MangoPay\Hook $hook
         *
         * @return object|false
         */
        public static function deregister($hook)
        {
        }
        /**
         * Register a webhook
         *
         * @since 3.5.0
         *
         * @param string $event_type
         *
         * @return boolean
         */
        public static function register($event_type)
        {
        }
        /**
         * Delete webhook on mangopay end
         *
         * @since 3.5.0
         *
         * @return boolean|void
         */
        public static function deregister_all()
        {
        }
        /**
         * Logs debug messages
         *
         * @since 3.5.0
         *
         * @param string $message the log message
         * @param string $context the log context
         *
         * @return void
         */
        public static function log($message, $context = 'debug')
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\MangoPay\Support {
    /**
     * Class for managing configuration of MangoPay
     *
     * @since 3.5.0
     */
    class Config
    {
        /**
         * Mangopay api url for sandbox account
         *
         * @since 3.5.0
         *
         * @var string
         */
        const SANDBOX_API_URL = 'https://api.sandbox.mangopay.com';
        /**
         * Mangopay api url for the production account
         *
         * @since 3.5.0
         *
         * @var string
         */
        const PROD_API_URL = 'https://api.mangopay.com';
        /**
         * Mangopay dashboard url for the sandbox account
         *
         * @since 3.5.0
         *
         * @var string
         */
        const SANDBOX_DASHBOARD = 'https://dashboard.sandbox.mangopay.com';
        /**
         * Mangopay dashboard url for the production account
         *
         * @since 3.5.0
         *
         * @var string
         */
        const PRODUCTION_DASHBOARD = 'https://dashboard.mangopay.com';
        /**
         * Holds the filename that store account key
         *
         * @since 3.5.0
         *
         * @var string
         */
        const KEY_FILE = 'secret.key.php';
        /**
         * Holds the filename for log
         *
         * @since 3.5.0
         *
         * @var string
         */
        const LOG_FILE = 'dokan-mangopay-transactions.log.php';
        /**
         * Directory name for storing temporary data
         *
         * @since 3.5.0
         *
         * @var string
         */
        const TEMP_DIRECTORY = 'dokan-mangopay-temp';
        /**
         * Indicates debugging mode
         *
         * @since 3.5.0
         *
         * @var boolean
         */
        const DEBUG_MODE = false;
        /**
         * Holds mangopay api object
         *
         * @since 3.5.0
         *
         * @var MangoPayApi
         */
        public $mangopay_api;
        /**
         * Retrieves the singleton instance of the class.
         *
         * @since 3.5.0
         *
         * @return Config
         */
        public static function get_instance()
        {
        }
        /**
         * To check if the Mangopay API is running in production or sandbox environment
         *
         * @since 3.5.0
         *
         * @return boolean
         */
        public function is_production()
        {
        }
        /**
         * Checks if debugging enabled
         *
         * @since 3.5.0
         *
         * @return boolean
         */
        public function is_debug_mode()
        {
        }
        /**
         * Get Mangopay dashboard url
         *
         * @since 3.5.0
         *
         * @return string
         */
        public function get_dashboard_url()
        {
        }
        /**
         * Retrieves the option values of configuration
         *
         * @since 3.5.0
         *
         * @return array
         */
        public function get_options()
        {
        }
        /**
         * Get temporary folder path
         *
         * @since 3.5.0
         *
         * @return string
         */
        public function get_temp_dir()
        {
        }
        /**
         * Retrieves log file path
         *
         * @since 3.5.0
         *
         * @return string
         */
        public function get_log_file_path()
        {
        }
        /**
         * Simple API connection test
         *
         * @since 3.5.0
         *
         * @see: https://gist.github.com/hobailey/105c53717b8547ba66d7
         *
         * @return boolean
         */
        public function test_connection()
        {
        }
        /**
         * Retrieves client id error
         *
         * @since 3.5.0
         *
         * @return string
         */
        public function get_client_id_error()
        {
        }
        /**
         * Encrypts passphrase data
         *
         * @since 3.5.0
         *
         * @param string $data
         *
         * @return string
         */
        public function encrypt($data)
        {
        }
        /**
         * Decrypts passphrase data
         *
         * @since 3.5.0
         *
         * @param string $data
         *
         * @return string|false
         */
        public function decrypt($data)
        {
        }
    }
    class Helper
    {
        /**
         * Retrieves bank account types
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_bank_account_types()
        {
        }
        /**
         * Retrieves restricted residences list.
         *
         * Users from these countries are not allowed to
         * be created in Mngopay.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_restricted_residences()
        {
        }
        /**
         * Retrieves appropriate locale
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_locale()
        {
        }
        /**
         * Retrieves the supported currencies.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_supported_currencies()
        {
        }
        /**
         * Retrieves the supported locales.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_supported_locales()
        {
        }
        /**
         * Retrieves cards that support 3DS.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_3ds_supported_cards()
        {
        }
        /**
         * Retrieves available credit card types.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_available_card_types()
        {
        }
        /**
         * Retrieves available direct payment types.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_available_direct_payment_types()
        {
        }
        /**
         * Retrieves default card types.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_default_card_types()
        {
        }
        /**
         * Retrieves countries that do not require post code.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_countries_requiring_no_postcode()
        {
        }
        /**
         * Retrievs gateway id of MangoPay.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_gateway_id()
        {
        }
        /**
         * Retrievs gateway title of MangoPay.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_gateway_title()
        {
        }
        /**
         * Retrievs gateway description of MangoPay.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_gateway_description()
        {
        }
        /**
         * Retrieves text for order button on checkout page
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_order_button_text()
        {
        }
        /**
         * Includes module template
         *
         * @since 3.5.0
         *
         * @param string $file_name Template file name
         * @param array  $args      Necessary variables
         *
         * @return void
         */
        public static function get_template($file_name, $args = [])
        {
        }
        /**
         * Check if the product is a vendor subscription product.
         *
         * @since 3.5.0
         *
         * @param WC_Product|int $product
         *
         * @return bool
         **/
        public static function is_vendor_subscription_product($product)
        {
        }
        /**
         * Check whether subscription module is enabled or not
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_vendor_subscription_module_active()
        {
        }
        /**
         * Checks if gateway is ready to be used
         *
         * @since 3.5.0
         *
         * @return boolean
         */
        public static function is_gateway_ready()
        {
        }
        /**
         * Checks if mangopay api is ready
         *
         * @since 3.5.0
         *
         * @return boolean
         */
        public static function is_api_ready()
        {
        }
        /**
         * Modifies balance date with threshold according to disbursement mode.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_modified_balance_date()
        {
        }
        /**
         * CHecks if a seller is connected to MangoPay
         * and ready to receieve payment.
         *
         * @since 3.5.0
         *
         * @param int|string $seller_id
         *
         * @return boolean
         */
        public static function is_seller_connected($seller_id)
        {
        }
        /**
         * Retrieves bank account common form fields
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_bank_account_common_fields()
        {
        }
        /**
         * Retrieves bank account fields.
         *
         * @since 3.5.0
         *
         * @see: https://docs.mangopay.com/api-references/bank-accounts/
         *
         * @return array
         */
        public static function get_bank_account_types_fields()
        {
        }
        /**
         * Retrieves extra sign up fields upon condition
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         * @param array      $data
         *
         * @return array
         */
        public static function get_signup_fields($user_id = null, $data = [])
        {
        }
        /**
         * Retrieves form fields for UBO creation.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_ubo_form_field()
        {
        }
        /**
         * Retrieves mangopay payment settings for vendors
         *
         * @since 3.5.0
         *
         * @param int|string $vendor_id
         * @param string $section
         *
         * @return mixed
         */
        public static function get_vendor_payment_settings($vendor_id, $section = '', $sub_section = '')
        {
        }
        /**
         * Generates dropdown of years.
         *
         * The starting year is the current year and
         * rest of the years are generated based on
         * the limit.
         *
         * @since 3.5.0
         *
         * @param integer $limit
         *
         * @return array
         */
        public static function get_years_dropdown($limit = 10)
        {
        }
        /**
         * Generates dropdown for all tweleve months of a year.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_months_dropdown()
        {
        }
        /**
         * Exit with a 404 header when incoming webhook looks suspicious
         *
         * @since 3.5.0
         *
         * @return void
         */
        public static function exit_with_404()
        {
        }
        /**
         * Warns owner/vendor/admin by sending a mail.
         *
         * @since 3.5.0
         *
         * @uses get_option() Retrievs the admin email
         *
         * @param string $message
         * @param int|string $order_id
         *
         * @return boolean
         */
        public static function warn_owner($message, $order_id = 0)
        {
        }
        /**
         * Checks if a date is valid.
         *
         * @since 3.5.0
         *
         * @param string $date
         *
         * @return boolean
         */
        public static function is_valid_date($date)
        {
        }
        /**
         * Formats date to Mangopay standard.
         *
         * @since 3.5.0
         *
         * @param string $date
         *
         * @return string
         */
        public static function format_date($date)
        {
        }
        /**
         * Writes error log message.
         *
         * @since 3.5.0
         *
         * @param string $message
         * @param string $level
         *
         * @return void
         */
        public static function log($message, $category = '', $level = 'debug')
        {
        }
    }
    /**
     * Meta data handler class
     *
     * @since 3.5.0
     */
    class Meta
    {
        /**
         * Retrieves order meta key.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function key($base)
        {
        }
        /**
         * Retrieves meta key for mangopay account id
         *
         * @since 3.5.0
         *
         * @return void
         */
        public static function mangopay_meta_key()
        {
        }
        /**
         * Retrieves mangopay account id of a user
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_mangopay_account_id($user_id)
        {
        }
        /**
         * Updates mangopay account id of a user
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         * @param int|string $account_id
         *
         * @return int|boolean
         */
        public static function update_mangopay_account_id($user_id, $account_id)
        {
        }
        /**
         * Deletes mangopay account id of a user
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         * @param boolean $force
         *
         * @return boolean
         */
        public static function delete_mangopay_account_id($user_id, $force = true)
        {
        }
        /**
         * Retrieves Mangopay account it that was previously trashed.
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_trashed_mangopay_account_id($user_id)
        {
        }
        /**
         * Checks whether a user is regular KYC verified.
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function is_user_regular_kyc_verified($user_id)
        {
        }
        /**
         * Updates the regular kyc verification status
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         * @param int|string $status
         *
         * @return int|boolean
         */
        public static function update_regular_kyc_status($user_id, $status)
        {
        }
        /**
         * Retrieves Mnagopay active bank account id
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_active_bank_account($user_id)
        {
        }
        /**
         * Updates mangopay bank account id of a user
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         * @param int|string $bank_account_id
         *
         * @return int|boolean
         */
        public static function update_active_bank_account($user_id, $bank_account_id)
        {
        }
        /**
         * Retrieves Mnagopay bank account id
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         * @param string     $account_type
         *
         * @return string|false
         */
        public static function get_bank_account_id($user_id, $account_type = '')
        {
        }
        /**
         * Updates mangopay bank account id of a user
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         * @param int|string $bank_account_id
         * @param string     $account_type
         *
         * @return int|boolean
         */
        public static function update_bank_account_id($user_id, $bank_account_id, $account_type = '')
        {
        }
        /**
         * Retrieves mangopay user status
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_user_status($user_id)
        {
        }
        /**
         * Retrieves mangopay user status
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         * @param string $status
         *
         * @return int|boolean
         */
        public static function update_user_status($user_id, $status)
        {
        }
        /**
         * Retrieves user business type
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_user_business_type($user_id)
        {
        }
        /**
         * Updates user business type
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         * @param string $business_type
         *
         * @return int|boolean
         */
        public static function update_user_business_type($user_id, $business_type)
        {
        }
        /**
         * Retrieves user birthday
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_user_birthday($user_id)
        {
        }
        /**
         * Updates user birthday
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         * @param string $birthday
         *
         * @return int|boolean
         */
        public static function update_user_birthday($user_id, $birthday)
        {
        }
        /**
         * Retrieves user nationality
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_user_nationality($user_id)
        {
        }
        /**
         * Updates user nationality
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         * @param string $nationality
         *
         * @return int|boolean
         */
        public static function update_user_nationality($user_id, $nationality)
        {
        }
        /**
         * Retrieves failed payout data
         *
         * @since 3.5.0
         *
         * @return array|false
         */
        public static function get_failed_payouts()
        {
        }
        /**
         * Updates failed payout data
         *
         * @since 3.5.0
         *
         * @param array $payout
         *
         * @return int|boolean
         */
        public static function update_failed_payouts($payout)
        {
        }
        /**
         * Removes a failed payout to mark it successful.
         *
         * @since 3.5.0
         *
         * @param array $payout
         *
         * @return int|boolean
         */
        public static function remove_failed_payout($payout)
        {
        }
        /**
         * Retrieves number of payout attempts.
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return array|false
         */
        public static function get_payout_attempts($order)
        {
        }
        /**
         * Updates payout data
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param int|string        $payout_attempts
         *
         * @return int|boolean
         */
        public static function update_payout_attempts($order, $payout_attempts)
        {
        }
        /**
         * Retrieves number of payout attempts.
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return string|false
         */
        public static function get_last_payout_attempt($order)
        {
        }
        /**
         * Updates payout data
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param int|string        $last_attempt
         *
         * @return int|boolean
         */
        public static function update_last_payout_attempt($order, $payout_attempts)
        {
        }
        /**
         * Retrieves commission status
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return string|false
         */
        public static function get_commision_status($order)
        {
        }
        /**
         * Updates commission status
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param string $status
         *
         * @return int|boolean
         */
        public static function update_commision_status($order, $status)
        {
        }
        /**
         * Retrieves commission data
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return string|false
         */
        public static function get_commision($order)
        {
        }
        /**
         * Updates commission data
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param string $commission
         *
         * @return int|boolean
         */
        public static function update_commision($order, $commission)
        {
        }
        /**
         * Retrieves withdraw data for an order.
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return array|false
         */
        public static function get_withdraw_data($order)
        {
        }
        /**
         * Updates withdraw data for an order.
         *
         * @since 3.5.0
         *
         * @param int|string $order
         * @param array      $withdraw_data
         *
         * @return int|boolean
         */
        public static function update_withdraw_data($order, $withdraw_data)
        {
        }
        /**
         * Retrieves Mangopay transaction id
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return string|false
         */
        public static function get_transaction_id($order)
        {
        }
        /**
         * Updates Mangopay transaction id
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param string $transaction_id
         *
         * @return int|bool
         */
        public static function update_transaction_id($order, $transaction_id)
        {
        }
        /**
         * Retrieves all Mangopay transaction ids of an order
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return array|false
         */
        public static function get_all_transaction_ids($order)
        {
        }
        /**
         * Updates all Mangopay transaction ids of an order
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param array $transaction_ids
         *
         * @return int|bool
         */
        public static function update_all_transaction_ids($order, $transaction_ids)
        {
        }
        /**
         * Retrieves Mangopay successful transaction id
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return string|false
         */
        public static function get_succeeded_transaction_id($order)
        {
        }
        /**
         * Updates successful Mangopay transaction id
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param string $transaction_id
         *
         * @return int|bool
         */
        public static function update_succeeded_transaction_id($order, $transaction_id)
        {
        }
        /**
         * Retrieves Mangopay transfers
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return array|false
         */
        public static function get_transfers($order)
        {
        }
        /**
         * Retrieves Mangopay transfers
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param array $transfers
         *
         * @return int|boolean
         */
        public static function update_transfers($order, $transfers)
        {
        }
        /**
         * Retrieves Mangopay refund ids
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return array|false
         */
        public static function get_refund_ids($order)
        {
        }
        /**
         * Retrieves Mangopay refund ids
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param string|array $refund_ids
         *
         * @return int|boolean
         */
        public static function update_refund_ids($order, $refund_ids)
        {
        }
        /**
         * Retrieves payout data
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return array|false
         */
        public static function get_payouts($order)
        {
        }
        /**
         * Updates payout data
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param array $payouts
         *
         * @return int|boolean
         */
        public static function update_payouts($order, $payouts)
        {
        }
        /**
         * Retrieves Mangopay payment reference
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return object|false
         */
        public static function get_payment_ref($order)
        {
        }
        /**
         * Updates Mangopay payment reference
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param object $reference
         *
         * @return int|boolean
         */
        public static function update_payment_ref($order, $reference)
        {
        }
        /**
         * Retrieves Mangopay payment type
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return string|false
         */
        public static function get_payment_type($order)
        {
        }
        /**
         * Updates Mangopay payment type
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param string $pay_type
         *
         * @return int|boolean
         */
        public static function update_payment_type($order, $pay_type)
        {
        }
        /**
         * Retrieves Mangopay payment disbursement mode
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return string|false
         */
        public static function get_payment_disburse_mode($order)
        {
        }
        /**
         * Updates Mangopay payment disbursement mode
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param string $disburse_mode
         *
         * @return int|boolean
         */
        public static function update_payment_disburse_mode($order, $disburse_mode)
        {
        }
        /**
         * Checks if withdraw balance added for an order
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return boolean
         */
        public static function is_withdraw_balance_added($order)
        {
        }
        /**
         * Updates Mangopay withdraw balance added flag
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param string $is_added
         *
         * @return int|boolean
         */
        public static function update_withdraw_balance($order, $is_added)
        {
        }
        /**
         * Retrieves transfer id of an order.
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return string|false
         */
        public static function get_transfer_id($order)
        {
        }
        /**
         * Updates transfer id of an order.
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param int|string $transfer_id
         *
         * @return int|boolean
         */
        public static function update_transfer_id($order, $transfer_id)
        {
        }
        /**
         * Retrieves payout id of an order.
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return string|false
         */
        public static function get_payout_id($order)
        {
        }
        /**
         * Updates payout id of an order.
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param int|string $transfer_id
         *
         * @return int|boolean
         */
        public static function update_payout_id($order, $payout_id)
        {
        }
        /**
         * Updates flag if withdraw threshold is processed.
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         * @param int|string        $is_added
         *
         * @return int|boolean
         */
        public static function update_withdraw_threshold_processed($order, $is_added = 'yes')
        {
        }
        /**
         * Checks whether withdraw threshold is processed.
         *
         * @since 3.5.0
         *
         * @param int|string|object $order
         *
         * @return boolean
         */
        public static function is_withdraw_threshold_processed($order)
        {
        }
    }
    /**
     * Same as storage strategy implementation for tests
     *
     * @since 3.5.0
     */
    class MockStorageStrategy implements \MangoPay\Libraries\IStorageStrategy
    {
        /**
         * Gets the current authorization token.
         *
         * @since 3.5.0
         *
         * @return \MangoPay\Libraries\OAuthToken Currently stored token instance or null.
         */
        public function Get()
        {
        }
        /**
         * Stores authorization token passed as an argument.
         *
         * @since 3.5.0
         *
         * @param \MangoPay\Libraries\OAuthToken $token Token instance to be stored.
         */
        public function Store($token)
        {
        }
    }
    /**
     * Class for handling all settings of Dokan MangoPay
     *
     * @since 3.5.0
     */
    class Settings
    {
        /**
         * Retrieves all mangopay settings
         *
         * @since 3.5.0
         *
         * @param string $key
         *
         * @return mixed
         */
        public static function get($key = '_all')
        {
        }
        /**
         * Checks if sandbox is enabled
         *
         * @since 3.5.0
         *
         * @return boolean
         */
        public static function is_test_mode()
        {
        }
        /**
         * Retrieves mangopay client id
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_client_id()
        {
        }
        /**
         * Retrieves mangopay api key
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_api_key()
        {
        }
        /**
         * Retrieves webhook key
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_webhook_key()
        {
        }
        /**
         * Checks if card registration is enabled
         *
         * @since 3.5.0
         *
         * @return boolean
         */
        public static function is_saved_cards_enabled()
        {
        }
        /**
         * Checks if mangopay gateway is enabled
         *
         * @since 3.5.0
         *
         * @return boolean
         */
        public static function is_gateway_enabled()
        {
        }
        /**
         * Retrieves mangopay gateway title
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_gateway_title()
        {
        }
        /**
         * Retrieves mangopay gateway description
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_gateway_description()
        {
        }
        /**
         * Checkis if instant payout is enabled
         *
         * @since 3.5.0
         *
         * @return boolean
         */
        public static function is_instant_payout_enabled()
        {
        }
        /**
         * Retrieves payment disbursement mode
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_disbursement_mode()
        {
        }
        /**
         * Retrieves payment disbursement delay period
         *
         * @since 3.5.0
         *
         * @return int
         */
        public static function get_disbursement_delay_period()
        {
        }
        /**
         * Retrieves selected credit cards for payment
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_selected_credit_cards()
        {
        }
        /**
         * Retrieves selected direct pay methods
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_selected_direct_pay_methods()
        {
        }
        /**
         * Retrieves default vendor status
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_default_vendor_status()
        {
        }
        /**
         * Retrieves default business status
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_default_business_type()
        {
        }
        /**
         * Checks if display notice on vendor dashboard for
         * non-connected sellers is enabled.
         *
         * @since 3.5.0
         *
         * @return boolean
         */
        public static function is_display_notice_on_vendor_dashboard_enabled()
        {
        }
        /**
         * Checks if send announcement to non-connected sellers is enabled
         *
         * @since 3.5.0
         *
         * @return boolean
         */
        public static function is_send_announcement_to_sellers_enabled()
        {
        }
        /**
         * Get interval period for sending announcement
         *
         * @since 3.5.0
         *
         * @return int
         */
        public static function get_announcement_interval()
        {
        }
    }
    // phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
    /**
     * Shortcode handler class
     *
     * @since 3.5.0
     */
    class Shortcode
    {
        /**
         * Constructor for the class
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Returns html for the KYC status for a user
         *
         * @since 3.5.0
         *
         * @return string|void
         */
        public function kyc_doc_user_info()
        {
        }
        /**
         * Returns HTML for the KYC doc upload form
         *
         * @since 3.5.0
         *
         * @param string
         */
        public function kyc_doc_upload_form($atts)
        {
        }
    }
    /**
     * Class to handle validation.
     *
     * @since 3.5.0
     */
    class Validation
    {
        /**
         * Check if a valid company number is provided
         *
         * @since 3.5.0
         *
         * @param string $company_number
         *
         * @return boolean
         */
        public static function check_company_number_pattern($company_number)
        {
        }
    }
    /**
     * Webhook handler class
     *
     * @since 3.5.0
     */
    class WebhookHandler
    {
        /**
         * Class constructor
         *
         * @since 3.5.0
         */
        function __construct()
        {
        }
        /**
         * Handles incoming webhook request
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function handle_request()
        {
        }
        /**
         * Registers webhooks
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Deregisters webhooks
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function deregister()
        {
        }
    }
}
namespace WeDevs\Dokanpro\Modules\MangoPay\WebhookEvents {
    /**
     * Class to handle PayIn success webhook
     *
     * @since 3.5.0
     */
    class PayInNormalSucceded extends \WeDevs\DokanPro\Modules\MangoPay\Abstracts\WebhookEvent
    {
        /**
         * Class constructor
         *
         * @since 3.5.0
         *
         * @param string $event
         */
        public function __construct($event)
        {
        }
        /**
         * Handles the webhook event
         *
         * @since 3.5.0
         *
         * @param array $payload
         *
         * @return void
         */
        public function handle($payload)
        {
        }
    }
    /**
     * CLass to handle PayIn refund webhook.
     *
     * @since 3.5.0
     */
    class PayInRefundSucceeded extends \WeDevs\DokanPro\Modules\MangoPay\Abstracts\WebhookEvent
    {
        /**
         * Class constructor.
         *
         * @since 3.5.0
         *
         * @param string $event
         */
        public function __construct($event)
        {
        }
        /**
         * Handles the webhook event.
         *
         * @since 3.5.0
         *
         * @param array $payload
         *
         * @return void
         */
        public function handle($payload)
        {
        }
    }
    /**
     * Class to handle Payout normal failed webhook.
     *
     * @since 3.5.0
     */
    class PayOutNormalFailed extends \WeDevs\DokanPro\Modules\MangoPay\Abstracts\WebhookEvent
    {
        /**
         * Class constructor.
         *
         * @since 3.5.0
         *
         * @param string $event
         */
        public function __construct($event)
        {
        }
        /**
         * Handles the webhook.
         *
         * @since 3.5.0
         *
         * @param array $payload
         *
         * @return void
         */
        public function handle($payload)
        {
        }
    }
    /**
     * Handles webhook for payout suceeded.
     *
     * @since 3.5.0
     */
    class PayOutNormalSucceeded extends \WeDevs\DokanPro\Modules\MangoPay\Abstracts\WebhookEvent
    {
        /**
         * Class constructor.
         *
         * @since 3.5.0
         *
         * @param string $event
         */
        public function __construct($event)
        {
        }
        /**
         * Handles the webhook event.
         *
         * @since 3.5.0
         *
         * @param array $payload
         *
         * @return void
         */
        public function handle($payload)
        {
        }
    }
    /**
     * Class to handle Payout refund succeeded webhook.
     *
     * @since 3.5.0
     */
    class PayOutRefundSucceeded extends \WeDevs\DokanPro\Modules\MangoPay\Abstracts\WebhookEvent
    {
        /**
         * Class constructor.
         *
         * @since 3.5.0
         *
         * @param string $event
         */
        public function __construct($event)
        {
        }
        /**
         * Handles the webhook.
         *
         * @since 3.5.0
         *
         * @param array $payload
         *
         * @return void
         */
        public function handle($payload)
        {
        }
    }
    /**
     * Class to handle Transfer success webhook.
     *
     * @since 3.5.0
     */
    class TransferNormalSucceeded extends \WeDevs\DokanPro\Modules\MangoPay\Abstracts\WebhookEvent
    {
        /**
         * Class constructor.
         *
         * @since 3.5.0
         *
         * @param string $event
         */
        public function __construct($event)
        {
        }
        /**
         * Handles the webhook.
         *
         * @since 3.5.0
         *
         * @param array $payload
         *
         * @return void
         */
        public function handle($payload)
        {
        }
    }
    /**
     * Class to handle Transfer refund webhook.
     *
     * @since 3.5.0
     */
    class TransferRefundSucceeded extends \WeDevs\DokanPro\Modules\MangoPay\Abstracts\WebhookEvent
    {
        /**
         * Class constructor.
         *
         * @since 3.5.0
         *
         * @param string $event
         */
        public function __construct($event)
        {
        }
        /**
         * Handles the transfer refund webhook.
         *
         * @since 3.5.0
         *
         * @param array $payload
         *
         * @return void
         */
        public function handle($payload)
        {
        }
    }
    /**
     * Class to handle KYC verification webhook.
     *
     * @since 3.5.0
     */
    class UserKycRegular extends \WeDevs\DokanPro\Modules\MangoPay\Abstracts\WebhookEvent
    {
        /**
         * Class constructor
         *
         * @since 3.5.0
         *
         * @param string $event
         */
        public function __construct($event)
        {
        }
        /**
         * Handles the webhook event
         *
         * @since 3.5.0
         *
         * @param array $payload
         *
         * @return void
         */
        public function handle($payload)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\MangoPay\WithdrawMethod {
    /**
     * Class to handle all ajax actions for MangoPay withdraw method.
     *
     * @since 3.5.0
     */
    class Ajax
    {
        // phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
        /**
         * Class constructor
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Retrieves states for a given country.
         *
         * @since 3.5.0
         *
         * @return mixed
         */
        public function get_country_wise_states()
        {
        }
        /**
         * Creates a bank account for Mangopay.
         *
         * @since 3.5.0
         *
         * @return mixed
         */
        public function create_bank_account()
        {
        }
        /**
         * Updates active bank account.
         *
         * @since 3.5.0
         *
         * @return mixed
         */
        public function update_active_bank_account()
        {
        }
        /**
         * Renders bank account list.
         *
         * @since 3.5.0
         *
         * @return mixed
         */
        public function render_bank_accounts()
        {
        }
        /**
         * Submits KYC document
         *
         * @since 3.5.0
         *
         * @return mixed
         */
        public function submit_kyc()
        {
        }
        /**
         * Disconnects vendors' account from MangoPay
         *
         * @since 3.5.0
         *
         * @return mixed
         */
        public function disconnect_vendor()
        {
        }
        /**
         * Signs up for a Mangopay account.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function sign_up()
        {
        }
        /**
         * Renders UBO form for verification.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function render_ubo_form()
        {
        }
        /**
         * Adds a UBO element.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function add_ubo_element()
        {
        }
        /**
         * Creates UBO.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function create_ubo()
        {
        }
        /**
         * Asks for UBO declaration.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function ask_ubo_declaration()
        {
        }
        // phpcs:enable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
    }
    /**
     * Class to handle all hooks for MangoPay as withdraw method
     *
     * @since 3.5.0
     */
    class Manager
    {
        /**
         * Class constructor
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Returns true if venddor enabled mangopay
         *
         * @since 3.9.1
         *
         * @param $data
         *
         * @return array
         */
        public function add_mangopay_to_vendor_profile_data($data)
        {
        }
        /**
         * Register Mangopay as withdraw method
         *
         * @since 3.5.0
         *
         * @param array $methods
         *
         * @return array
         */
        public function register_mangopay_withdraw_method($methods)
        {
        }
        /**
         * Removes gateway from active withdraw method
         * to prevent it from appearing at seller setup page.
         *
         * @since 3.5.0
         *
         * @param array $methods
         *
         * @return array
         */
        public function remove_gateway_for_setup_page($methods)
        {
        }
        /**
         * Renders Mangopay form for registration as withdraw method
         *
         * @since 3.5.0
         *
         * @param array $store_settings
         *
         * @return void
         */
        public function vendor_gateway_settings($store_settings)
        {
        }
        /**
         * Renders bank account form for MangoPay
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         *
         * @return void
         */
        public function render_bank_account_list($user_id)
        {
        }
        /**
         * Renders bank account form for MangoPay
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         * @param array $payment_settings
         *
         * @return void
         */
        public function render_bank_account_form($user_id, $payment_settings)
        {
        }
        /**
         * Renders vendor's wallets info for MangoPay.
         *
         * @since 3.5.0
         *
         * @param int|string $user_id
         *
         * @return void
         */
        public function render_wallets_info($user_id)
        {
        }
        /**
         * Renders KYC form
         *
         * @since 3.5.0
         *
         * @param int|string $vendor_id
         *
         * @return void
         */
        public function render_kyc_form($vendor_id)
        {
        }
        /**
         * Processes mangopay payment settings for vendors
         *
         * @since 3.5.0
         *
         * @param array $settings
         * @param int   $vendor_id
         *
         * @return array
         */
        public function process_vendor_mangopay_settings($settings, $vendor_id)
        {
        }
        /**
         * Sends announcement to vendors if their account is not connected with MnagoPay
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function send_announcement_to_non_connected_vendor()
        {
        }
        /**
         * Display notice to vendors if their account is not connected with Mangopay
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function display_notice_on_vendor_dashboard()
        {
        }
        /**
         * Get the Payment method icon
         *
         * @since 3.5.6
         *
         * @param string $method_icon
         * @param string $method_key
         *
         * @return string
         */
        public function get_icon($method_icon, $method_key)
        {
        }
        /**
         * Get the heading for this payment's settings page
         *
         * @since 3.5.6
         *
         * @param string $heading
         * @param string $slug
         *
         * @return string
         */
        public function get_heading($heading, $slug)
        {
        }
        /**
         * Get if a seller is connected to this payment method
         *
         * @since 3.6.1
         *
         * @param bool $connected
         * @param string $payment_method_id
         * @param int $seller_id
         *
         * @return bool
         */
        public function is_seller_connected($connected, $payment_method_id, $seller_id)
        {
        }
        /**
         * Calculate Dokan profile completeness value
         *
         * @since 3.7.1
         *
         * @param array $progress_track_value
         *
         * @return array
         */
        public function calculate_profile_progress($progress_track_value)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\MangoPay {
    /**
     * Main class for MangoPay module
     *
     * @since 3.5.0
     */
    class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Class constructor
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Performs actions upon module activation
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function activate($instance)
        {
        }
        /**
         * Performs actions upon module deactivation
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function deactivate($instance)
        {
        }
    }
}
namespace {
    /**
     * Dokan Moip Gateway
     */
    class Dokan_Moip_Connect extends \WC_Payment_Gateway
    {
        /**
         * Determine if test mode is enabled
         *
         * @since 3.7.22
         *
         * @var string
         */
        public $testmode;
        /**
         * API base url
         *
         * @since 3.7.22
         *
         * @var string
         */
        public $base_url;
        /**
         * API token
         *
         * @since 3.7.22
         *
         * @var string
         */
        public $token;
        /**
         * API key
         *
         * @since 3.7.22
         *
         * @var string
         */
        public $key;
        /**
         * API public key
         *
         * @since 3.7.22
         *
         * @var string
         */
        public $public_key;
        /**
         * Moip Fee
         *
         * @since 3.7.22
         *
         * @var string
         */
        public $moip_fee;
        /**
         * Constructor method
         */
        public function __construct()
        {
        }
        /**
         * Set settings
         *
         * @since 1.0
         */
        protected function set_settings()
        {
        }
        /**
         * Set form fields
         *
         * @return void;
         */
        public function init_form_fields()
        {
        }
        /**
         * Get form filds
         *
         * @return array
         */
        public function load_form_fields()
        {
        }
        /**
         * Init all the hooks
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Init all the action hooks
         *
         * @return void
         */
        public function init_actions()
        {
        }
        /**
         * Get moip access token
         *
         * @return void
         */
        public function get_moip_access_token()
        {
        }
        /**
         * Add cpf field in the checkout page
         *
         * @param array $fileds
         * @param string $id
         *
         * @return array
         */
        public function add_cpf_field($fields, $id)
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Include all the scripts
         *
         * @return void
         */
        public function include_moip_js()
        {
        }
        /**
         * Payment form on checkout page
         *
         * @return void
         */
        public function payment_fields()
        {
        }
        /**
         * Process payment
         *
         * @param int $order_id
         *
         * @return array
         * @throws Exception
         */
        public function process_payment($order_id)
        {
        }
        /**
         * Process seller subscription payment
         *
         * @return void
         * @throws Exception
         */
        public function process_seller_subscription_payment($order_id, $order, $access_token)
        {
        }
        /**
         * Process seller payment
         *
         * @param int $order_id
         * @param \WC_Order $order
         * @param string $access_token
         * @return void
         * @throws Exception
         */
        public function process_seller_payment($order_id, $order, $access_token)
        {
        }
        /**
         * Format moip customer and holder data
         *
         * @param object $moip
         * @param WC_Order $order
         *
         * @return array
         */
        public function set_moip_customer_holder($moip, $order)
        {
        }
        /**
         * Process seller withdraws
         *
         * @param  array $all_withdraws
         *
         * @return void
         */
        public function process_seller_withdraws($all_withdraws)
        {
        }
        /**
         * Get order details
         *
         * @param  int  $order_id
         * @param  int  $seller_id
         *
         * @return array
         */
        public function get_dokan_order($order_id, $seller_id)
        {
        }
        /**
         * Validate the form
         *
         * @return boolean
         * @throws Exception
         */
        public function validate_fields()
        {
        }
        /**
         * Check is subscription order
         *
         * @param WC_Order $order
         *
         * @return void
         **/
        public function is_subscription_order($order)
        {
        }
        /**
         * Setup commissions
         *
         * @since 3.1.3
         *
         * @param Object $product_pack
         * @param int $vendor_id
         *
         * @return void
         */
        protected function setup_commissions($product_pack, $vendor_id)
        {
        }
    }
    interface Moip_Subscription_Interface
    {
        /**
         * Create moip plan
         *
         * @param  object $order
         * @param  object $product
         * @param  int $subscription_interval
         * @param  string $subscription_period
         * @param  int $subscription_length
         * @param  array $trial_details
         *
         * @return void
         */
        public function create_plan($order, $product, $subscription_interval, $subscription_period, $subscription_length, $trial_details = []);
        /**
         * Edit a plan
         *
         * @param  int $plan_id
         * @param  object $order
         * @param  object $product
         * @param  int $subscription_interval
         * @param  string $subscription_period
         * @param  int $subscription_length
         *
         * @return int $plan_id
         */
        public function edit_plan($plan_id, $order, $product, $subscription_interval, $subscription_period, $subscription_length, $trial_details = []);
        /**
         * Create moip subscription
         *
         * @param  object $order
         * @param  int $plan_id
         *
         * @return int subscriptoin_id
         */
        public function create_subscription($order, $plan_id);
        /**
         * Cancel a subscription
         *
         * @param  int $user_id
         * @param  string $subcription_code
         *
         * @return boolean
         */
        public function cancel_subscription($user_id, $subscription_code);
        /**
         * Activate a suspended subscription
         *
         * @param  int $user_id
         * @param  string $subcription_code
         *
         * @return boolean
         */
        public function activate_subscription($user_id, $subscription_code);
        /**
         * Suspend a subscription
         *
         * @param  int $user_id
         * @param  string $subcription_code
         *
         * @return boolean
         */
        public function suspend_subscription($user_id, $subscription_code);
        /**
         * Update subscription with new plan
         *
         * @param  string $subcription_code
         * @param  string $plan_id
         *
         * @return boolean
         */
        public function update_subscription($subscription_code, $plan_id);
        /**
         * Get a invoice
         *
         * @param  int $invoice_id
         *
         * @return array
         */
        public function get_invoice($invoice_id);
        /**
         * Retry to pay a delayed invoice payment
         *
         * @return void
         */
        public function retry_payment();
    }
    /**
     * Moip subscripton class
     */
    class Dokan_Moip_Subscription implements \Moip_Subscription_Interface
    {
        /**
         * Hold app key
         * @var string
         */
        protected $key;
        /**
         * Hold app token
         *
         * @var string
         */
        protected $token;
        /**
         * Hold app settings
         *
         * @var object
         */
        protected $settings;
        /**
         * Hold base_url
         *
         * @var string
         */
        protected $base_url;
        /**
         * Constructor method
         */
        public function __construct()
        {
        }
        /**
         * Create moip plan
         * @param object $order
         * @param object $product
         * @param int $subscription_interval
         * @param string $subscription_period
         * @param int $subscription_length
         * @param array $trail_details
         *
         * @return void
         * @throws Exception
         */
        public function create_plan($order, $product, $subscription_interval, $subscription_period, $subscription_length, $trail_details = [])
        {
        }
        /**
         * Edit a plan
         *
         * @param int $plan_id
         * @param object $order
         * @param object $product
         * @param int $subscription_interval
         * @param string $subscription_period
         * @param int $subscription_length
         *
         * @return int $plan_id
         * @throws Exception
         */
        public function edit_plan($plan_id, $order, $product, $subscription_interval, $subscription_period, $subscription_length, $trail_details = [])
        {
        }
        /**
         * Create moip subscription
         *
         * @param object $order
         * @param int $plan_id
         *
         * @return int subscriptoin_id
         * @throws Exception
         */
        public function create_subscription($order, $plan_id)
        {
        }
        /**
         * Cancel a subscription
         *
         * @param  int $user_id
         * @param  string $subcription_code
         *
         * @return boolean
         */
        public function cancel_subscription($user_id, $subscription_code)
        {
        }
        /**
         * Activate a suspended subscription
         *
         * @param  int $user_id
         * @param  string $subcription_code
         *
         * @return boolean
         */
        public function activate_subscription($user_id, $subscription_code)
        {
        }
        /**
         * Suspend a subscription
         *
         * @param  int $user_id
         * @param  string $subcription_code
         *
         * @return boolean
         */
        public function suspend_subscription($user_id, $subscription_code)
        {
        }
        /**
         * Update subscription with new plan
         *
         * @since 2.9.13
         *
         * @param  string $subcription_code
         * @param  string $plan_id
         *
         * @return boolean
         */
        public function update_subscription($subscription_code, $plan_id)
        {
        }
        /**
         * Get a invoice
         *
         * @param  int $invoice_id
         *
         * @return array
         */
        public function get_invoice($invoice_id)
        {
        }
        /**
         * Retry to pay a delayed invoice payment
         *
         * @return void
         */
        public function retry_payment()
        {
        }
    }
    /**
     * Dokan Moip Withdraw Class
     */
    class Dokan_Moip_Withdraw
    {
        /**
         * Hold moip settings
         * @var array
         */
        protected $settings;
        /**
         * Hold app name
         * @var string
         */
        protected $app_id;
        /**
         * Hold app secret
         * @var string
         */
        protected $secret;
        /**
         * Hold access token
         * @var string
         */
        protected $access_token;
        /**
         * Constructor method
         */
        public function __construct()
        {
        }
        /**
         * Init all the hooks
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Init all the action hooks
         *
         * @return void
         */
        public function init_actions()
        {
        }
        /**
         * Init all the filter hooks
         *
         * @return void
         */
        public function init_filters()
        {
        }
        /**
         * Connect dokan vendor to moip
         *
         * @return void
         */
        public function moip_connect()
        {
        }
        /**
         * Register moip withdraw method
         *
         * @param  array $methods
         *
         * @return array
         */
        public function register_withdraw_method($methods)
        {
        }
        /**
         * This enables dokan vendors to connect their moip account to the site moip gateway account
         *
         * @param array $store_settings
         *
         * @return void
         */
        public function moip_authorize_button($store_settings)
        {
        }
        /**
         * Delete vendor moip account
         *
         * @return void
         */
        public function delete_moip_account()
        {
        }
        /**
         * Get single instance of this class
         *
         * @return object
         */
        public static function init()
        {
        }
        /**
         * Get the Withdrawal method icon
         *
         * @since 3.5.6
         *
         * @param string $method_icon
         * @param string $method_key
         *
         * @return string
         */
        public function get_icon($method_icon, $method_key)
        {
        }
        /**
         * Get the heading for this payment's settings page
         *
         * @since 3.5.6
         *
         * @param string $heading
         * @param string $slug
         *
         * @return string
         */
        public function get_heading($heading, $slug)
        {
        }
        /**
         * Get if a seller is connected to this payment method
         *
         * @since 3.6.1
         *
         * @param bool $connected
         * @param string $payment_method_id
         * @param int $seller_id
         *
         * @return bool
         */
        public function is_seller_connected($connected, $payment_method_id, $seller_id)
        {
        }
        /**
         * Returns true if venddor enabled moip
         *
         * @since 3.9.1
         *
         * @param $data
         *
         * @return array
         */
        public function add_moip_to_vendor_profile_data($data)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Moip {
    /**
     * Dokan Moip Class
     */
    class Module
    {
        /**
         * Constructor method of this class
         */
        public function __construct()
        {
        }
        /**
         * Define all the constants
         *
         * @since  1.0
         *
         * @return void;
         */
        public function define_constants()
        {
        }
        /**
         * Includes all the files
         *
         * @since  1.0
         *
         * @return string
         */
        public function includes()
        {
        }
        /**
         * Init all the hooks
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Init all the actions
         *
         * @return void
         */
        public function init_actions()
        {
        }
        /**
         * Register webhook
         *
         * @return void
         */
        public function register_webhook()
        {
        }
        /**
         * Cancel recurring subscription pack
         *
         * @param  int $order_id
         * @param  int $user_id
         *
         * @return void
         */
        public function cancel_recurring_subscription($order_id, $user_id)
        {
        }
        /**
         * Handle moip webhook
         *
         * @return void
         */
        public function handle_moip_webhook()
        {
        }
        /**
         * Retry delayd payment
         *
         * @return void
         */
        public function retry_delayd_payment()
        {
        }
        /**
         * Check if vendor has configured the moip settings
         *
         * @param  array $data
         * @param  array $errors
         *
         * @return void
         */
        public function check_vendor_configure_moip($data, $errors)
        {
        }
        /**
         * Save moip progress settings data
         *
         * @return void
         **/
        public function save_moip_progress($store_id, $dokan_settings)
        {
        }
        /**
         * Init all the filters
         *
         * @return void
         */
        public function init_filters()
        {
        }
        /**
         * Register the gateway for use
         *
         * @param  array $methods
         *
         * @return array $methods
         */
        public function register_gateway($methods)
        {
        }
        /**
         * Prevents non-moip connected users from creating new product posts
         *
         * @param  array  $errors
         *
         * @return array
         */
        public function can_seller_add_product($errors)
        {
        }
        /**
         * Remove withdraw page if moip is enabled
         *
         * @param  array  $urls
         *
         * @return array
         */
        public function remove_withdraw_page($urls)
        {
        }
        /**
         * This is admin menu for controlling Seller moip status
         *
         * @param object $user
         * @return mixed
         */
        public function moip_admin_menu($user)
        {
        }
        /**
         * Admin functions for controlling user Moip Accounts
         *
         * @param int $user_id
         * @return mixed
         */
        public function moip_admin_functions($user_id)
        {
        }
        /**
         * Load recurring subscription cancellation email.
         *
         * @since 3.11.3
         *
         * @param int $order_id
         * @param int $vendor_id
         *
         * @return void
         */
        public function load_subscription_cancellation_email($order_id, $vendor_id)
        {
        }
    }
}
namespace Moip\Contracts {
    /**
     * Interface Authentication.
     */
    interface Authentication extends \Requests_Auth
    {
    }
}
namespace Moip\Auth {
    /**
     * Class BasicAuth.
     */
    class BasicAuth implements \Moip\Contracts\Authentication
    {
        public function __construct($token, $key)
        {
        }
        /**
         * Register hooks as needed.
         *
         * This method is called in {@see Requests::request} when the user has set
         * an instance as the 'auth' option. Use this callback to register all the
         * hooks you'll need.
         *
         * @see \Requests_Hooks::register
         *
         * @param \Requests_Hooks $hooks Hook system
         */
        public function register(\Requests_Hooks $hooks)
        {
        }
        /**
         * Sets the authentication header.
         *
         * @param string       $url
         * @param array        $headers
         * @param array|string $data
         * @param string       $type
         * @param array        $options
         */
        public function before_request(&$url, &$headers, &$data, &$type, &$options)
        {
        }
    }
    /**
     * Class Connect.
     *
     * For all requests involving more than one Moip Account directly, authentication through an OAuth token is required.
     * Using the OAuth 2.0 standard it is possible to authenticate to the Moip APIs and request the use of the APIs on behalf of another user.
     * In this way, another Moip user can grant you the most diverse permissions,
     * from receiving payments as a secondary receiver to even special actions like repayment of a payment.
     */
    class Connect implements \Moip\Contracts\Authentication, \JsonSerializable
    {
        /**
         * @const string
         */
        const ENDPOINT_SANDBOX = 'https://connect-sandbox.moip.com.br';
        /**
         * @const string
         */
        const ENDPOINT_PRODUCTION = 'https://connect.moip.com.br';
        /**
         * @const string
         */
        const OAUTH_AUTHORIZE = '/oauth/authorize';
        /**
         * @const string
         */
        const OAUTH_TOKEN = '/oauth/token';
        /**
         * Type of request desired. Possible values: AUTHORIZATION_CODE.
         *
         * @const string
         */
        const GRANT_TYPE = 'authorization_code';
        /**
         * Define the type of response to be obtained. Possible values: CODE.
         *
         * @const string
         */
        const RESPONSE_TYPE = 'code';
        /**
         * Permission for creation and consultation of ORDERS, PAYMENTS, MULTI ORDERS, MULTI PAYMENTS, CUSTOMERS and consultation of LAUNCHES.
         *
         * @const string
         */
        const RECEIVE_FUNDS = 'RECEIVE_FUNDS';
        /**
         * Permission to create and consult reimbursements of ORDERS, PAYMENTS.
         *
         * @const string
         */
        const REFUND = 'REFUND';
        /**
         * Permission to consult ACCOUNTS registration information.
         *
         * @const string
         */
        const MANAGE_ACCOUNT_INFO = 'MANAGE_ACCOUNT_INFO';
        /**
         * Permission to query balance through the ACCOUNTS endpoint.
         *
         * @const string
         */
        const RETRIEVE_FINANCIAL_INFO = 'RETRIEVE_FINANCIAL_INFO';
        /**
         * Permission for bank transfers or for Moip accounts through the TRANSFERS endpoint.
         *
         * @const string
         */
        const TRANSFER_FUNDS = 'TRANSFER_FUNDS';
        /**
         * Permission to create, change, and delete notification preferences through the PREFERENCES endpoint.
         *
         * @const string
         */
        const DEFINE_PREFERENCES = 'DEFINE_PREFERENCES';
        /**
         * List all scopes.
         *
         * @const array
         */
        const SCOPE_ALL = [self::RECEIVE_FUNDS, self::REFUND, self::MANAGE_ACCOUNT_INFO, self::RETRIEVE_FINANCIAL_INFO, self::TRANSFER_FUNDS, self::DEFINE_PREFERENCES];
        /**
         * Connect constructor.
         *
         * @param string     $redirect_uri
         * @param string     $client_id
         * @param array|bool $scope
         * @param string     $endpoint
         */
        public function __construct($redirect_uri = '', $client_id = '', $scope = true, $endpoint = self::ENDPOINT_PRODUCTION)
        {
        }
        /**
         * Creates a new Request_Session with all the default values.
         * A Session is created at construction.
         *
         * @param float $timeout         How long should we wait for a response?(seconds with a millisecond precision, default: 30, example: 0.01).
         * @param float $connect_timeout How long should we wait while trying to connect? (seconds with a millisecond precision, default: 10, example: 0.01)
         *
         * @return \Requests_Session
         */
        public function createNewSession($timeout = 30.0, $connect_timeout = 30.0)
        {
        }
        /**
         * URI of oauth.
         *
         * @param $endpoint
         *
         * @return string
         */
        public function getAuthUrl($endpoint = null)
        {
        }
        /**
         * With the permission granted, you will receive a code that will allow you to retrieve the authentication accessToken and process requests involving another user.
         *
         * @return mixed
         */
        public function authorize()
        {
        }
        /**
         * @param bool $scope
         *
         * @return $this
         */
        public function setScodeAll($scope)
        {
        }
        /**
         * Permission for creation and consultation of ORDERS, PAYMENTS, MULTI ORDERS, MULTI PAYMENTS, CUSTOMERS and consultation of LAUNCHES.
         *
         * @param bool $receive_funds
         *
         * @throws \Moip\Exceptions\InvalidArgumentException
         *
         * @return \Moip\Auth\Connect $this
         */
        public function setReceiveFunds($receive_funds)
        {
        }
        /**
         * Permission to create and consult reimbursements ofORDERS, PAYMENTS.
         *
         * @param bool $refund
         *
         * @throws \Moip\Exceptions\InvalidArgumentException
         *
         * @return \Moip\Auth\Connect $this
         */
        public function setRefund($refund)
        {
        }
        /**
         * Permission to consult ACCOUNTS registration information.
         *
         * @param bool $manage_account_info
         *
         * @throws \Moip\Exceptions\InvalidArgumentException
         *
         * @return \Moip\Auth\Connect $this
         */
        public function setManageAccountInfo($manage_account_info)
        {
        }
        /**
         * Permission to query balance through the ACCOUNTS endpoint.
         *
         * @param bool $retrieve_financial_info
         *
         * @throws \Moip\Exceptions\InvalidArgumentException
         *
         * @return \Moip\Auth\Connect $this
         */
        public function setRetrieveFinancialInfo($retrieve_financial_info)
        {
        }
        /**
         * Permission for bank transfers or for Moip accounts through the TRANSFERS endpoint.
         *
         * @param bool $transfer_funds
         *
         * @throws \Moip\Exceptions\InvalidArgumentException
         *
         * @return \Moip\Auth\Connect $this
         */
        public function setTransferFunds($transfer_funds)
        {
        }
        /**
         * Permission to create, change, and delete notification preferences through the PREFERENCES endpoint.
         *
         * @param bool $define_preferences
         *
         * @throws \Moip\Exceptions\InvalidArgumentException
         *
         * @return $this
         */
        public function setDefinePreferences($define_preferences)
        {
        }
        /**
         * Unique identifier of the application that will be carried out the request.
         *
         * @return mixed
         */
        public function getClientId()
        {
        }
        /**
         * Unique identifier of the application that will be carried out the request.
         *
         * @param mixed $client_id
         *
         * @return \Moip\Auth\Connect
         */
        public function setClientId($client_id)
        {
        }
        /**
         * Client Redirect URI.
         *
         * @return mixed
         */
        public function getRedirectUri()
        {
        }
        /**
         * Client Redirect URI.
         *
         * @param mixed $redirect_uri
         *
         * @return \Moip\Auth\Connect
         */
        public function setRedirectUri($redirect_uri)
        {
        }
        /**
         * Permissions that you want (Possible values depending on the feature.).
         *
         * @return mixed
         */
        public function getScope()
        {
        }
        /**
         * Permissions that you want (Possible values depending on the feature.).
         *
         * @param array|string $scope
         *
         * @return \Moip\Auth\Connect
         */
        public function setScope($scope)
        {
        }
        /**
         * @param string $endpoint
         *
         * @return \Moip\Auth\Connect
         */
        public function setEndpoint($endpoint)
        {
        }
        /**
         * @param mixed $client_secret
         *
         * @return \Moip\Auth\Connect
         */
        public function setClientSecret($client_secret)
        {
        }
        /**
         * @return mixed
         */
        public function getClientSecret()
        {
        }
        /**
         * @param string $code
         *
         * @return \Moip\Auth\Connect
         */
        public function setCode($code)
        {
        }
        /**
         * @return string
         */
        public function getCode()
        {
        }
        /**
         * Register hooks as needed.
         *
         * This method is called in {@see Requests::request} when the user has set
         * an instance as the 'auth' option. Use this callback to register all the
         * hooks you'll need.
         *
         * @see Requests_Hooks::register
         *
         * @param Requests_Hooks $hooks Hook system
         */
        public function register(\Requests_Hooks $hooks)
        {
        }
        /**
         * Specify data which should be serialized to JSON.
         *
         * @link http://php.net/manual/en/jsonserializable.jsonserialize.php
         *
         * @return mixed data which can be serialized by <b>json_encode</b>,
         *               which is a value of any type other than a resource.
         *
         * @since 5.4.0
         */
        public function jsonSerialize()
        {
        }
    }
    /**
     * Class OAuth.
     */
    class OAuth implements \Moip\Contracts\Authentication
    {
        /**
         * Create a new OAuth instance.
         *
         * @param string $accessToken
         */
        public function __construct($accessToken)
        {
        }
        /**
         * Register hooks as needed.
         *
         * This method is called in {@see Requests::request} when the user has set
         * an instance as the 'auth' option. Use this callback to register all the
         * hooks you'll need.
         *
         * @see \Requests_Hooks::register
         *
         * @param \Requests_Hooks $hooks Hook system
         */
        public function register(\Requests_Hooks $hooks)
        {
        }
        /**
         * Sets the authentication header.
         *
         * @param string       $url
         * @param array        $headers
         * @param array|string $data
         * @param string       $type
         * @param array        $options
         */
        public function before_request(&$url, &$headers, &$data, &$type, &$options)
        {
        }
    }
}
namespace Moip\Exceptions {
    /**
     * Class Error.
     * Represents an error returned by the API.
     */
    class Error
    {
        /**
         * Error constructor.
         *
         * Represents an error return by the API. Commonly used by {@see \Moip\Exceptions\ValidationException}
         *
         * @param string $code        unique error identifier.
         * @param string $path        represents the field where the error ocurred.
         * @param string $description error description.
         */
        public function __construct($code, $path, $description)
        {
        }
        /**
         * Returns the unique alphanumeric identifier of the error, ie.: "API-1".
         *
         * @return int|string
         */
        public function getCode()
        {
        }
        /**
         * Returns the dotted string representing the field where the error ocurred, ie.: "customer.birthDate".
         *
         * @return string
         */
        public function getPath()
        {
        }
        /**
         * Returns the error description.
         *
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * Creates an Error array from a json string.
         *
         * @param string $json_string string returned by the Moip API
         *
         * @return array
         */
        public static function parseErrors($json_string)
        {
        }
    }
    /**
     * Class InvalidArgumentException.
     */
    class InvalidArgumentException extends \RuntimeException
    {
    }
    /**
     * Class UnautorizedException.
     * This exception is thrown when the Moip API returns a 401 http code.
     * The error message was extracted from the documentation.
     */
    class UnautorizedException extends \RuntimeException
    {
        /**
         * UnautorizedException constructor.
         */
        public function __construct()
        {
        }
    }
    /**
     * Class UnexpectedException.
     */
    class UnexpectedException extends \RuntimeException
    {
        /**
         * UnexpectedException constructor.
         *
         * @param null $previous
         */
        public function __construct($previous = null)
        {
        }
    }
    /**
     * Class ValidationException.
     */
    class ValidationException extends \RuntimeException
    {
        /**
         * ValidationException constructor.
         *
         * Exception thrown when the moip API returns a 4xx http code.
         * Indicates that an invalid value was passed.
         *
         * @param int     $statusCode
         * @param Error[] $errors
         */
        public function __construct($statusCode, $errors)
        {
        }
        /**
         * Returns the http status code ie.: 400.
         *
         * @return int
         */
        public function getStatusCode()
        {
        }
        /**
         * Returns the list of errors returned by the API.
         *
         * @return Error[]
         *
         * @see \Moip\Exceptions\Error
         */
        public function getErrors()
        {
        }
        /**
         * Convert error variables in string.
         *
         * @return string
         */
        public function __toString()
        {
        }
    }
}
namespace Moip\Helper {
    /**
     * Class Filters.
     */
    class Filters
    {
        /**
         * Set filter to compare if field is greater than value.
         *
         * @param string   $field field to setup filter.
         * @param int|Date $value value to setup filter.
         */
        public function greaterThan($field, $value)
        {
        }
        /**
         * Set filter to compare if field is greater than or equal value.
         *
         * @param string   $field field to setup filter.
         * @param int|Date $value value to setup filter.
         */
        public function greaterThanOrEqual($field, $value)
        {
        }
        /**
         * Set filter to compare if field is less than value.
         *
         * @param string   $field field to setup filter.
         * @param int|Date $value value to setup filter.
         */
        public function lessThan($field, $value)
        {
        }
        /**
         * Set filter to compare if field is between both values.
         *
         * @param string $field  field to setup filter.
         * @param string $value1 first value to setup filter.
         * @param string $value2 second value to setup filter.
         */
        public function between($field, $value1, $value2)
        {
        }
        /**
         * Set filter to compare if field is in array.
         *
         * @param string $field  field to setup filter.
         * @param array  $values value to setup filter.
         */
        public function in($field, array $values)
        {
        }
        /**
         * Join filters in one string.
         *
         * @return string
         */
        public function __toString()
        {
        }
    }
    /**
     * Class that represents the HATEOAS structure of the API resources.
     */
    class Links
    {
        /**
         * Links constructor.
         *
         * @param stdClass $links "_link" returned from the API, if there isn't any.
         */
        public function __construct(\stdClass $links)
        {
        }
        /**
         * @return mixed
         */
        public function getSelf()
        {
        }
        /**
         * @param null|string $pay
         *
         * @return mixed
         */
        public function getCheckout($pay)
        {
        }
        /**
         * @param null|string $link
         *
         * @return mixed
         */
        public function getLink($link)
        {
        }
        /**
         * @return mixed
         */
        public function getAllCheckout()
        {
        }
    }
    /**
     * Class Pagination.
     */
    class Pagination
    {
        /**
         * Pagination constructor.
         *
         * @param int $limit
         * @param int $offset
         */
        public function __construct($limit = null, $offset = null)
        {
        }
        /**
         * Get offset.
         *
         * @return int
         */
        public function getOffset()
        {
        }
        /**
         * Set offset.
         *
         * @param int $offset
         */
        public function setOffset($offset)
        {
        }
        /**
         * Get limit.
         *
         * @return int
         */
        public function getLimit()
        {
        }
        /**
         * Set limit.
         *
         * @param int $limit
         */
        public function setLimit($limit)
        {
        }
    }
    /**
     * Class Utils.
     */
    class Utils
    {
        /**
         * convert a money amount (represented by a float or string (based on locale) ie.: R$ 5,00) to cents (represented by an int).
         *
         * @param float $amount
         *
         * @throws \UnexpectedValueException
         *
         * @return int
         */
        public static function toCents($amount)
        {
        }
    }
}
namespace Moip {
    /**
     * Class Moip.
     */
    class Moip
    {
        /**
         * endpoint of production.
         *
         * @const string
         */
        const ENDPOINT_PRODUCTION = 'https://api.moip.com.br';
        /**
         * endpoint of sandbox.
         *
         * @const string
         */
        const ENDPOINT_SANDBOX = 'https://sandbox.moip.com.br';
        /**
         * Client name.
         *
         * @const string
         * */
        const CLIENT = 'MoipPhpSDK';
        /**
         * Client Version.
         *
         * @const string
         */
        const CLIENT_VERSION = '3.1.0';
        /**
         * Create a new aurhentication with the endpoint.
         *
         * @param \Moip\Auth\MoipAuthentication $moipAuthentication
         * @param string                        $endpoint
         */
        public function __construct(\Moip\Contracts\Authentication $moipAuthentication, $endpoint = self::ENDPOINT_PRODUCTION)
        {
        }
        /**
         * Creates a new Request_Session with all the default values.
         * A Session is created at construction.
         *
         * @param float $timeout         How long should we wait for a response?(seconds with a millisecond precision, default: 30, example: 0.01).
         * @param float $connect_timeout How long should we wait while trying to connect? (seconds with a millisecond precision, default: 10, example: 0.01)
         */
        public function createNewSession($timeout = 30.0, $connect_timeout = 30.0)
        {
        }
        /**
         * Returns the http session created.
         *
         * @return Requests_Session
         */
        public function getSession()
        {
        }
        /**
         * Replace the http session by a custom one.
         *
         * @param Requests_Session $session
         */
        public function setSession($session)
        {
        }
        /**
         * Create a new Customer instance.
         *
         * @return \Moip\Resource\Customer
         */
        public function customers()
        {
        }
        /**
         * Create a new Holder instance.
         *
         * @return \Moip\Resource\Holder
         */
        public function holders()
        {
        }
        /**
         * Create a new Account instance.
         *
         * @return \Moip\Resource\Account
         */
        public function accounts()
        {
        }
        /**
         * Create a new Entry instance.
         *
         * @return \Moip\Resource\Entry
         */
        public function entries()
        {
        }
        /**
         * Create a new Orders instance.
         *
         * @return \Moip\Resource\Orders
         */
        public function orders()
        {
        }
        /**
         * Create a new Payment instance.
         *
         * @return \Moip\Resource\Payment
         */
        public function payments()
        {
        }
        /**
         * Create a new Multiorders instance.
         *
         * @return \Moip\Resource\Multiorders
         */
        public function multiorders()
        {
        }
        /**
         * Create a new Transfers.
         *
         * @return \Moip\Resource\Transfers
         */
        /**
         * Create a new Transfers instance.
         *
         * @return Transfers
         */
        public function transfers()
        {
        }
        /**
         * Create a new Notification Prefences instance.
         *
         * @return NotificationPreferences
         */
        public function notifications()
        {
        }
        /**
         * Create a new WebhookList instance.
         *
         * @return WebhookList
         */
        public function webhooks()
        {
        }
        /**
         * Create a new Keys instance.
         *
         * @return Keys
         */
        public function keys()
        {
        }
        /**
         * Create a new Refund instance.
         *
         * @return Refund
         */
        public function refunds()
        {
        }
        /**
         * Create a new BankAccount instance.
         *
         * @return BankAccount
         */
        public function bankaccount()
        {
        }
        /**
         * Create a new Balances instance.
         *
         * @return Balances
         */
        public function balances()
        {
        }
        /**
         * Get the endpoint.
         *
         * @return \Moip\Moip::ENDPOINT_PRODUCTION|\Moip\Moip::ENDPOINT_SANDBOX
         */
        public function getEndpoint()
        {
        }
    }
}
namespace Moip\Resource {
    /**
     * Class MoipResource.
     */
    abstract class MoipResource implements \JsonSerializable
    {
        /**
         * Version of API.
         *
         * @const string
         */
        const VERSION = 'v2';
        /**
         * Api version content type.
         *
         * @cont string
         */
        const ACCEPT_VERSION = 'application/json;version=2.1';
        /**
         * @var \Moip\Moip
         */
        protected $moip;
        /**
         * @var \stdClass
         */
        protected $data;
        /**
         * Initialize a new instance.
         */
        abstract protected function initialize();
        /**
         * Mount information of a determined object.
         *
         * @param \stdClass $response
         *
         * @return mixed
         */
        abstract protected function populate(\stdClass $response);
        /**
         * Create a new instance.
         *
         * @param \Moip\Moip $moip
         */
        public function __construct(\Moip\Moip $moip)
        {
        }
        /**
         * Get a key of an object if it exists.
         *
         * @param string         $key
         * @param \stdClass|null $data
         *
         * @return mixed
         */
        protected function getIfSet($key, \stdClass $data = null)
        {
        }
        /**
         * @return \Moip\Helper\Links
         */
        public function getLinks()
        {
        }
        /**
         * @param $key
         * @param $fmt
         * @param stdClass|null $data
         *
         * @return bool|\DateTime|null
         */
        protected function getIfSetDateFmt($key, $fmt, \stdClass $data = null)
        {
        }
        /**
         * Get a key, representing a date (Y-m-d), of an object if it exists.
         *
         * @param string        $key
         * @param stdClass|null $data
         *
         * @return \DateTime|null
         */
        protected function getIfSetDate($key, \stdClass $data = null)
        {
        }
        /**
         * Get a key representing a datetime (\Datetime::ATOM), of an object if it exists.
         *
         * @param string        $key
         * @param stdClass|null $data
         *
         * @return \DateTime|null
         */
        protected function getIfSetDateTime($key, \stdClass $data = null)
        {
        }
        /**
         * Specify data which should be serialized to JSON.
         *
         * @return \stdClass
         */
        public function jsonSerialize()
        {
        }
        /**
         * Generate URL to request.
         *
         * @param $action
         * @param $id
         *
         * @return string
         */
        public function generatePath($action, $id = null)
        {
        }
        /**
         * Generate URL to request a get list.
         *
         * @param Pagination $pagination
         * @param Filters    $filters
         * @param array      $params
         *
         * @return string
         */
        public function generateListPath(\Moip\Helper\Pagination $pagination = null, \Moip\Helper\Filters $filters = null, $params = [])
        {
        }
        /**
         * Execute a http request. If payload == null no body will be sent. Empty body ('{}') is supported by sending a
         * empty stdClass.
         *
         * @param string     $path    request path
         * @param string     $method  http method
         * @param mixed|null $payload request body
         * @param array      $headers request headers
         *
         * @throws Exceptions\ValidationException  if the API returns a 4xx http status code. Usually means invalid data was sent.
         * @throws Exceptions\UnautorizedException if the API returns a 401 http status code. Check API token and key.
         * @throws Exceptions\UnexpectedException  if the API returns a 500 http status code or something unexpected happens (ie.: Network error).
         *
         * @return stdClass
         */
        protected function httpRequest($path, $method, $payload = null, $headers = [])
        {
        }
        /**
         * Find by path.
         *
         * @param string $path    resource path
         * @param array  $headers request headers
         *
         * @return stdClass
         */
        public function getByPath($path, $headers = [])
        {
        }
        /**
         * Find by path with no populate method.
         *
         * @param string $path
         *
         * @return stdClass
         */
        public function getByPathNoPopulate($path)
        {
        }
        /**
         * Create a new item in Moip.
         *
         * @param string $path
         *
         * @return stdClass
         */
        public function createResource($path)
        {
        }
        /**
         * Update an item in Moip.
         *
         * @param string $path
         *
         * @return stdClass
         */
        public function updateByPath($path)
        {
        }
        /**
         * Delete a new item in Moip.
         *
         * @param $path
         *
         * @return mixed
         */
        public function deleteByPath($path)
        {
        }
    }
    /**
     * Class Account.
     */
    class Account extends \Moip\Resource\MoipResource
    {
        /**
         * Path accounts API.
         *
         * @const string
         */
        const PATH = 'accounts';
        /**
         * Standard country .
         *
         * @const string
         */
        const ADDRESS_COUNTRY = 'BRA';
        /**
         * Standard document type.
         *
         * @const string
         */
        const TAX_DOCUMENT = 'CPF';
        /**
         * Standard company document type.
         *
         * @const string
         */
        const COMPANY_TAX_DOCUMENT = 'CNPJ';
        /**
         * Default Account Type.
         *
         * @var string
         */
        const ACCOUNT_TYPE = 'MERCHANT';
        /**
         * Initialize a new instance.
         */
        public function initialize()
        {
        }
        /**
         * Add a new address to the account.
         *
         * @param string $street     Street address.
         * @param string $number     Number address.
         * @param string $district   Neighborhood address.
         * @param string $city       City address.
         * @param string $state      State address.
         * @param string $zip        The zip code billing address.
         * @param string $complement Address complement.
         * @param string $country    Country ISO-alpha3 format, BRA example.
         *
         * @return $this
         */
        public function addAddress($street, $number, $district, $city, $state, $zip, $complement = null, $country = self::ADDRESS_COUNTRY)
        {
        }
        /**
         * Add alternative phone to an account.
         *
         * @param int $areaCode    DDD telephone.
         * @param int $number      Telephone number.
         * @param int $countryCode Country code.
         *
         * @return \Moip\Resource\Account
         */
        public function addAlternativePhone($areaCode, $number, $countryCode = 55)
        {
        }
        /**
         * Create a new account.
         *
         * @return \stdClass
         */
        public function create()
        {
        }
        /**
         * Find a account.
         *
         * @param string $moip_id
         *
         * @return stdClass
         */
        public function get($moip_id)
        {
        }
        /**
         * Check if an account exists.
         *
         * @param string $tax_document
         *
         * @return bool
         */
        public function checkExistence($tax_document)
        {
        }
        /**
         * Get account id.
         *
         * @return string The buyer id.
         */
        public function getId()
        {
        }
        /**
         * Get account access token.
         *
         * @return string
         */
        public function getAccessToken()
        {
        }
        /**
         * Get account channel ID.
         *
         * @return string
         */
        public function getChannelId()
        {
        }
        /**
         * Get account login.
         *
         * @return string The buyer login.
         */
        public function getLogin()
        {
        }
        /**
         * Get account address.
         *
         * @return \stdClass Account's address.
         */
        public function getAddress()
        {
        }
        /**
         * Get account fullname.
         *
         * @return string Account's full name.
         */
        public function getFullname()
        {
        }
        /**
         * Get birth date from account.
         *
         * @return \DateTime|null Date of birth of the credit card holder.
         */
        public function getBirthDate()
        {
        }
        /**
         * Get phone area code from account.
         *
         * @return int DDD telephone.
         */
        public function getPhoneAreaCode()
        {
        }
        /**
         * Get phone country code from account.
         *
         * @return int Country code.
         */
        public function getPhoneCountryCode()
        {
        }
        /**
         * Get phone number from account.
         *
         * @return int Telephone number.
         */
        public function getPhoneNumber()
        {
        }
        /**
         * Get tax document type from account.
         *
         * @return string Type of value: CPF and CNPJ
         */
        public function getTaxDocumentType()
        {
        }
        /**
         * Get tax document number from account.
         *
         * @return string Document Number.
         */
        public function getTaxDocumentNumber()
        {
        }
        /**
         * Get identity document number from account.
         *
         * @return string
         */
        public function getIdentityDocumentNumber()
        {
        }
        /**
         * Get identity document issuer from account.
         *
         * @return string
         */
        public function getIdentityDocumentIssuer()
        {
        }
        /**
         * Get identity document issue date from account.
         *
         * @return \DateTime
         */
        public function getIdentityDocumentIssueDate()
        {
        }
        /**
         * Get identity document type from account.
         *
         * @return string Type of value: RG
         */
        public function getIdentityDocumentType()
        {
        }
        /**
         * Get alternative phones.
         *
         * @return array
         */
        public function getAlternativePhones()
        {
        }
        /**
         * Get company data.
         *
         * @return array
         */
        public function getCompany()
        {
        }
        /**
         * Get email address.
         *
         * @return string
         */
        public function getEmailAddress()
        {
        }
        /**
         * Get email confirmed.
         *
         * @return bool
         */
        public function getEmailConfirmed()
        {
        }
        /**
         * Get account type.
         *
         * @return string Document Number.
         */
        public function getType()
        {
        }
        /**
         * Get business segment id.
         *
         * @return int id.
         */
        public function getBusinessSegmentId()
        {
        }
        /**
         * Get business segment name.
         *
         * @return string name.
         */
        public function getBusinessSegmentName()
        {
        }
        /**
         * Get business segment mcc.
         *
         * @return int mcc.
         */
        public function getBusinessSegmentMcc()
        {
        }
        /**
         * Get transparent account (true/false).
         *
         * @return bool
         */
        public function getTransparentAccount()
        {
        }
        /**
         * Get account created at.
         *
         * @return string
         */
        public function getCreatedAt()
        {
        }
        /**
         * Get link to set the password of created account.
         *
         * @return string
         */
        public function getPasswordLink()
        {
        }
        /**
         * Mount the seller structure from account.
         *
         * @param \stdClass $response
         *
         * @return \Moip\Resource\Account Account data
         */
        protected function populate(\stdClass $response)
        {
        }
        /**
         * Set e-mail from account.
         *
         * @param string $email Email account.
         *
         * @return \Moip\Resource\Account
         */
        public function setEmail($email)
        {
        }
        /**
         * Set name from account.
         *
         * @param string $name Account's person name.
         *
         * @return \Moip\Resource\Account
         */
        public function setName($name)
        {
        }
        /**
         * Set name from account.
         *
         * @param string $lastname Account's person name.
         *
         * @return \Moip\Resource\Account
         */
        public function setLastName($lastname)
        {
        }
        /**
         * Set birth date from account.
         *
         * @param \DateTime|string $birthDate Date of birth of the credit card holder.
         *
         * @return \Moip\Resource\Account
         */
        public function setBirthDate($birthDate)
        {
        }
        /**
         * Set tax document from account.
         *
         * @param string $number Document number.
         * @param string $type   Document type.
         *
         * @return \Moip\Resource\Account
         */
        public function setTaxDocument($number, $type = self::TAX_DOCUMENT)
        {
        }
        /**
         * Set phone from account.
         *
         * @param int $areaCode    DDD telephone.
         * @param int $number      Telephone number.
         * @param int $countryCode Country code.
         *
         * @return \Moip\Resource\Account
         */
        public function setPhone($areaCode, $number, $countryCode = 55)
        {
        }
        /**
         * Set identity document from account.
         *
         * @param string $number Número do documento.
         * @param string $issuer Emissor do documento.
         * @param $issueDate
         * @param string $type Tipo do documento. Valores possíveis: RG.
         *
         * @return Account
         */
        public function setIdentityDocument($number, $issuer, $issueDate, $type = 'RG')
        {
        }
        /**
         * Set person nationality.
         *
         * @param string $nationality Abbreviation for nationality (3 max length).
         *
         * @return $this
         */
        public function setNationality($nationality = self::ADDRESS_COUNTRY)
        {
        }
        /**
         * Set person birth place.
         *
         * @param string $birthPlace Birth place (city).
         *
         * @return $this
         */
        public function setBirthPlace($birthPlace)
        {
        }
        /**
         * Set parents name.
         *
         * @param string $motherName Mother name.
         * @param string $fatherName Father name.
         *
         * @return $this
         */
        public function setParentsName($motherName, $fatherName)
        {
        }
        /**
         * Set site.
         *
         * @param string $site URL from site.
         *
         * @return $this
         */
        public function setSite($site)
        {
        }
        /**
         * Set transparent account.
         *
         * @param bool $transparentAccount Set true if you want create a transparent account.
         *
         * @return $this
         */
        public function setTransparentAccount($transparentAccount)
        {
        }
        /**
         * Set business segment.
         *
         * @param int $segmentId business segment id. Possible values available at: https://documentao-moip.readme.io/v2.0/reference#tabela-de-categorias-de-estabelecimento .
         *
         * @return $this
         */
        public function setBusinessSegment($segmentId)
        {
        }
        /**
         * Set company name.
         *
         * @param string $name         Trading Name.
         * @param string $businessName Company Name.
         *
         * @return $this
         */
        public function setCompanyName($name, $businessName)
        {
        }
        /**
         * Set company opening date.
         *
         * @param \DateTime|string $openingDate .
         *
         * @return $this
         */
        public function setCompanyOpeningDate($openingDate)
        {
        }
        /**
         * Set company tax document.
         *
         * @param string $documentNumber .
         *
         * @return $this
         */
        public function setCompanyTaxDocument($documentNumber)
        {
        }
        /**
         * Set company tax document.
         *
         * @param string $documentNumber .
         *
         * @return $this
         */
        public function setCompanyMainActivity($cnae, $description)
        {
        }
        /**
         * Set address to company.
         *
         * @param string $street     Street address.
         * @param string $number     Number address.
         * @param string $district   Neighborhood address.
         * @param string $city       City address.
         * @param string $state      State address.
         * @param string $zip        The zip code billing address.
         * @param string $complement Address complement.
         * @param string $country    Country ISO-alpha3 format, BRA example.
         *
         * @return $this
         */
        public function setCompanyAddress($street, $number, $district, $city, $state, $zip, $complement = null, $country = self::ADDRESS_COUNTRY)
        {
        }
        /**
         * Set company phone.
         *
         * @param int $areaCode    DDD telephone.
         * @param int $number      Telephone number.
         * @param int $countryCode Country code.
         *
         * @return \Moip\Resource\Account
         */
        public function setCompanyPhone($areaCode, $number, $countryCode = 55)
        {
        }
        /**
         * Set account type. Possible values: CONSUMER, MERCHANT.
         *
         * @param string $type
         *
         * @return \Moip\Resource\Account
         */
        public function setType($type)
        {
        }
    }
    /**
     * Class Balances.
     */
    class Balances extends \Moip\Resource\MoipResource
    {
        /**
         * Path balances API.
         *
         * @const string
         */
        const PATH = 'balances';
        /**
         * Initialize a new instance.
         */
        public function initialize()
        {
        }
        /**
         * Populate this instance.
         *
         * @param stdClass $response response object
         *
         * @return mixed|Balances
         */
        protected function populate(\stdClass $response)
        {
        }
        /**
         * Get all balances.
         *
         * @return stdClass
         */
        public function get()
        {
        }
        /**
         * Get unavailable balances. Returns an array of objects with the amount and currency.
         *
         * @return array
         */
        public function getUnavailable()
        {
        }
        /**
         * Get future balances. Returns an array of objects with the amount and currency.
         *
         * @return array
         */
        public function getFuture()
        {
        }
        /**
         * Get current balances. Returns an array of objects with the amount and currency.
         *
         * @return array
         */
        public function getCurrent()
        {
        }
    }
    /**
     * Class BankAccount.
     */
    class BankAccount extends \Moip\Resource\MoipResource
    {
        /**
         * Path bank accounts API.
         *
         * @const string
         */
        const PATH = 'bankaccounts';
        /**
         * Path accounts API.
         *
         * @const string
         */
        const PATH_ACCOUNT = 'accounts';
        /**
         * Bank account type.
         *
         * @const string
         */
        const CHECKING = 'CHECKING';
        /**
         * Bank account type.
         *
         * @const string
         */
        const SAVING = 'SAVING';
        /**
         * Initialize a new instance.
         */
        public function initialize()
        {
        }
        /**
         * Returns bank account id.
         *
         * @return stdClass
         */
        public function getId()
        {
        }
        /**
         * Set bank account type.
         *
         * @param string $type Bank account type (CHECKING or SAVING).
         *
         * @return $this
         */
        public function setType($type)
        {
        }
        /**
         * Returns bank account type.
         *
         * @return string
         */
        public function getType()
        {
        }
        /**
         * Set bank number.
         *
         * @param string $bank_number Bank number.
         *
         * @return $this
         */
        public function setBankNumber($bank_number)
        {
        }
        /**
         * Returns bank number.
         *
         * @return string
         */
        public function getBankNumber()
        {
        }
        /**
         * Set bank account agency number.
         *
         * @param int $agency_number Bank account agency number.
         *
         * @return $this
         */
        public function setAgencyNumber($agency_number)
        {
        }
        /**
         * Returns bank account agency number.
         *
         * @return int
         */
        public function getAgencyNumber()
        {
        }
        /**
         * Set bank account agency check number.
         *
         * @param int $agency_check_number Bank account agency check number.
         *
         * @return $this
         */
        public function setAgencyCheckNumber($agency_check_number)
        {
        }
        /**
         * Returns bank account agency check number.
         *
         * @return int
         */
        public function getAgencyCheckNumber()
        {
        }
        /**
         * Set bank account number.
         *
         * @param int $account_number Bank account number.
         *
         * @return $this
         */
        public function setAccountNumber($account_number)
        {
        }
        /**
         * Returns bank account number.
         *
         * @return int
         */
        public function getAccountNumber()
        {
        }
        /**
         * Set bank account check number.
         *
         * @param int $account_check_number Bank account check number.
         *
         * @return $this
         */
        public function setAccountCheckNumber($account_check_number)
        {
        }
        /**
         * Returns bank account check number.
         *
         * @return int
         */
        public function getAccountCheckNumber()
        {
        }
        /**
         * Set holder.
         *
         * @param string $fullname Holder full name.
         * @param string $number   Document number.
         * @param string $type     Document type (CPF or CNPJ).
         *
         * @return $this
         */
        public function setHolder($fullname, $number, $type)
        {
        }
        /**
         * Returns holder full name.
         *
         * @return string
         */
        public function getFullname()
        {
        }
        /**
         * Get tax document type from customer.
         *
         * @return string Type of value: CPF and CNPJ
         */
        public function getTaxDocumentType()
        {
        }
        /**
         * Get tax document number from customer.
         *
         * @return string Document Number.
         */
        public function getTaxDocumentNumber()
        {
        }
        /**
         * Get a bank account.
         *
         * @param string $bank_account_id Bank account id.
         *
         * @return stdClass
         */
        public function get($bank_account_id)
        {
        }
        /**
         * Create a new BankAccount List instance.
         *
         * @param string Account id.
         *
         * @return \Moip\Resource\BankAccountList
         */
        public function getList($account_id)
        {
        }
        /**
         * Create a new bank account.
         *
         * @param string Account id.
         *
         * @return stdClass
         */
        public function create($account_id)
        {
        }
        /**
         * Update a bank account.
         *
         * @param string|null $bank_account_id Bank account id.
         *
         * @return stdClass
         */
        public function update($bank_account_id = null)
        {
        }
        /**
         * Delete a bank account.
         *
         * @param string $bank_account_id Bank account id.
         *
         * @return mixed
         */
        public function delete($bank_account_id)
        {
        }
        /**
         * Mount the bank account structure.
         *
         * @param stdClass $response
         *
         * @return \Moip\Resource\BankAccount
         */
        protected function populate(\stdClass $response)
        {
        }
    }
    class BankAccountList extends \Moip\Resource\MoipResource
    {
        /**
         * Path bank accounts API.
         *
         * @const string
         */
        const PATH = 'bankaccounts';
        /**
         * Path accounts API.
         *
         * @const string
         */
        const PATH_ACCOUNT = 'accounts';
        /**
         * Initialize a new instance.
         */
        public function initialize()
        {
        }
        /**
         * Get bank accounts.
         *
         * @return array
         */
        public function getBankAccounts()
        {
        }
        /**
         * Get a bank accounts list.
         *
         * @param string Account id.
         *
         * @return stdClass
         */
        public function get($account_id)
        {
        }
        protected function populate(\stdClass $response)
        {
        }
    }
    /**
     * Class Customer.
     */
    class Customer extends \Moip\Resource\MoipResource
    {
        /**
         * Path customers API.
         *
         * @const string
         */
        const PATH = 'customers';
        /**
         * Address Type.
         *
         * @const string
         */
        const ADDRESS_BILLING = 'BILLING';
        /**
         * Address Type.
         *
         * @const string
         */
        const ADDRESS_SHIPPING = 'SHIPPING';
        /**
         * Standard country .
         *
         * @const string
         */
        const ADDRESS_COUNTRY = 'BRA';
        /**
         * Standard document type.
         *
         * @const string
         */
        const TAX_DOCUMENT = 'CPF';
        /**
         * Initialize a new instance.
         */
        public function initialize()
        {
        }
        /**
         * @return \Moip\Resource\CustomerCreditCard
         */
        public function creditCard()
        {
        }
        /**
         * Add a new address to the customer.
         *
         * @param string $type       Address type: SHIPPING or BILLING.
         * @param string $street     Street address.
         * @param string $number     Number address.
         * @param string $district   Neighborhood address.
         * @param string $city       City address.
         * @param string $state      State address.
         * @param string $zip        The zip code billing address.
         * @param string $complement Address complement.
         * @param string $country    Country ISO-alpha3 format, BRA example.
         *
         * @return $this
         */
        public function addAddress($type, $street, $number, $district, $city, $state, $zip, $complement = null, $country = self::ADDRESS_COUNTRY)
        {
        }
        /**
         * Create a new customer.
         *
         * @return \stdClass
         */
        public function create()
        {
        }
        /**
         * Find a customer.
         *
         * @param string $moip_id
         *
         * @return \Moip\Resource\Customer|stdClass
         */
        public function get($moip_id)
        {
        }
        /**
         * Get customer id.
         *
         * @return string The buyer id.
         */
        public function getId()
        {
        }
        /**
         * Get customer address.
         *
         * @return \stdClass Customer's address.
         */
        public function getBillingAddress()
        {
        }
        /**
         * Get customer address.
         *
         * @return \stdClass Customer's address.
         */
        public function getShippingAddress()
        {
        }
        /**
         * Get customer fullname.
         *
         * @return string Customer's full name.
         */
        public function getFullname()
        {
        }
        /**
         * Get funding instrument from customer.
         *
         * @return \stdClass Structure that is the means of payment.
         */
        public function getFundingInstrument()
        {
        }
        /**
         * Get birth date from customer.
         *
         * @return \DateTime|null Date of birth of the credit card holder.
         */
        public function getBirthDate()
        {
        }
        /**
         * Get phone area code from customer.
         *
         * @return int DDD telephone.
         */
        public function getPhoneAreaCode()
        {
        }
        /**
         * Get phone country code from customer.
         *
         * @return int Country code.
         */
        public function getPhoneCountryCode()
        {
        }
        /**
         * Get phone number from customer.
         *
         * @return int Telephone number.
         */
        public function getPhoneNumber()
        {
        }
        /**
         * Get tax document type from customer.
         *
         * @return string Type of value: CPF and CNPJ
         */
        public function getTaxDocumentType()
        {
        }
        /**
         * Get tax document number from customer.
         *
         * @return string Document Number.
         */
        public function getTaxDocumentNumber()
        {
        }
        /**
         * Mount the buyer structure from customer.
         *
         * @param \stdClass $response
         *
         * @return Customer Customer information.
         */
        protected function populate(\stdClass $response)
        {
        }
        /**
         * Set Own id from customer.
         *
         * @param string $ownId Customer's own id. external reference.
         *
         * @return $this
         */
        public function setOwnId($ownId)
        {
        }
        /**
         * Set fullname from customer.
         *
         * @param string $fullname Customer's full name.
         *
         * @return $this
         */
        public function setFullname($fullname)
        {
        }
        /**
         * Set e-mail from customer.
         *
         * @param string $email Email customer.
         *
         * @return $this
         */
        public function setEmail($email)
        {
        }
        /**
         * Set credit card from customer.
         *
         * @param int                          $expirationMonth Card expiration month.
         * @param int                          $expirationYear  Year card expiration.
         * @param int                          $number          Card number.
         * @param int                          $cvc             Card Security Code.
         * @param \Moip\Resource\Customer|null $holder          Cardholder.
         *
         * @return $this
         */
        public function setCreditCard($expirationMonth, $expirationYear, $number, $cvc, \Moip\Resource\Holder $holder = null)
        {
        }
        /**
         * Set birth date from customer.
         *
         * @param \DateTime|string $birthDate Date of birth of the credit card holder.
         *
         * @return $this
         */
        public function setBirthDate($birthDate)
        {
        }
        /**
         * Set tax document from customer.
         *
         * @param string $number Document number.
         * @param string $type   Document type.
         *
         * @return $this
         */
        public function setTaxDocument($number, $type = self::TAX_DOCUMENT)
        {
        }
        /**
         * Set phone from customer.
         *
         * @param int $areaCode    DDD telephone.
         * @param int $number      Telephone number.
         * @param int $countryCode Country code.
         *
         * @return $this
         */
        public function setPhone($areaCode, $number, $countryCode = 55)
        {
        }
    }
    /**
     * Class CustomerFunding.
     *
     * Add a credit card.
     * Through this API you can add one or more credit cards to a Customer.
     */
    class CustomerCreditCard extends \Moip\Resource\MoipResource
    {
        /**
         * Path funding instruments.
         *
         * @const
         */
        const PATH_POST = 'customers/%s/fundinginstruments';
        /**
         * Delete a credit card.
         *
         * @const
         */
        const PATH_DELETE = 'fundinginstruments/%s';
        /**
         * @const sting
         */
        const METHOD_CREDIT_CARD = 'CREDIT_CARD';
        /**
         * Initialize a new instance.
         */
        protected function initialize()
        {
        }
        /**
         * Mount information of a determined object.
         *
         * @param \stdClass $response
         *
         * @return mixed
         */
        protected function populate(\stdClass $response)
        {
        }
        /**
         * Create.
         *
         * @param $customer_id
         *
         * @return stdClass
         */
        public function create($customer_id)
        {
        }
        /**
         * Delete.
         *
         * @param $creditcard_id
         *
         * @return mixed
         */
        public function delete($creditcard_id)
        {
        }
        /**
         * Mês de expiração do cartão.
         * Necessário estar dentro do escopo PCI para enviar esse campo sem criptografia.
         *
         * @param int $expiration_month
         *
         * @return $this
         */
        public function setExpirationMonth($expiration_month)
        {
        }
        /**
         * Ano de expiração do cartão.
         * Necessário estar dentro do escopo PCI para enviar esse campo sem criptografia.
         *
         * @param int $expiration_year
         *
         * @return $this
         */
        public function setExpirationYear($expiration_year)
        {
        }
        /**
         * Número do cartão de crédito.
         * Necessário estar dentro do escopo PCI para enviar esse campo sem criptografia.
         *
         * @param $number
         *
         * @return $this
         */
        public function setNumber($number)
        {
        }
        /**
         * Código de segurança do cartão.
         * Necessário estar dentro do escopo PCI para enviar esse campo sem criptografia.
         *
         * @param string $cvc
         *
         * @return $this
         */
        public function setCvc($cvc)
        {
        }
        /**
         * Nome do portador impresso no cartão.
         *
         * @param $fullname
         *
         * @return $this
         */
        public function setFullname($fullname)
        {
        }
        /**
         * Data de nascimento do cliente. date(AAAA-MM-DD),.
         *
         * @param $birthdate
         *
         * @return $this
         */
        public function setBirthdate($birthdate)
        {
        }
        /**
         * Documento fiscal.
         *
         * @param string $type   Tipo do documento. Valores possíveis: CPF.
         * @param string $number Número do documento.
         *
         * @return $this
         */
        public function setTaxDocument($type, $number)
        {
        }
        /**
         * Telefone do cliente.
         *
         * @param int $country_code DDI (código internacional) do telefone. Valores possíveis: 55.
         * @param int $area_code    Código de área do cliente. Limite de caracteres: (2).
         * @param int $number       Número de telefone do cliente. Limite de caracteres: 9
         *
         * @return $this
         */
        public function setPhone($country_code, $area_code, $number)
        {
        }
        /**
         * Get credit card id.
         *
         * @return string
         */
        public function getId()
        {
        }
        /**
         * Get brand.
         *
         * @return string
         */
        public function getBrand()
        {
        }
        /**
         * Get first 6 characters from credit card.
         *
         * @return string
         */
        public function getFirst6()
        {
        }
        /**
         * Get last 4 characters from credit card.
         *
         * @return string
         */
        public function getLast4()
        {
        }
        /**
         * Get if a credit card was stored or not.
         *
         * @return bool
         */
        public function getStore()
        {
        }
    }
    /**
     * Class Entry.
     */
    class Entry extends \Moip\Resource\MoipResource
    {
        /**
         * @const string
         */
        const PATH = 'entries';
        /**
         * Initializes new instances.
         */
        protected function initialize()
        {
        }
        /**
         * Mount the entry.
         *
         * @param \stdClass $response
         *
         * @return Entry Entry information.
         */
        protected function populate(\stdClass $response)
        {
        }
        /**
         * Get entry in api by id.
         *
         * @param string $id_moip Event ID that generated the launch.
         *
         * @return stdClass
         */
        public function get($id_moip)
        {
        }
        /**
         * Get id from entry.
         *
         * @return string Event ID that generated the launch.
         */
        public function getId()
        {
        }
        /**
         * Get status from entry.
         *
         * @return string Launch status. Possible values: SCHEDULED, SETTLED.
         */
        public function getStatus()
        {
        }
        public function getOperation()
        {
        }
        /**
         * Get total value of order.
         *
         * @return int|float
         */
        public function getAmountTotal()
        {
        }
        /**
         * Get total value of MoIP rate.
         *
         * @return int|float
         */
        public function getAmountFee()
        {
        }
        /**
         * Get net total value.
         *
         * @return int|float
         */
        public function getAmountLiquid()
        {
        }
        /**
         * Get currency used in the application. Possible values: BRL.
         *
         * @return string
         */
        public function getAmountCurrency()
        {
        }
        /**
         * Get additional description.
         *
         * @return string
         */
        public function getDetails()
        {
        }
        /**
         * Get parant payments.
         *
         * @return string
         */
        public function getParentPayments()
        {
        }
        /**
         * Get expected date of settlement.
         *
         * @return \DateTime
         */
        public function getScheduledFor()
        {
        }
        /**
         * Get Settlement date;.
         *
         * @return \DateTime
         */
        public function getSettledAt()
        {
        }
        /**
         * Get date of last update.
         *
         * @return \DateTime
         */
        public function getUpdatedAt()
        {
        }
        /**
         * Get creation date of launch.
         *
         * @return \DateTime
         */
        public function getCreatedAt()
        {
        }
    }
    /**
     * Class Escrow.
     */
    class Escrow extends \Moip\Resource\MoipResource
    {
        /**
         * @const string
         */
        const PATH = 'escrows';
        /**
         * Initializes new instances.
         */
        protected function initialize()
        {
        }
        /**
         * Set id MoIP escrow.
         *
         *
         * @return \Moip\Resource\Escrow
         */
        public function setId($id)
        {
        }
        /**
         * Get id MoIP escrow.
         *
         *
         * @return \Moip\Resource\Escrow
         */
        public function getId()
        {
        }
        /**
         * Get escrow status.
         *
         * @return string Escrow status. Possible values HOLD_PENDING, HELD, RELEASED
         */
        public function getStatus()
        {
        }
        /**
         * get creation time.
         *
         * @return \DateTime
         */
        public function getCreatedAt()
        {
        }
        /**
         * Returns when the last update occurred.
         *
         * @return \DateTime
         */
        public function getUpdatedAt()
        {
        }
        /**
         * Get escrow description.
         *
         * @return string Escrow description.
         */
        public function getDescription()
        {
        }
        /**
         * Release a escrow payment.
         *
         * @return Payment
         */
        public function release()
        {
        }
        /**
         * Mount escrow structure.
         *
         * @param \stdClass $response
         *
         * @return Escrow
         */
        protected function populate(\stdClass $response)
        {
        }
    }
    /**
     * Class Event.
     */
    class Event extends \Moip\Resource\MoipResource
    {
        /**
         * @const string
         */
        const PATH = 'events';
        /**
         * Initialize a new instance.
         */
        public function initialize()
        {
        }
        /**
         * Get event Type.
         *
         * @return string possible values:
         *                ORDER.CREATED
         *                ORDER.PAID
         *                ORDER.NOT_PAID
         *                ORDER.PAID
         *                ORDER.REVERTED
         *                PAYMENT.AUTHORIZED
         *                PAYMENT.IN_ANALYSIS
         *                PAYMENT.CANCELLED
         *                ENTRY.SETTLED
         *                PLAN.CREATED
         *                PLAN.UPDATED
         *                PLAN.ACTIVATED
         *                PLAN.INACTIVATED
         *                CUSTOMER.CREATED
         *                CUSTOMER.UPDATED
         *                SUBSCRIPTION.CREATED
         *                SUBSCRIPTION.UPDATE
         *                SUBSCRIPTION.ACTIVATED
         *                SUBSCRIPTION.SUSPENDED
         *                SUBSCRIPTION.CANCELED
         *                INVOICE.CREATED
         *                INVOICE.UPDATED
         */
        public function getType()
        {
        }
        /**
         * Get creation date of the event.
         *
         * @return \DateTime
         */
        public function getCreatedAt()
        {
        }
        /**
         * Get event Description.
         *
         * @return string
         */
        public function getDescription()
        {
        }
        /**
         * Populate Event.
         *
         * @param \stdClass $response
         *
         * @return \stdClass
         */
        protected function populate(\stdClass $response)
        {
        }
    }
    /**
     * Class Holder.
     */
    class Holder extends \Moip\Resource\MoipResource
    {
        /**
         * Address Type.
         *
         * @const string
         */
        const ADDRESS_BILLING = 'BILLING';
        /**
         * Standard country .
         *
         * @const string
         */
        const ADDRESS_COUNTRY = 'BRA';
        /**
         * Standard document type.
         *
         * @const string
         */
        const TAX_DOCUMENT = 'CPF';
        /**
         * Initialize a new instance.
         */
        public function initialize()
        {
        }
        /**
         * Add a new address to the holder.
         *
         * @param string $type       Address type: BILLING.
         * @param string $street     Street address.
         * @param string $number     Number address.
         * @param string $district   Neighborhood address.
         * @param string $city       City address.
         * @param string $state      State address.
         * @param string $zip        The zip code billing address.
         * @param string $complement Address complement.
         * @param string $country    Country ISO-alpha3 format, BRA example.
         *
         * @return $this
         */
        public function setAddress($type, $street, $number, $district, $city, $state, $zip, $complement = null, $country = self::ADDRESS_COUNTRY)
        {
        }
        /**
         * Get holder address.
         *
         * @return \stdClass Holder's address.
         */
        public function getBillingAddress()
        {
        }
        /**
         * Get holser fullname.
         *
         * @return string Holder's full name.
         */
        public function getFullname()
        {
        }
        /**
         * Get birth date from holder.
         *
         * @return \DateTime|null Date of birth of the credit card holder.
         */
        public function getBirthDate()
        {
        }
        /**
         * Get phone area code from holder.
         *
         * @return int DDD telephone.
         */
        public function getPhoneAreaCode()
        {
        }
        /**
         * Get phone country code from holder.
         *
         * @return int Country code.
         */
        public function getPhoneCountryCode()
        {
        }
        /**
         * Get phone number from holder.
         *
         * @return int Telephone number.
         */
        public function getPhoneNumber()
        {
        }
        /**
         * Get tax document type from holder.
         *
         * @return string Type of value: CPF and CNPJ
         */
        public function getTaxDocumentType()
        {
        }
        /**
         * Get tax document number from holder.
         *
         * @return string Document Number.
         */
        public function getTaxDocumentNumber()
        {
        }
        /**
         * Mount the buyer structure from holder.
         *
         * @param \stdClass $response
         *
         * @return Holder information.
         */
        protected function populate(\stdClass $response)
        {
        }
        /**
         * Set fullname from holder.
         *
         * @param string $fullname Holder's full name.
         *
         * @return $this
         */
        public function setFullname($fullname)
        {
        }
        /**
         * Set birth date from holder.
         *
         * @param \DateTime|string $birthDate Date of birth of the credit card holder.
         *
         * @return $this
         */
        public function setBirthDate($birthDate)
        {
        }
        /**
         * Set tax document from holder.
         *
         * @param string $number Document number.
         * @param string $type   Document type.
         *
         * @return $this
         */
        public function setTaxDocument($number, $type = self::TAX_DOCUMENT)
        {
        }
        /**
         * Set phone from holder.
         *
         * @param int $areaCode    DDD telephone.
         * @param int $number      Telephone number.
         * @param int $countryCode Country code.
         *
         * @return $this
         */
        public function setPhone($areaCode, $number, $countryCode = 55)
        {
        }
    }
    /**
     * Class Keys.
     */
    class Keys extends \Moip\Resource\MoipResource
    {
        /**
         * @const string
         */
        const PATH = 'keys';
        /**
         * Initializes new instances.
         */
        public function initialize()
        {
        }
        /**
         * Mount keys structure.
         *
         * @param \stdClass $response
         *
         * @return $this
         */
        protected function populate(\stdClass $response)
        {
        }
        /**
         * Get encryption.
         *
         * @return string
         */
        public function getEncryption()
        {
        }
        /**
         * Get Basic Auth.
         *
         * @return stdClass
         */
        public function getBasicAuth()
        {
        }
        /**
         * Get keys.
         *
         * @return stdClass
         */
        public function get()
        {
        }
    }
    /**
     * Class Multiorders.
     */
    class Multiorders extends \Moip\Resource\MoipResource
    {
        /**
         * @const string
         */
        const PATH = 'multiorders';
        /**
         * Initializes new instances.
         */
        public function initialize()
        {
        }
        /**
         * Structure of order.
         *
         * @param Orders $order
         *
         * @return $this
         */
        public function addOrder(\Moip\Resource\Orders $order)
        {
        }
        /**
         * Create a new multiorder in MoIP.
         *
         * @return stdClass
         */
        public function create()
        {
        }
        /**
         * Get an multiorder in MoIP.
         *
         * @param string $id_moip Id MoIP order id
         *
         * @return stdClass
         */
        public function get($id_moip)
        {
        }
        /**
         * Get MoIP order id.
         *
         * @return string
         */
        public function getId()
        {
        }
        /**
         * Get own request id. external reference.
         *
         * @return string
         */
        public function getOwnId()
        {
        }
        /**
         * Get order status.
         * Possible values: CREATED, WAITING, PAID, NOT_PAID, REVERTED.
         *
         * @return string
         */
        public function getStatus()
        {
        }
        /**
         * Get total value of order.
         *
         * @return int|float
         */
        public function getAmountTotal()
        {
        }
        /**
         * Get currency used in the application. Possible values: BRL.
         *
         * @return string
         */
        public function getAmountCurrency()
        {
        }
        /**
         * Get creation date of launch.
         *
         * @return \DateTime
         */
        public function getCreatedAt()
        {
        }
        /**
         * Get date of last update.
         *
         * @return \DateTime
         */
        public function getUpdatedAt()
        {
        }
        /**
         * Get orders.
         *
         * @return \ArrayIterator
         */
        public function getOrderIterator()
        {
        }
        /**
         * Structure of multipayments.
         *
         * @return \Moip\Resource\Payment
         */
        public function multipayments()
        {
        }
        /**
         * Mount the structure of order.
         *
         * @param \stdClass $response
         *
         * @return Multiorders
         */
        protected function populate(\stdClass $response)
        {
        }
        /**
         * Set own request id. External reference.
         *
         * @param string $ownId
         *
         * @return $this
         */
        public function setOwnId($ownId)
        {
        }
    }
    /**
     * Description of NotificationPreferences.
     */
    class NotificationPreferences extends \Moip\Resource\MoipResource
    {
        /**
         * Path accounts API.
         *
         * @const string
         */
        const PATH = 'preferences';
        /**
         * Notification media.
         *
         * @var string
         */
        const NOTIFICATION_MEDIA = 'WEBHOOK';
        /**
         * Initialize a new instance.
         */
        public function initialize()
        {
        }
        /**
         * Add a new address to the account.
         *
         * @param string $event Webhook.
         *
         * @return $this
         */
        public function addEvent($event)
        {
        }
        /**
         * Set target to notification.
         *
         * @param string $target Notification URL.
         *
         * @return $this
         */
        public function setTarget($target)
        {
        }
        /**
         * Returns target.
         *
         * @return string
         */
        public function getTarget()
        {
        }
        /**
         * Returns media.
         *
         * @return string
         */
        public function getMedia()
        {
        }
        /**
         * Returns events.
         *
         * @return array
         */
        public function getEvents()
        {
        }
        /**
         * Returns notification id.
         *
         * @return stdClass
         */
        public function getId()
        {
        }
        /**
         * Returns notification token.
         *
         * @return stdClass
         */
        public function getToken()
        {
        }
        /**
         * Create a new notification preference.
         *
         * @return \stdClass
         */
        public function create()
        {
        }
        /**
         * Get a notification preference.
         *
         * @param string $notification_id Moip notification id.
         *
         * @return stdClass
         */
        public function get($notification_id)
        {
        }
        /**
         * Create a new Notifications List instance.
         *
         * @return \Moip\Resource\NotificationPreferencesList
         */
        public function getList()
        {
        }
        /**
         * Delete.
         *
         * @param $notification_id
         *
         * @return mixed
         */
        public function delete($notification_id)
        {
        }
        /**
         * Mount the notification preference structure.
         *
         * @param \stdClass $response
         *
         * @return \Moip\Resource\NotificationPreferences data
         */
        protected function populate(\stdClass $response)
        {
        }
    }
    class NotificationPreferencesList extends \Moip\Resource\MoipResource
    {
        /**
         * @const string
         */
        const PATH = 'preferences';
        public function initialize()
        {
        }
        /**
         * Get notifications.
         *
         * @return array
         */
        public function getNotifications()
        {
        }
        /**
         * Get a notification list.
         *
         * @return stdClass
         */
        public function get()
        {
        }
        protected function populate(\stdClass $response)
        {
        }
    }
    /**
     * Class Orders.
     */
    class Orders extends \Moip\Resource\MoipResource
    {
        /**
         * @const string
         */
        const PATH = 'orders';
        /**
         * Defines what kind of payee as pripmary.
         *
         * @const string
         */
        const RECEIVER_TYPE_PRIMARY = 'PRIMARY';
        /**
         * Defines what kind of payee as secundary.
         *
         * @const string
         */
        const RECEIVER_TYPE_SECONDARY = 'SECONDARY';
        /**
         * Currency used in the application.
         *
         * @const string
         */
        const AMOUNT_CURRENCY = 'BRL';
        /**
         * Adds a new item to order.
         *
         * @param string $product  Name of the product.
         * @param int    $quantity Product Quantity.
         * @param string $detail   Additional product description.
         * @param int    $price    Initial value of the item.
         * @param string category  Product category. see: https://dev.moip.com.br/v2.1/reference#tabela-de-categorias-de-produtos.
         *
         * @return $this
         */
        public function addItem($product, $quantity, $detail, $price, $category = 'OTHER_CATEGORIES')
        {
        }
        /**
         *  Adds a new receiver to order.
         *
         * @param string $moipAccount Id MoIP MoIP account that will receive payment values.
         * @param string $type        Define qual o tipo de recebedor do pagamento, valores possíveis: PRIMARY, SECONDARY.
         * @param int    $fixed       Value that the receiver will receive.
         * @param int    $percentual  Percentual value that the receiver will receive. Possible values: 0 - 100
         * @param bool   $feePayor    Flag to know if receiver is the payer of Moip tax.
         *
         * @return $this
         */
        public function addReceiver($moipAccount, $type, $fixed = null, $percentual = null, $feePayor = false)
        {
        }
        /**
         * Initialize necessary used in some functions.
         */
        protected function initialize()
        {
        }
        /**
         * Mount the structure of order.
         *
         * @param \stdClass $response
         *
         * @return Orders Response order.
         */
        protected function populate(\stdClass $response)
        {
        }
        /**
         * Create a new order in MoIP.
         *
         * @return \Moip\Resource\Orders|stdClass
         */
        public function create()
        {
        }
        /**
         * Get an order in MoIP.
         *
         * @param string $id_moip Id MoIP order id
         *
         * @return stdClass
         */
        public function get($id_moip)
        {
        }
        /**
         * Get MoIP order id.
         *
         * @return string
         */
        public function getId()
        {
        }
        /**
         * Get own request id. external reference.
         *
         * @return string
         */
        public function getOwnId()
        {
        }
        /**
         * Get paid value of order.
         *
         * @return int|float
         */
        public function getAmountPaid()
        {
        }
        /**
         * Get total value of order.
         *
         * @return int|float
         */
        public function getAmountTotal()
        {
        }
        /**
         * Get total value of MoIP rate.
         *
         * @return int|float
         */
        public function getAmountFees()
        {
        }
        /**
         * Get total amount of refunds.
         *
         * @return int|float
         */
        public function getAmountRefunds()
        {
        }
        /**
         * Get net total value.
         *
         * @return int|float
         */
        public function getAmountLiquid()
        {
        }
        /**
         * Get sum of amounts received by other recipients. Used in Marketplaces.
         *
         * @return int|float
         */
        public function getAmountOtherReceivers()
        {
        }
        /**
         * Get currency used in the application. Possible values: BRL.
         *
         * @return string
         */
        public function getCurrenty()
        {
        }
        /**
         * Get greight value of the item will be added to the value of the items.
         *
         * @return int|float
         */
        public function getSubtotalShipping()
        {
        }
        /**
         * Get Additional value to the item will be added to the value of the items.
         *
         * @return int|float
         */
        public function getSubtotalAddition()
        {
        }
        /**
         * Get discounted value of the item will be subtracted from the total value of the items.
         *
         * @return int|float
         */
        public function getSubtotalDiscount()
        {
        }
        /**
         * Get summing the values of all items.
         *
         * @return int|float
         */
        public function getSubtotalItems()
        {
        }
        /**
         * Ger structure item information request.
         *
         * @return \ArrayIterator
         */
        public function getItemIterator()
        {
        }
        /**
         * Get Customer associated with the request.
         *
         * @return \Moip\Resource\Customer
         */
        public function getCustomer()
        {
        }
        /**
         * Get zipCode of shippingAddress.
         *
         * @return string
         */
        public function getShippingAddressZipCode()
        {
        }
        /**
         * Get street of shippingAddress.
         *
         * @return string
         */
        public function getShippingAddressStreet()
        {
        }
        /**
         * Get streetNumber of shippingAddress.
         *
         * @return string
         */
        public function getShippingAddressStreetNumber()
        {
        }
        /**
         * Get complement of shippingAddress.
         *
         * @return string
         */
        public function getShippingAddressComplement()
        {
        }
        /**
         * Get city of shippingAddress.
         *
         * @return string
         */
        public function getShippingAddressCity()
        {
        }
        /**
         * Get district of shippingAddress.
         *
         * @return string
         */
        public function getShippingAddressDistrict()
        {
        }
        /**
         * Get state of shippingAddress.
         *
         * @return string
         */
        public function getShippingAddressState()
        {
        }
        /**
         * Get country of shippingAddress.
         *
         * @return string
         */
        public function getShippingAddressCountry()
        {
        }
        /**
         * Get payments associated with the request.
         *
         * @return ArrayIterator
         */
        public function getPaymentIterator()
        {
        }
        /**
         * Get escrows associated with the request.
         *
         * @return ArrayIterator
         */
        public function getEscrowIterator()
        {
        }
        /**
         * Get refunds associated with the request.
         *
         * @return ArrayIterator
         */
        public function getRefundIterator()
        {
        }
        /**
         * Get entries associated with the request.
         *
         * @return ArrayIterator
         */
        public function getEntryIterator()
        {
        }
        /**
         * Get releases associated with the request.
         *
         * @return ArrayIterator
         */
        public function getEventIterator()
        {
        }
        /**
         * Get recipient structure of payments.
         *
         * @return ArrayIterator
         */
        public function getReceiverIterator()
        {
        }
        /**
         * Get order status.
         * Possible values: CREATED, WAITING, PAID, NOT_PAID, REVERTED.
         *
         * @return string
         */
        public function getStatus()
        {
        }
        /**
         * Get date of resource creation.
         *
         * @return \DateTime
         */
        public function getCreatedAt()
        {
        }
        /**
         * Get updated resource.
         *
         * @return \DateTime
         */
        public function getUpdatedAt()
        {
        }
        /**
         * Get checkout preferences of the order.
         *
         * @return string
         */
        public function getCheckoutPreferences()
        {
        }
        /**
         * Create a new Orders list instance.
         *
         * @return \Moip\Resource\OrdersList
         */
        public function getList(\Moip\Helper\Pagination $pagination = null, \Moip\Helper\Filters $filters = null, $qParam = '')
        {
        }
        /**
         * Structure of payment.
         *
         * @return \Moip\Resource\Payment
         */
        public function payments()
        {
        }
        /**
         * Structure of refund.
         *
         * @return \Moip\Resource\Refund
         */
        public function refunds()
        {
        }
        /**
         * Set additional value to the item will be added to the value of the items.
         *
         * @param int|float $value additional value to the item.
         *
         * @return $this
         */
        public function setAddition($value)
        {
        }
        /**
         * Set customer associated with the order.
         *
         * @param \Moip\Resource\Customer $customer customer associated with the request.
         *
         * @return $this
         */
        public function setCustomer(\Moip\Resource\Customer $customer)
        {
        }
        /**
         * Set customer id associated with the order.
         *
         * @param string $id Customer's id.
         *
         * @return $this
         */
        public function setCustomerId($id)
        {
        }
        /**
         * Set discounted value of the item will be subtracted from the total value of the items.
         *
         * @param int|float $value discounted value.
         *
         * @return $this
         */
        public function setDiscount($value)
        {
        }
        /**
         * Set discounted value of the item will be subtracted from the total value of the items.
         *
         * @deprecated
         *
         * @param int|float $value discounted value.
         *
         * @return $this
         */
        public function setDiscont($value)
        {
        }
        /**
         * Set own request id. external reference.
         *
         * @param string $ownId external reference.
         *
         * @return $this
         */
        public function setOwnId($ownId)
        {
        }
        /**
         * Set shipping Amount.
         *
         * @param float $value shipping Amount.
         *
         * @return $this
         */
        public function setShippingAmount($value)
        {
        }
        /**
         * Set URL for redirection in case of success.
         *
         * @param string $urlSuccess UrlSuccess.
         *
         * @return $this
         */
        public function setUrlSuccess($urlSuccess = '')
        {
        }
        /**
         * Set URL for redirection in case of failure.
         *
         * @param string $urlFailure UrlFailure.
         *
         * @return $this
         */
        public function setUrlFailure($urlFailure = '')
        {
        }
        /**
         * Set installment settings for checkout preferences.
         *
         * @param array $quantity
         * @param int   $discountValue
         * @param int   $additionalValue
         *
         * @return $this
         */
        public function addInstallmentCheckoutPreferences($quantity, $discountValue = 0, $additionalValue = 0)
        {
        }
    }
    class OrdersList extends \Moip\Resource\MoipResource
    {
        /**
         * @const string
         */
        const PATH = 'orders';
        /**
         * @const string
         */
        const CREATED_AT = 'createdAt';
        /**
         * @const string
         */
        const PAYMENT_METHOD = 'paymentMethod';
        /**
         * @const string
         */
        const VALUE = 'value';
        /**
         * @const string
         */
        const STATUS = 'status';
        public function initialize()
        {
        }
        /**
         * Get orders.
         *
         * @return array
         */
        public function getOrders()
        {
        }
        /**
         * Get an order list in MoIP.
         *
         * @param Pagination $pagination
         * @param Filters    $filters
         * @param string     $qParam     Query a specific value.
         *
         * @return stdClass
         */
        public function get(\Moip\Helper\Pagination $pagination = null, \Moip\Helper\Filters $filters = null, $qParam = '')
        {
        }
        protected function populate(\stdClass $response)
        {
        }
    }
    /**
     * Class Payment.
     */
    class Payment extends \Moip\Resource\MoipResource
    {
        /**
         * @const string
         */
        const PATH = 'payments';
        /**
         * @const string
         */
        const MULTI_PAYMENTS_PATH = 'multipayments';
        /**
         * @const string
         */
        const SIMULATOR_PATH = 'simulador';
        /**
         * Payment means.
         *
         * @const string
         */
        const METHOD_CREDIT_CARD = 'CREDIT_CARD';
        /**
         * Payment means.
         *
         * @const string
         */
        const METHOD_BOLETO = 'BOLETO';
        /**
         * Payment means.
         *
         * @const string
         */
        const METHOD_ONLINE_DEBIT = 'ONLINE_DEBIT';
        /**
         * Payment means.
         *
         * @const string
         */
        const METHOD_WALLET = 'WALLET';
        /**
         * Payment means.
         *
         * @const string
         */
        const METHOD_ONLINE_BANK_DEBIT = 'ONLINE_BANK_DEBIT';
        /**
         * Just created, but not initialized yet.
         */
        const STATUS_CREATED = 'CREATED';
        /**
         * Waiting for the payment.
         */
        const STATUS_WAITING = 'WAITING';
        /**
         * On risk analysis, it may be automatic or manual.
         */
        const STATUS_IN_ANALYSIS = 'IN_ANALYSIS';
        /**
         * The amount was reserved on client credit card, it may be caught or discarded until 5 days.
         */
        const STATUS_PRE_AUTHORIZED = 'PRE_AUTHORIZED';
        /**
         * Payment confirmed by the bank institution.
         */
        const STATUS_AUTHORIZED = 'AUTHORIZED';
        /**
         * Payment cancelled.
         */
        const STATUS_CANCELLED = 'CANCELLED';
        /**
         * Payment refunded.
         */
        const STATUS_REFUNDED = 'REFUNDED';
        /**
         * Paymend reversed (it means that the payment may was not recognized by the client).
         */
        const STATUS_REVERSED = 'REVERSED';
        /**
         * Payment finalized, the amout is on your account.
         */
        const STATUS_SETTLED = 'SETTLED';
        /**
         * Initializes new instances.
         */
        protected function initialize()
        {
        }
        /**
         * Create a new payment in api MoIP.
         *
         * @return $this
         */
        public function execute()
        {
        }
        /**
         * Get an payment and multipayment in MoIP.
         *
         * @param string $id_moip Id MoIP payment
         *
         * @return stdClass
         */
        public function get($id_moip)
        {
        }
        /**
         * Get id MoIP payment.
         *
         *
         * @return \Moip\Resource\Payment
         */
        public function getId()
        {
        }
        /**
         * Mount payment structure.
         *
         * @param \stdClass $response
         *
         * @return Payment
         */
        protected function populate(\stdClass $response)
        {
        }
        /**
         * Refunds.
         *
         * @return Refund
         */
        public function refunds()
        {
        }
        /**
         * Escrows.
         *
         * @return Escrow
         */
        public function escrows()
        {
        }
        /**
         * Get payment status.
         *
         * @return string Payment status. Possible values CREATED, WAITING, IN_ANALYSIS, PRE_AUTHORIZED, AUTHORIZED, CANCELLED, REFUNDED, REVERSED, SETTLED
         */
        public function getStatus()
        {
        }
        /**
         * get creation time.
         *
         * @return \DateTime
         */
        public function getCreatedAt()
        {
        }
        /**
         * Returns when the last update occurred.
         *
         * @return \DateTime
         */
        public function getUpdatedAt()
        {
        }
        /**
         * Returns the funding instrument.
         *
         * @return stdClass
         */
        public function getFundingInstrument()
        {
        }
        /**
         * Get href to Boleto
         * *.
         *
         * @return stdClass
         */
        public function getHrefBoleto()
        {
        }
        /**
         * Get LineCode to Boleto
         * *.
         *
         * @return stdClass
         */
        public function getLineCodeBoleto()
        {
        }
        /**
         * Get href from print to Boleto
         * *.
         *
         * @return stdClass
         */
        public function getHrefPrintBoleto()
        {
        }
        /**
         * Get Expirate Date to Boleto
         * *.
         *
         * @return stdClass
         */
        public function getExpirationDateBoleto()
        {
        }
        /**
         * Returns payment amount.
         *
         * @return stdClass
         */
        public function getAmount()
        {
        }
        /**
         * Returns escrow.
         *
         * @return stdClass
         */
        public function getEscrow()
        {
        }
        /**
         * Returns order.
         *
         * @return Order
         */
        public function getOrder()
        {
        }
        /**
         * Returns installment count.
         *
         * @return stdClass
         */
        public function getInstallmentCount()
        {
        }
        /**
         * Get payments.
         *
         * @return array
         */
        public function getPayments()
        {
        }
        /**
         * Set means of payment.
         *
         * @param \stdClass $fundingInstrument
         *
         * @return $this
         */
        public function setFundingInstrument(\stdClass $fundingInstrument)
        {
        }
        /**
         * Set billet.
         *
         * @param \DateTime|string $expirationDate   Expiration date of a billet.
         * @param string           $logoUri          Logo of billet.
         * @param array            $instructionLines Instructions billet.
         *
         * @return $this
         */
        public function setBoleto($expirationDate, $logoUri, array $instructionLines = [])
        {
        }
        /**
         * Set credit cardHash.
         *
         * @param string                  $hash   Credit card hash encripted using Moip.js
         * @param \Moip\Resource\Customer $holder
         * @param bool                    $store  Flag to know if credit card should be saved.
         *
         * @return $this
         */
        public function setCreditCardHash($hash, \Moip\Resource\Holder $holder, $store = true)
        {
        }
        /**
         * Set credit card
         * Credit card used in a payment.
         * The card when returned within a parent resource is presented in its minimum representation.
         *
         * @param int                     $expirationMonth Card expiration month
         * @param int                     $expirationYear  Year of card expiration.
         * @param string                  $number          Card number.
         * @param int                     $cvc             Card Security Code.
         * @param \Moip\Resource\Customer $holder
         * @param bool                    $store           Flag to know if credit card should be saved.
         *
         * @return $this
         */
        public function setCreditCard($expirationMonth, $expirationYear, $number, $cvc, \Moip\Resource\Holder $holder, $store = true)
        {
        }
        /**
         * Sets data from a previously saved credit card
         * Credit card used in a payment.
         * Used when the credit card was saved with the customer and the payment made in a future date.
         *
         * @param string $creditCardId MoIP's Credit Card Id.
         * @param int    $cvc          Card Security Code.
         *
         * @return $this
         */
        public function setCreditCardSaved($creditCardId, $cvc)
        {
        }
        /**
         * Set installment count.
         *
         * @param int $installmentCount
         *
         * @return $this
         */
        public function setInstallmentCount($installmentCount)
        {
        }
        /**
         * Set statement descriptor.
         *
         * @param string $statementDescriptor
         *
         * @return $this
         */
        public function setStatementDescriptor($statementDescriptor)
        {
        }
        /**
         * Set payment means made available by banks.
         *
         * @param string           $bankNumber     Bank number. Possible values: 001, 237, 341, 041.
         * @param \DateTime|string $expirationDate Date of expiration debit.
         * @param string           $returnUri      Return Uri.
         *
         * @return $this
         */
        public function setOnlineBankDebit($bankNumber, $expirationDate, $returnUri)
        {
        }
        /**
         * Set Multiorders.
         *
         * @param \Moip\Resource\Multiorders $multiorder
         *
         * @return $this
         */
        public function setMultiorder(\Moip\Resource\Multiorders $multiorder)
        {
        }
        /**
         * Set order.
         *
         * @param \Moip\Resource\Orders $order
         *
         * @return $this
         */
        public function setOrder(\Moip\Resource\Orders $order)
        {
        }
        /**
         * Turns on a delay on credit card payment capture (pre-authorization).
         *
         * @return $this
         */
        public function setDelayCapture()
        {
        }
        /**
         * Set escrow to a payment.
         *
         * @param string $description
         *
         * @return $this
         */
        public function setEscrow($description)
        {
        }
        /**
         * Capture a pre-authorized amount on a credit card payment.
         *
         * @throws \Exception
         *
         * @return Payment
         */
        public function capture()
        {
        }
        /**
         * Cancel a pre-authorized amount on a credit card payment.
         *
         * @throws \Exception
         *
         * @return Payment
         */
        public function cancel()
        {
        }
        /**
         * Cancel a pre-authorized amount on a credit card payment.
         *
         * @throws \Exception
         *
         * @return Payment
         */
        public function avoid()
        {
        }
        /**
         * Authorize a payment (Available only in sandbox to credit card payment with status IN_ANALYSIS and billet payment with status WAITING).
         *
         * @return bool
         */
        public function authorize($amount = null)
        {
        }
    }
    /**
     * Class Refund.
     */
    class Refund extends \Moip\Resource\MoipResource
    {
        /**
         * @const string
         */
        const PATH = 'refunds';
        /**
         * Refunds means.
         *
         * @const string
         */
        const METHOD_CREDIT_CARD = 'CREDIT_CARD';
        /**
         * Refunds means.
         *
         * @const string
         */
        const METHOD_BANK_ACCOUNT = 'BANK_ACCOUNT';
        /**
         * Refunds means.
         *
         * @const string
         */
        const METHOD_MONEY_ORDER = 'MONEY_ORDER';
        /**
         * Initializes new instances.
         */
        public function initialize()
        {
        }
        /**
         * Mount refund structure.
         *
         * @param \stdClass $response
         *
         * @return $this
         */
        protected function populate(\stdClass $response)
        {
        }
        /**
         * Get id MoIP refund.
         *
         *
         * @return string
         */
        public function getId()
        {
        }
        /**
         * Get a Refund.
         *
         * @param string $moip_id Refund id.
         *
         * @return stdClass
         */
        public function get($moip_id)
        {
        }
        /**
         * Get status from MoIP refund.
         *
         *
         * @return string
         */
        public function getStatus()
        {
        }
        /**
         * Get MoIP refund type.
         *
         *
         * @return string
         */
        public function getType()
        {
        }
        /**
         * Making a full refund to the bank account.
         *
         * @param string                  $type               Kind of bank account. possible values: CHECKING, SAVING.
         * @param string                  $bankNumber         Bank number. possible values: 001, 237, 341, 041.
         * @param int                     $agencyNumber       Branch number.
         * @param int                     $agencyCheckNumber  Checksum of the agency.
         * @param int                     $accountNumber      Account number.
         * @param int                     $accountCheckNumber Digit account checker.
         * @param \Moip\Resource\Customer $holder
         *
         * @return Refund
         */
        public function bankAccountFull($type, $bankNumber, $agencyNumber, $agencyCheckNumber, $accountNumber, $accountCheckNumber, \Moip\Resource\Customer $holder)
        {
        }
        /**
         * Making a partial refund in the bank account.
         *
         * @param string                  $type               Kind of bank account. possible values: CHECKING, SAVING.
         * @param string                  $bankNumber         Bank number. possible values: 001, 237, 341, 041.
         * @param int                     $agencyNumber       Branch number.
         * @param int                     $agencyCheckNumber  Checksum of the agency.
         * @param int                     $accountNumber      Account number.
         * @param int                     $accountCheckNumber Digit account checker.
         * @param \Moip\Resource\Customer $holder
         *
         * @return Refund
         */
        public function bankAccountPartial($amount, $type, $bankNumber, $agencyNumber, $agencyCheckNumber, $accountNumber, $accountCheckNumber, \Moip\Resource\Customer $holder)
        {
        }
        /**
         * Making a full refund in credit card.
         *
         * @return \Moip\Resource\Refund
         */
        public function creditCardFull()
        {
        }
        /**
         * Making a partial refund in credit card.
         *
         * @param int|float $amount value of refund.
         *
         * @return \Moip\Resource\Refund
         */
        public function creditCardPartial($amount)
        {
        }
        /**
         * Get iterator.
         *
         * @return \ArrayIterator
         */
        public function getIterator()
        {
        }
        /**
         * Set order.
         *
         * @param \Moip\Resource\Orders $order
         */
        public function setOrder(\Moip\Resource\Orders $order)
        {
        }
        /**
         * Set payment.
         *
         * @param \Moip\Resource\Payment $payment
         */
        public function setPayment(\Moip\Resource\Payment $payment)
        {
        }
        public function bankAccount($resourceId, \Moip\Resource\BankAccount $bankAccount, $amount = null)
        {
        }
        public function creditCard($resourceId, $amount = null)
        {
        }
    }
    /**
     * Class Transfers.
     */
    class Transfers extends \Moip\Resource\MoipResource
    {
        /**
         * @const string
         */
        const PATH = 'transfers';
        /**
         * @const string
         */
        const METHOD = 'BANK_ACCOUNT';
        /**
         * @const string
         */
        const TYPE = 'CHECKING';
        /**
         * @const string
         */
        const TYPE_HOLD = 'CPF';
        /**
         * Initializes new instances.
         */
        protected function initialize()
        {
        }
        /**
         * @param stdClass $response
         *
         * @return Transfers
         */
        protected function populate(\stdClass $response)
        {
        }
        /**
         * Set info of transfers.
         *
         * @param int    $amount
         * @param string $bankNumber         Bank number. possible values: 001, 237, 341, 041.
         * @param int    $agencyNumber
         * @param int    $agencyCheckNumber
         * @param int    $accountNumber
         * @param int    $accountCheckNumber
         *
         * @return $this
         */
        public function setTransfers($amount, $bankNumber, $agencyNumber, $agencyCheckNumber, $accountNumber, $accountCheckNumber)
        {
        }
        /**
         * Set info of transfers to a saved bank account.
         *
         * @param int    $amount        Amount
         * @param string $bankAccountId Saved bank account id.
         *
         * @return $this
         */
        public function setTransfersToBankAccount($amount, $bankAccountId)
        {
        }
        /**
         * Returns transfer.
         *
         * @return stdClass
         */
        public function getTransfers()
        {
        }
        /**
         * Get own request id. external reference.
         *
         * @param mixed $ownId id
         *
         * @return $this
         */
        public function setOwnId($ownId)
        {
        }
        /**
         * Set info of holder.
         *
         * @param string $fullname
         * @param int    $taxDocument
         *
         * @return $this
         */
        public function setHolder($fullname, $taxDocument)
        {
        }
        /**
         * Returns transfer holder.
         *
         * @return stdClass
         */
        public function getHolder()
        {
        }
        /**
         * Execute Tranfers.
         *
         * @return Transfers
         */
        public function execute()
        {
        }
        /**
         * Revert Tranfers.
         *
         * @param string $id Transfer id.
         *
         * @return Transfers
         */
        public function revert($id)
        {
        }
        /**
         * Get a Transfer.
         *
         * @param string $id Transfer id.
         *
         * @return stdClass
         */
        public function get($id)
        {
        }
        /**
         * Create a new Transfers list instance.
         *
         * @return \Moip\Resource\TransfersList
         */
        public function getList(\Moip\Helper\Pagination $pagination = null, \Moip\Helper\Filters $filters = null, $qParam = '')
        {
        }
        /**
         * Get MoIP Transfers id.
         *
         * @return string
         */
        public function getId()
        {
        }
        /**
         * Get own request id. external reference.
         *
         * @return mixed
         */
        public function getOwnId()
        {
        }
    }
    class TransfersList extends \Moip\Resource\MoipResource
    {
        /**
         * Path bank accounts API.
         *
         * @const string
         */
        const PATH = 'transfers';
        /**
         * Initialize a new instance.
         */
        public function initialize()
        {
        }
        /**
         * Get transfers.
         *
         * @return array
         */
        public function getTransfers()
        {
        }
        /**
         * Get transfer list.
         *
         * @param Pagination $pagination
         * @param Filters    $filters
         * @param string     $qParam     Query a specific value.
         *
         * @return stdClass
         */
        public function get(\Moip\Helper\Pagination $pagination = null, \Moip\Helper\Filters $filters = null, $qParam = '')
        {
        }
        protected function populate(\stdClass $response)
        {
        }
    }
    class Webhook extends \Moip\Resource\MoipResource
    {
        /**
         * Initialize a new instance.
         */
        public function initialize()
        {
        }
        /**
         * Get webhook id.
         *
         * @return string The webhook id.
         */
        public function getId()
        {
        }
        /**
         * Get resource id.
         *
         * @return string The webhook id.
         */
        public function getResourceId()
        {
        }
        /**
         * Get event.
         *
         * @return string event.
         */
        public function getEvent()
        {
        }
        /**
         * Get url.
         *
         * @return string url.
         */
        public function getUrl()
        {
        }
        /**
         * Get webhook status.
         *
         * @return string webhook status.
         */
        public function getStatus()
        {
        }
        /**
         * Mount structure of Webhook.
         *
         * @param \stdClass $response
         *
         * @return \Moip\Resource\Webhook Webhook
         */
        protected function populate(\stdClass $response)
        {
        }
    }
    /**
     * Class Webhook.
     */
    class WebhookList extends \Moip\Resource\MoipResource
    {
        /**
         * Path accounts API.
         *
         * @const string
         */
        const PATH = 'webhooks';
        /**
         * Initialize a new instance.
         */
        public function initialize()
        {
        }
        /**
         * Get webhooks.
         *
         * @return array
         */
        public function getWebhooks()
        {
        }
        /**
         * Get a webhook.
         *
         * @param Pagination $pagination
         * @param string     $resource_id
         * @param string     $event
         *
         * @return stdClass
         */
        public function get(\Moip\Helper\Pagination $pagination = null, $resource_id = null, $event = null)
        {
        }
        /**
         * Mount structure of Webhook List.
         *
         * @param \stdClass $response
         *
         * @return \Moip\Resource\WebhookList Webhook List
         */
        protected function populate(\stdClass $response)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\OrderMinMax\Admin {
    /**
     * Adds meta field to admin product edit section
     *
     * @since 3.12.0
     */
    class MetaFields
    {
        /**
         * Initializing necessary hooks
         *
         * @return void
         * @since 3.12.0
         */
        public function __construct()
        {
        }
        /**
         * Adds simple product meta fields
         *
         * @return void
         * @since 3.12.0
         */
        public function add_simple_product_meta_fields()
        {
        }
        /**
         * Adds variable product meta fields
         *
         * @param int $loop
         * @param array $variation_data
         * @param WP_Post $variation ,
         *
         * @return void
         * @since 3.12.0
         */
        public function add_variable_product_meta_fields(int $loop, array $variation_data, \WP_Post $variation)
        {
        }
    }
    /**
     * Quick and bulk edit manager for dokan min max
     *
     * @since 3.12.0
     */
    class QuickAndBulkEdit
    {
        /**
         * Initializing hooks
         *
         * @since 3.12.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Injecting order min max metadata to product table row.
         *
         * @since 3.12.0
         *
         * @param string $column
         * @param int $product_id
         *
         * @return void
         */
        public function inject_meta_data(string $column, int $product_id)
        {
        }
        /**
         * Renders quick and bulk edit fields
         *
         * @since 3.12.0
         *
         * @return void
         */
        public function render_fields()
        {
        }
        /**
         * Saving product quick edit data
         *
         * @since 3.12.0
         *
         * @param WC_Product $product
         *
         * @return void
         */
        public function save_quick_edit_and_bulk_edit(\WC_Product $product)
        {
        }
        /**
         * Parse data from global variables for quick edit and bulk edit submission
         *
         * @since 3.12.0
         *
         * @return array
         */
        protected function parse_data(): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\OrderMinMax {
    /**
     * Loads assets and templates
     *
     * @since 3.12.0
     */
    class Assets
    {
        const VENDOR_SETTINGS_FORM_VALIDATION = 'order-min-max-vendor-settings-form-validation';
        /**
         * Initializing hooks and template files
         *
         * @since 3.12.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Registering necessary styles
         *
         * @since 3.12.0
         *
         * @return void
         */
        public function register_style(): void
        {
        }
        /**
         * Registering necessary assets
         *
         * @since 3.12.0
         *
         * @return void
         */
        public function register_script(): void
        {
        }
        /**
         * Enqueueing script on product page for WordPress admin
         *
         * @since 3.12.0
         *
         * @return void
         */
        public function enqueue_admin_assets(): void
        {
        }
        /**
         * Adds vendor style and script to vendor dashboard
         *
         * @since 3.12.0
         *
         * @return void
         */
        public function enqueue_vendor_assets(): void
        {
        }
        /**
         * Checks if it is from vendor dashboard product page
         *
         * @since 3.12.0
         *
         * @return bool
         */
        protected function is_vendor_dashboard_product_page(): bool
        {
        }
        /**
         * Checks if it is form vendor dashboard settings/store page
         *
         * @since 3.12.0
         *
         * @return bool
         */
        protected function is_vendor_dashboard_store_page(): bool
        {
        }
        /**
         * Set template path
         *
         * @since 3.12.0
         *
         * @param string $template_path Template path to be set for the template
         * @param string $template Template name to be set for the template
         * @param array $args Arguments to be passed to the template
         *
         * @return string
         */
        public function load_templates(string $template_path, string $template, array $args): string
        {
        }
        /**
         * Necessary localized arguments for this module
         *
         * @param array $default_args Default arguments for localization
         *
         * @return array
         *
         * @since 3.12.0
         */
        public function localized_args(array $default_args): array
        {
        }
    }
    /**
     * OrderMinMax Module block data.
     *
     * @since 3.7.13
     */
    class BlockData
    {
        /**
         * Block Section name.
         *
         * @since 3.7.13
         *
         * @var string
         */
        public $section;
        /**
         * Constructor class.
         *
         * @since 3.7.13
         */
        public function __construct()
        {
        }
        /**
         * Get order-min-max module product block configurations.
         *
         * @since 3.7.13
         *
         * @param array $configuration Configuration array.
         *
         * @return array
         */
        public function get_product_block_configurations(array $configuration = array()): array
        {
        }
        /**
         * Get order-min-max product data for Dokan-pro.
         *
         * @since 3.7.13
         *
         * @param array      $block  Product block data.
         * @param \WC_Product $product Product object.
         *
         * @return array
         */
        public function get_product_block_data(array $block, $product): array
        {
        }
        /**
         * Get order-min-max product data for Dokan-pro.
         *
         * @since 3.7.13
         *
         * @param array      $block  Product block data.
         * @param \WC_Product $product Product object.
         * @param string     $context Context of the request.
         *
         * @return array
         */
        public function get_variable_product_block_data(array $block, $product, string $context): array
        {
        }
        /**
         * Save order-min-max data after REST-API insert or update.
         *
         * @since 3.7.13
         *
         * @param \WC_Product      $product  Inserted object.
         * @param \WP_REST_Request $request  Request object.
         *
         * @return void
         */
        public function set_product_block_data($product, \WP_REST_Request $request): void
        {
        }
    }
    /**
     * A wrapper class to hold module specific constants
     *
     * @since 3.12.0
     */
    class Constants
    {
        /**
         * Script and style handle
         */
        const ORDER_MIN_MAX_ADMIN_STYLE = 'dokan-order-min-max-admin-style';
        const ORDER_MIN_MAX_ADMIN_SCRIPT = 'dokan-order-min-max-admin-script';
        const ORDER_MIN_MAX_VENDOR_SCRIPT = 'dokan-order-min-max-vendor-script';
        const ORDER_MIN_MAX_VENDOR_STYLE = 'dokan-order-min-max-vendor-style';
        /**
         * Admin metabox keys for simple products
         */
        const SIMPLE_PRODUCT_MIN_MAX_WRAPPER = 'dokan_simple_product_min_max_wrapper';
        const SIMPLE_PRODUCT_MIN_QUANTITY = 'min_quantity';
        const SIMPLE_PRODUCT_MAX_QUANTITY = 'max_quantity';
        const SIMPLE_PRODUCT_MESSAGE_SECTION = 'dokan_simple_product_message_section';
        const SIMPLE_PRODUCT_MIN_MAX_NONCE = 'dokan_simple_product_min_max_nonce';
        /**
         * Admin metabox keys for variable products
         */
        const VARIATION_PRODUCT_MIN_MAX_WRAPPER = 'dokan_variation_product_min_max_wrapper';
        const VARIATION_PRODUCT_MIN_QUANTITY = 'variable_min_quantity';
        const VARIATION_PRODUCT_MAX_QUANTITY = 'variable_max_quantity';
        const VARIATION_PRODUCT_MESSAGE_SECTION = 'dokan_variation_product_message_section';
        const VARIATION_PRODUCT_MIN_MAX_NONCE = 'dokan_variation_product_min_max_nonce';
        /**
         * Quick and bulk edit constants
         */
        const QUICK_EDIT_MINIMUM_QUANTITY = 'dokan_order_min_max_quick_edit_minimum_quantity';
        const QUICK_EDIT_MAXIMUM_QUANTITY = 'dokan_order_min_max_quick_edit_maximum_quantity';
        const QUICK_EDIT_META_DATA = 'order-min-max-quick-edit-meta-data';
        /**
         * Vendor bulk edit constants
         *
         * @since 3.12.0
         */
        const BULK_EDIT_VENDOR_MINIMUM_QUANTITY = 'dokan_order_min_max_vendor_bulk_edit_minimum_quantity';
        const BULK_EDIT_VENDOR_MAXIMUM_QUANTITY = 'dokan_order_min_max_vendor_bulk_edit_maximum_quantity';
        const VENDOR_SIMPLE_PRODUCT_METABOX_WRAPPER = 'dokan-order-min-max-product-metabox-wrapper';
        const VENDOR_VARIATION_PRODUCT_METABOX_WRAPPER = 'dokan-order-min-max-variation-product-metabox-wrapper';
        /**
         * Frontend accessible object name
         */
        const ORDER_MIN_MAX_JS_CONSTANT_OBJECT = 'dokan_order_min_max';
        /**
         * Single product meta key
         */
        const SINGLE_PRODUCT_META_KEY = '_dokan_min_max_meta';
        /**
         * Declares Dynamic Constants
         *
         * @since 3.12.0
         *
         * @return void
         */
        public static function dynamic_constants()
        {
        }
        /**
         * Exports all static constants of the class
         *
         * @since 3.12.0
         *
         * @return array
         */
        public static function get_all_static_constants(): array
        {
        }
    }
    /**
     * Saves admin min max data
     *
     * @since 3.12.0
     */
    class DataSaver
    {
        /**
         * Initializing necessary hooks
         *
         * @since 3.12.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Verifies nonce is valid
         *
         * @since 3.12.0
         *
         * @param string $action Nonce action name
         *
         * @return bool
         */
        protected function valid_nonce(string $action): bool
        {
        }
        /**
         * Saving simple product data
         *
         * @since 3.12.0
         *
         * @param int $product_id Product ID
         *
         * @return void
         */
        public function save_simple_product(int $product_id): void
        {
        }
        /**
         * Save single variation min max product
         *
         * @since 3.12.0
         *
         * @param int $product_id Product ID
         * @param int $loop Loop index
         *
         * @return void
         */
        public function save_min_max_single_variation_meta(int $product_id, int $loop): void
        {
        }
        /**
         * Validates submitted data
         *
         * @since 3.12.0
         *
         * @param $loop
         *
         * @return array
         */
        protected function validate_data($loop): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\OrderMinMax\DataSource {
    /**
     * Manages product wise min max settings
     *
     * @since 3.12.0
     */
    class ProductMinMaxSettings
    {
        const MIN_QUANTITY = 'min_quantity';
        const MAX_QUANTITY = 'max_quantity';
        /**
         * Settings will be pulled for this product
         *
         * @since 3.12.0
         *
         * @var \WC_Product|null
         */
        protected $product = null;
        /**
         * Product specific settings
         *
         * @since 3.12.0
         *
         * @var array
         */
        protected $settings = array();
        /**
         * Initializes the instance
         *
         * @param int|WC_Product $product
         *
         * @since 3.12.0
         */
        public function __construct($product)
        {
        }
        /**
         * Minimum Quantity for current product
         *
         * @param string $context Context for which the value is being fetched, default is 'view', possible values are 'view', 'edit'.
         *
         * @return int
         *
         * @since 3.12.0
         */
        public function min_quantity(string $context = 'view'): int
        {
        }
        /**
         * Maximum Quantity for current product
         *
         * @return int Maximum quantity for the product
         *
         * @since 3.12.0
         */
        public function max_quantity(string $context = 'view'): int
        {
        }
        /**
         * Sets data for single product
         *
         * @param array $data
         *
         * @return void
         *
         * @since 3.12.0
         */
        public function set_data(array $data = array())
        {
        }
        /**
         * Fetches data from product meta
         *
         * @return void
         *
         * @since 3.12.0
         */
        public function fetch_data(): void
        {
        }
        /**
         * Sanitizes the data
         *
         * @param array $data
         *
         * @return array
         *
         * @since 3.12.0
         */
        protected function sanitize_data(array $data): array
        {
        }
        /**
         * Generates default settings data
         *
         * @return array
         *
         * @since 3.12.0
         */
        public function get_default_settings(): array
        {
        }
        /**
         * Saves settings
         *
         * @return bool
         *
         * @since 3.12.0
         */
        public function save(): bool
        {
        }
    }
    /**
     * Handles vendor cart amount settings
     *
     * @since 3.12.0
     */
    class StoreMinMaxSettings
    {
        const SETTINGS_BASE_KEY = 'order_min_max';
        const MIN_AMOUNT_KEY = 'min_amount_to_order';
        const MAX_AMOUNT_KEY = 'max_amount_to_order';
        protected $cache = array();
        /**
         * Initializes the object
         *
         * @since 3.12.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Saves vendors cart min max settings
         *
         * @since 3.12.0
         *
         * @param array $store_settings An array of store settings for dokan vendor dashboard
         *
         * @return array
         */
        public function add_vendor_cart_amount_settings(array $store_settings): array
        {
        }
        /**
         * Validates min max amount from store page submission and returns the data
         *
         * @since 3.12.0
         *
         * @return array
         */
        protected function get_valid_min_max_amount_from_submission(): array
        {
        }
        /**
         * Checks if specified vendor data is already fetched
         *
         * @since 3.12.0
         *
         * @param int $vendor_id Vendor ID
         *
         * @return bool
         */
        protected function is_fetched_vendor_data(int $vendor_id = 0): bool
        {
        }
        /**
         * Returns vendor data
         *
         * @since 3.12.0
         *
         * @param int $vendor_id Vendor ID
         *
         * @return array
         */
        protected function get_vendor_data(int $vendor_id = 0)
        {
        }
        /**
         * Returns a valid vendor ID
         *
         * @since 3.12.0
         *
         * @param int $vendor_id
         *
         * @return int
         */
        protected function get_valid_vendor_id(int $vendor_id = 0): int
        {
        }
        /**
         * Fetches min max amount settings data
         *
         * @param int $vendor_id Vendor ID
         *
         * @since 3.12.0
         *
         * @return void
         */
        protected function fetch_min_max_amount_settings(int $vendor_id = 0)
        {
        }
        /**
         * Returns minimum amount to order
         *
         * @since 3.12.0
         *
         * @param int $vendor_id Vendor ID
         * @param string $context Context for which the value is being fetched, default is 'view', possible values are 'view', 'edit'.
         *
         * @return float
         */
        public function get_min_amount_for_order(int $vendor_id = 0, string $context = 'view')
        {
        }
        /**
         * Returns maximum amount to order
         *
         * @since 3.12.0
         *
         * @param int $vendor_id Vendor ID
         * @param string $context Context for which the value is being fetched, default is 'view', possible values are 'view', 'edit'.
         *
         * @return float
         */
        public function get_max_amount_for_order(int $vendor_id = 0, string $context = 'view')
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\OrderMinMax {
    /**
     * OrderMinMax Class.
     *
     * @since 3.5.0
     */
    class Frontend
    {
        /**
         * OrderMinMax Class Constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Cart item quantity min max check.
         *r
         * @since 3.5.0
         *
         * @param int|string $product_quantity Product quantity, default is 1.
         * @param string $cart_item_key   Cart item key.
         * @param mixed  $cart_item      Cart item data.
         *
         * @return int|string
         */
        public function cart_item_quantity_min_max_quantity_check($product_quantity, string $cart_item_key, $cart_item)
        {
        }
        /**
         * Add quantity property to add to cart button on shop loop for simple products.
         *
         * @since 3.5.0
         *
         * @param string      $html    Add to cart link.
         * @param \WC_Product $product Product object.
         *
         * @return string
         */
        public function add_to_cart_link(string $html, \WC_Product $product): string
        {
        }
        /**
         * Add quantity property to add to cart button on shop loop for simple products.
         *
         * @param string      $html    Add to cart link.
         * @param \WC_Product $product Product object.
         *
         * @return array|string|string[]
         */
        public function add_to_cart_minimum_quantity_restriction(string $html, \WC_Product $product)
        {
        }
        /**
         * Returns all queued notices, optionally filtered by a notice type.
         *
         * @since  3.5.0
         *
         * @param string $notice_type Optional. The singular name of the notice type - either error, success or notice.
         *
         * @return array|void
         */
        public function wc_get_notices(string $notice_type = '')
        {
        }
        /**
         * Output any plugin specific error messages
         *
         * We use this instead of wc_print_notices, so we
         * can remove any error notices that aren't from us.
         *
         * @since  3.5.0
         *
         * @return void
         */
        public function output_errors(): void
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\OrderMinMax\Frontend {
    /**
     * Implies restriction based on settings of min max
     *
     * @since 3.12.0
     */
    class CartRestriction
    {
        /**
         * Initializes the object
         *
         * @since 3.12.0
         */
        public function __construct()
        {
        }
        /**
         * Pushes block enabled notices
         *
         * @param \WP_Error $cart_error_object WP_Error object.
         *
         * @return void
         * @since 3.12.0
         */
        protected function push_block_cart_notice(\WP_Error $cart_error_object): void
        {
        }
        /**
         * Pushes legacy cart notices
         *
         * @return void
         * @since 3.12.0
         */
        protected function push_legacy_notices(): void
        {
        }
        /**
         * Validates the entire cart
         *
         * @return bool
         * @since 3.12.0
         */
        protected function validate_entire_cart(): bool
        {
        }
        /**
         * Adds validation for WooCommerce block cart page
         *
         * @param \WP_Error $cart_errors WP_Error object.
         *
         * @return void
         * @since 3.12.0
         */
        public function woocommerce_block_api_validation_restriction(\WP_Error $cart_errors): void
        {
        }
        /**
         * Place order validation check added
         *
         * @since 3.12.0
         *
         * @param array $data Array of data.
         * @param \WP_Error $errors WP_Error object.
         *
         * @return void
         */
        public function after_checkout_validation(array $data, \WP_Error $errors)
        {
        }
        /**
         * Adds notice and checkout restriction to cart page
         *
         * @since 3.12.0
         *
         * @return void
         */
        public function cart_page_restriction(): void
        {
        }
        /**
         * Validate add to cart for customers
         *
         * @param bool $passed_validation True if the item passed validation.
         * @param int $product_id Product ID being validated.
         * @param int $quantity Quantity added to the cart.
         * @param int $variation_id Variation ID being added to the cart.
         *
         * @return bool
         */
        public function validate_add_to_cart(bool $passed_validation, int $product_id, int $quantity, int $variation_id = 0): bool
        {
        }
    }
    /**
     * Manages cart validation
     *
     * @since 3.12.0
     */
    class CartValidator
    {
        /**
         * Additional quantity to check
         *
         * @var array
         *
         * @since 3.12.0
         */
        protected array $add_quantity = array();
        /**
         * Additional amount to check
         *
         * @var array
         *
         * @since 3.12.0
         */
        protected array $add_amount = array();
        /**
         * Sets additional quantity to be used when validating add to cart
         *
         * @param int $product_id Product ID
         * @param int $quantity Quantity to be added
         *
         * @return $this
         */
        public function set_additional_quantity(int $product_id, int $quantity): \WeDevs\DokanPro\Modules\OrderMinMax\Frontend\CartValidator
        {
        }
        /**
         * Gets additional quantity by product if needed elsewhere
         *
         * @param int $product_id Product ID
         *
         * @return int
         */
        public function get_additional_quantity(int $product_id): int
        {
        }
        /**
         * Sets additional amount to be considered for vendor total cart amount
         *
         * @since 3.12.0
         *
         * @param int $vendor_id Vendor ID
         * @param float $amount Additional amount to be considered
         *
         * @return $this
         */
        public function set_additional_amount(int $vendor_id, float $amount): \WeDevs\DokanPro\Modules\OrderMinMax\Frontend\CartValidator
        {
        }
        /**
         * Gets additional cart amount for vendor to be used elsewhere
         *
         * @since 3.12.0
         *
         * @param int $vendor_id Vendor ID
         *
         * @return float
         */
        public function get_additional_amount(int $vendor_id): float
        {
        }
        /**
         * Validates the entire cart before moving forward
         *
         * @since 3.12.0
         *
         * @return bool
         */
        public function validate_cart(): bool
        {
        }
        /**
         * Get the vendor cart instance
         *
         * @since 3.12.0
         *
         * @return VendorCart
         */
        protected function get_vendor_cart(): \WeDevs\DokanPro\Modules\OrderMinMax\Frontend\VendorCart
        {
        }
        /**
         * Validates quantity for all the cart products
         *
         * @since 3.12.0
         *
         * @return bool
         */
        public function validate_quantity(): bool
        {
        }
        /**
         * Validates amount for all the vendors in the cart
         *
         * @since 3.12.0
         *
         * @return bool
         */
        public function validate_amount(): bool
        {
        }
        /**
         * Validates max quantity by product
         *
         * @since 3.12.0
         *
         * @param int $product_id Product ID to validate
         *
         * @return bool
         */
        public function validate_max_quantity(int $product_id): bool
        {
        }
        /**
         * Validate min quantity by product
         *
         * @since 3.12.0
         *
         * @param int $product_id Product ID to validate
         *
         * @return bool
         */
        public function validate_min_quantity(int $product_id): bool
        {
        }
        /**
         * Validates max amount for vendor
         *
         * @since 3.12.0
         *
         * @param int $vendor_id
         *
         * @return bool
         */
        public function validate_max_amount(int $vendor_id): bool
        {
        }
        /**
         * Validate min amount for product
         *
         * @since 3.12.0
         *
         * @param $vendor_id
         *
         * @return bool
         */
        public function validate_min_amount($vendor_id): bool
        {
        }
        /**
         * Empty all additional amount and quantity
         *
         * @since 3.12.0
         *
         * @return CartValidator
         */
        public function flush(): self
        {
        }
    }
    /**
     * Manages hooks for order minimum and maximum quantities and amounts
     *
     * @since 3.12.0
     */
    class IntegrationHooks
    {
        /**
         * IntegrationHooks constructor
         */
        public function __construct()
        {
        }
        /**
         * Filters min max quantity for product
         *
         * @param int         $quantity Order quantity
         * @param \WC_Product $product  Product object
         *
         * @return int
         */
        public function filter_min_max_quantity(int $quantity, \WC_Product $product): int
        {
        }
        /**
         * Filters min max amount on checkout page
         *
         * @param float $amount    Order amount
         * @param int   $vendor_id Vendor ID
         *
         * @return float
         */
        public function filter_min_max_amount(float $amount, int $vendor_id): float
        {
        }
        /**
         * Validates the product for min max quantity and amount rules
         *
         * @param \WC_Product $product Product object
         *
         * @return bool
         */
        protected function validate_product(\WC_Product $product): bool
        {
        }
        /**
         * Validates the product type
         *
         * @param \WC_Product $product Product object
         *
         * @return bool
         */
        protected function validate_product_type(\WC_Product $product): bool
        {
        }
        /**
         * Validates the wholesale status
         *
         * When customer are not checkout then it will validate the wholesale status
         *
         * @param \WC_Product $product Product object
         *
         * @return bool
         */
        protected function validate_product_settings(\WC_Product $product): bool
        {
        }
        /**
         * Validates the cart for product
         *
         * @param \WC_Product $product Product object
         *
         * @return bool
         */
        protected function validate_cart_for_product(\WC_Product $product): bool
        {
        }
        /**
         * Validates the cart for vendor
         *
         * @param int $vendor_id Vendor ID
         *
         * @return bool
         */
        protected function validate_cart_for_vendor(int $vendor_id): bool
        {
        }
        /**
         * Validates the cart item
         *
         * @param array $cart_item Cart item
         *
         * @return bool
         */
        protected function is_valid_cart_item(array $cart_item): bool
        {
        }
        /**
         * Determines if the cart item is a quote item
         *
         * @param array $cart_item Cart item data
         *
         * @return bool
         */
        protected function is_quote_item(array $cart_item): bool
        {
        }
        /**
         * Validates the wholesale quantity based on min or max
         *
         * @param array  $cart_item  Cart item data
         *
         * @return bool
         */
        protected function is_wholesale_item(array $cart_item): bool
        {
        }
        /**
         * Returns the allowed product types
         *
         * @param \WC_Product $product Product object
         *
         * @return array
         */
        protected function get_allowed_product_types(\WC_Product $product): array
        {
        }
        /**
         * Determines if validation should be performed
         *
         * @param int $product_id Product ID
         * @return bool
         */
        protected function should_validate_product_settings(int $product_id): bool
        {
        }
        /**
         * Validates the wholesale settings for a product
         *
         * @param \WC_Product $product
         * @return bool
         */
        protected function validate_wholesale_settings(\WC_Product $product): bool
        {
        }
        /**
         * Determines if an attempt is being made to checkout
         *
         * @return bool
         */
        protected function is_attempt_to_checkout(): bool
        {
        }
    }
    /**
     * Manages cart notice for min max restriction
     */
    class Notice
    {
        /**
         * List of notices
         *
         * @since 3.12.0
         *
         * @var array
         */
        protected $notices = array();
        /**
         * Returns all the notices
         *
         * @since 3.12.0
         *
         * @return array
         */
        public function get_notices(): array
        {
        }
        /**
         * Add notices to notice class variable
         *
         * @since 3.12.0
         *
         * @param string $message
         * @param string $type
         *
         * @return bool
         */
        public function add_notice(string $message, string $type): bool
        {
        }
        /**
         * Checks if same notice is already added
         *
         * @since 3.12.0
         *
         * @param string $notice
         * @param string $type
         *
         * @return bool
         */
        protected function is_notice_available($notice, $type): bool
        {
        }
        /**
         * Returns product with link
         *
         * @since 3.12.0
         *
         * @param $product_id
         *
         * @return string
         */
        protected function get_product_with_link($product_id): string
        {
        }
        /**
         * Minimum quantity violation notice
         *
         * @since 3.12.0
         *
         * @param $product_id
         * @param $type
         *
         * @return void
         */
        public function add_minimum_quantity_violation_notice($product_id, $type = 'error')
        {
        }
        /**
         * Maximum quantity violation notice
         *
         * @since 3.12.0
         *
         * @param $product_id
         * @param $type
         *
         * @return void
         */
        public function add_maximum_quantity_violation_notice($product_id, $type = 'error')
        {
        }
        /**
         * Returns shop with link
         *
         * @since 3.12.0
         * @param $vendor_id
         *
         * @return string
         */
        protected function get_shop_with_link($vendor_id): string
        {
        }
        /**
         * Minimum amount violation notice
         *
         * @since 3.12.0
         *
         * @param $vendor_id
         * @param $type
         *
         * @return void
         */
        public function add_minimum_amount_violation_notice($vendor_id, $type = 'error')
        {
        }
        /**
         * Maximum amount violation notice
         *
         * @since 3.12.0
         *
         * @param $vendor_id
         * @param $type
         *
         * @return void
         */
        public function add_maximum_amount_violation_notice($vendor_id, $type = 'error')
        {
        }
        /**
         * Empty all notices
         *
         * @since 3.12.0
         *
         * @return void
         */
        public function flush()
        {
        }
        /**
         * Allowed html for a link
         *
         * @since 3.12.0
         *
         * @return array
         */
        protected function allowed_html(): array
        {
        }
    }
    /**
     * Segregates cart data for specific vendors
     *
     * @since 3.12.0
     */
    class VendorCart
    {
        /**
         * Products organized by vendor_id and product_id
         *
         * @since 3.12.0
         *
         * @var array
         */
        protected array $products = array();
        /**
         * Total amounts organized by vendor_id
         *
         * @since 3.12.0
         *
         * @var array
         */
        protected array $vendor_totals = array();
        /**
         * Parse cart by vendor
         *
         * @since 3.12.0
         *
         * @param WC_Cart $cart WooCommerce cart object
         */
        protected function parse_cart(\WC_Cart $cart): void
        {
        }
        /**
         * Process individual cart item
         *
         * @since 3.12.0
         *
         * @param string $cart_item_key Unique cart item key
         * @param array $cart_item Cart item data
         */
        protected function process_cart_item(string $cart_item_key, array $cart_item): void
        {
        }
        /**
         * Ensures cart is processed before accessing data
         *
         * @since 3.12.5
         */
        protected function ensure_cart_processed(): void
        {
        }
        /**
         * Fetches total amount of vendor in a customer's cart
         *
         * @since 3.12.0
         *
         * @param int $vendor_id Vendor ID to fetch total amount
         *
         * @return float
         */
        public function get_cart_total_by_vendor(int $vendor_id): float
        {
        }
        /**
         * Fetches quantity of a product already in cart of a specific vendor
         *
         * @since 3.12.0
         *
         * @param int $product_id Product ID to fetch quantity
         *
         * @return int
         */
        public function get_product_quantity(int $product_id): int
        {
        }
        /**
         * Returns list of vendors available in the cart
         *
         * @since 3.12.0
         *
         * @return array
         */
        public function get_vendor_id_list(): array
        {
        }
        /**
         * Returns list of products available in the cart
         *
         * @since 3.12.0
         *
         * @return array
         */
        public function get_product_id_list(): array
        {
        }
        /**
         * Gets cart grouped by vendor
         *
         * @since 3.12.0
         *
         * @return array
         */
        public function get_cart_grouped_by_vendor(): array
        {
        }
        /**
         * Gets a specific vendor's cart product list
         *
         * @since 3.12.0
         *
         * @param int $vendor_id Vendor ID to fetch products
         *
         * @return array
         */
        public function get_cart_products_by_vendor(int $vendor_id): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\OrderMinMax {
    /**
     * OrderMinMax Module Helper.
     *
     * @since 3.7.13
     */
    class Helper
    {
        /**
         * Get the minimum amount notice
         *
         * @since 3.7.13
         *
         * @return string
         */
        public static function get_amount_min_max_notice(): string
        {
        }
        /**
         * Get the minimum quantity notice
         *
         * @since 3.7.13
         *
         * @return string
         */
        public static function get_quantity_min_max_notice(): string
        {
        }
    }
    /**
     * OrderMinMax Class.
     *
     * @since 3.5.0
     */
    class Manager
    {
        /**
         * Min max meta save.
         *
         * @since 3.5.0
         *
         * @param int $product_id Product ID
         *
         * @return void
         */
        public static function save_min_max_meta(int $product_id): void
        {
        }
        /**
         * Save meta validation.
         *
         * @since 3.5.0
         *
         * @param int $product_id Product ID
         *
         * @return bool
         */
        public static function save_meta_validation(int $product_id): bool
        {
        }
        /**
         * Min max meta save.
         *
         * @since 3.5.0
         *
         * @param int $product_id Product ID
         * @param int $loop Loop index
         *
         * @return void
         */
        public static function save_min_max_variation_meta(int $product_id, int $loop): void
        {
        }
        /**
         * Get meta from post.
         *
         * @since 3.5.0
         *
         * @param array $post Post data from $_POST
         *
         * @return array
         */
        public static function get_meta_from_post(array $post): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\OrderMinMax\SettingsApi {
    /**
     * Vendor settings api for OrderMinMax
     *
     * @since 3.7.13
     */
    class Store
    {
        /**
         * Constructor function
         *
         * @since 3.7.13
         */
        public function __construct()
        {
        }
        /**
         * Adds variation min max settings to the vendor dashboard.
         *
         * @since 3.7.13
         *
         * @param array $store_details_tab array of store details tab.
         *
         * @return array
         */
        public function add_min_max_card_to_vendor_settings_api(array $store_details_tab): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\OrderMinMax {
    /**
     * OrderMinMax Class.
     *
     * @since 3.5.0
     */
    class Vendor
    {
        /**
         * OrderMinMax Class Constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Add min max vendor settings.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function vendor_settings(): void
        {
        }
        /**
         * Min max meta save.
         *
         * @since 3.5.0
         *
         * @param int $product_id Product ID
         * @param int $loop      Loop index
         *
         * @return void
         */
        public function save_variation_min_max_data(int $product_id, int $loop): void
        {
        }
        /**
         * Min max meta save.
         *
         * @since 3.5.0
         *
         * @param int $product_id Product ID
         *
         * @return void
         */
        public function save_variation_min_max_ajax_data(int $product_id): void
        {
        }
        /**
         * Dokan get store info by product id. A wrapper for dokan_get_store_info.
         *
         * @since 3.5.0
         *
         * @param int $product_id Product ID
         *
         * @return array
         */
        public function dokan_get_store_info_by_product_id(int $product_id): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\OrderMinMax\Vendor {
    class MetaFields
    {
        /**
         * Initializes the meta fields for vendor
         *
         * @since 3.12.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Adds meta field to the vendor product edit page
         *
         * @since 3.12.0
         *
         * @param \WP_Post $post Product post object
         *
         * @return void
         */
        public function add_simple_product_meta_fields(\WP_Post $post)
        {
        }
        /**
         * Adds meta field to the vendor product edit page
         *
         * @param int $loop Loop index
         * @param array $variation_data Variation data array
         * @param \WP_Post $variation Variation post object
         *
         * @return void
         */
        public function add_variation_product_meta_fields(int $loop, array $variation_data, \WP_Post $variation): void
        {
        }
    }
    /**
     * Quick and bulk edit for dokan order min max
     *
     * @since 3.12.0
     */
    class QuickAndBulkEdit
    {
        /**
         * Initializing the hooks
         *
         * @since 3.12.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Injecting quick edit data
         *
         * @since 3.12.0
         *
         * @param string $column Column name of the product
         * @param int $product_id Product ID of the product
         *
         * @return void
         */
        public function inject_meta_data(string $column, int $product_id): void
        {
        }
        /**
         * Render quick edit form fragment
         *
         * @since 3.12.0
         *
         * @param int $product_id Product ID of the product
         *
         * @return void
         */
        public function render_quick_edit_fields(int $product_id)
        {
        }
        /**
         * Render bulk edit form fragment
         *
         * @since 3.12.0
         *
         * @return void
         */
        public function render_bulk_edit_fields(): void
        {
        }
        /**
         * Saves quick edit data for product
         *
         * @since 3.12.0
         *
         * @param int $product_id Product ID of the product
         *
         * @return void
         */
        public function save_quick_edit(int $product_id): void
        {
        }
        /**
         * Save bulk edit data
         *
         * @param \WC_Product $product Product object
         *
         * @return void
         */
        public function save_bulk_edit(\WC_Product $product): void
        {
        }
        /**
         * Parses quick and bulk edit data from global request object
         *
         * @since 3.12.0
         *
         * @return array
         */
        protected function parse_quick_edit_data(): array
        {
        }
        /**
         * Parses bulk edit data
         *
         * @since 3.12.0
         *
         * @return array
         */
        protected function parse_bulk_edit_data(): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\OrderMinMax {
    /**
     * Class for Request A Quote module integration.
     *
     * @since 3.5.0
     *
     * @property-read MetaFields $admin_meta_fields Admin Meta Fields
     * @property-read QuickAndBulkEdit $quick_and_bulk_edit Quick and Bulk Edit
     * @property-read Assets $assets Assets
     * @property-read VendorQuickAndBulkEdit $vendor_quick_and_bulk_edit Vendor Quick and Bulk Edit
     * @property-read VendorMetaFields $vendor_meta_fields Vendor Meta Fields
     * @property-read DataSaver $data_saver Data Saver
     * @property-read Vendor $vendor Vendor
     * @property-read Frontend $frontend Frontend
     * @property-read IntegrationHooks $integration_hooks Frontend Hooks
     * @property-read BlockData $block_data Block Data
     * @property-read Store $store Store
     * @property-read StoreMinMaxSettings $store_min_max_settings Store Min Max Settings
     * @property-read VendorCart $vendor_cart Vendor Cart
     * @property-read CartValidator $cart_validator Cart Validator
     * @property-read CartRestriction $cart_restriction Cart Restriction
     * @property-read Notice $cart_notice Cart Notice
     */
    class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Class constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Init the module.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function init()
        {
        }
        /**
         * Executes admin only logic
         *
         * @since 3.12.0
         */
        public function admin_only_instances()
        {
        }
        /**
         * Initiate all classes
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function create_instances()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\PayPalMarketplace\Abstracts {
    /**
     * Class WebhookHandler
     * @package WeDevs\Dokan\Gateways\PayPal\Interfaces
     *
     * @since 3.3.0
     *
     * @author weDevs
     */
    abstract class WebhookEventHandler
    {
        /**
         * Handle the event
         *
         * @since 3.3.0
         *
         * @return void
         */
        abstract public function handle();
        /**
         * Set event
         *
         * @param $event
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function set_event($event)
        {
        }
        /**
         * Get event
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function get_event()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\PayPalMarketplace\BackgroundProcess {
    class DelayDisburseFund extends \WC_Background_Process
    {
        /**
         * Initiate new background process.
         */
        public function __construct()
        {
        }
        /**
         * Dispatch updater.
         *
         * Updater will still run via cron job if this fails for any reason.
         */
        public function dispatch()
        {
        }
        /**
         * Handle cron healthcheck
         *
         * Restart the background process if not already running
         * and data exists in the queue.
         */
        public function handle_cron_healthcheck()
        {
        }
        /**
         * Schedule fallback event.
         */
        protected function schedule_event()
        {
        }
        /**
         * Task
         *
         * Override this method to perform any actions required on each
         * queue item. Return the modified item for further processing
         * in the next pass through. Or, return false to remove the
         * item from the queue.
         *
         * @param object $vendor Update callback function.
         * @return string|bool
         */
        protected function task($args)
        {
        }
        /**
         * Complete
         *
         * Override if applicable, but ensure that the below actions are
         * performed, or, call parent::complete().
         */
        protected function complete()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\PayPalMarketplace\Cart {
    /**
     * Class CartHandler
     *
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace\Cart
     *
     * @since 3.3.0
     */
    class CartHandler
    {
        /**
         * Gateway instance.
         *
         * @var \WeDevs\DokanPro\Modules\PayPalMarketplace\PaymentMethods\PayPal
         */
        protected $gateway;
        /**
         * CartHandler constructor.
         *
         * @since DOKAN_LITE_SINCE
         */
        public function __construct()
        {
        }
        /**
         * Returns an instantiated gateway.
         *
         * @since 3.11.4
         *
         * @return \WeDevs\DokanPro\Modules\PayPalMarketplace\PaymentMethods\PayPal
         */
        protected function gateway()
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Checkout page script added
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function payment_scripts()
        {
        }
        /**
         * Add bn code and merchant ids to paypal script
         *
         * @param $tag
         * @param $handle
         * @param $source
         *
         * @return string
         */
        public function add_bn_code_to_script($tag, $handle, $source)
        {
        }
        /**
         * Display PayPal button on the checkout page order review.
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function display_paypal_button()
        {
        }
        /**
         * Validation after checkout
         *
         * @param $data
         * @param $errors
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function after_checkout_validation($data, $errors)
        {
        }
        /**
         * If PayPal Marketplace is only payment gateway available and vendor is not connected with PayPal, product can not be added to cart for that vendor
         *
         * @param bool $passed
         * @param int $product_id
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public function validate_vendor_is_connected($passed, $product_id)
        {
        }
    }
    /**
     * Class CartManager
     *
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace\Cart
     *
     * @since 3.3.0
     */
    class CartManager
    {
        /**
         * Make paypal sdk url based on settings
         *
         * @since 3.3.0
         *
         * @return string
         */
        public static function get_paypal_sdk_url()
        {
        }
        /**
         * Check if ucc mode is enabled for all seller in the cart
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public static function is_ucc_enabled_for_all_seller_in_cart()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\PayPalMarketplace\Factories {
    /**
     * Class EventFactory
     *
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace\Factories
     *
     * @since 3.3.0
     */
    class EventFactory
    {
        /**
         * Call the defined static methods
         *
         * @param $name
         * @param $arguments
         *
         * @since 3.3.0
         *
         * @return mixed
         * @throws DokanException
         */
        public static function __callStatic($name, $arguments)
        {
        }
        /**
         * Create required event class instance
         *
         * @param $event
         *
         * @since 3.3.0
         *
         * @return WebhookEventHandler|void instance
         * @throws DokanException
         */
        public static function get($event)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\PayPalMarketplace\Gateways {
    /**
     * Class RegisterGateways
     *
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace\Gateways
     *
     * @since 3.3.0
     */
    class RegisterGateways
    {
        /**
         * RegisterGateways constructor.
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Register payment gateway
         *
         * @since 3.3.0
         *
         * @param array $gateways
         *
         * @return array
         */
        public function register_gateway($gateways)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\PayPalMarketplace {
    /**
     * Class Helper
     *
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace
     *
     * @since 3.3.0
     */
    class Helper
    {
        /**
         * Get PayPal gateway id
         *
         * @since 3.3.0
         *
         * @return string
         */
        public static function get_gateway_id()
        {
        }
        /**
         * Get settings of the gateway
         *
         * @param string|null $key
         *
         * @since 3.3.0
         *
         * @return mixed|void
         */
        public static function get_settings($key = null)
        {
        }
        /**
         * Check whether it's enabled or not
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public static function get_gateway_title()
        {
        }
        /**
         * Get BN Code
         *
         * @since 3.3.3
         *
         * @return string
         */
        public static function get_bn_code()
        {
        }
        /**
         * Check whether it's enabled or not
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public static function is_enabled()
        {
        }
        /**
         * Check if this gateway is enabled and ready to use
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public static function is_ready()
        {
        }
        /**
         * Check if this gateway is enabled and ready to use
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public static function is_api_ready()
        {
        }
        /**
         * Check if the seller is enabled for receive paypal payment
         *
         * @param $seller_id
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public static function is_seller_enable_for_receive_payment($seller_id)
        {
        }
        /**
         * Check whether the gateway in test mode or not
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public static function is_test_mode()
        {
        }
        /**
         * Check whether the test mode is enabled or not
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public static function is_debug_log_enabled()
        {
        }
        /**
         * Check whether Unbranded Credit Card mode is enabled or not
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public static function is_ucc_mode_allowed()
        {
        }
        /**
         * Unbranded credit card mode is allowed or not
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public static function is_ucc_enabled()
        {
        }
        /**
         * Get advanced credit card debit card supported countries (UCC/Unbranded payments)
         *
         * @see https://developer.paypal.com/docs/business/checkout/reference/currency-availability-advanced-cards/
         *
         * @since 3.3.0
         *
         * @return array
         */
        public static function get_advanced_credit_card_debit_card_supported_countries()
        {
        }
        /**
         * Get branded payment supported countries
         *
         * @since 3.3.0
         *
         * @return array
         */
        public static function get_branded_payment_supported_countries()
        {
        }
        /**
         * Get Paypal supported currencies except US
         * for advanced credit card debit card
         *
         * @see https://developer.paypal.com/docs/business/checkout/reference/currency-availability-advanced-cards/
         *
         * @since 3.3.0
         *
         * @return array
         */
        public static function get_advanced_credit_card_debit_card_non_us_supported_currencies()
        {
        }
        /**
         * Get US supported currencies for advanced credit card debit card
         *
         * @see https://developer.paypal.com/docs/business/checkout/reference/currency-availability-advanced-cards/
         *
         * @since 3.3.0
         *
         * @return array
         */
        public static function get_advanced_credit_card_debit_card_us_supported_currencies()
        {
        }
        /**
         *
         * @see https://developer.paypal.com/docs/platforms/develop/currency-codes/
         *
         * @since 3.3.0
         *
         * @return array
         */
        public static function get_supported_currencies()
        {
        }
        /**
         * Get advanced credit card debit card supported currencies
         *
         * @see https://developer.paypal.com/docs/business/checkout/reference/currency-availability-advanced-cards/
         *
         * @param $country_code
         *
         * @since 3.3.0
         *
         * @return array|bool
         */
        public static function get_advanced_credit_card_debit_card_supported_currencies($country_code)
        {
        }
        /**
         * Get PayPal product type based on country
         *
         * @param $country_code
         *
         * @since 3.3.0
         *
         * @return bool|string
         */
        public static function get_product_type($country_code)
        {
        }
        /**
         * @since 3.3.0
         * @param bool|null $test_mode
         * @return string
         */
        public static function get_seller_merchant_id_key($test_mode = null)
        {
        }
        /**
         * @since 3.3.0
         * @param bool|null $test_mode
         * @return string
         */
        public static function get_seller_enabled_for_received_payment_key($test_mode = null)
        {
        }
        /**
         * @since 3.3.0
         * @param bool|null $test_mode
         * @return string
         */
        public static function get_seller_marketplace_settings_key($test_mode = null)
        {
        }
        /**
         * @since 3.3.0
         * @param bool|null $test_mode
         * @return string
         */
        public static function get_seller_payments_receivable_key($test_mode = null)
        {
        }
        /**
         * @since 3.3.0
         * @param bool|null $test_mode
         * @return string
         */
        public static function get_seller_primary_email_confirmed_key($test_mode = null)
        {
        }
        /**
         * @since 3.3.0
         * @param bool|null $test_mode
         * @return string
         */
        public static function get_seller_enable_for_ucc_key($test_mode = null)
        {
        }
        /**
         *
         * @since 3.3.0
         * @param int $seller_id
         * @return string
         */
        public static function get_seller_merchant_id($seller_id)
        {
        }
        /**
         *
         * @since 3.3.0
         * @param int $seller_id
         * @return string
         */
        public static function get_seller_enabled_for_received_payment($seller_id)
        {
        }
        /**
         * Log PayPal error data with debug id
         *
         * @param int $id
         * @param WP_Error $error
         * @param string $meta_key
         *
         * @param string $context
         *
         * @since 3.3.0
         *
         * @return void
         */
        public static function log_paypal_error($id, $error, $meta_key, $context = 'post')
        {
        }
        /**
         * Get user id by merchant id
         *
         * @param $merchant_id
         *
         * @since 3.3.0
         *
         * @return int
         */
        public static function get_user_id_by_merchant_id($merchant_id)
        {
        }
        /**
         * Get Percentage of from a price
         *
         * @param $price
         * @param $extra_amount
         *
         * @since 3.3.0
         *
         * @return float|int
         */
        public static function get_percentage($price, $extra_amount)
        {
        }
        /**
         * Get list of supported webhook events
         *
         * @since 3.3.0
         *
         * @return array
         */
        public static function get_supported_webhook_events()
        {
        }
        /**
         * Get webhook events for notification
         *
         * @since 3.3.0
         *
         * @return array
         */
        public static function get_webhook_events_for_notification()
        {
        }
        /**
         * Get PayPal client id
         *
         * @since 3.3.0
         *
         * @return string
         */
        public static function get_client_id()
        {
        }
        /**
         * Get PayPal client secret key
         *
         * @since 3.3.0
         *
         * @return string
         */
        public static function get_client_secret()
        {
        }
        /**
         * Get Paypal partner id
         *
         * @since 3.3.0
         *
         * @return string
         */
        public static function get_partner_id()
        {
        }
        /**
         * Get client id
         *
         * @since 3.3.0
         *
         * @return string
         */
        public static function get_button_type()
        {
        }
        /**
         * Get Cart item quantity exceeded error message
         *
         * @since 3.3.0
         *
         * @return string
         */
        public static function get_max_quantity_error_message()
        {
        }
        /**
         * Get Payment Action (capture or authorize)
         *
         * @since 3.3.0
         *
         * @return string
         */
        public static function get_disbursement_mode()
        {
        }
        /**
         * Get disbersement delay period
         *
         * @since 3.3.0
         *
         * @return int
         */
        public static function get_disbursement_delay_period()
        {
        }
        /**
         * Get marketplace logo url
         *
         * @since 3.3.0
         *
         * @return string
         */
        public static function get_marketplace_logo()
        {
        }
        /**
         * Check if non-connected sellers sees notice on their dashboard to connect their PayPal account
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public static function display_notice_on_vendor_dashboard()
        {
        }
        /**
         * Check if non-connected sellers gets announcement to connect their PayPal account
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public static function display_announcement_to_non_connected_sellers()
        {
        }
        /**
         * Get Connect announcement interval
         *
         * @since DOKAN_PRO_SiNCE
         *
         * @return int
         */
        public static function non_connected_sellers_display_notice_intervals()
        {
        }
        /**
         * Get webhook key
         *
         * @since 3.3.0
         *
         * @return string
         */
        public static function get_webhook_key()
        {
        }
        /**
         * Get human readable error message
         *
         * @since 3.3.0
         * @param WP_Error $error
         * @return mixed|string
         */
        public static function get_error_message(\WP_Error $error)
        {
        }
        /**
         * Include module template
         *
         * @since 3.3.0
         *
         * @param string $name template file name
         * @param array  $args
         *
         * @return void
         */
        public static function get_template($name, $args = [])
        {
        }
        /**
         * Check whether subscription module is enabled or not
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public static function has_vendor_subscription_module()
        {
        }
        /**
         * Check if the order is a subscription order
         *
         * @param WC_Product|int $product
         *
         * @since 3.3.0
         *
         * @return bool
         **/
        public static function is_vendor_subscription_product($product)
        {
        }
        /**
         * Get vendor id by subscriptoin id
         *
         * @since 3.3.0
         *
         * @param string $subscription_id
         *
         * @return int
         */
        public static function get_vendor_id_by_subscription($subscription_id)
        {
        }
        /**
         * Create product request for Paypal
         *
         * @param int|WC_Product $product_pack
         *
         * @since 3.3.7
         *
         * @return string|\WP_Error
         */
        public static function create_product_in_paypal($product_pack)
        {
        }
        /**
         * Create product plan request for Paypal
         *
         * @param int|WC_Product $product
         * @param int|\WC_Order|null $order
         *
         * @see https://developer.paypal.com/docs/api/subscriptions/v1/#plans_create
         *
         * @since 3.3.7
         *
         * @return void|\WP_Error
         */
        public static function create_plan_in_paypal($product, $order = null)
        {
        }
        /**
         * Get paypal formatted billing cycles from product id
         *
         * @param int $product_id Product ID
         * @param \WC_Order|int $order Order ID
         * @param int|null $vendor_id Vendor ID
         *
         * @see https://developer.paypal.com/docs/api/subscriptions/v1/#definition-billing_cycle
         *
         * @since 3.3.7
         *
         * @return WP_Error|array
         */
        protected static function get_billing_cycles($product_id, $order, $vendor_id = null)
        {
        }
        /**
         * Format and make a complete billing cycle data
         *
         * @see https://developer.paypal.com/docs/api/subscriptions/v1/#definition-billing_cycle
         *
         * @param array $data holds all the necessary param to make the billing cycle data
         *
         * @return array
         */
        public static function format_subscription_billing_cycle_data($data)
        {
        }
        /**
         * Frequency validation
         *
         * @see https://developer.paypal.com/docs/api/subscriptions/v1/#definition-frequency
         *
         * @param string $trial_interval_unit
         * @param int $trial_interval_count
         *
         * @since 3.3.7
         *
         * @return int
         */
        public static function validate_subscription_frequency($trial_interval_unit, $trial_interval_count)
        {
        }
        /**
         * Set Order status to Cancelled with an order note
         *
         * @param \WC_Order $order
         * @param string $status
         * @param string|null $note
         *
         * @since 3.3.7
         *
         * @return void
         */
        public static function update_order_status($order, $status = 'cancelled', $note = null)
        {
        }
        /**
         * Validates cart contents to ensure they're allowed to be paid through Stripe Express.
         *
         * @since 3.11.4
         *
         * @return bool
         */
        public static function validate_cart_items(): bool
        {
        }
    }
    /**
     * @since 3.5.4
     */
    class Hooks
    {
        /**
         * Class constructor
         */
        public function __construct()
        {
        }
        /**
         * For PayPal Marketplace, tax and shipping fee recipient is seller
         *
         * @since 3.5.4
         *
         * @param string $recipient
         * @param int $order_id
         *
         * @return mixed|string
         */
        public function tax_fee_recipient($recipient, $order_id)
        {
        }
        /**
         * For PayPal Marketplace, tax and shipping fee recipient is seller
         *
         * @since 3.5.4
         *
         * @param string $recipient
         * @param int $order_id
         *
         * @return mixed|string
         */
        public function shipping_fee_recipient($recipient, $order_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\PayPalMarketplace\Order {
    /**
     * Class Ajax
     * @package WeDevs\Dokan\Gateways\PayPal
     *
     * @since 3.3.0
     *
     * @author weDevs
     */
    class OrderController
    {
        /**
         * Ajax constructor.
         *
         * @since 3.3.0
         */
        public function __construct()
        {
        }
        /**
         * Create order on paypal
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function create_order()
        {
        }
        /**
         * Capture Payment
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function capture_payment()
        {
        }
        /**
         * Handle capture payment/store data
         *
         * @param $order_id
         * @param $paypal_order_id
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function handle_capture_payment_validation($order_id, $paypal_order_id)
        {
        }
        /**
         * @param int $order_id
         * @param string $old_status
         * @param string $new_status
         */
        public function order_status_changed($order_id, $old_status, $new_status)
        {
        }
        /**
         * This method will add queue for to be disburse payments
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function disburse_delayed_payment()
        {
        }
        /**
         * This method will add metadata param
         *
         * @param $query
         * @param $query_vars
         *
         * @since 3.3.0
         *
         * @return mixed
         */
        public function handle_custom_query_var($query, $query_vars)
        {
        }
        /**
         * Do the necessary validation
         *
         * @param $post_data
         *
         * @since 3.3.0
         *
         * @return int|string
         */
        public function do_validation()
        {
        }
    }
    //todo: send some task to background process
    /**
     * Class OrderManager
     * @package WeDevs\Dokan\Gateways\PayPal
     *
     * @since 3.3.0
     * @author weDevs
     */
    class OrderManager
    {
        /**
         * This method will check if charged is captured via payment gateway
         *
         * @param \WC_Order $order
         *
         * @return bool
         */
        public static function is_charge_captured($order)
        {
        }
        /**
         * Make purchase unit data
         *
         * @param \WC_Order $order
         *
         * @see https://developer.paypal.com/docs/api/orders/v2/#definition-purchase_unit_request
         *
         * @return array
         */
        public static function make_purchase_unit_data(\WC_Order $order)
        {
        }
        /**
         * Make vendor subscription purchase unit data
         *
         * @param \WC_Order $order
         *
         * @see https://developer.paypal.com/docs/api/orders/v2/#definition-purchase_unit_request
         *
         * @since 3.3.7
         *
         * @return array
         */
        public static function make_subscription_purchase_unit_data(\WC_Order $order)
        {
        }
        /**
         * Get shipping address as paypal format
         *
         * @param \WC_Order $order
         *
         * @param bool $payer
         *
         * @return array
         */
        public static function get_shipping_address(\WC_Order $order, $payer = false)
        {
        }
        /**
         * Get product items as PayPal format
         *
         * NB: PayPal check all the values with item qty and item value and match with the main order value.
         * So if the shipping and tax fee recipient is admin then
         * we are dividing the tax total and shipping total based on no of items in a order.
         *
         * @param $order
         *
         * @return array
         */
        public static function get_product_items(\WC_Order $order)
        {
        }
        /**
         * Get tax amount
         *
         * @param $order
         *
         * @return int
         */
        public static function get_tax_amount(\WC_Order $order)
        {
        }
        /**
         * Is order has negative fee applied.
         *
         * @since 3.10.4
         *
         * @param \WC_Order $order Order.
         *
         * @return bool
         */
        public static function is_order_has_negative_fees(\WC_Order $order): bool
        {
        }
        /**
         * Get Lot Discount
         *
         * @param \WC_Order $order
         *
         * @since 3.3.0
         *
         * @return float
         */
        public static function get_lot_discount(\WC_Order $order)
        {
        }
        /**
         * Get Minimum Order Discount
         *
         * @param \WC_Order $order
         *
         * @since 3.3.0
         *
         * @return float
         */
        public static function get_minimum_order_discount(\WC_Order $order)
        {
        }
        /**
         * @param $purchase_unit array
         * @param $paypal_order_id string
         */
        public static function handle_order_complete_status(&$purchase_units, $paypal_order_id)
        {
        }
        /**
         * Store each order capture id
         *
         * @param array $purchase_units
         * @param \WC_Order $order
         *
         * @since 3.3.0
         *
         * @return void
         */
        protected static function store_capture_payment_data(&$purchase_units, \WC_Order $order)
        {
        }
        /**
         * Handle vendor balance and withdraw request
         *
         * @param array $withdraw_data
         *
         * @since 3.3.0
         *
         * @return bool
         */
        protected static function handle_vendor_balance(&$withdraw_data)
        {
        }
        /**
         * Insert withdraw data to vendor balance
         *
         * @param array $withdraw
         *
         * @since 3.3.0
         *
         * @return bool|WP_Error true on success, instance of WP_Error on error
         */
        protected static function insert_into_vendor_balance(&$withdraw)
        {
        }
        /**
         * This method will entry vendors withdraw entries
         *
         * @param array $withdraw
         * @param bool $insert_now
         *
         * @since 3.3.0
         *
         * @return WP_Error|bool true on success, WP_Error instance otherwise
         */
        public static function insert_vendor_withdraw_balance(&$withdraw, $insert_now = false)
        {
        }
        /**
         * @param \WC_Order|int $order
         *
         * @since 3.3.0
         *
         * @return array
         */
        public static function get_refund_ids_by_order($order)
        {
        }
        /**
         * Do not call this method directly
         *
         * @param \WC_Order $order
         *
         * @since 3.3.0
         *
         * @return void
         */
        public static function _disburse_payment($order)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\PayPalMarketplace\PaymentMethods {
    /**
     * Class PayPal
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace\PaymentMethods
     *
     * @since 3.3.0
     */
    class PayPal extends \WC_Payment_Gateway
    {
        /**
         * Test mode flag
         *
         * @since 3.3.0
         *
         * @var string
         */
        public $test_mode;
        /**
         * App user
         *
         * @since 3.3.0
         *
         * @var string
         */
        public $app_user;
        /**
         * App password
         *
         * @since 3.3.0
         *
         * @var string
         */
        public $app_pass;
        /**
         * App id
         *
         * @since 3.3.0
         *
         * @var string
         */
        public $app_id;
        /**
         * Test app user
         *
         * @since 3.3.0
         *
         * @var string
         */
        public $test_app_user;
        /**
         * Test app password
         *
         * @since 3.3.0
         *
         * @var string
         */
        public $test_app_pass;
        /**
         * Debug flag
         *
         * @since 3.3.0
         *
         * @var string
         */
        public $debug;
        /**
         * Constructor for the gateway.
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Init essential fields
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function init_fields()
        {
        }
        /**
         * Initialise Gateway Settings Form Fields
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
        /**
         * Initialize necessary actions
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Check if this gateway is enabled and available in the user's country
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public function is_valid_for_use()
        {
        }
        /**
         * Display information in frontend
         * after checkout process button
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function payment_fields()
        {
        }
        /**
         * Process the payment and return the result
         *
         * @param int $order_id
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function process_payment($order_id)
        {
        }
        /**
         * Get the state to send to paypal
         *
         * @param string $cc
         * @param string $state
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_paypal_state($cc, $state)
        {
        }
        /**
         * Admin options with extra information
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function admin_options()
        {
        }
        /**
         * Admin script
         *
         * @since DOKAN_SINCE_LITE
         *
         * @return void
         */
        public function admin_script()
        {
        }
        /**
         * Process admin options
         *
         * @since 3.3.0
         *
         * @return bool|void
         */
        public function process_admin_options()
        {
        }
        /**
         * Check if this payment method is available with conditions
         *
         * @since 3.3.0
         * @since 3.11.4 Added additional validation with cart item to determined that vendor can use this payment gateway or not.
         * @since 3.11.4 Added filter to modify the availability of the Stripe Express payment gateway.
         *
         * @return bool
         */
        public function is_available()
        {
        }
        /**
         * Return whether or not this gateway still requires setup to function.
         *
         * When this gateway is toggled on via AJAX, if this returns true a
         * redirect will occur to the settings page instead.
         *
         * @since 3.3.0
         * @return bool
         */
        public function needs_setup(): bool
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\PayPalMarketplace {
    /**
     * Class Refund
     * @package WeDevs\DokanPro\Payment\Paypal
     *
     * @see https://developer.paypal.com/docs/platforms/manage-risk/issue-refund/
     *
     * @since 3.3.0
     *
     * @author weDevs
     */
    class Refund
    {
        /**
         * Refund constructor.
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Process refund request
         *
         * @param $refund
         *
         * @return void
         * @throws \Exception
         * @since 3.3.0
         */
        public function process_refund($refund)
        {
        }
        /**
         * Recalculate gateway fee after a refund.
         *
         * @param $refund \WeDevs\DokanPro\Refund\Refund
         * @param $args array
         * @param $vendor_refund float
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function update_gateway_fee($refund, $args, $vendor_refund)
        {
        }
        /**
         * Withdraw entry for automatic refund as debit
         *
         * @param $refund \WeDevs\DokanPro\Refund\Refund
         * @param $args array
         * @param $vendor_refund float
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function add_vendor_withdraw_entry($refund, $args, $vendor_refund)
        {
        }
        /**
         * Set vendor refund amount as paypal refund amount
         *
         * @param $vendor_refund float
         * @param $args array
         * @param $refund \WeDevs\DokanPro\Refund\Refund
         *
         * @since 3.3.0
         *
         * @return float
         */
        public function vendor_refund_amount($vendor_refund, $args, $refund)
        {
        }
        /**
         * Excludes Paypal marketplace from auto process API refund.
         *
         * @since 3.5.0
         *
         * @param array $gateways
         *
         * @return array
         */
        public function exclude_from_auto_process_api_refund($gateways)
        {
        }
    }
    /**
     * Class ReverseWithdrawal
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace
     */
    class ReverseWithdrawal
    {
        /**
         * Class constructor
         *
         * @since 3.6.1
         */
        public function __construct()
        {
        }
        /**
         * Remove PayPal Marketplace Checkout Validations
         *
         * @since DOKAN_SINCE
         *
         * @param bool $escape
         * @param array $cart_item
         *
         * @return bool
         */
        public function remove_gateway_validations($escape, $cart_item)
        {
        }
        /**
         * Get admin partner id
         *
         * @since DOKAN_SINCE
         *
         * @param string $merchant_id
         * @param int $product_id
         *
         * @return string
         */
        public function get_merchant_id($merchant_id, $product_id)
        {
        }
        /**
         * Get admin partner id
         *
         * @since DOKAN_SINCE
         *
         * @param string $merchant_id
         * @param \WC_Abstract_Order $order
         *
         * @return string
         */
        public function purchase_unit_merchant_id($merchant_id, $order)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\PayPalMarketplace\Utilities {
    /**
     * Class Processor
     *
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace\Utilities
     *
     * @since 3.3.0
     */
    class Processor
    {
        /**
         * Instance of self
         *
         * @var Processor
         */
        protected static $instance = null;
        /**
         * @var bool
         */
        protected $test_mode = false;
        /**
         * @var string
         */
        protected $api_base_url = 'https://api.paypal.com/';
        /**
         * @var array
         */
        protected $additional_request_header = [];
        /**
         * Processor constructor.
         *
         * @since 3.3.0
         */
        protected function __construct()
        {
        }
        /**
         * Initialize Processor() class
         *
         * @since 3.3.0
         *
         * @return Processor
         */
        public static function init()
        {
        }
        /**
         * Create partner referral
         *
         * @see https://developer.paypal.com/docs/api/partner-referrals/v2/#partner-referrals_create
         *
         * @param $vendor_email_address
         * @param $tracking_id
         * @param array $products
         *
         * @since 3.3.0
         *
         * @return string|WP_Error
         */
        public function create_partner_referral($vendor_email_address, $tracking_id, $products = ['EXPRESS_CHECKOUT'])
        {
        }
        /**
         * Get merchant ID from tracking id
         *
         * @param $tracking_id
         * @since 3.3.0
         * @return string|WP_Error
         */
        public function get_merchant_id($tracking_id)
        {
        }
        /**
         * Get merchant status
         *
         * @param string $merchant_id
         * @since 3.3.0
         * @return array|WP_Error
         */
        public function get_merchant_status($merchant_id)
        {
        }
        /**
         * Get order details by order id
         *
         * @param $order_id
         * @since 3.3.0
         * @return array|WP_Error
         */
        public function get_order($order_id)
        {
        }
        /**
         * Create order with details in PayPal
         *
         * @param $order_data
         * @since 3.3.0
         * @return array|WP_Error
         */
        public function create_order($order_data)
        {
        }
        /**
         * Capture payment
         *
         * @see https://developer.paypal.com/docs/api/payments/v2/#captures
         *
         * @param string $order_id PayPal Order ID
         *
         * @since 3.3.0
         *
         * @return array|bool|WP_Error
         */
        public function capture_payment($order_id)
        {
        }
        /**
         * Disburse payment to a vendor
         *
         * @see https://developer.paypal.com/docs/api/referenced-payouts/v1/#referenced-payouts-items
         *
         * @param array $data
         *
         * @since 3.3.0
         *
         * @return array|WP_Error
         */
        public function create_referenced_payout($data)
        {
        }
        /**
         * Get all registered webhooks
         *
         * @see https://developer.paypal.com/docs/api/webhooks/v1/#webhooks_list
         *
         * @since 3.3.0
         *
         * @return array|WP_Error
         */
        public function get_webhooks()
        {
        }
        /**
         * Create webhook on PayPal
         *
         * @param $webhook_url
         * @param $event_types
         *
         * @since 3.3.0
         * @return array|WP_Error
         */
        public function create_webhook($webhook_url, $event_types)
        {
        }
        /**
         * @return bool|WP_Error
         * @since 3.3.0
         */
        public function delete_webhook($id)
        {
        }
        public function verify_webhook_request($data)
        {
        }
        /**
         * Get access token
         *
         * @return string|WP_Error
         * @since 3.3.0
         */
        public function get_access_token()
        {
        }
        /**
         * Create access token
         *
         * @return string|WP_Error
         * @since 3.3.0
         */
        public function create_access_token()
        {
        }
        /**
         * Make paypal full url
         *
         * @param $path
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function make_paypal_url($path)
        {
        }
        /**
         * Send get request
         *
         * @param $url
         *
         * @return array|mixed|WP_Error
         */
        public function get_request($url)
        {
        }
        /**
         * Make request
         *
         * @param array $data
         *
         * @since 3.3.0
         * @return array|WP_Error
         */
        //public function make_request( $url, $data = [], $method = 'post', $header = true, $content_type_json = true, $request_with_token = true ) {
        public function make_request($data = [])
        {
        }
        /**
         * Headers data for curl request
         *
         * @param bool $content_type_json
         * @param bool $request_with_token
         *
         * @since 3.3.0
         * @return array|WP_Error
         */
        public function get_header($content_type_json = true, $request_with_token = true)
        {
        }
        /**
         * Get base64 encoded authorization data
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_authorization_data()
        {
        }
        /**
         * Get generated client token
         *
         * @since 3.3.0
         * @return string|WP_Error
         */
        public function get_generated_client_token()
        {
        }
        /**
         * Generate a client token for your buyer
         *
         * @see https://developer.paypal.com/docs/business/checkout/advanced-card-payments/#step-2-generate-a-client-token-for-your-buyer
         *
         * @since 3.3.0
         *
         * @return string|WP_Error
         */
        public function generate_client_token()
        {
        }
        /**
         * Make decision based on some condition for continue transaction
         *
         * @see https://developer.paypal.com/docs/business/checkout/add-capabilities/3d-secure/#3d-secure-response-parameters
         *
         * @param $order_data
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public function continue_transaction($order_data)
        {
        }
        /**
         * Refund a capture
         *
         * @see https://developer.paypal.com/docs/api/payments/v2/#captures_refund
         *
         * @param $capture_id
         * @param $merchant_id
         * @param array $data
         *
         * @since 3.3.0
         *
         * @return array|\WP_Error
         */
        public function refund($capture_id, $merchant_id, $data = [])
        {
        }
        /**
         * Get PayPal auth assertion header, this is needed for refund
         *
         * @see https://developer.paypal.com/docs/platforms/manage-risk/issue-refund/#1-generate-paypal-auth-assertion-header
         *
         * @param string $merchant_id
         *
         * @since 3.3.0
         *
         * @return string
         */
        public function get_auth_assertion_header($merchant_id)
        {
        }
        /**
         * Format refund data
         *
         * @param float|string $amount
         * @param int|string $invoice_id
         * @param string $reason
         * @param string $currency
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function format_refund_data($amount, $invoice_id, $currency, $reason)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\PayPalMarketplace\Subscriptions {
    /**
     * Class SubscriptionProcessor
     *
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace\VendorSubscriptions
     *
     * @see https://developer.paypal.com/docs/subscriptions/
     *
     * @since 3.3.7
     */
    class Processor extends \WeDevs\DokanPro\Modules\PayPalMarketplace\Utilities\Processor
    {
        /**
         * Instance of self
         *
         * @var static
         */
        protected static $subscription_instance = null;
        /**
         * Initialize Processor() class
         *
         * @since 3.3.7
         *
         * @return Processor
         */
        public static function init()
        {
        }
        /**
         * Create product for subscription
         *
         * @see  https://developer.paypal.com/docs/api/catalog-products/v1/#products_create
         *
         * @param array $product_data Product data is contains necessary information about the subscription product
         *
         * @since 3.3.7
         *
         * @return array|\WP_Error
         */
        public function create_product($product_data)
        {
        }
        /**
         * Get product list
         *
         * @since 3.3.7
         *
         * @return array|mixed|\WP_Error
         */
        public function get_products_list()
        {
        }
        /**
         * Get single product details
         *
         * @param $paypal_product_id
         *
         * @since 3.3.7
         *
         * @return array|mixed|\WP_Error
         */
        public function get_product($paypal_product_id)
        {
        }
        /**
         * Create Plan against a product for subscription
         *
         * @see https://developer.paypal.com/docs/api/subscriptions/v1/#plans_create
         *
         * @param array $plan_data Plan data is contains necessary information about the subscription product
         *
         * @since 3.3.7
         *
         * @return array|\WP_Error
         */
        public function create_plan($plan_data)
        {
        }
        /**
         * Deactivates a plan, by ID.
         *
         * @see https://developer.paypal.com/docs/api/subscriptions/v1/#plans_deactivate
         *
         * @param string $plan_id The ID of the plan.
         *
         * @since 3.3.7
         *
         * @return array|\WP_Error A successful request returns the HTTP 204 No Content status code with no JSON response body.
         */
        public function deactivate_plan($plan_id)
        {
        }
        /**
         * Create subscription on paypal
         *
         * @see https://developer.paypal.com/docs/api/subscriptions/v1/#subscriptions_create
         *
         * @param array $subscription_data Subscription data is contains necessary parameter about the subscription
         *
         * @since 3.3.7
         *
         * @return array|\WP_Error
         */
        public function create_subscription($subscription_data)
        {
        }
        /**
         * Get single subscription details
         *
         * @see https://developer.paypal.com/docs/api/subscriptions/v1/#subscriptions_get
         *
         * @param $subscription_id
         *
         * @since 3.3.7
         *
         * @return array|mixed|\WP_Error
         */
        public function get_subscription($subscription_id)
        {
        }
        /**
         * Activate a subscription
         *
         * @see https://developer.paypal.com/docs/api/subscriptions/v1/#subscriptions_activate
         *
         * @param string $subscription_id
         * @param string $reason
         *
         * @since 3.3.7
         *
         * @return array|\WP_Error
         */
        public function activate_subscription($subscription_id, $reason)
        {
        }
        /**
         * Cancel a subscription
         *
         * @see https://developer.paypal.com/docs/api/subscriptions/v1/#subscriptions_cancel
         *
         * @param string $subscription_id
         * @param string $reason
         *
         * @since 3.3.7
         *
         * @return array|\WP_Error
         */
        public function cancel_subscription($subscription_id, $reason)
        {
        }
        /**
         * Suspend a subscription
         *
         * @see https://developer.paypal.com/docs/api/subscriptions/v1/#subscriptions_suspend
         *
         * @param string $subscription_id
         * @param string $reason
         *
         * @since 3.3.7
         *
         * @return array|\WP_Error
         */
        public function suspend_subscription($subscription_id, $reason)
        {
        }
        /**
         * Subscription actions based on action type
         * Types are: activate, cancel, suspend
         *
         * @param string $subscription_id
         * @param string $reason
         * @param string $action_type
         *
         * @since 3.3.7
         *
         * @return array|\WP_Error
         */
        public function subscription_action($subscription_id, $reason, $action_type)
        {
        }
    }
    /**
     * Class VendorSubscription
     *
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace\VendorSubscriptions
     *
     * @see https://developer.paypal.com/docs/subscriptions/
     *
     * @since 3.3.7
     */
    class VendorSubscription
    {
        /**
         * SubscriptionController constructor.
         *
         * @since 3.3.7
         */
        public function __construct()
        {
        }
        /**
         * Init Vendor Subscription Related Hooks
         *
         * @since 3.3.7
         */
        public function init_hooks()
        {
        }
        /**
         * Handle subscription product after save
         *
         * @param $product_id
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function handle_subscription_after_save($product_id)
        {
        }
        /**
         * Get admin partner id for subscription product
         *
         * @param $merchant_id
         * @param $product_id
         *
         * @since 3.3.7
         *
         * @return string
         */
        public function get_merchant_id_for_subscription_product($merchant_id, $product_id)
        {
        }
        /**
         * Empty cart if the vendor is already in a subscription
         *
         * @param $valid
         * @param $product_id
         * @param $quantity
         *
         * @since 3.3.7
         *
         * @return mixed
         */
        public function maybe_empty_cart($valid, $product_id, $quantity)
        {
        }
        /**
         * Make decision for loading payment scripts/html
         * if cart contains subscription product then do not need to load payment scripts
         *
         * @param bool $ret
         *
         * @since 3.3.7
         *
         * @return bool
         */
        public function load_payment_elements($ret)
        {
        }
        /**
         * Handle subscription product
         *
         * @param $data
         *
         * @since 3.3.7
         *
         * @return array
         */
        public function handle_subscription_product($data)
        {
        }
        /**
         * Store subscription data after capture payment in PayPal
         *
         * @param \WC_Order $order
         * @param $capture_payment
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function handle_subscription_after_payment(\WC_Order $order, $capture_payment)
        {
        }
        /**
         * Reactivate recurring subscription
         *
         * @param int $order_id
         * @param int $vendor_id
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function reactivate_recurring_subscription($order_id, $vendor_id)
        {
        }
        /**
         * Cancel/Suspend subscription from PayPal end
         *
         * @param int $order_id
         * @param int $vendor_id
         * @param bool $cancel_immediately
         *
         * @throws \Exception
         *
         * @return void
         */
        public function suspend_recurring_subscription($order_id, $vendor_id, $cancel_immediately)
        {
        }
        /**
         * Cancel Non Recurring Subscription Immediately
         *
         * @param bool $cancel_immediately
         * @param int $order_id
         * @param int $vendor_id
         *
         * @since 3.3.7
         *
         * @return bool
         */
        public function cancel_non_recurring_subscription_immediately($cancel_immediately, $order_id)
        {
        }
        /**
         * Cancel main order before cancelling non-recurring subscription
         *
         * @param $vendor_id
         * @param $product_id
         * @param $order_id
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function before_cancelling_subscriptions($vendor_id, $product_id, $order_id)
        {
        }
        /**
         * Do not cancel unpaid orders if order is vendor subscription order
         *
         * @param bool $cancel
         * @param \WC_Order $order
         *
         * @since 3.3.7
         *
         * @return bool
         */
        public function cancel_unpaid_order($cancel, $order)
        {
        }
        /**
         * Change notice to vendors for recurring payments
         *
         * @param string $message
         * @param \WC_Order $order
         *
         * @since 3.3.7
         *
         * @return string
         */
        public function suborder_notice_to_vendor($message, $order)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\PayPalMarketplace\WebhookEvents {
    /**
     * Class BillingSubscriptionActivated
     *
     * @package WeDevs\DokanPro\Payment\PayPal\WebhookEvents
     *
     * @since 3.3.7
     *
     * @author weDevs
     */
    class BillingSubscriptionActivated extends \WeDevs\DokanPro\Modules\PayPalMarketplace\Abstracts\WebhookEventHandler
    {
        /**
         * CheckoutOrderApproved constructor.
         *
         * @param $event
         *
         * @since 3.3.7
         */
        public function __construct($event)
        {
        }
        /**
         * @param object $plan_data
         *
         * @since 3.3.7
         *
         * @return bool
         */
        public function check_trial_exists($plan_data)
        {
        }
        /**
         * Handle billing subscription activated
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class BillingSubscriptionCancelled
     *
     * @package WeDevs\DokanPro\Payment\PayPal\WebhookEvents
     *
     * @since 3.3.7
     *
     * @author weDevs
     */
    class BillingSubscriptionCancelled extends \WeDevs\DokanPro\Modules\PayPalMarketplace\Abstracts\WebhookEventHandler
    {
        /**
         * CheckoutOrderApproved constructor.
         *
         * @param $event
         *
         * @since 3.3.7
         */
        public function __construct($event)
        {
        }
        /**
         * Handle billing subscription failed
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class BillingSubscriptionPaymentFailed
     *
     * @package WeDevs\DokanPro\Payment\PayPal\WebhookEvents
     *
     * @since 3.3.7
     *
     * @author weDevs
     */
    class BillingSubscriptionPaymentFailed extends \WeDevs\DokanPro\Modules\PayPalMarketplace\Abstracts\WebhookEventHandler
    {
        /**
         * CheckoutOrderApproved constructor.
         *
         * @param $event
         *
         * @since 3.3.7
         */
        public function __construct($event)
        {
        }
        /**
         * Handle billing subscription failed
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class BillingSubscriptionReActivated
     *
     * @package WeDevs\DokanPro\Payment\PayPal\WebhookEvents
     *
     * @since 3.3.7
     *
     * @author weDevs
     */
    class BillingSubscriptionReActivated extends \WeDevs\DokanPro\Modules\PayPalMarketplace\Abstracts\WebhookEventHandler
    {
        /**
         * CheckoutOrderApproved constructor.
         *
         * @param $event
         *
         * @since 3.3.7
         */
        public function __construct($event)
        {
        }
        /**
         * Handle billing subscription failed
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class BillingSubscriptionSuspended
     *
     * @package WeDevs\DokanPro\Payment\PayPal\WebhookEvents
     *
     * @since 3.3.7
     *
     * @author weDevs
     */
    class BillingSubscriptionSuspended extends \WeDevs\DokanPro\Modules\PayPalMarketplace\Abstracts\WebhookEventHandler
    {
        /**
         * CheckoutOrderApproved constructor.
         *
         * @param $event
         *
         * @since 3.3.7
         */
        public function __construct($event)
        {
        }
        /**
         * Handle billing subscription failed
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class CheckoutOrderApproved
     *
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace\WebhookEvents
     *
     * @see @see https://developer.paypal.com/docs/api-basics/notifications/webhooks/event-names/#orders
     *
     * @since 3.3.0
     */
    class CheckoutOrderApproved extends \WeDevs\DokanPro\Modules\PayPalMarketplace\Abstracts\WebhookEventHandler
    {
        /**
         * CheckoutOrderApproved constructor.
         *
         * @param $event
         *
         * @since 3.3.0
         */
        public function __construct($event)
        {
        }
        /**
         * Handle checkout approved order
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class CheckoutOrderCompleted
     * @package WeDevs\Dokan\Gateways\PayPal\WebhookEvents
     *
     * @since 3.3.0
     *
     * @author weDevs
     */
    class CheckoutOrderCompleted extends \WeDevs\DokanPro\Modules\PayPalMarketplace\Abstracts\WebhookEventHandler
    {
        /**
         * CheckoutOrderCompleted constructor.
         *
         * @param $event
         *
         * @since 3.3.0
         */
        public function __construct($event)
        {
        }
        /**
         * Handle checkout completed order
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class PaymentSaleCompleted
     * @package WeDevs\DokanPro\Payment\PayPal\WebhookEvents
     *
     * @since 3.3.0
     *
     * @author weDevs
     */
    class CustomerMerchantIntegrationCapabilityUpdated extends \WeDevs\DokanPro\Modules\PayPalMarketplace\Abstracts\WebhookEventHandler
    {
        /**
         * CheckoutOrderApproved constructor.
         *
         * @param $event
         *
         * @since 3.3.0
         */
        public function __construct($event)
        {
        }
        /**
         * Handle payment sale
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class PaymentSaleCompleted
     * @package WeDevs\DokanPro\Payment\PayPal\WebhookEvents
     *
     * @since 3.3.0
     *
     * @author weDevs
     */
    class CustomerMerchantIntegrationSellerEmailConfirmed extends \WeDevs\DokanPro\Modules\PayPalMarketplace\Abstracts\WebhookEventHandler
    {
        /**
         * CheckoutOrderApproved constructor.
         *
         * @param $event
         *
         * @since 3.3.0
         */
        public function __construct($event)
        {
        }
        /**
         * Handle payment sale
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class PaymentSaleCompleted
     * @package WeDevs\DokanPro\Payment\PayPal\WebhookEvents
     *
     * @since 3.3.0
     *
     * @author weDevs
     */
    class MerchantOnboardingCompleted extends \WeDevs\DokanPro\Modules\PayPalMarketplace\Abstracts\WebhookEventHandler
    {
        /**
         * CheckoutOrderApproved constructor.
         *
         * @param $event
         *
         * @since 3.3.0
         */
        public function __construct($event)
        {
        }
        /**
         * Handle payment sale
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class MerchantPartnerConsentRevoked
     * @package WeDevs\Dokan\Gateways\PayPal\WebhookEvents
     *
     * @since 3.3.0
     *
     * @author weDevs
     */
    class MerchantPartnerConsentRevoked extends \WeDevs\DokanPro\Modules\PayPalMarketplace\Abstracts\WebhookEventHandler
    {
        /**
         * MerchantPartnerConsentRevoked constructor.
         *
         * @param $event
         *
         * @since 3.3.0
         */
        public function __construct($event)
        {
        }
        /**
         * Handle MerchantPartnerConsentRevoked
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class PaymentCaptureRefunded
     *
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace\WebhookEvents
     *
     * @since 3.3.0
     *
     * @see https://developer.paypal.com/docs/api/payments/v2/#refunds
     *
     * @author weDevs
     */
    class PaymentCaptureRefunded extends \WeDevs\DokanPro\Modules\PayPalMarketplace\Abstracts\WebhookEventHandler
    {
        /**
         * CheckoutOrderApproved constructor.
         *
         * @param $event
         *
         * @since 3.3.0
         */
        public function __construct($event)
        {
        }
        /**
         * Handle payment sale
         *
         * @since 3.3.0
         *
         * @throws \Exception
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class CheckoutOrderCompleted
     * @package WeDevs\Dokan\Gateways\PayPal\WebhookEvents
     *
     * @since 3.3.0
     *
     * @author weDevs
     */
    class PaymentReferencedPayoutItemCompleted extends \WeDevs\DokanPro\Modules\PayPalMarketplace\Abstracts\WebhookEventHandler
    {
        /**
         * CheckoutOrderCompleted constructor.
         *
         * @param $event
         *
         * @since 3.3.0
         */
        public function __construct($event)
        {
        }
        /**
         * Handle checkout completed order
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class PaymentSaleCompleted
     * @package WeDevs\DokanPro\Payment\PayPal\WebhookEvents
     *
     * @since 3.3.7
     *
     * @author weDevs
     */
    class PaymentSaleCompleted extends \WeDevs\DokanPro\Modules\PayPalMarketplace\Abstracts\WebhookEventHandler
    {
        /**
         * CheckoutOrderApproved constructor.
         *
         * @param $event
         *
         * @since 3.3.7
         */
        public function __construct($event)
        {
        }
        /**
         * Modify query param
         *
         * @param array $query
         * @param array $query_vars
         *
         * @return array
         *
         * @since 3.3.7
         */
        public function handle_custom_query_var($query, $query_vars)
        {
        }
        /**
         * Handle payment sale
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function handle()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\PayPalMarketplace {
    /**
     * Class WebhookHandler
     *
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace
     *
     * @see https://developer.paypal.com/docs/api-basics/notifications/webhooks/
     *
     * @since 3.3.0
     */
    class WebhookHandler
    {
        /**
         * WebhookHandler constructor.
         *
         * @since 3.3.0
         */
        public function __construct()
        {
        }
        /**
         * Init all the hooks
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Handle events which are coming from PayPal
         *
         * @since 3.3.0
         *
         * @return void
         * @throws \WeDevs\Dokan\Exceptions\DokanException
         */
        public function handle_events()
        {
        }
        /**
         * Gets the incoming request headers. Some servers are not using
         * Apache and "getallheaders()" will not work so we may need to
         * build our own headers.
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function get_request_headers()
        {
        }
        /**
         * Check if we are using required webhooks
         *
         * @param array $response
         * @param string $webhook_id
         *
         * @since 3.3.7
         *
         * @return bool
         */
        protected function get_webhook_events_from_response($response, $webhook_id)
        {
        }
        /**
         * Register webhook and remove old webhook endpoints from PayPal
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public function register_webhook()
        {
        }
        /**
         * Delete webhook on PayPal end
         *
         * @since 3.3.0
         *
         * @return bool
         */
        public function deregister_webhook()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\PayPalMarketplace\WithdrawMethods {
    /**
     * Class RegisterWithdrawMethods
     *
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace
     *
     * @since 3.3.0
     */
    class RegisterWithdrawMethods
    {
        /**
         * RegisterWithdrawMethod constructor.
         *
         * @since 3.3.0
         */
        public function __construct()
        {
        }
        /**
         * Returns true if venddor enabled paypal marketplace payment getway.
         *
         * @since 3.9.1
         *
         * @param $data
         *
         * @return array
         */
        public function add_paypal_marketplace_to_vendor_profile_data($data)
        {
        }
        /**
         * Register methods
         *
         * @param array $methods
         *
         * @since 3.3.0
         *
         * @return array
         */
        public function register_methods($methods)
        {
        }
        /**
         * This enables dokan vendors to connect their PayPal account to the site PayPal gateway account
         *
         * @param $store_settings
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function paypal_connect_button($store_settings)
        {
        }
        /**
         * Handle paypal marketplace connect process
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function handle_paypal_marketplace_connect()
        {
        }
        /**
         * Handle paypal marketplace
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function authorize_paypal_marketplace()
        {
        }
        /**
         * Deauthorize vendor
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function deauthorize_vendor()
        {
        }
        /**
         * Handle PayPal error message for payment settings
         *
         * @param $current_user
         * @param $profile_info
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function handle_vendor_message($current_user, $profile_info)
        {
        }
        /**
         * Send announcement to vendors if their account is not connected with PayPal
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function send_announcement_to_non_connected_vendor()
        {
        }
        /**
         * Display notice to vendors if their account is not connected with PayPal
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function display_notice_on_vendor_dashboard()
        {
        }
        /**
         * Get the Withdrawal method icon
         *
         * @since 3.5.6
         *
         * @param string $method_icon
         * @param string $method_key
         *
         * @return string
         */
        public function get_icon($method_icon, $method_key)
        {
        }
        /**
         * Get the heading for this payment's settings page
         *
         * @since 3.5.6
         *
         * @param string $heading
         * @param string $slug
         *
         * @return string
         */
        public function get_heading($heading, $slug)
        {
        }
        /**
         * Get if a seller is connected to this payment method
         *
         * @since 3.6.1
         *
         * @param bool $connected
         * @param string $payment_method_id
         * @param int $seller_id
         *
         * @return bool
         */
        public function is_seller_connected($connected, $payment_method_id, $seller_id)
        {
        }
        /**
         * Calculate Dokan profile completeness value
         *
         * @since 3.7.1
         *
         * @param array $progress_track_value
         *
         * @return array
         */
        public function calculate_profile_progress($progress_track_value)
        {
        }
    }
    /**
     * Class WithdrawManager
     *
     * @package WeDevs\DokanPro\Modules\PayPalMarketplace\WithdrawMethods
     *
     * @since 3.3.0
     */
    class WithdrawManager
    {
        /**
         * Handle paypal marketplace success response process
         *
         * @param int $user_id
         *
         * @since 3.3.0
         *
         * @return WP_Error|bool true on success
         */
        public static function handle_connect_success_response($user_id)
        {
        }
        /**
         * Validate status of a merchant and store data
         *
         * @param string $merchant_id
         * @param int $user_id
         *
         * @since 3.3.0
         *
         * @return WP_Error|bool true on success
         */
        public static function update_merchant_status($merchant_id, $user_id = null)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\PayPalMarketplace {
    /**
     * Class Module
     *
     * @since   3.3.0
     * @package WeDevs\Dokan\Gateways
     *
     * @see     https://developer.paypal.com/docs/platforms/ For Related API's
     *
     * @property-read RegisterGateways $register_gateways Register payment gateway
     * @property-read WebhookHandler $webhook Register webhook
     * @property-read PayPal $gateway_paypal PayPal gateway
     * @property-read OrderManager $order_manager Order manager
     * @property-read RegisterWithdrawMethods $withdraw_methods Register withdraw methods
     * @property-read CartHandler $cart_handler Cart handler
     * @property-read OrderController $order_controller Order controller
     * @property-read Refund $refund Refund controller
     * @property-read DelayDisburseFund $delay_disburse_bg Delay disburse fund background process
     * @property-read VendorSubscription $vendor_subscription Vendor subscription
     * @property-read Hooks $hooks Hooks class
     * @property-read ReverseWithdrawal $reverse_withdrawal Reverse withdrawal
     */
    class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        // @phpstan-ignore-line
        /**
         * Manager constructor.
         *
         * @since 3.3.0
         * @return void
         */
        public function __construct()
        {
        }
        /**
         *
         * @since 3.3.0
         */
        public function activate($instance)
        {
        }
        /**
         *
         * @since 3.3.0
         */
        public function deactivate($instance)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Printful {
    /**
     * Class Module.
     * Dokan Pro Printful Module.
     *
     * @since 3.13.0
     *
     * @property Assets          $assets  Assets.
     * @property Ajax            $ajax    Ajax.
     * @property Vendor          $vendor  Vendor.
     * @property Admin           $admin   Admin.
     * @property WebhookProvider $webhook Webhook Provider.
     * @property OrderProvider   $order   Order Provider.
     * @property ProductProvider $product Product Provider.
     *
     * @package WeDevs\DokanPro\Modules\Printful
     */
    class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Manager constructor.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Call all hooks here
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Set template path for Product Advertisement module
         *
         * @since 3.13.0
         *
         * @param string $template_path Current Template path.
         * @param string $template      Current Template.
         * @param array $args           Arguments.
         *
         * @return string
         */
        public function set_template_path($template_path, $template, $args): string
        {
        }
        /**
         * This method will be called during module activation
         *
         * @since 3.13.0
         */
        public function activate($instance)
        {
        }
        /**
         * This method will be called during module deactivation
         *
         * @since 3.13.0
         */
        public function deactivate($instance)
        {
        }
        /**
         * Flush rewrite rules.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
    }
    /**
     * Class Admin.
     *
     * Responsible for admin related functionality.
     *
     * @since 3.13.0
     *
     * @property Settings $settings Settings class instance.
     *
     * @package WeDevs\DokanPro\Modules\Printful
     */
    class Admin
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Class constructor.
         */
        public function __construct()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Printful\Admin {
    /**
     * Admin Settings Class
     *
     * @since 3.13.0
     */
    class Settings
    {
        /**
         * Constructor
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add settings section.
         *
         * @since 3.13.0
         *
         * @param array $sections Dokan settings sections.
         *
         * @return array
         */
        public function add_section($sections)
        {
        }
        /**
         * Add settings fields.
         *
         * @since 3.13.0
         *
         * @param array $fields dokan settings fields.
         *
         * @return array
         */
        public function add_fields($fields)
        {
        }
        /**
         * Is Currency Supported by Printful.
         *
         * @since 3.13.0
         *
         * @param string $currency_code Currency code to check.
         *
         * @return bool
         */
        public function is_printful_supported_currency($currency_code)
        {
        }
        /**
         * Is Seller The Shipping Fee Recipient.
         *
         * @since 3.13.0
         *
         * @return bool
         */
        public function shipping_fee_recipient_is_seller()
        {
        }
        /**
         * Is Seller The Shipping Tax Fee Recipient.
         *
         * @since 3.13.0
         *
         * @return bool
         */
        public function shipping_tax_fee_recipient_is_seller()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Printful {
    /**
     * Handle ajax events.
     */
    class Ajax
    {
        /**
         * Class constructor
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Connect vendor to printful.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function connect_to_printful()
        {
        }
        /**
         * Disconnect vendor to printful.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function disconnect_to_printful()
        {
        }
        /**
         * Enable Printful Shipping.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function enable_printful_shipping()
        {
        }
        /**
         * Disable Marketplace Rates.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function enable_marketplace_rates()
        {
        }
        /**
         * Add Printful Size Guide.
         *
         * @since 3.13.0
         *
         * @throws Exception
         * @return void
         */
        public function add_printful_size_guide()
        {
        }
    }
    /**
     * Assets class.
     *
     * @since 3.13.0
     */
    class Assets
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Register all scripts and styles.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Load scripts and styles.
         *
         * @return void
         */
        public function load()
        {
        }
    }
    /**
     * Class to handle authentication with Printful.
     *
     * @since 3.13.0
     */
    class Auth
    {
        /**
         * Vendor ID.
         *
         * @since 3.13.0
         *
         * @var int
         */
        protected int $vendor_id = 0;
        /**
         * oAth2 Service Provider.
         *
         * @since 3.13.0
         *
         * @var AbstractProvider
         */
        protected \WeDevs\DokanPro\Dependencies\League\OAuth2\Client\Provider\AbstractProvider $provider;
        /**
         * Token Storage.
         *
         * @since 3.13.0
         *
         * @var AbstractTokenStore
         */
        protected \WeDevs\DokanPro\Modules\Printful\Auth\AbstractTokenStore $storage;
        /**
         * Vendor Connection Status.
         *
         * @since 3.13.0
         *
         * @var bool $connected Vendor Connection Status.
         */
        protected bool $connected = false;
        /**
         * Auth constructor.
         *
         * @param int $vendor_id Vendor ID.
         */
        public function __construct(int $vendor_id)
        {
        }
        /**
         * Search for vendor by Printful Store ID.
         *
         * @since 3.13.0
         *
         * @param int $printful_store_id Printful Store ID.
         *
         * @return Auth
         * @throws Exception If vendor not found.
         */
        public static function search(int $printful_store_id): \WeDevs\DokanPro\Modules\Printful\Auth
        {
        }
        /**
         * Auth connector.
         *
         * @since 3.13.0
         *
         * @param string $code Code to grant access token.
         *
         * @return bool
         */
        public function connect(string $code): bool
        {
        }
        /**
         * Auth disconnector.
         *
         * @since 3.13.0
         *
         * @return bool
         */
        public function disconnect(): bool
        {
        }
        /**
         * Check if vendor is connected with Printful.
         *
         * @since 3.13.0
         *
         * @return bool
         */
        public function is_connected(): bool
        {
        }
        /**
         * Get access token.
         *
         * @since 3.13.0
         *
         * @return string
         * @throws Exception If vendor id not valid or vendor is not connected or Connection expired.
         */
        public function get_access_token(): string
        {
        }
        /**
         * Get store information.
         *
         * @since 3.13.0
         *
         * @return array
         * @throws Exception
         */
        public function get_store_info(): array
        {
        }
        /**
         * Get vendor ID.
         *
         * @since 3.13.0
         *
         * @return int
         */
        public function get_vendor_id(): int
        {
        }
        /**
         * Validate Connection.
         *
         * @since 3.13.0
         *
         * @return void
         * @throws Exception
         */
        protected function validate_connection(): void
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Printful\Auth {
    /**
     * Token Store.
     *
     * @since 3.13.0
     */
    abstract class AbstractTokenStore
    {
        /**
         * Vendor ID.
         *
         * @since 3.13.0
         *
         * @var int $vendor_id Vendor ID.
         */
        protected int $vendor_id = 0;
        /**
         * Constructor.
         *
         * @param int $vendor_id Vendor ID.
         */
        public function __construct(int $vendor_id)
        {
        }
        /**
         * Get Access Token Object.
         *
         * @since 3.13.0
         *
         * @return AccessToken
         */
        abstract public function get_token(): \WeDevs\DokanPro\Dependencies\League\OAuth2\Client\Token\AccessToken;
        /**
         * Set Token in storage.
         *
         * @since 3.13.0
         *
         * @param AccessToken $access_token Token Object.
         *
         * @return AbstractTokenStore
         */
        abstract public function set_token(\WeDevs\DokanPro\Dependencies\League\OAuth2\Client\Token\AccessToken $access_token): \WeDevs\DokanPro\Modules\Printful\Auth\AbstractTokenStore;
        /**
         * Delete Token from storage.
         *
         * @since 3.13.0
         *
         * @return bool
         */
        abstract public function delete_token(): bool;
        /**
         * Search Token user in storage by printful store id.
         *
         * @since 3.13.0
         *
         * @param int $printful_store_id Printful Store ID.
         *
         * @return int
         */
        abstract public static function search(int $printful_store_id): int;
    }
    /**
     * Printdul Auth Provider.
     *
     * @since 3.13.0
     */
    class PrintfulAuthProvider extends \WeDevs\DokanPro\Dependencies\League\OAuth2\Client\Provider\GenericProvider
    {
        /**
         * Constructor.
         *
         * @param array $options Options.
         * @param array $collaborators Collaborators.
         */
        public function __construct(array $options = [], array $collaborators = [])
        {
        }
        /**
         * Prepare access token response.
         *
         * @since 3.13.0
         *
         * @param array $result Token Response result.
         *
         * @return array
         */
        protected function prepareAccessTokenResponse(array $result): array
        {
        }
        /**
         * Generates a resource owner object from a successful resource owner
         * details request.
         *
         * @since 3.13.0
         *
         * @param  array $response Resource owner response.
         * @param  AccessToken $token Access Token.
         *
         * @return ResourceOwnerInterface
         */
        protected function createResourceOwner(array $response, \WeDevs\DokanPro\Dependencies\League\OAuth2\Client\Token\AccessToken $token): \WeDevs\DokanPro\Dependencies\League\OAuth2\Client\Provider\ResourceOwnerInterface
        {
        }
    }
    class PrintfulGrantFactory extends \WeDevs\DokanPro\Dependencies\League\OAuth2\Client\Grant\GrantFactory
    {
        /**
         * Registers a default grant singleton by name.
         *
         * @param  string $name
         * @return self
         */
        protected function registerDefaultGrant($name)
        {
        }
    }
    /**
     * Token Store implementing User meta.
     *
     * @since 3.13.0
     */
    class UserMetaTokenStore extends \WeDevs\DokanPro\Modules\Printful\Auth\AbstractTokenStore
    {
        /**
         * User meta keys for access token.
         *
         * @since 3.13.0
         */
        const KEY_ACCESS_TOKEN = 'dokan_printful_access_token';
        /**
         * User meta keys for refresh token.
         *
         * @since 3.13.0
         */
        const KEY_REFRESH_TOKEN = 'dokan_printful_refresh_token';
        /**
         * User meta keys for expired at.
         *
         * @since 3.13.0
         */
        const KEY_EXPIRED_AT = 'dokan_printful_expired_at';
        /**
         * User meta keys for store id.
         *
         * @since 3.13.0
         */
        const KEY_STORE_ID = 'dokan_printful_store_id';
        /**
         * Get token.
         *
         * @since 3.13.0
         *
         * @return AccessToken
         */
        public function get_token(): \WeDevs\DokanPro\Dependencies\League\OAuth2\Client\Token\AccessToken
        {
        }
        /**
         * Set and Store token in User meta.
         *
         * @since 3.13.0
         *
         * @param AccessToken $access_token
         *
         * @return UserMetaTokenStore
         */
        public function set_token(\WeDevs\DokanPro\Dependencies\League\OAuth2\Client\Token\AccessToken $access_token): \WeDevs\DokanPro\Modules\Printful\Auth\UserMetaTokenStore
        {
        }
        /**
         * Get Meta Data.
         *
         * @since 3.13.0
         *
         * @param string $meta_key Meta key.
         *
         * @return mixed
         */
        protected function get_meta(string $meta_key)
        {
        }
        /**
         * Store Meta values.
         *
         * @since 3.13.0
         *
         * @param string $meta_key Meta key.
         * @param mixed $value Value.
         *
         * @return bool|int
         */
        protected function set_meta(string $meta_key, $value)
        {
        }
        /**
         * Delete Meta values.
         *
         * @since 3.13.0
         *
         * @param string $meta_key Meta key.
         *
         * @return bool
         */
        protected function delete_meta(string $meta_key): bool
        {
        }
        /**
         * Delete Token from storage.
         *
         * @since 3.13.0
         *
         * @return bool
         */
        public function delete_token(): bool
        {
        }
        /**
         * Search Token user in storage by printful store id.
         *
         * @since 3.13.0
         *
         * @param int $printful_store_id Printful Store ID.
         *
         * @return int
         */
        public static function search(int $printful_store_id): int
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Printful\Events {
    /**
     * Class AbstractEvent.
     *
     * @since 3.13.0
     */
    abstract class AbstractEvent
    {
        /**
         * @var WebhookItem
         */
        protected \WeDevs\DokanPro\Dependencies\Printful\Structures\Webhook\WebhookItem $event;
        protected \WeDevs\DokanPro\Modules\Printful\Auth $auth;
        protected int $vendor_id = 0;
        /**
         * Constructor.
         */
        public function __construct(\WeDevs\DokanPro\Dependencies\Printful\Structures\Webhook\WebhookItem $event)
        {
        }
        /**
         * Process the event
         *
         * @since 3.13.0
         *
         * @return void
         */
        abstract public function process();
    }
    /**
     * Class OrderEvent.
     *
     * @since 3.13.0
     *
     * @phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
     */
    class OrderEvent extends \WeDevs\DokanPro\Modules\Printful\Events\AbstractEvent
    {
        /**
         * @var string $order_note
         *
         * @since 3.13.0
         */
        protected string $order_note;
        /**
         * Process the event.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function process()
        {
        }
    }
    class OrderCancel extends \WeDevs\DokanPro\Modules\Printful\Events\OrderEvent
    {
        /**
         * @var string $order_note
         *
         * @since 3.13.0
         */
        protected string $order_note;
        /**
         * Class constructor.
         *
         * @param WebhookItem $event
         */
        public function __construct(\WeDevs\DokanPro\Dependencies\Printful\Structures\Webhook\WebhookItem $event)
        {
        }
    }
    /**
     * Order Create Event.
     */
    class OrderCreate
    {
        /**
         * Class constructor.
         *
         * @param WebhookItem $event
         */
        public function __construct(\WeDevs\DokanPro\Dependencies\Printful\Structures\Webhook\WebhookItem $event)
        {
        }
    }
    class OrderFailed extends \WeDevs\DokanPro\Modules\Printful\Events\OrderEvent
    {
        /**
         * @var string $order_note
         *
         * @since 3.13.0
         */
        protected string $order_note;
        /**
         * Class constructor.
         *
         * @param WebhookItem $event
         */
        public function __construct(\WeDevs\DokanPro\Dependencies\Printful\Structures\Webhook\WebhookItem $event)
        {
        }
    }
    class OrderHold extends \WeDevs\DokanPro\Modules\Printful\Events\OrderEvent
    {
        /**
         * @var string $order_note
         *
         * @since 3.13.0
         */
        protected string $order_note;
        /**
         * Class constructor.
         *
         * @param WebhookItem $event
         */
        public function __construct(\WeDevs\DokanPro\Dependencies\Printful\Structures\Webhook\WebhookItem $event)
        {
        }
    }
    class OrderNeedApprove extends \WeDevs\DokanPro\Modules\Printful\Events\OrderEvent
    {
        /**
         * @var string $order_note
         *
         * @since 3.13.0
         */
        protected string $order_note;
        /**
         * Class constructor.
         *
         * @param WebhookItem $event
         */
        public function __construct(\WeDevs\DokanPro\Dependencies\Printful\Structures\Webhook\WebhookItem $event)
        {
        }
    }
    class OrderRemoveHold extends \WeDevs\DokanPro\Modules\Printful\Events\OrderEvent
    {
        /**
         * @var string $order_note
         *
         * @since 3.13.0
         */
        protected string $order_note;
        /**
         * Class constructor.
         *
         * @param WebhookItem $event
         */
        public function __construct(\WeDevs\DokanPro\Dependencies\Printful\Structures\Webhook\WebhookItem $event)
        {
        }
    }
    /**
     * Order Update Event.
     */
    class OrderUpdate
    {
        /**
         * Class constructor.
         *
         * @param WebhookItem $event
         */
        public function __construct(\WeDevs\DokanPro\Dependencies\Printful\Structures\Webhook\WebhookItem $event)
        {
        }
    }
    /**
     * Class ProductSync.
     *
     * @since 3.13.0
     *
     * @phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
     */
    class ProductSync extends \WeDevs\DokanPro\Modules\Printful\Events\AbstractEvent
    {
        /**
         * Process the event.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function process()
        {
        }
        /**
         * Get WC product associated with a Printful product.
         *
         * @since 3.13.0
         *
         * @phpcs:disable WordPress.DB.SlowDBQuery.slow_db_query_meta_query
         *
         * @param int    $product_id Printful product ID.
         * @param string $type       Product type.
         *
         * @return WP_Post|false
         */
        public function get_associated_product_or_variation(int $product_id, string $type = 'product')
        {
        }
        /**
         * Update product or variation author.
         *
         *
         * @param int $product Product or Variation ID.
         *
         * @return int|\WP_Error
         */
        protected function update_author(int $product)
        {
        }
    }
    /**
     * Product Deleted Class.
     *
     * @since 3.13.0
     */
    class ProductDeleted extends \WeDevs\DokanPro\Modules\Printful\Events\ProductSync
    {
        /**
         * Process the product deleted event.
         *
         * @since 3.13.0
         */
        public function process()
        {
        }
    }
    class ProductUpdated extends \WeDevs\DokanPro\Modules\Printful\Events\ProductSync
    {
    }
    class ShipmentCancelled extends \WeDevs\DokanPro\Modules\Printful\Events\AbstractEvent
    {
        /**
         * @var string $shipment_status
         *
         * @since 3.13.0
         */
        protected string $shipment_status;
        /**
         * Class constructor.
         *
         * @param WebhookItem $event
         */
        public function __construct(\WeDevs\DokanPro\Dependencies\Printful\Structures\Webhook\WebhookItem $event)
        {
        }
        /**
         * Processes shipment cancellation based on external data from Printful.
         *
         * This method checks for shipment cancellation data from Printful and updates the
         * corresponding Dokan shipment status accordingly. It handles the shipment data
         * to ensure proper status updates and performs cleanup actions if necessary.
         *
         * @since 3.13.0
         *
         * @return void
         * @throws \Exception
         */
        public function process()
        {
        }
        /**
         * Populates and returns shipment data for an order.
         *
         * This method collects the mapped shipment items, prepares the data needed
         * for shipment processing|cancelling, and returns an array containing this information.
         *
         * @since 3.13.0
         *
         * @param int   $order_id      The ID of the order for which shipment data is being populated.
         * @param array $shipment_info An array containing shipment information.
         *
         * @return array An associative array containing shipment data to be processed.
         */
        protected function populate_shipment_data(int $order_id, array $shipment_info): array
        {
        }
    }
    class ShipmentDelivered extends \WeDevs\DokanPro\Modules\Printful\Events\AbstractEvent
    {
        /**
         * @var string $shipment_status
         *
         * @since 3.13.0
         */
        protected string $shipment_status;
        /**
         * Class constructor.
         *
         * @param WebhookItem $event
         */
        public function __construct(\WeDevs\DokanPro\Dependencies\Printful\Structures\Webhook\WebhookItem $event)
        {
        }
        /**
         * Processes the shipment data received from an external source, typically Printful.
         *
         * This method handles the integration of incoming shipment data and creates a corresponding
         * Dokan shipment if it does not already exist. It is typically called as part of a webhook
         * handling mechanism or similar.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function process()
        {
        }
        /**
         * Populates and returns shipment data for an order.
         *
         * This method collects the mapped shipment items, prepares the data needed
         * for shipment processing, and returns an array containing this information.
         *
         * @since 3.13.0
         *
         * @param int   $order_id      The ID of the order for which shipment data is being populated.
         * @param array $shipment_info An array containing shipment information.
         *
         * @return array An associative array containing shipment data to be processed.
         */
        protected function populate_shipment_data(int $order_id, array $shipment_info): array
        {
        }
        /**
         * Collect order shipment item list for printful product shipment.
         *
         * Maps between order & shipment items based on matching IDs and returns an associative array.
         * The array's key is the order's external ID and the value is the shipment item quantity.
         *
         * @since 3.13.0
         *
         * @return array An associative array where the key is the order's external ID and the value is the shipment item quantity.
         */
        protected function collect_prinful_order_shipment_items(): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Printful {
    /**
     * Webhook Handler.
     *
     * @since 3.13.0
     */
    class EventsHandler
    {
        /**
         * @param WebhookItem $event Webhook event.
         *
         * @return void
         */
        public static function handle(\WeDevs\DokanPro\Dependencies\Printful\Structures\Webhook\WebhookItem $event)
        {
        }
    }
    /**
     * Class Installer
     *
     * @since 3.13.0
     */
    class Installer
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Add capabilities to roles.
         *
         * @since 3.13.0
         *
         * @return void
         */
        protected function add_capabilities()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Printful\Integrations {
    /**
     * Class ProductsClient.
     *
     * @phpcs:disable WordPress.NamingConventions.ValidVariableName.PropertyNotSnakeCase,WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase,WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
     *
     * @since 3.13.0
     */
    class ProductsClient extends \WeDevs\DokanPro\Dependencies\Printful\PrintfulProducts
    {
        protected $printfulClient;
        /**
         * ProductsClient constructor.
         *
         * @since 3.13.0
         *
         * @param PrintfulApiClient $printfulClient
         */
        public function __construct(\WeDevs\DokanPro\Dependencies\Printful\PrintfulApiClient $printfulClient)
        {
        }
        /**
         * Preforms GET SyncProduct request.
         *
         * @since 3.13.0
         *
         * @param int $id Printful Product ID
         *
         * @return SyncProductRequestResponse
         * @throws PrintfulApiException|PrintfulException
         */
        public function getProduct($id): \WeDevs\DokanPro\Modules\Printful\Integrations\SyncProductRequestResponse
        {
        }
    }
    /**
     * @phpcs:disable WordPress.NamingConventions.ValidVariableName.VariableNotSnakeCase,WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
     */
    class SyncProductRequestResponse extends \WeDevs\DokanPro\Dependencies\Printful\Structures\Sync\Responses\SyncProductRequestResponse
    {
        /**
         * Creates SyncProductResponse from array
         *
         * @phpcs:disable Universal.NamingConventions.NoReservedKeywordParameterNames.arrayFound
         *
         * @param array $array
         * @return SyncProductRequestResponse
         */
        public static function fromArray(array $array)
        {
        }
    }
    class SyncVariantResponse extends \WeDevs\DokanPro\Dependencies\Printful\Structures\Sync\Responses\SyncVariantResponse
    {
        public $color;
        public $size;
        public static function fromArray(array $array)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Printful\Processors {
    interface OrderProcessorInterface
    {
        public function create(\WC_Order $order);
        public function update(\WC_Order $order);
        public function delete($order);
    }
    /**
     * Printful Order Processor.
     *
     * @since 3.13.0
     */
    class PrintfulOrderProcessor implements \WeDevs\DokanPro\Modules\Printful\Processors\OrderProcessorInterface
    {
        const META_KEY_VARIANT_ID = '_dokan_printful_product_variation_id';
        const META_KEY_EXTERNAL_VARIANT_ID = '_dokan_printful_product_external_variation_id';
        const META_KEY_STORE_ID = '_dokan_printful_store_id';
        const META_KEY_PRINTFUL_ORDER_ID = '_dokan_printful_order_id';
        const META_KEY_PRINTFUL_ORDER_FAILURE_ID = '_dokan_printful_order_request_failed';
        const META_KEY_PRINTFUL_ORDER_SHIPMENT_DATA = '_dokan_printful_order_shipment_data';
        const META_KEY_PRINTFUL_PACKAGE = '_dokan_printful_shipping_package';
        /**
         * Creates a new order in printful.
         *
         * @since 3.13.0
         *
         * @param WC_Order $order Order object.
         *
         * @return void
         */
        public function create(\WC_Order $order)
        {
        }
        public function update($order)
        {
        }
        public function delete($order)
        {
        }
        /**
         * @param int $vendor_id
         *
         * @return Auth
         */
        protected function get_auth(int $vendor_id): \WeDevs\DokanPro\Modules\Printful\Auth
        {
        }
        /**
         * @param Auth $auth
         *
         * @return PrintfulApiClient
         * @throws \WeDevs\DokanPro\Dependencies\Printful\Exceptions\PrintfulException
         */
        protected function get_printful_api_client(\WeDevs\DokanPro\Modules\Printful\Auth $auth): \WeDevs\DokanPro\Dependencies\Printful\PrintfulApiClient
        {
        }
        /**
         * Get recipient data based on the presence of a shipping address.
         *
         * @since 3.13.0
         *
         * @param WC_Order $order The WooCommerce order object.
         *
         * @return array The recipient data.
         */
        protected function get_recipient_data(\WC_Order $order): array
        {
        }
    }
    /**
     * Class Printful Product Processor.
     *
     * @since 3.13.0
     *
     * @package WeDevs\DokanPro\Modules\Printful\Processors
     *
     * @phpcs:disable WordPress.NamingConventions.ValidVariableName.UsedPropertyNotSnakeCase
     */
    class PrintfulProductProcessor
    {
        /**
         * Meta key for storing Printful product ID.
         *
         * @since 3.13.0
         */
        const META_KEY_PRODUCT_ID = 'dokan_printful_product_id';
        /**
         * Meta key for storing Printful product variation ID.
         *
         * @since 3.13.0
         */
        const META_KEY_PRODUCT_VARIATION_ID = 'dokan_printful_product_variation_id';
        /**
         * Meta key for storing Printful product external variation ID.
         *
         * @since 3.13.0
         */
        const META_KEY_PRODUCT_EXTERNAL_VARIATION_ID = 'dokan_printful_product_external_variation_id';
        /**
         * Meta key for storing Printful store ID associated with product.
         *
         * @since 3.13.0
         */
        const META_KEY_STORE_ID = 'dokan_printful_product_store_id';
        /**
         * Meta key for storing Printful catalog product ID.
         *
         * @since 3.13.0
         */
        const META_KEY_CATALOG_PRODUCT_ID = 'dokan_printful_catalog_product_id';
        /**
         * Meta key for storing Printful product size guide.
         *
         * @since 3.13.0
         */
        const META_KEY_PRODUCT_SIZE_GUIDE = 'dokan_printful_product_size_guide';
        /**
         * Meta key for storing Printful product size guide request failure count.
         *
         * @since 3.13.0
         */
        const META_KEY_PRINTFUL_SIZE_GUIDE_FAILURE_COUNT = 'dokan_printful_size_guide_request_failure_count';
        /**
         * Vendor ID.
         *
         * @since 3.13.0
         *
         * @var int $vendor_id Vendor ID.
         */
        protected int $vendor_id;
        /**
         * Constructor.
         *
         * @since 3.13.0
         *
         * @param int $vendor_id Vendor ID.
         */
        public function __construct(int $vendor_id)
        {
        }
        /**
         * Create or Update a product from Printful Product ID.
         *
         * @since 3.13.0
         *
         * @param int    $product_id Printful Product ID.
         * @param int    $external_id Existing associated Product id.
         * @param string $previous_status Previous product status.
         *
         * @return void
         */
        public function process(int $product_id, int $external_id, string $previous_status = 'publish')
        {
        }
        /**
         * Create a product variation for a defined variable product ID.
         *
         * @since 3.13.0
         *
         * @param WC_Product          $product Product parent variable product.
         * @param SyncVariantResponse $variation_data The data to insert in the product.
         * @param array<int, int>     $images Images.
         * @param int     $store_id  Store ID.
         *
         * @return WC_Product_Variation
         * @throws WC_Data_Exception If product is already exist.
         */
        protected function create_product_variation(\WC_Product $product, \WeDevs\DokanPro\Dependencies\Printful\Structures\Sync\Responses\SyncVariantResponse $variation_data, array $images, int $store_id): \WC_Product_Variation
        {
        }
        /**
         * Create attributes for a product variation.
         *
         * @since 3.13.0
         *
         * @param SyncVariantResponse[] $variations The data to insert in the variation.
         *
         * @return WC_Product_Attribute[]
         */
        protected function create_attributes(array $variations): array
        {
        }
        /**
         * Get WC product associated with a Printful product.
         *
         * @since 3.13.0
         *
         * @phpcs:disable WordPress.DB.SlowDBQuery.slow_db_query_meta_query
         *
         * @param int    $product_id Printful product ID.
         * @param string $type       Product type.
         *
         * @return WP_Post|false
         */
        public function get_associated_product_or_variation(int $product_id, string $type = 'product')
        {
        }
        /**
         * Get Printful Products Client.
         *
         * @since 3.13.0
         *
         * @return ProductsClient
         * @throws PrintfulException|Exception
         */
        public function get_printful_products_client(): \WeDevs\DokanPro\Modules\Printful\Integrations\ProductsClient
        {
        }
        /**
         * Add product images.
         *
         * @since 3.13.0
         *
         * @param SyncProductRequestResponse $printful_product Printful product Response.
         *
         * @return int[]
         */
        protected function add_product_images(\WeDevs\DokanPro\Dependencies\Printful\Structures\Sync\Responses\SyncProductRequestResponse $printful_product): array
        {
        }
        /**
         * Remove all images associated with a product.
         *
         * @since 3.13.0
         *
         * @param int $product_id Product id.
         *
         * @return void
         */
        protected function clean_product_old_images(int $product_id): void
        {
        }
        /**
         * Upload image from url.
         *
         * @since 3.13.0
         *
         * @param string $url Image url.
         *
         * @return false|int
         */
        protected function upload_image(string $url)
        {
        }
        /**
         * Update product or variation author.
         *
         *
         * @param int $product Product or Variation ID.
         *
         * @return int|\WP_Error
         */
        protected function update_author(int $product)
        {
        }
        /**
         * Get connected store ID.
         *
         * @since 3.13.0
         *
         * @return int
         */
        protected function get_connected_store_id(): int
        {
        }
        /**
         * Remove orphan variations that are not present in the Printful product sync data.
         *
         * @since 3.13.0
         *
         * @param WC_Product                 $product          The WooCommerce product object.
         * @param SyncProductRequestResponse $printful_product The Printful product sync response.
         *
         * @return void
         */
        protected function remove_orphan_variations(\WC_Product $product, \WeDevs\DokanPro\Dependencies\Printful\Structures\Sync\Responses\SyncProductRequestResponse $printful_product): void
        {
        }
    }
    /**
     * Class SizeGuideDataProcessor.
     *
     * @since 3.13.0
     */
    class SizeGuideDataProcessor
    {
        /**
         * Size Guide Data.
         *
         * @var array
         */
        public array $data = [];
        /**
         * Class Constructor.
         *
         * @since 3.13.0
         *
         * @param array $data Data
         */
        public function __construct(array $data)
        {
        }
        /**
         * Data Getter.
         *
         * @since 3.13.0
         *
         * @since 3.13.0
         *
         * @return array $this->data
         */
        public function get_data(): array
        {
        }
        /**
         * Data Formater.
         *
         * @since 3.13.0
         *
         * @param array $input Input data
         *
         * @return object $this
         */
        protected function format(array $input = []): object
        {
        }
        /**
         * Get Size Measurement Table.
         *
         * @since 3.13.0
         *
         * @param string $measurement_type Measurement
         * @param string $unit             Unit
         *
         * @return string Size Measurement Table
         */
        public function get_table(string $measurement_type, string $unit): string
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Printful\Providers {
    /**
     * Class OrderProvider.
     *
     * @since 3.13.0
     */
    class OrderProvider
    {
        /**
         * OrderProcessor instance.
         *
         * @since 3.13.0
         *
         * @var OrderProcessorInterface[] $processors OrderProcessor instance.
         */
        protected array $processors;
        /**
         * Class constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get processors.
         *
         * @since 3.13.0
         *
         * @return OrderProcessorInterface[]
         */
        public function get_processors(): array
        {
        }
        /**
         * Register processors.
         *
         * @since 3.13.0
         *
         * @return void
         */
        protected function register_processors()
        {
        }
        /**
         * Create order.
         *
         * @since 3.13.0
         *
         * @param int $order_id Order ID.
         *
         * @return void
         */
        public function create_order(int $order_id)
        {
        }
        /**
         * Schedule the creation of a Printful order.
         *
         * This function schedules the creation of a Printful order
         * for the given order ID and vendor ID.
         *
         * @since 3.13.0
         *
         * @param int $order_id The ID of the order to be sent to Printful.
         *
         * @return void
         */
        public function schedule_printful_order_creation($order_id)
        {
        }
        /**
         * Confirms the fulfillment of a Printful order for a given WooCommerce order.
         *
         * This function checks if the order has been paid, ensures that the Printful order
         * hasn't already been confirmed, retrieves the Printful order details, and confirms
         * the fulfillment of the order via the Printful API.
         *
         * @param int      $order_id    The ID of the WooCommerce order.
         * @param string   $old_status  The previous status of the order.
         * @param string   $new_status  The new status of the order.
         * @param WC_Order $order       The WooCommerce order object.
         *
         * @return void
         */
        public function confirm_printful_order_fulfillment($order_id, $old_status, $new_status, $order)
        {
        }
        /**
         * Check if the order contains any Printful products.
         *
         * @since 3.13.0
         *
         * @param bool     $should_render Whether to render the vendor delivery box.
         * @param WC_Order $order         The order object.
         *
         * @return bool Returns false if a Printful product is found, otherwise returns the original value.
         */
        public function check_printful_products_in_order(bool $should_render, \WC_Order $order): bool
        {
        }
        /**
         * Add Cart items metas if needed for Printful or other processor.
         *
         * @since 3.13.0
         *
         * @param array $cart_item_data Cart Item data.
         * @param int   $product_id Product id.
         * @param int   $variation_id Variation ID.
         *
         * @return array
         */
        public function add_cart_metas(array $cart_item_data, int $product_id, int $variation_id): array
        {
        }
        /**
         * Add Order items metas if needed for Printful or other processor.
         *
         * @since 3.13.0
         *
         * @param WC_Order_Item_Product $item
         * @param                       $cart_item_key
         * @param                       $values
         *
         * @return void
         */
        public function add_order_metas(\WC_Order_Item_Product $item, $cart_item_key, $values)
        {
        }
        /**
         * Add Order items metas if needed for Printful or other processor.
         *
         * @param WC_Order_Item_Shipping $item
         * @param string                  $package_key
         * @param array                   $package
         *
         * @return void
         */
        public function add_order_metas_for_shipping(\WC_Order_Item_Shipping $item, string $package_key, array $package)
        {
        }
    }
    /**
     * Class ProductProvider.
     *
     * @since 3.13.0
     */
    class ProductProvider
    {
        /**
         * OrderProcessor instance.
         *
         * @since 3.13.0
         *
         * @var OrderProcessorInterface[] $processors OrderProcessor instance.
         */
        protected array $processors;
        /**
         * Class constructor.
         */
        public function __construct()
        {
        }
        /**
         * Display the Printful product label in the admin post submit box.
         *
         * This method adds a Printful label to the WooCommerce product edit screen in the admin dashboard.
         * The label is displayed only if the product is identified as a Printful product.
         *
         * @since 3.13.0
         *
         * @param \WP_Post $post
         *
         * @return void
         */
        public function display_printful_product_label_for_admin($post)
        {
        }
        /**
         * Display the Printful product label in the admin post submit box.
         *
         * This method adds a Printful label to the WooCommerce product edit screen in the admin dashboard.
         * The label is displayed only if the product is identified as a Printful product.
         *
         * @since 3.13.0
         *
         * @param bool $exclude
         * @param \WC_Product $product
         *
         * @return bool
         */
        public function exclude_spmv_for_printful_product(bool $exclude, \WC_Product $product)
        {
        }
        /**
         * Display Printful add size guide button on vendor product edit page.
         *
         * @since 3.13.0
         *
         * @param \WC_Product $product
         *
         * @return void
         */
        public function display_printful_add_size_guide_button($product)
        {
        }
        /**
         * Add Printful product size guide to the product meta.
         *
         * @since 3.13.0
         *
         * @param int $product_id Product ID
         * @param int $catalog_id Catalog ID
         * @param int $vendor_id  Vendor ID
         *
         * @throws Exception
         * @return bool
         */
        public function add_printful_product_size_guide(int $product_id, int $catalog_id, int $vendor_id)
        {
        }
        /**
         * Render Size Guide Link.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function render_product_size_guide_link()
        {
        }
        /**
         * Include Product Size Guide Popup Template.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function include_product_size_guide_popup_template()
        {
        }
        /**
         * Display the Printful product badge in the vendor product edit.
         *
         * This method adds a Printful badge to the vendor product edit screen.
         * The label is displayed only if the product is identified as a Printful product.
         *
         * @since 3.13.0
         *
         * @param \WC_Product $product
         *
         * @return void
         */
        public function display_printful_product_badge($product)
        {
        }
        /**
         * Display the Printful product badge in the vendor product listing.
         *
         * This method adds a Printful badge to the vendor product listing screen.
         * The label is displayed only if the product is identified as a Printful product.
         *
         * @since 3.13.0
         *
         * @param string      $badge
         * @param \WC_Product $product
         *
         * @return string|void
         */
        public function display_printful_badge_for_product_listing($badge, $product)
        {
        }
        /**
         * Check if the given product or its variation is a Printful product.
         *
         * This method checks if the provided product or its variation is a Printful product.
         * If a product variation ID or product ID is found with Printful metadata, it returns true.
         * Otherwise, it returns false.
         *
         * @since DOKAN_PROD_SINCE
         *
         * @param \WC_Product $product The WooCommerce product object to check.
         *
         * @return bool True if the product or its variation is a Printful product, false otherwise.
         */
        public static function is_printful_product(\WC_Product $product): bool
        {
        }
        /**
         * Display the Printful product label.
         *
         * This function checks if a product is a Printful product and displays the corresponding label
         * on the product page or vendor dashboard page. It uses the Dokan template system to render the label.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function display_printful_product_label()
        {
        }
        /**
         * Exclude Printful products from SPMV search arguments.
         *
         * @since 3.13.0
         *
         * @param array $args The original search arguments.
         *
         * @return array Modified search arguments.
         */
        public function exclude_printful_products_from_spmv_search($args)
        {
        }
        /**
         * Handle custom query variable to exclude Printful products.
         *
         * @since 3.13.0
         *
         * @param array $query      The original query arguments.
         * @param array $query_vars The query variables.
         *
         * @return array Modified query arguments.
         */
        public function handle_exclude_printful_products_query_var($query, $query_vars)
        {
        }
        /**
         * Filter vendor delivery time information based on the presence of Printful products in the cart.
         *
         * This method checks if any shipping package in the cart is associated with a Printful product.
         * If a Printful product is found, it removes the corresponding vendor's delivery time information from the list.
         *
         * @since 3.13.0
         *
         * @param array $vendor_infos Array containing delivery time information for vendors.
         *
         * @return array Filtered array of vendor delivery time information.
         */
        public function filter_vendor_delivery_time_by_printful_product(array $vendor_infos): array
        {
        }
        /**
         * Get product size guide styles.
         *
         * @since 3.13.0
         *
         * @return array $styles Size Guide Styles
         */
        public function get_product_size_guide_styles(): array
        {
        }
    }
    /**
     * Shipping service provider.
     *
     * @since 3.13.0
     */
    class ShippingProvider
    {
        /**
         * Constructor.
         *
         * @since 3.13.0
         */
        public function __construct()
        {
        }
        /**
         * Renders the Printful shipment badge for a given product.
         *
         * This method checks if the given product or its parent (if the product is a variation)
         * is a Printful product. If it is, a Printful shipment badge is rendered.
         *
         * @since 3.13.0
         *
         * @param \WC_Product $product The product object to check and render the badge for.
         *
         * @return void
         */
        public function render_printful_shipment_badge($product)
        {
        }
        /**
         * Split packages for POD services.
         *
         * @since 3.13.0
         *
         * @param array $packages
         *
         * @return array
         */
        public function split_packages_for_pod_services(array $packages): array
        {
        }
        /**
         * Load shipping method.
         *
         * @since 3.13.0
         *
         * @param array $package Package.
         *
         * @return void
         */
        public function load_shipping_method($package)
        {
        }
        /**
         * Remove default shipping rates when needed.
         *
         * @since 3.13.0
         *
         * @param WC_Shipping_Rate[] $rates Rates.
         * @param array              $package Package.
         *
         * @return array
         */
        public function remove_default_shipping_rates_when_needed(array $rates, array $package): array
        {
        }
        /**
         * Check is this package created by printful or not.
         *
         * @since 3.13.0
         *
         * @param array $package Shipping Package.
         *
         * @return bool
         */
        protected function is_printful_package(array $package): bool
        {
        }
        /**
         * Check if the default shipping method need to be removed.
         *
         * @since 3.13.0
         *
         * @param array $package Shipping Package.
         *
         * @return bool
         */
        protected function need_remove_vendor_or_admin_shipping_methods(array $package)
        {
        }
        /**
         * Adds Printful shipment overlay information to localized arguments.
         *
         * This method is used to include a localized message in the data array indicating
         * that the shipment for this item will be handled by Printful. It enhances the user
         * experience by providing specific shipment handling information.
         *
         * @since 3.13.0
         *
         * @param array $data The data array to be localized.
         *
         * @return array The modified data array with Printful shipment overlay information.
         */
        public function add_printful_shipment_overlay_info($data)
        {
        }
        /**
         * Adds a Printful class to the order item if the product is from Printful.
         *
         * This method appends the class 'printful-product' to the existing class name if
         * the product associated with the order item is identified as a Printful product.
         * This allows for specific styling or handling in the admin interface based on
         * product type.
         *
         * @since 3.13.0
         *
         * @param string          $class_name  The current class name of the order item.
         * @param \WC_Order_Item  $order_item  The order item object containing product information.
         *
         * @return string The modified class name with 'printful-product' appended if applicable.
         */
        public function add_printful_class_to_order_item($class_name, \WC_Order_Item $order_item)
        {
        }
        /**
         * Prevents shipment creation if Printful products are found in the order.
         *
         * This method checks the provided list of item IDs against the order to see if any
         * of them are Printful products. If a Printful product is detected, it returns true,
         * which prevents the creation of a shipment for these items. This helps in handling
         * shipments that should be processed differently due to specific product handling
         * requirements by Printful.
         *
         * @since 3.13.0
         *
         * @param bool  $valid     The current validity status of shipment creation.
         * @param int   $order_id  The ID of the order.
         * @param array $item_list List of item IDs to check for Printful products.
         *
         * @return bool Returns true if a Printful product is found, otherwise returns the original validity status.
         */
        public function prevent_shipment_creation_for_printful_products(bool $valid, int $order_id, array $item_list): bool
        {
        }
    }
    /**
     * Webhook Service Provider.
     *
     * @since 3.13.0
     */
    class WebhookProvider
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Register webhook to Printful.
         *
         * @since 3.13.0
         *
         * @return bool
         */
        public static function register(): bool
        {
        }
        /**
         * Deregister webhook to Printful.
         *
         * @since 3.13.0
         *
         * @return bool
         */
        public static function deregister(): bool
        {
        }
        /**
         * Get pre-configured webhook handler.
         *
         * @since 3.13.0
         *
         * @param int $vendor_id Vendor ID.
         *
         * @return PrintfulWebhook
         * @throws PrintfulException|Exception If vendor not found or vendor is not connected or Printful error.
         */
        public static function get_webhook_handler(int $vendor_id = 0): \WeDevs\DokanPro\Dependencies\Printful\PrintfulWebhook
        {
        }
        /**
         * Printful Event listener.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function event_listener()
        {
        }
        /**
         * Process product.
         *
         * @since 3.13.0
         *
         * @param int $printful_product_id Printful Product ID.
         * @param int $product_id Product ID.
         * @param int $vendor_id Vendor ID.
         * @param string $previous_status Previous product status.
         *
         * @return void
         */
        public function process_product($printful_product_id, $product_id, $vendor_id, $previous_status)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Printful\Shipping {
    class PrintfulShippingMethod extends \WC_Shipping_Method
    {
        /**
         * Constructor. The instance ID is passed to this.
         */
        public function __construct($instance_id = 0)
        {
        }
        /**
         * Calculate_shipping function.
         *
         * @param array $package (default: array())
         */
        public function calculate_shipping($package = array())
        {
        }
        /**
         * Get Printful rates.
         *
         * @since 3.13.0
         *
         * @param array $package Package.
         *
         * @return array
         * @throws Exception
         */
        protected function get_printful_rates(array $package): array
        {
        }
    }
    /**
     * Shipping package splitter class.
     *
     * This class is responsible for detecting POD services and splitting shipping package in multiple package
     * containing items from different POD services.
     *
     * @since 3.13.0
     *
     * @package WeDevs\DokanPro\Modules\Printful\Shipping
     */
    abstract class ShippingPackageSplitter
    {
        /**
         * Next splitter in chain.
         *
         * @since 3.13.0
         *
         * @var null|ShippingPackageSplitter
         */
        protected ?\WeDevs\DokanPro\Modules\Printful\Shipping\ShippingPackageSplitter $next = null;
        /**
         * Sets next splitter in chain.
         *
         * @since 3.13.0
         *
         * @param ShippingPackageSplitter $next
         *
         * @return ShippingPackageSplitter
         */
        public function set_next(\WeDevs\DokanPro\Modules\Printful\Shipping\ShippingPackageSplitter $next): \WeDevs\DokanPro\Modules\Printful\Shipping\ShippingPackageSplitter
        {
        }
        /**
         * Splits shipping packages.
         *
         * @since 3.13.0
         *
         * @param array $packages
         *
         * @return array
         */
        public function split(array $packages): array
        {
        }
    }
    /**
     * Split shipping package for only Printful products.
     *
     * @since 3.13.0
     */
    class PrintfulShippingPackageSplitter extends \WeDevs\DokanPro\Modules\Printful\Shipping\ShippingPackageSplitter
    {
        const PACKAGE_KEY = 'printful_package';
        /**
         * Split shipping packages.
         *
         * @since 3.13.0
         *
         * @param array $packages Shipping Package.
         *
         * @return array
         */
        public function split(array $packages): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Printful {
    /**
     * Class Vendor
     *
     * Responsible for vendor specific functionality.
     *
     * @since 3.13.0
     *
     * @property Settings $settings Settings class instance.
     *
     * @package WeDevs\DokanPro\Modules\Printful
     */
    class Vendor
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Class constructor.
         */
        public function __construct()
        {
        }
        /**
         * Add capabilities to vendor.
         *
         * @param array $capabilities Array of capabilities.
         *
         * @return array
         */
        public function add_capabilities(array $capabilities): array
        {
        }
        /**
         * Registers Printful Menu on Vendor Dashboard.
         *
         * @since 3.13.0
         *
         * @param array $urls Menu URL data
         *
         * @return array $urls
         */
        public function register_printful_menu($urls)
        {
        }
        /**
         * Is Printful Ready.
         *
         * @since 3.13.0
         *
         * @return bool
         */
        public function is_printful_ready()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Printful\Vendor {
    /**
     * Printful Connect class.
     *
     * @since 3.13.0
     */
    class Connect
    {
        /**
         * Class constructor.
         *
         * @since 3.13.0
         */
        public function __construct()
        {
        }
        /**
         * Process redirection.
         *
         * @since 3.13.0
         *
         * @phpcs:disable WordPress.Security.NonceVerification.Recommended
         *
         * @return void
         */
        public function process()
        {
        }
        /**
         * Display error.
         *
         * @since 3.13.0
         *
         * @return void
         */
        protected function display_error()
        {
        }
        /**
         * Error template display.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function error_template()
        {
        }
    }
    /**
     * Printful Disconnect class.
     *
     * @since 3.13.0
     */
    class Disconnect
    {
        /**
         * Class Constructor.
         *
         * @since 3.13.0
         */
        public function __construct()
        {
        }
        /**
         * Process Products Status Update Queue.
         *
         * @since 3.13.0
         *
         * @param $page Page number
         *
         * @return void
         */
        public function process_products_status_update_queue($page = 1)
        {
        }
        /**
         * Update Single Product Status to Draft.
         *
         * @since 3.13.0
         *
         * @param $product_id Product ID
         *
         * @return void
         */
        public function update_single_product_status_to_draft($product_id)
        {
        }
    }
    /**
     * Vendor Printful Settings
     *
     * @since 3.13.0
     */
    class Settings
    {
        /**
         * Page Slug
         *
         * @var string
         */
        const PAGE_SLUG = 'printful';
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Register settings menu in dashboard
         *
         * @since 3.13.0
         *
         * @param array $settings_menu Dokan settings menu.
         *
         * @return array
         */
        public function register_settings_menu(array $settings_menu): array
        {
        }
        /**
         * Load Settings Header
         *
         * @since 3.13.0
         *
         * @param  string $header Header String.
         * @param  array $query_vars Query vars.
         *
         * @return string
         */
        public function load_settings_header($header, $query_vars)
        {
        }
        /**
         * Load Settings page helper
         *
         * @since 3.13.0
         *
         * @param string $help_text Helper text.
         * @param string  $query_vars Query vars.
         *
         * @return string
         */
        public function load_settings_helper_text(string $help_text, string $query_vars)
        {
        }
        /**
         * Load Settings Content
         *
         * @since 3.13.0
         *
         * @param array $query_vars Query vars.
         *
         * @return void
         */
        public function load_settings_content(array $query_vars)
        {
        }
    }
}
namespace {
    /**
     * Dependency Notice Handler Class
     *
     * @since 3.5.0
     */
    class DependencyNotice
    {
        /**
         * Whether the module is loadable or not.
         *
         * @var bool
         */
        protected $missing_dependency = \false;
        /**
         * Class constructor
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Check has missing dependency
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public function is_missing_dependency()
        {
        }
        /**
         * WooCommerce Product Addon activation notice
         *
         * @since 3.5.0
         *
         * @param array $notices
         *
         * @return array
         */
        public function product_addon_activation_notice($notices)
        {
        }
        /**
         * Activate WooCommerce Product Addon plugin
         *
         * @since 3.5.0
         *
         * @return void
         * */
        public function activate_wc_product_addon()
        {
        }
    }
    /**
    * Frontend vendor product addons
    */
    class Dokan_Product_Addon_Frontend
    {
        /**
         * Load automatically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Initializes the Dokan_Product_Addon_Frontend() class
         *
         * Checks for an existing Dokan_Product_Addon_Frontend() instance
         * and if it doesn't find one, creates it.
         */
        public static function init()
        {
        }
        /**
         * Add settings menu for global addons
         *
         * @since 1.0.0
         *
         * @param array $settings_tab
         */
        public function add_settings_menu($settings_tab)
        {
        }
        /**
         * Load product addon settings header
         *
         * @since 1.0.0
         *
         * @param string $header The setting header text.
         * @param string $query_vars The query vars.
         *
         * @return string
         */
        public function load_settings_header($header, $query_vars)
        {
        }
        /**
         * Load Helper Text for addon contents
         *
         * @since 1.0.0
         *
         * @param string $helper_txt The helper text.
         * @param string $query_var The query var.
         *
         * @return string
         */
        public function load_helper($helper_txt, $query_var)
        {
        }
        /**
         * Render settings contents
         *
         * @since 1.0.0
         *
         * @param array $query_vars The query vars.
         *
         * @return void
         */
        public function render_settings_content($query_vars)
        {
        }
        /**
         * Render vendor global addons using query filter
         *
         * @since 1.0.0
         *
         * @param WP_Query $query The WP_Query object.
         *
         * @return void
         */
        public function render_vendor_global_addons($query)
        {
        }
        /**
         * Handle redirect issue with handling form data request
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function handle_addon_formdata()
        {
        }
        /**
         * Save global addons
         *
         * @return int Edit id.
         */
        public function save_global_addons()
        {
        }
        /**
         * Get add-on options ajax override.
         *
         * @since 3.9.4
         *
         * @return void
         */
        public function ajax_get_addon_options()
        {
        }
    }
    /**
    * Product addon override from Vendor product
    *
    * @package dokan|Product Addon Moduel
    */
    class Dokan_Product_Addon_Vendor_Product
    {
        /**
         * Load autometically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Initializes the Dokan_Product_Addon_Vendor_Product() class
         *
         * Checks for an existing Dokan_Product_Addon_Vendor_Product() instance
         * and if it doesn't find one, creates it.
         */
        public static function init()
        {
        }
        /**
         * Product add on sections
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function add_addons_section($post, $post_id)
        {
        }
        /**
         * Save product add on options
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function save_addon_options($post_id, $postdata)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductAddon {
    class Module
    {
        /**
         * Constructor for the Dokan_Product_Addon class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @uses is_admin()
         * @uses add_action()
         */
        public function __construct()
        {
        }
        /**
         * Init the modules
         *
         * @since 3.1.2
         *
         * @return void
         */
        public function init()
        {
        }
        /**
         * Hooks
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function define()
        {
        }
        /**
         * Get plugin path
         *
         * @since 1.5.1
         *
         * @return void
         **/
        public function plugin_path()
        {
        }
        /**
         * Includes all necessary class a functions file
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function includes()
        {
        }
        /**
         * Initiate all classes
         *
         * @return void
         */
        public function initiate()
        {
        }
        /**
         * Init all hooks
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Get add-on field.
         *
         * @since 1.0.0
         */
        public function ajax_get_addon_field()
        {
        }
        /**
         * Register Scripts
         *
         * @3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Load global scripts
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function load_scripts()
        {
        }
        /**
         * Enqueue scripts
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Load dokan pro templates
         *
         * @since 1.5.1
         *
         * @return void
         **/
        public function load_product_addon_templates($template_path, $template, $args)
        {
        }
        public function load_vendor_staff_addons()
        {
        }
        /**
         * Set author in for vendor staff
         *
         * @param $query
         *
         * @since 3.1.4
         *
         * @return void
         */
        public function set_author_in_for_vendor_staff($query)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductAdvertisement\Admin {
    /**
     * Class Admin
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement
     *
     * @since 3.5.0
     */
    class Admin
    {
        /**
         * Admin constructor.
         */
        public function __construct()
        {
        }
        /**
         * Enqueue Admin Scripts
         *
         * @param string $hook
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function admin_enqueue_scripts($hook)
        {
        }
        /**
         * Add submenu page in dokan Dashboard
         *
         * @param string $capability
         *
         * @since DOKAN_PRP_SINCE
         *
         * @return void
         */
        public function add_submenu($capability)
        {
        }
        /**
         * Add subscripton route
         *
         * @param  array $routes
         *
         * @since 3.5.0
         *
         * @return array
         */
        public function admin_routes($routes)
        {
        }
        /**
         * Remove reverse withdrawal base product if page has been deleted
         *
         * @sience 3.7.0
         *
         * @param int $post_id
         *
         * @return void
         */
        public function delete_base_product($post_id)
        {
        }
    }
    /**
     * Class Install
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement
     *
     * @since 3.5.0
     */
    class Install
    {
        /**
         * Install constructor.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Schedule crom for midnight
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public function schedule_cron()
        {
        }
    }
    /**
     * Class Settings
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement
     *
     * @since 3.5.0
     */
    class Settings
    {
        /**
         * Settings constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Load admin settings section
         *
         * @since 3.5.0
         *
         * @param array $section
         *
         * @return array
         */
        public function load_settings_section($section)
        {
        }
        /**
         * Load all settings fields
         *
         * @since 3.5.0
         *
         * @param array $fields
         *
         * @return array
         */
        public function load_settings_fields($fields)
        {
        }
        /**
         * Validates admin delivery settings
         *
         * @since 3.5.0
         *
         * @param string $option_name
         * @param array $option_value
         *
         * @return void
         */
        public function validate_admin_settings($option_name, $option_value)
        {
        }
        /**
         * Validates admin delivery settings
         *
         * @since 3.7.0
         *
         * @param string $option_name
         * @param array $option_value
         *
         * @return void
         */
        public function create_advertisement_base_product($option_name)
        {
        }
    }
    /**
     * Class VendorSubscription
     *
     * @since 3.5.0
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement
     */
    class VendorSubscription
    {
        /**
         * VendorSubscription constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * This function will render fields under product edit page's general tab
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function subscription_product_fields()
        {
        }
        /**
         * This method will save fields data added to general tab
         *
         * @since 3.5.0
         *
         * @param int $post_id
         *
         * @return void
         */
        public function save_subscription_product_fields($post_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductAdvertisement {
    /**
     * Class AdvertisementCache
     *
     * @since 3.5.0
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement
     */
    class AdvertisementCache
    {
        /**
         * AdvertisementCache constructor.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * This method will delete advertisement cache by ids
         *
         * @since 3.5.0
         *
         * @param $advertisement_ids
         *
         * @return void
         */
        public function batch_delete_product_advertisement($advertisement_ids)
        {
        }
        /**
         * Delete cache by advertisement id
         *
         * @since 3.5.0
         *
         * @param int $advertisement_id
         *
         * @return void
         */
        public function before_deleting_product_advertisement($advertisement_id)
        {
        }
        /**
         * Delete advertisement cache after new advertisement is created
         *
         * @since 3.5.0
         *
         * @param int $advertisement_id
         * @param array $advertisement_data
         * @param array $args
         *
         * @return void
         */
        public function after_product_advertisement_created($advertisement_id, $advertisement_data, $args)
        {
        }
        /**
         * Invalidate Advertisement Seller Cache
         *
         * @since 3.5.0
         *
         * @param int|null $seller_id
         *
         * @return void
         */
        public static function delete($seller_id = null)
        {
        }
        /**
         * Delete advertisement cache after a product has been updated
         *
         * @since 3.5.0
         *
         * @param int|\WC_Product $product
         *
         * @return void
         */
        public static function after_product_update($product)
        {
        }
    }
    /**
     * Class Ajax
     *
     * @since 3.5.0
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement
     */
    class Ajax
    {
        /**
         * Ajax constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * This method will add a product to cart from product edit page
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function purchase_advertisement()
        {
        }
        /**
         * This method will get advertisement status for a product
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function get_advertisement_data()
        {
        }
    }
    /**
     * Product Advertisement Module product block.
     *
     * @since 3.7.13
     */
    class BlockData
    {
        /**
         * Block section name.
         *
         * @since 3.7.13
         *
         * @var string
         */
        public $section;
        /**
         * Constructor class.
         *
         * @since 3.7.13
         */
        public function __construct()
        {
        }
        /**
         * Get order-min-max product data for Dokan-pro
         *
         * @since 3.7.13
         *
         * @param array      $block
         * @param WC_Product $product
         * @param string     $context
         *
         * @return array
         */
        public function get_product_block_data(array $block, $product, string $context)
        {
        }
        /**
         * Save purchase advertisement data after REST-API insert or update.
         *
         * @since 3.7.13
         *
         * @todo Handle this from an API or AJAX request.
         *
         * @param WC_Product      $product  Inserted object.
         * @param WP_REST_Request $request  Request object.
         * @param boolean         $creating True when creating object, false when updating.
         *
         * @return void
         * @throws Exception
         */
        public function set_product_block_data($product, $request, $creating = true)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductAdvertisement\Frontend {
    /**
     * Class Cart
     *
     * @since 3.5.0
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement
     */
    class Cart
    {
        /**
         * Cart constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Remove PayPal Marketplace Checkout Validations
         *
         * @since 3.5.0
         *
         * @param bool $escape
         * @param array $cart_item
         *
         * @return bool
         */
        public function paypal_remove_gateway_validations($escape, $cart_item)
        {
        }
        /**
         * Get admin partner id for advertisement product
         *
         * @since 3.5.0
         *
         * @param string $merchant_id
         * @param int $product_id
         *
         * @return string
         */
        public function paypal_get_merchant_id_for_advertisement($merchant_id, $product_id)
        {
        }
        /**
         * Get admin partner id for advertisement product
         *
         * @since 3.5.0
         *
         * @param string $merchant_id
         * @param \WC_Abstract_Order $order
         *
         * @return string
         */
        public function paypal_purchase_unit_merchant_id($merchant_id, $order)
        {
        }
        /**
         * This method will remove delivery time module section from checkout page
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function remove_delivery_time_section_from_checkout()
        {
        }
        /**
         * Injects seller name on cart and other areas
         *
         * @since 3.5.0
         *
         * @param array $item_data
         * @param array $cart_item
         *
         * @return array
         */
        public function display_advertisement_meta($item_data, $cart_item)
        {
        }
        /**
         * Add custom price into cart meta item.
         *
         * @since 3.5.0
         *
         * @param \WC_Cart $cart for whole cart.
         */
        public function woocommerce_custom_price_to_cart_item($cart)
        {
        }
        /**
         * This method will prevent user from adding product to cart while purchasing per product advertisement setting is disabled.
         *
         * @since 3.5.0
         *
         * @param bool $passed
         * @param int $product_id
         *
         * @return bool
         */
        public static function prevent_purchasing_advertisement_product($passed, $product_id)
        {
        }
        /**
         * This method will remove other products from cart if advertisement exists in cart.
         *
         * @since 3.5.0
         *
         * @param bool $passed
         * @param int $product_id
         *
         * @return bool
         */
        public static function remove_other_products($passed, $product_id)
        {
        }
        /**
         * Validate cart data
         *
         * @since 3.5.0
         *
         * @param $data
         * @param $errors
         *
         * @return void
         */
        public function check_vendor_can_purchase_advertisement($data, $errors)
        {
        }
        /**
         * Skips the cart validation for Stripe Express and MangoPay.
         *
         * @since 3.7.17
         *
         * @param bool $needs_validation
         *
         * @return bool
         */
        public function skip_cart_validation_for_advertisement($needs_validation)
        {
        }
        /**
         * Skips payment disbursement to vendors for Stripe Express and MangoPay.
         *
         * @since 3.7.17
         *
         * @param bool $disburse
         * @param WC_Order $order
         *
         * @return bool
         */
        public function skip_payment_disbursement_for_advertisement($disburse, $order)
        {
        }
    }
    /**
     * Class Order
     *
     * @since 3.5.0
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement
     */
    class Order
    {
        /**
         * Order constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Insert advertisement into database after order status has been completed.
         *
         * @since 3.5.0
         *
         * @param int    $order_id of the $order_id .
         * @param string $old_status old status of the order.
         * @param string $new_status this is new status of the order.
         */
        public function process_order_status_changed($order_id, $old_status, $new_status)
        {
        }
        /**
         * Insert advertisement into database after order payment status has been completed
         *
         * @since 3.5.0
         *
         * @param int $order_id
         *
         * @return void
         */
        public function process_advertisement_order($order_id)
        {
        }
        /**
         * This method will insert advertisement record into database
         *
         * @since 3.5.0
         *
         * @param int $order_id
         *
         * @return void
         */
        protected function insert_advertisement($order_id)
        {
        }
        /**
         * Stores advertisement cost and expire date in the line item meta.
         *
         * @since 3.5.0
         *
         * @param \WC_Order_Item_Product $line_item     The line item added to the order.
         * @param string                 $cart_item_key The key of the cart item being added to the cart.
         * @param array                  $cart_item     The cart item data.
         */
        public static function store_advertisement_line_item_metas($line_item, $cart_item_key, $cart_item)
        {
        }
        /**
         * Hide meta key in the order.
         *
         * @since 3.5.0
         *
         * @param  string $display_key of the key.
         * @param  object $meta for the meta data.
         * @param  array $item array.
         *
         * @return string
         */
        public function hide_order_item_meta_key($display_key, $meta, $item)
        {
        }
        /**
         * Hide meta key in the order.
         *
         * @since 3.5.0
         *
         * @param  mixed $display_value for the display item.
         * @param  object $meta data of the order.
         * @param  array $item item array.
         *
         * @return string
         */
        public function hide_order_item_meta_value($display_value, $meta, $item)
        {
        }
        /**
         * Modifies payin data for Mangopay while purchasing advertisement.
         *
         * @since 3.7.18
         *
         * @param array $payin_data
         *
         * @return bool
         */
        public function modify_mangopay_payin_data($payin_data)
        {
        }
    }
    /**
     * Class Product
     *
     * @since 3.5.0
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement
     */
    class Product
    {
        /**
         * Product constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         *
         * @since 3.5.0
         *
         * @param int $post_id
         *
         * @return void
         */
        public function render_advertise_product_section($post_id)
        {
        }
        /**
         * This method  will print advertisement row data
         *
         * @since 3.5.0
         *
         * @param \WP_Post $post
         * @param \WC_Product $product
         *
         * @return void
         */
        public function product_listing_table_content($post, $product)
        {
        }
        /**
         * This method will add featured column under vendor dashboard product listing page
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function product_listing_table_column()
        {
        }
        /**
         * Load frontend scripts
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function load_product_scripts()
        {
        }
    }
    /**
     * Top rated products section class.
     *
     * For displaying top rated products section to single store page.
     *
     * @since 3.5.0
     *
     * @package dokan
     */
    class ProductSection extends \WeDevs\Dokan\ProductSections\AbstractProductSection
    {
        /**
         * Set unique section id for the this section.
         *
         * @since 3.5.0
         *
         * @return void
         */
        protected function set_section_id()
        {
        }
        /**
         * Get single store page section title.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public function get_section_title()
        {
        }
        /**
         * Get single store page section title.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public function get_section_label()
        {
        }
        /**
         * Get section products.
         *
         * @since 3.5.0
         *
         * @param int $vendor_id
         *
         * @return \WP_Query
         */
        public function get_products($vendor_id)
        {
        }
    }
    /**
     * Class ProductWidget
     *
     * @since 3.5.0
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement\Frontend
     */
    class ProductWidget extends \WC_Widget
    {
        /**
         * Instance key to keep track of the widget inside widget container in dokan-lite
         *
         * @since 3.10.2
         *
         * @var string
         */
        const INSTANCE_KEY = 'product_adv__ProductWidget';
        // Naming Structure: {module_slug}__{ClassName}
        /**
         * ProductWidget constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Query the products and return them.
         *
         * @since 3.5.0
         *
         * @param array $args     Arguments.
         * @param array $instance Widget instance.
         *
         * @return bool|\WP_Query false if no advertisement exists
         */
        public function get_products($args, $instance)
        {
        }
        /**
         * Output widget.
         *
         * @since 3.5.0
         *
         * @param array $args     Arguments.
         * @param array $instance Widget instance.
         *
         * @see WP_Widget
         */
        public function widget($args, $instance)
        {
        }
    }
    /**
     * Class Shortcode
     *
     * @since 3.5.0
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement\Frontend
     */
    class Shortcode extends \WeDevs\Dokan\Abstracts\DokanShortcode
    {
        /**
         * @var string $shortcode shortcode name
         */
        protected $shortcode = 'dokan_product_advertisement';
        /**
         * Render shortcode content
         *
         * @since 3.5.0
         *
         * @param array $atts
         * @return string
         */
        public function render_shortcode($atts)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductAdvertisement {
    /**
     * Class Helper
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement
     *
     * @since 3.5.0
     */
    class Helper
    {
        /**
         * This method will return true if per product advertisement is enabled from product listing and product edit page.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_per_product_advertisement_enabled()
        {
        }
        /**
         * This method will return true if advertisement is enabled for vendor subscription pack
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_enabled_for_vendor_subscription()
        {
        }
        /**
         * This method will return true if advertisement is enabled for provided subscription pack
         *
         * @since 3.5.0
         *
         * @param int $pack_id
         *
         * @return bool
         */
        public static function is_advertisement_enabled_for_subscription_pack($pack_id)
        {
        }
        /**
         * This method will return if admin wants to set purchased advertisement products as featured.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_featured_enabled()
        {
        }
        /**
         * This method will return if admin wants to set purchased advertisement products as featured.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_catalog_priority_enabled()
        {
        }
        /**
         * This method will return if admin wants to out of stocks products from advertisements.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_hide_out_of_stock_products_enabled()
        {
        }
        /**
         * This method will return advertisement cost for per product
         *
         * @since 3.5.0
         *
         * @return float 0 for free purchase or a positive float number
         */
        public static function get_advertisement_cost()
        {
        }
        /**
         * This method will return total advertisement slot mentioned under admin settings.
         *
         * @since 3.5.0
         *
         * @return int -1 for unlimited advertisement products or a non-zero positive integer
         */
        public static function get_total_advertisement_slot_count()
        {
        }
        /**
         * This method will return advertisement product count for provided subscription pack
         *
         * @since 3.5.0
         *
         * @param int $pack_id
         *
         * @return int -1 if no limit is set, non-zero positive integer otherwise
         */
        public static function get_subscription_pack_total_advertisement_slot($pack_id)
        {
        }
        /**
         * This method will return total number of advertisement slot is available for a vendor by subscription
         *
         * If vendor subscription module is active and if vendor is subscribed to any subscription package,
         * this method will return assigned package's slot count (if any), otherwise, this will return
         * false
         *
         * @since 3.5.0
         *
         * @param int $vendor_id
         *
         * @return int|bool -1 for unlimited advertisement, positive integer otherwise. false if no slot is assigned
         */
        public static function get_total_advertisement_slot_count_by_vendor_subscription($vendor_id)
        {
        }
        /**
         * This method will return available/remaining advertisement counts
         *
         * @since 3.5.0
         *
         * @return int -1 if no restriction is applied, positive integer otherwise
         */
        public static function get_available_advertisement_slot_count()
        {
        }
        /**
         * This method will return number of available advertisement slot count for a vendor by subscription
         *
         * If vendor subscription is exists and vendor is subscribe to any package, this will return available slot count from
         * package count, otherwise this will return false.
         *
         * @since 3.5.0
         *
         * @param int $vendor_id
         *
         * @return int|bool -1 for unlimited advertisement, positive integer otherwise
         */
        public static function get_available_advertisement_slot_count_by_vendor_subscription($vendor_id)
        {
        }
        /**
         * This method will return total number of days a product will be advertised.
         *
         * @since 3.5.0
         *
         * @return int -1 if advertisement is for unlimited period of time or a non-zero positive integer
         */
        public static function get_expire_after_days()
        {
        }
        /**
         * This method will return advertised days for a vendor subscription pack
         *
         * @param $pack_id
         *
         * @since 3.5.0
         *
         * @return int -1 if no expire days, non-zero positive integer otherwise
         */
        public static function get_subscription_pack_expire_after_days($pack_id)
        {
        }
        /**
         * This method will return advertised product's expire after days for a vendor by subscription
         *
         * If Vendor Subscription module is active and vendor is assigned to any subscription plan, this method will return
         * subscription pack's expire after days, otherwise this method will return false
         *
         * @since 3.5.0
         *
         * @param int $vendor_id
         *
         * @return int|bool -1 if no expire days, non-zero positive integer otherwise, false if not assigned
         */
        public static function get_expire_after_days_by_vendor_subscription($vendor_id)
        {
        }
        /**
         * Check whether subscription module is enabled or not
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function has_vendor_subscription_module()
        {
        }
        /**
         * This method will check if vendor is under any subscription pack
         *
         * @since 3.5.0
         *
         * @param int $vendor_id
         *
         * @return bool|\DokanPro\Modules\Subscription\SubscriptionPack
         */
        public static function check_subscription_status_for_vendor($vendor_id = 0)
        {
        }
        /**
         * This method will check if cart contain advertisement product
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function has_product_advertisement_in_cart()
        {
        }
        /**
         * This method will check if cart contain advertisement product
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function has_product_advertisement_in_order($order)
        {
        }
        /**
         * @param \WC_Abstract_Order $order
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_advertisement_data_from_order(\WC_Abstract_Order $order)
        {
        }
        /**
         * This method will return formatted expire after days text
         *
         * @since 3.5.0
         *
         * @param int $expire_after_days
         *
         * @return string
         */
        public static function format_expire_after_days_text($expire_after_days)
        {
        }
        /**
         * This method will return formatted expire after date as localized string
         *
         * @since 3.5.0
         *
         * @param int $expires_at
         *
         * @return string
         */
        public static function get_formatted_expire_date($expires_at)
        {
        }
        /**
         * This method will return formatted expire after date as localized string
         *
         * @since 3.5.0
         *
         * @param int $remaining_slot
         *
         * @return string
         */
        public static function get_formatted_remaining_slot_count($remaining_slot)
        {
        }
        /**
         * This method will return option key for advertisement base product
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_advertisement_base_product_option_key()
        {
        }
        /**
         * Create advertisement product
         *
         * @since 3.5.0
         *
         * @return int
         */
        public static function get_advertisement_base_product()
        {
        }
        /**
         * This method will return vendor id if called from single store page
         *
         * @since 3.5.0
         *
         * @return bool|int
         */
        public static function get_vendor_from_single_store_page()
        {
        }
        /**
         * Mark product as featured
         *
         * @since 3.5.0
         *
         * @param int|\WC_Product $product
         * @param bool $featured
         *
         * @return void
         */
        public static function make_product_featured($product, $featured = true)
        {
        }
        /**
         * Check if product has been advertised
         *
         * @since 3.5.0
         *
         * @param int $product_id
         *
         * @return bool
         */
        public static function is_product_advertised($product_id)
        {
        }
        /**
         * Get advertisement data by product
         *
         * @since 3.5.0
         *
         * @param int|null $product
         *
         * @return array
         */
        public static function get_advertisement_data_by_product($product)
        {
        }
        /**
         * Get advertisement data and validate
         *
         * @since 3.5.0
         *
         * @param int $product_id
         * @param int $vendor_id
         *
         * @return array|WP_Error
         */
        public static function get_advertisement_data_for_insert($product_id, $vendor_id)
        {
        }
        /**
         * This method will create advertisement base product
         *
         * @since 3.7.0
         *
         * @return void
         */
        public static function create_advertisement_base_product()
        {
        }
        /**
         * Purchase product advertisement.
         *
         * @since 3.7.13
         *
         * @param int $product_id
         *
         * @return array|Exception
         *
         * @throws Exception
         */
        public static function purchase_advertisement($product_id)
        {
        }
    }
    /**
     * Class Hooks
     *
     * @since 3.5.0
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement
     */
    class Hooks
    {
        /**
         * Hooks constructor.
         */
        public function __construct()
        {
        }
        /**
         * This method will mark advertised product as featured
         *
         * @since 3.5.0
         *
         * @param int $advertisement_id
         * @param array $data
         *
         * @return void
         */
        public function make_product_featured($advertisement_id, $data)
        {
        }
        /**
         * This method will mark advertised product as featured
         *
         * @since 3.6.1
         *
         * @param int $advertisement_id
         * @param array $data
         * @param array $args
         *
         * @return void
         */
        public function add_reverse_withdrawal_entry($advertisement_id, $data, $args)
        {
        }
        /**
         * Remove from featured list when advertisement is expired
         *
         * @since 3.5.0
         *
         * @param array $ids
         *
         * @return void
         */
        public function remove_featured_product($ids)
        {
        }
        /**
         * Remove from featured list when advertisement is deleted
         *
         * @since 3.5.0
         *
         * @param array $ids
         *
         * @return void
         */
        public function remove_deleted_featured_product($ids)
        {
        }
        /**
         * Expire advertisement daily
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function expire_advertisements()
        {
        }
        /**
         * Remove advertisement base product after advertisement product has been deleted.
         *
         * @since 3.5.0
         *
         * @param int
         *
         * @return void
         */
        public function delete_advertisement_base_product($post_id)
        {
        }
        /**
         * Display advertised products on top
         *
         * @since 3.5.0
         *
         * @param array $posts
         * @param object $query query arguments
         *
         * @return array
         */
        public function display_advertised_products_on_top($posts, $query)
        {
        }
        /**
         * Render product section under single product page
         *
         * @param $container
         *
         * @return array
         */
        public function render_product_section($container)
        {
        }
        /**
         * Exclude commission from report log if order contains advertisement product
         *
         * @since 3.5.0
         *
         * @param bool $exclude
         * @param object $order
         *
         * @return bool
         */
        public function report_log_exclude_commission($exclude, $order)
        {
        }
        /**
         * Delete advertisement data if a product has been deleted
         *
         * @since 3.5.0
         *
         * @param $post_id
         *
         * @return void
         */
        public function delete_advertisement($post_id)
        {
        }
        /**
         * Remove min max rules for advertisement products.
         *
         * @since 3.10.3
         *
         * @param bool $apply_min_max
         * @param int  $product_id
         *
         * @return bool
         */
        public function remove_min_max_for_advertisements($apply_min_max, $product_id)
        {
        }
        /**
         * Make vendors own product purchasable if
         * advertisement product.
         *
         * @since 3.10.3
         *
         * @param bool        $is_purchasable
         * @param \WC_Product $product
         *
         * @return bool
         */
        public function make_product_purchasable_for_advertisement($is_purchasable, $product)
        {
        }
    }
    /**
     * Class Manager
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement
     *
     * @since 3.5.0
     */
    class Manager
    {
        /**
         * Manager constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * This method will return data from dokan_advertised_products table
         *
         * @since 3.5.0
         *
         * @param array $args
         *
         * @return array|int|null|object
         */
        public function all($args = [])
        {
        }
        /**
         * This method will return a single advertisement table data
         *
         * @since 3.5.0
         *
         * @param int $id
         *
         * @return WP_Error|array
         */
        public function get($id = 0)
        {
        }
        /**
         * Insert a new advertisement into database.
         *
         * @since 3.5.0
         *
         * @param array $args
         *
         * @return int|WP_Error
         */
        public function insert($args = [])
        {
        }
        /**
         * This method will delete a single advertisement row
         *
         * @param int $id
         *
         * @since 3.5.0
         *
         * @return int|WP_Error
         */
        public function delete($id = 0)
        {
        }
        /**
         * This method will batch delete advertisement data
         *
         * @param array $ids
         *
         * @since 3.5.0
         *
         * @return int|WP_Error
         */
        public function batch_delete($ids = [])
        {
        }
        /**
         * Delete advertisement(s) via product id
         *
         * @since 3.5.0
         *
         * @param $post_id
         *
         * @return bool
         */
        public function delete_advertisement_by_product_id($product_id)
        {
        }
        /**
         * This method will batch expire
         *
         * @since 3.5.0
         *
         * @param array $ids
         *
         * @return int|WP_Error
         */
        public function batch_expire($ids = [])
        {
        }
        /**
         * This method will expire advertisements
         *
         * @since 3.5.0
         *
         * @param int|null $timestamp
         */
        public function expire_advertisement_by_date($timestamp = null)
        {
        }
        /**
         * This method will get a single vendor advertisement records
         *
         * @since 3.5.0
         *
         * @param array $args
         *
         * @return array
         */
        public function get_advertisements_by_vendor($args = [])
        {
        }
        /**
         * This method will return advertised products stores only
         *
         * @param array $args
         *
         * @since 3.5.0
         *
         * @return array
         */
        public function get_stores($args = [])
        {
        }
        /**
         * Get advertisements to display
         *
         * @since 3.5.0
         *
         * @param array $atts
         *
         * @return bool|\WP_Query false if no advertisement exists
         */
        public function get_advertisement_for_display($atts)
        {
        }
        /**
         * Get advertisement table with prefix
         *
         * @since 3.5.0
         *
         * @return string
         */
        public function get_table()
        {
        }
        /**
         * This will check if given var is empty or not.
         *
         * @since 3.5.0
         *
         * @param mixed $var
         *
         * @return bool
         */
        protected function is_empty($var)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductAdvertisement\REST {
    /**
     * Class AdvertisementController
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement\REST
     *
     * @since 3.5.0
     */
    class AdvertisementController extends \WP_REST_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'product_adv';
        /**
         * Register all routes related with coupons
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Checks if a given request has access to create an advertisement from dashboard.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @since 3.5.0
         *
         * @return bool True if the request has read access, false otherwise.
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Create a new advertisement
         *
         * @param WP_REST_Request $request
         *
         * @since 3.5.0
         *
         * @return WP_REST_Response
         */
        public function create_item($request)
        {
        }
        /**
         * Checks if a given request has access to get items.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @since 3.5.0
         *
         * @return bool True if the request has read access, false otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Retrieves advertisement data
         *
         * @param WP_REST_Request $request
         *
         * @since 3.5.0
         *
         * @return WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * Checks if a given request has access to get items.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @since 3.5.0
         *
         * @return bool True if the request has read access, false otherwise.
         */
        public function expire_item_permissions_check($request)
        {
        }
        /**
         * Expire a single advertisement
         *
         * @param WP_REST_Request $request
         *
         * @since 3.5.0
         *
         * @return WP_REST_Response
         */
        public function expire_item(\WP_REST_Request $request)
        {
        }
        /**
         * Checks if a given request has access to get items.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @since 3.5.0
         *
         * @return bool True if the request has read access, false otherwise.
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Delete a single advertisement
         *
         * @param WP_REST_Request $request
         *
         * @since 3.5.0
         *
         * @return WP_REST_Response
         */
        public function delete_item($request)
        {
        }
        /**
         * Checks if a given request has access to get items.
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @since 3.5.0
         *
         * @return bool True if the request has read access, false otherwise.
         */
        public function batch_items_permissions_check($request)
        {
        }
        /**
         * Batch update/delete advertised products
         *
         * @param WP_REST_Request $request
         *
         * @since 3.5.0
         *
         * @return WP_REST_Response
         */
        public function batch_items($request)
        {
        }
        /**
         * This method will return unique stores for advertised products
         *
         * @param WP_REST_Request $request
         *
         * @since 3.5.0
         *
         * @return WP_REST_Response
         */
        public function get_stores($request)
        {
        }
        /**
         * Prepare refund for response
         *
         * @since 3.5.0
         *
         * @param array $item
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepare links for the request.
         *
         * @since 3.5.0
         *
         * @param array $item
         * @param WP_REST_Request $request Request object.
         *
         * @return array Links for the given item.
         */
        protected function prepare_links($item, $request)
        {
        }
        /**
         * Format item's collection for response
         *
         * @since 3.5.0
         *
         * @param  WP_REST_Response|WP_Error $response
         * @param  WP_REST_Request $request
         * @param  int $total_items
         *
         * @return WP_REST_Response|WP_Error
         */
        public function format_collection_response($response, $request, $total_items)
        {
        }
        /**
         * This method will check if an advertisement exists or not, will be used only with rest api validate callback
         *
         * @param $value
         * @param $request WP_REST_Request
         * @param $key
         *
         * @since 3.5.0
         *
         * @return bool|WP_Error
         */
        public function advertisement_exists($value, $request, $key)
        {
        }
        /**
         * Retrieves the query params for the collections.
         *
         * @since 3.5.0
         *
         * @return array Query parameters for the collection.
         */
        public function get_advertisement_params()
        {
        }
        /**
         * Schema for batch processing
         *
         * @since 3.5.0
         *
         * @return array
         */
        public function get_batch_params()
        {
        }
        /**
         * Get the Cart schema, conforming to JSON Schema.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * Get the Cart schema, conforming to JSON Schema.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public function get_public_schema_for_stores()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductAdvertisement {
    /**
     * Class Module
     *
     * @package WeDevs\DokanPro\Modules\ProductAdvertisement
     *
     * @since 3.5.0
     */
    final class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Cloning is forbidden.
         *
         * @since 3.5.0
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 3.5.0
         */
        public function __wakeup()
        {
        }
        /**
         * Manager constructor.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Call all hooks here
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Register Product Advertisement Widget
         *
         * @since 3.5.0
         * @since 3.10.2 Updated to comply with `dokan-lite` widget registration process
         *
         * @param array $widgets List of widgets to be registered
         *
         * @return array
         */
        public function register_product_advertisement_widget(array $widgets): array
        {
        }
        /**
         * Rest api class map
         *
         * @param array $classes
         *
         * @since 3.5.0
         *
         * @return array
         */
        public function rest_api_class_map($classes)
        {
        }
        /**
         * Set template path for Product Advertisement module
         *
         * @since 3.5.0
         *
         * @return string
         */
        public function load_templates($template_path, $template, $args)
        {
        }
        /**
         * Register all scripts
         *
         * @since 3.5.0
         *
         * @return void
         * */
        public function register_scripts()
        {
        }
        /**
         * This method will be called during module activation
         *
         * @since 3.5.0
         */
        public function activate($instance)
        {
        }
        /**
         * This method will be called during module deactivation
         *
         * @since 3.5.0
         */
        public function deactivate($instance)
        {
        }
    }
}
namespace {
    /**
     * Dokan product enquiry email
     */
    class Dokan_Product_Enquiry_Email extends \WC_Email
    {
        /**
         * IP place holder
         *
         * @var null
         */
        public $i_p = \null;
        /**
         * Vendor place holder
         *
         * @var null
         */
        public $vendor = \null;
        /**
         * Product placeholder
         *
         * @var null
         */
        public $product = \null;
        /**
         * User agent placeholder
         *
         * @var null
         */
        public $user_agent = \null;
        /**
         * Customer name placeholder
         *
         * @var null
         */
        public $customer_name = \null;
        /**
         * Customer email placeholder
         *
         * @var null
         */
        public $customer_email = \null;
        /**
         * Constructor Method
         */
        public function __construct()
        {
        }
        /**
         * Email settings
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
        /**
         * Email default subject
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Email default heading
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Send email
         *
         * @since 1.0.0
         *
         * @param \WeDevs\Dokan\Vendor\Vendor $vendor
         * @param WC_Product                  $product
         * @param int                         $ip
         * @param string                      $user_agent
         * @param string                      $customer_name
         * @param string                      $customer_email
         * @param string                      $message
         *
         * @return void
         */
        public function trigger($vendor, $product, $ip, $user_agent, $customer_name, $customer_email, $message)
        {
        }
        /**
         * Get the name for outgoing emails.
         *
         * @sience 3.3.9
         *
         * @return string
         */
        public function get_from_name($from_name = '')
        {
        }
        /**
         * Get the from address for outgoing emails.
         *
         * @since 3.3.9
         *
         * @return string|null
         */
        public function get_from_address($from_email = '')
        {
        }
        /**
         * Follower email
         *
         * @since 1.0.0
         *
         * @return string|null
         */
        public function get_email_recipient()
        {
        }
        /**
         * Email content
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function get_content()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductEnquiry {
    /**
     * Dokan_Product_Enquiry class
     *
     * @class Dokan_Product_Enquiry The class that holds the entire Dokan_Product_Enquiry plugin
     */
    class Module
    {
        /**
         * Constructor for the Dokan_Product_Enquiry class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @uses register_activation_hook()
         * @uses register_deactivation_hook()
         * @uses is_admin()
         * @uses add_action()
         */
        public function __construct()
        {
        }
        /**
         * Define constants
         *
         * @return void
         */
        public function define_constants()
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue admin scripts
         *
         * Allows plugin assets to be loaded.
         *
         * @uses wp_enqueue_script()
         * @uses wp_localize_script()
         * @uses wp_enqueue_style
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Get user agent string
         *
         * @return string
         */
        public function get_user_agent()
        {
        }
        /**
         * Get from name for email.
         *
         * @access public
         * @return string
         */
        public function get_from_name()
        {
        }
        /**
         * Get from email address.
         *
         * @access public
         * @return string
         */
        public function get_from_address()
        {
        }
        /**
         * Send email
         *
         * @since  0.1
         *
         * @return void
         */
        public function send_email()
        {
        }
        /**
         * Register product enquiry tab
         *
         * @since  0.1
         *
         * @param  array $tabs
         *
         * @return array
         */
        public function register_tab($tabs)
        {
        }
        /**
         * Settings for guest users
         *
         * @since 0.2
         *
         * @return void
         **/
        public function guest_user_settings($settings_fields)
        {
        }
        /**
         * Show enquiry form in single product page tab
         *
         * @since  0.1
         *
         * @return void
         */
        public function show_form()
        {
        }
        /**
         * Add email class
         *
         * @param array $classes
         *
         * @return array
         */
        public function add_email_class($classes)
        {
        }
        /**
         * Add email template file
         *
         * @param array $templare_files
         *
         * @return array
         */
        public function add_email_template_file($template_files)
        {
        }
        /**
         * Add eamil aciton
         *
         * @param array $actions
         *
         * @return array
         */
        public function add_email_action($actions)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductQA {
    /**
     * Class Module.
     * Dokan Pro Product QA Module.
     *
     * @since 3.11.0
     *
     * @property Vendor $vendor Vendor.
     * @property Ajax   $ajax   Ajax Class.
     * @property Emails $emails Emails Class.
     * @property Frontend $frontend Frontend Class.
     * @property Cache  $cache  Cache.
     *
     * @package WeDevs\DokanPro\Modules\ProductQA
     */
    class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Cloning is forbidden.
         *
         * @since 3.11.0
         */
        public function __clone()
        {
        }
        /**
         * Serializing instances of this class is forbidden.
         *
         * @since 3.11.0
         */
        public function __wakeup()
        {
        }
        /**
         * Manager constructor.
         *
         * @since 3.11.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Call all hooks here
         *
         * @since 3.11.0
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Set template path for Product Advertisement module
         *
         * @since 3.11.0
         *
         * @return string
         */
        public function load_templates($template_path, $template, $args): string
        {
        }
        /**
         * This method will be called during module activation
         *
         * @since 3.11.0
         */
        public function activate($instance)
        {
        }
        /**
         * This method will be called during module deactivation
         *
         * @since 3.11.0
         */
        public function deactivate($instance)
        {
        }
        /**
         * Flush rewrite rules.
         *
         * @since 3.11.0
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
    }
    /**
     * Admin class.
     *
     * @since 3.11.0
     */
    class Admin
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Register Admin route for vue.
         *
         * @since 3.11.0
         *
         * @param array $routes Admin routes.
         *
         * @return array
         */
        public function register_vue_routes($routes): array
        {
        }
        /**
         * Load Admin menu
         *
         * @since 3.11.0
         *
         * @param  string $capability Capability.
         * @param  integer $menu_position Menu Position.
         *
         * @return void
         */
        public function register_submenu($capability, $menu_position)
        {
        }
    }
    /**
     * Product QA Ajax Class.
     *
     * @since 3.11.0
     */
    class Ajax
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Question answering ajax handler.
         *
         * @since 3.11.0
         */
        public function answer_question()
        {
        }
        /**
         * Answer delete ajax handler.
         *
         * @since 3.11.0
         */
        public function delete_answer()
        {
        }
        /**
         * Question delete ajax handler.
         *
         * @since 3.11.0
         */
        public function delete_question()
        {
        }
    }
    /**
     * Rest API related class.
     *
     * @since 3.11.0
     */
    class Api
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Rest api class map.
         *
         * @since 3.11.0
         *
         * @param array $classes API Classes.
         *
         * @return array
         */
        public function register_class_map($classes): array
        {
        }
    }
    /**
     * Assets related class.
     *
     * @since 3.11.0
     */
    class Assets
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Register all scripts
         *
         * @since 3.11.0
         * @return void
         */
        public function register()
        {
        }
        /**
         * Load scripts and styles.
         *
         * @return void
         */
        public function load()
        {
        }
        /**
         * Load scripts and styles for admin.
         *
         * @return void
         */
        public function load_admin()
        {
        }
    }
    /**
     * Product QA Cache Class.
     *
     * @since 3.11.0
     */
    class Cache
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Clear question caches.
         *
         * @since 3.11.0
         *
         * @return void
         */
        public function clear_question_cache()
        {
        }
        /**
         * Clear question caches.
         *
         * @since 3.11.0
         *
         * @return void
         */
        public function clear_answer_cache()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductQA\DTOs {
    /**
     * Class Count
     *
     * @since 3.11.0
     */
    class Count
    {
        protected $total = 0;
        protected $read = 0;
        protected $unread = 0;
        protected $answered = 0;
        protected $unanswered = 0;
        protected $visible = 0;
        protected $hidden = 0;
        /**
         * Count constructor.
         *
         * @param \stdClass  $count Count from DB.
         */
        public function __construct(\stdClass $count)
        {
        }
        /**
         * Get Total Count.
         *
         * @since 3.11.0
         * @return int
         */
        public function total(): int
        {
        }
        /**
         * Get Read Count.
         *
         * @since 3.11.0
         * @return int
         */
        public function read(): int
        {
        }
        /**
         * Get Unread Count.
         *
         * @since 3.11.0
         * @return int
         */
        public function unread(): int
        {
        }
        /**
         * Get Answered Count.
         *
         * @since 3.11.0
         * @return int
         */
        public function answered(): int
        {
        }
        /**
         * Get Unanswered Count.
         *
         * @since 3.11.0
         * @return int
         */
        public function unanswered(): int
        {
        }
        /**
         * Get Visible Count.
         *
         * @since 3.11.0
         * @return int
         */
        public function visible(): int
        {
        }
        /**
         * Get Hidden Count.
         *
         * @since 3.11.0
         * @return int
         */
        public function hidden(): int
        {
        }
        /**
         * Convert to array.
         *
         * @since 3.11.0
         * @return array
         */
        public function toArray(): array
        {
        }
        /**
         * Convert to json.
         *
         * @since 3.11.0
         * @return false|string
         */
        public function toJson()
        {
        }
        /**
         * Convert to string.
         *
         * @since 3.11.0
         * @return false|string
         */
        public function __toString()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductQA {
    /**
     * Dokan Product QA Emails class.
     *
     * @since 3.11.0
     */
    class Emails
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Register email classes.
         *
         * @since @3.11.0
         *
         * @param array $emails Emails.
         *
         * @return array
         */
        public function register(array $emails): array
        {
        }
        /**
         * Register email templates.
         *
         * @since @3.11.0
         *
         * @param array $templates Email Templates.
         *
         * @return array
         */
        public function register_templates(array $templates): array
        {
        }
        /**
         * Register email actions.
         *
         * @since @3.11.0
         *
         * @param array $actions Email actions.
         *
         * @return array
         */
        public function register_actions(array $actions): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductQA\Emails {
    /**
     * Send email to admin on new Question asked event.
     *
     * @since 3.11.0
     */
    class Admin extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.11.0
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.11.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the email.
         */
        public function trigger($question_id)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html(): string
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain(): string
        {
        }
        /**
         * Initialize settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * Send email to customer on new answer of a Question event.
     *
     * @since 3.11.0
     */
    class Customer extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.11.0
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.11.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the email.
         */
        public function trigger($answer_id)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialize settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * Send email to vendor on new Question asked event.
     *
     * @since 3.11.0
     */
    class Vendor extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since 3.11.0
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since 3.11.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the email.
         */
        public function trigger($question_id)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html(): string
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialize settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductQA {
    /**
     * Frontend Related functionality.
     *
     * @since 3.11.0
     */
    class Frontend
    {
        /**
         * Constructor.
         *
         * @since 3.11.0
         */
        public function __construct()
        {
        }
        /**
         * Add Tab to product page.
         *
         * @since 3.11.0
         *
         * @param array $tabs
         *
         * @return array
         */
        public function add_tab($tabs): array
        {
        }
        /**
         * Add Tab content to product page.
         *
         * @since 3.11.0
         * @return void
         */
        public function tab_content()
        {
        }
        /**
         * Redirect user to product page after successful login.
         *
         * @param string $redirect_to URL to redirect to.
         *
         * @return string
         */
        public function login_redirect($redirect_to): string
        {
        }
    }
    /**
     * Product QA Installer
     *
     * @since 3.11.0
     */
    class Installer
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductQA\Models {
    /**
     * Answer Model.
     *
     * @since 3.11.0
     */
    class Answer
    {
        /**
         * @var int $id Answer ID.
         */
        protected $id = 0;
        /**
         * @var int $question_id Question ID.
         */
        protected $question_id = 0;
        /**
         * @var string $answer Answer.
         */
        protected $answer = '';
        /**
         * @var int $user_id User ID.
         */
        protected $user_id = 0;
        /**
         * @var DateTimeInterface|null Created at.
         */
        protected ?\DateTimeInterface $created_at;
        /**
         * @var DateTimeInterface|null Updated at.
         */
        protected ?\DateTimeInterface $updated_at;
        /**
         * @var string $table Answer table name.
         */
        protected $table = 'dokan_product_qa_answers';
        /**
         * Constructor.
         */
        public function __construct(int $id = 0)
        {
        }
        /**
         * Get ID.
         *
         * @since 3.11.0
         *
         * @return int
         */
        public function get_id(): int
        {
        }
        /**
         * Set ID.
         *
         * @param int $id ID.
         *
         * @since 3.11.0
         *
         * @return Answer
         */
        public function set_id(int $id): \WeDevs\DokanPro\Modules\ProductQA\Models\Answer
        {
        }
        /**
         * Get question ID.
         *
         * @since 3.11.0
         *
         * @return int
         */
        public function get_question_id(): int
        {
        }
        /**
         * Set question ID.
         *
         * @param int $question_id question ID.
         *
         * @since 3.11.0
         *
         * @return Answer
         */
        public function set_question_id(int $question_id): \WeDevs\DokanPro\Modules\ProductQA\Models\Answer
        {
        }
        /**
         * Get answer.
         *
         * @since 3.11.0
         *
         * @return string
         */
        public function get_answer(): string
        {
        }
        /**
         * Set answer.
         *
         * @since 3.11.0
         *
         * @param string $answer Answer.
         *
         * @return Answer
         */
        public function set_answer(string $answer): \WeDevs\DokanPro\Modules\ProductQA\Models\Answer
        {
        }
        /**
         * Get User ID.
         *
         * @since 3.11.0
         *
         * @return int
         */
        public function get_user_id(): int
        {
        }
        /**
         * Set User ID.
         *
         * @param int $user_id User ID.
         *
         * @return Answer
         */
        public function set_user_id(int $user_id): \WeDevs\DokanPro\Modules\ProductQA\Models\Answer
        {
        }
        /**
         * Get created at.
         *
         * @since 3.11.0
         *
         * @return DateTimeInterface
         */
        public function get_created_at(): \DateTimeInterface
        {
        }
        /**
         * Set created at.
         *
         * @since 3.11.0
         *
         * @param DateTimeInterface $created_at Created at.
         *
         * @return Answer
         */
        public function set_created_at(\DateTimeInterface $created_at): \WeDevs\DokanPro\Modules\ProductQA\Models\Answer
        {
        }
        /**
         * Get updated at.
         *
         * @since 3.11.0
         *
         * @return DateTimeInterface
         */
        public function get_updated_at(): \DateTimeInterface
        {
        }
        /**
         * Set updated at.
         *
         * @param DateTimeInterface $updated_at Updated at.
         *
         * @since 3.11.0
         *
         * @return Answer
         */
        public function set_updated_at(\DateTimeInterface $updated_at): \WeDevs\DokanPro\Modules\ProductQA\Models\Answer
        {
        }
        /**
         * Get table name.
         *
         * @since 3.11.0
         *
         * @return string
         */
        public function get_table(): string
        {
        }
        /**
         * Get question.
         *
         * @since 3.11.0
         *
         * @return Answer
         * @throws Exception If ID not set.
         */
        public function get(): \WeDevs\DokanPro\Modules\ProductQA\Models\Answer
        {
        }
        /**
         * Create new answer.
         *
         * @since 3.11.0
         *
         * @throws Exception
         */
        public function create(): \WeDevs\DokanPro\Modules\ProductQA\Models\Answer
        {
        }
        /**
         * Update answer.
         *
         * @since 3.11.0
         *
         * @throws Exception
         */
        public function update(): \WeDevs\DokanPro\Modules\ProductQA\Models\Answer
        {
        }
        /**
         * Delete answer.
         *
         * @since 3.11.0
         *
         * @throws Exception
         */
        public function delete(): \WeDevs\DokanPro\Modules\ProductQA\Models\Answer
        {
        }
        /**
         * Prepare data.
         *
         * @param stdClass $data Data.
         *
         * @since 3.11.0
         *
         * @return Answer
         * @throws Exception If properties not set.
         */
        public function prepare_data(\stdClass $data): \WeDevs\DokanPro\Modules\ProductQA\Models\Answer
        {
        }
        /**
         * Get cache key.
         *
         * @return string
         */
        public function get_cache_key(): string
        {
        }
        /**
         * Get cache group.
         *
         * @since 3.11.0
         *
         * @return string
         */
        public function get_cache_group(): string
        {
        }
        /**
         * Count method.
         *
         * @since 3.11.0
         *
         * @param array $args Array of arguments.
         *
         * @return int
         */
        public function count(array $args): int
        {
        }
        /**
         * Query method.
         *
         * @since 3.11.0
         *
         * @param array $args Array of arguments.
         *
         * @return Answer[]
         * @throws Exception
         */
        public function query(array $args): array
        {
        }
        /**
         * To array method.
         *
         * @since 3.11.0
         *
         * @return array
         */
        public function to_array(): array
        {
        }
        /**
         * Parse query args.
         *
         * @since 3.11.0
         *
         * @param array $args Args.
         *
         * @return array
         */
        public function parse_query_args(array $args): array
        {
        }
    }
    /**
     * Question Model.
     *
     * @since 3.11.0
     */
    class Question
    {
        /**
         * Question visibility status read.
         */
        const STATUS_READ = 1;
        /**
         * Question visibility status unread.
         */
        const STATUS_UNREAD = 0;
        /**
         * Question answered status.
         */
        const STATUS_ANSWERED = 1;
        /**
         * Question unanswered status.
         */
        const STATUS_UNANSWERED = 0;
        /**
         * Question status deleted.
         */
        const STATUS_DELETED = 'deleted';
        /**
         * Question status hidden.
         */
        const STATUS_HIDDEN = 'hidden';
        /**
         * Question status visible.
         */
        const STATUS_VISIBLE = 'visible';
        /**
         * @var int $id Question ID.
         */
        protected $id = 0;
        /**
         * @var int $product_id Product ID.
         */
        protected $product_id = 0;
        /**
         * @var string $question Question.
         */
        protected $question = '';
        /**
         * @var int $user_id User ID.
         */
        protected $user_id = 0;
        /**
         * @var int $read Question read status.
         */
        protected $read = self::STATUS_UNREAD;
        /**
         * @var string $status Question status.
         */
        protected $status = self::STATUS_VISIBLE;
        /**
         * @var DateTimeInterface|null Created at.
         */
        protected ?\DateTimeInterface $created_at;
        /**
         * @var DateTimeInterface|null Updated at.
         */
        protected ?\DateTimeInterface $updated_at;
        /**
         * @var Answer $answer Answer.
         */
        protected $answer;
        /**
         * @var string $table Question table name.
         */
        protected $table = 'dokan_product_qa_questions';
        /**
         * Constructor.
         */
        public function __construct(int $id = 0)
        {
        }
        /**
         * Get ID.
         *
         * @since 3.11.0
         *
         * @return int
         */
        public function get_id(): int
        {
        }
        /**
         * Set ID.
         *
         * @param int $id ID.
         *
         * @since 3.11.0
         *
         * @return Question
         */
        public function set_id(int $id): \WeDevs\DokanPro\Modules\ProductQA\Models\Question
        {
        }
        /**
         * Get product ID.
         *
         * @since 3.11.0
         *
         * @return int
         */
        public function get_product_id(): int
        {
        }
        /**
         * Set product ID.
         *
         * @param int $product_id Product ID.
         *
         * @since 3.11.0
         *
         * @return Question
         */
        public function set_product_id(int $product_id): \WeDevs\DokanPro\Modules\ProductQA\Models\Question
        {
        }
        /**
         * Get question.
         *
         * @since 3.11.0
         *
         * @return string
         */
        public function get_question(): string
        {
        }
        /**
         * Set question.
         *
         * @since 3.11.0
         *
         * @param string $question Question.
         *
         * @return Question
         */
        public function set_question(string $question): \WeDevs\DokanPro\Modules\ProductQA\Models\Question
        {
        }
        /**
         * Get User ID.
         *
         * @since 3.11.0
         *
         * @return int
         */
        public function get_user_id(): int
        {
        }
        /**
         * Set User ID.
         *
         * @param int $user_id User ID.
         *
         * @return Question
         */
        public function set_user_id(int $user_id): \WeDevs\DokanPro\Modules\ProductQA\Models\Question
        {
        }
        /**
         * Get read status.
         *
         * @since 3.11.0
         *
         * @return int
         */
        public function get_read(): int
        {
        }
        /**
         * Set read status.
         *
         * @param int $read Read status.
         *
         * @since 3.11.0
         *
         * @return Question
         */
        public function set_read(int $read): \WeDevs\DokanPro\Modules\ProductQA\Models\Question
        {
        }
        /**
         * @return string
         */
        public function get_status(): string
        {
        }
        /**
         * @param string $status
         *
         * @return Question
         */
        public function set_status(string $status): \WeDevs\DokanPro\Modules\ProductQA\Models\Question
        {
        }
        /**
         * Get created at.
         *
         * @since 3.11.0
         *
         * @return DateTimeInterface
         */
        public function get_created_at(): \DateTimeInterface
        {
        }
        /**
         * Set created at.
         *
         * @since 3.11.0
         *
         * @param DateTimeInterface $created_at Created at.
         *
         * @return Question
         */
        public function set_created_at(\DateTimeInterface $created_at): \WeDevs\DokanPro\Modules\ProductQA\Models\Question
        {
        }
        /**
         * Get updated at.
         *
         * @since 3.11.0
         *
         * @return DateTimeInterface
         */
        public function get_updated_at(): \DateTimeInterface
        {
        }
        /**
         * Set updated at.
         *
         * @param DateTimeInterface $updated_at Updated at.
         *
         * @since 3.11.0
         *
         * @return Question
         */
        public function set_updated_at(\DateTimeInterface $updated_at): \WeDevs\DokanPro\Modules\ProductQA\Models\Question
        {
        }
        /**
         * Get answer related to this question.
         *
         * @since 3.11.0
         *
         * @return Answer
         */
        public function get_answer(): \WeDevs\DokanPro\Modules\ProductQA\Models\Answer
        {
        }
        /**
         * Set answer related to this question.
         *
         * @since 3.11.0
         *
         * @param Answer $answer Answer.
         *
         * @return Question
         */
        public function set_answer(\WeDevs\DokanPro\Modules\ProductQA\Models\Answer $answer): \WeDevs\DokanPro\Modules\ProductQA\Models\Question
        {
        }
        /**
         * Get table name.
         *
         * @since 3.11.0
         *
         * @return string
         */
        public function get_table(): string
        {
        }
        /**
         * Get question.
         *
         * @since 3.11.0
         *
         * @return Question
         * @throws Exception If ID not set.
         */
        public function get(): \WeDevs\DokanPro\Modules\ProductQA\Models\Question
        {
        }
        /**
         * Create question.
         *
         * @since 3.11.0
         *
         * @throws Exception
         */
        public function create(): \WeDevs\DokanPro\Modules\ProductQA\Models\Question
        {
        }
        /**
         * Update question.
         *
         * @since 3.11.0
         *
         * @throws Exception
         */
        public function update(): \WeDevs\DokanPro\Modules\ProductQA\Models\Question
        {
        }
        /**
         * Delete question.
         *
         * @since 3.11.0
         *
         * @throws Exception
         */
        public function delete(): \WeDevs\DokanPro\Modules\ProductQA\Models\Question
        {
        }
        /**
         * Prepare data.
         *
         * @param stdClass $data Data.
         *
         * @since 3.11.0
         *
         * @return Question
         * @throws Exception If properties not set.
         */
        public function prepare_data(\stdClass $data): \WeDevs\DokanPro\Modules\ProductQA\Models\Question
        {
        }
        /**
         * Get cache key.
         *
         * @return string
         */
        public function get_cache_key(): string
        {
        }
        /**
         * Get cache group.
         *
         * @since 3.11.0
         *
         * @return string
         */
        public function get_cache_group(): string
        {
        }
        /**
         * Count all the status, read state, answered state.
         *
         * @since 3.11.0
         *
         * @param array $args Array of arguments.
         *
         * @return Count
         */
        public function count_status(array $args): \WeDevs\DokanPro\Modules\ProductQA\DTOs\Count
        {
        }
        /**
         * Count method.
         *
         * @since 3.11.0
         *
         * @param array $args Array of arguments.
         *
         * @return int
         */
        public function count(array $args): int
        {
        }
        /**
         * Query method.
         *
         * @since 3.11.0
         *
         * @param array $args Array of arguments.
         *
         * @return Question[]
         * @throws Exception
         */
        public function query(array $args): array
        {
        }
        /**
         * Perform bulk action.
         *
         * @since 3.11.0
         *
         * @param array $ids Array of ids.
         * @param string $action Action.
         *
         * @return bool
         * @throws Exception
         */
        public function bulk_action(array $ids, string $action = 'delete'): bool
        {
        }
        /**
         * To array method.
         *
         * @since 3.11.0
         *
         * @return array
         */
        public function to_array(): array
        {
        }
        /**
         * Parse query args.
         *
         * @param array $args Args.
         *
         * @return array
         */
        public function parse_query_args(array $args): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductQA\REST {
    /**
     * Vendor Answers API.
     *
     * @since 3.11.0
     */
    class AnswersApi extends \WP_REST_Controller
    {
        /**
         * Constructor.
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Register Rest Routes.
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get a collection of Answers.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * Create a new Answers.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function create_item($request)
        {
        }
        /**
         * Get a Answers.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function get_item($request)
        {
        }
        /**
         * Updates one item from the collection.
         *
         * @since 3.11.0
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Deletes one item from the collection.
         *
         * @since 3.11.0
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Prepares the item for the REST response.
         *
         * @since 3.11.0
         *
         * @param Answer $item WordPress representation of the item.
         * @param WP_REST_Request $request Request object.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepare links for the request.
         *
         * @param Answer $item Object data.
         * @param WP_REST_Request $request Request object.
         *
         * @return array Links for the given item.
         */
        protected function prepare_links($item, $request): array
        {
        }
        /**
         * Get Items permission check.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return bool
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Get Item permission check.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return bool|WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Create Item permission check.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|bool
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Update Item permission check.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|bool
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Delete Item permission check.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|bool
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Item schema.
         *
         * @return array
         */
        public function get_item_schema(): array
        {
        }
        /**
         * Retrieves the query params for the collections.
         *
         * @since 3.11.0
         * @return array Query parameters for the collection.
         */
        public function get_collection_params(): array
        {
        }
    }
    /**
     * Vendor Questions API.
     *
     * @since 3.11.0
     */
    class QuestionsApi extends \WP_REST_Controller
    {
        /**
         * Constructor.
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Register Rest Routes.
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get a collection of Questions.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * Create a new Questions.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function create_item($request)
        {
        }
        /**
         * Get a Questions.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function get_item($request)
        {
        }
        /**
         * Updates one item from the collection.
         *
         * @since 3.11.0
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Deletes one item from the collection.
         *
         * @since 3.11.0
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Do bulk action.
         *
         * @since 3.11.0
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|WP_REST_Response
         */
        public function bulk_action($request)
        {
        }
        /**
         * Prepares the item for the REST response.
         *
         * @since 3.11.0
         *
         * @param Question $item WordPress representation of the item.
         * @param WP_REST_Request $request Request object.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepare links for the request.
         *
         * @param Question $item Object data.
         * @param WP_REST_Request $request Request object.
         *
         * @return array Links for the given item.
         */
        protected function prepare_links($item, $request): array
        {
        }
        /**
         * Get Items permission check.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return bool
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Get Item permission check.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return bool
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Create Item permission check.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|bool
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Update Item permission check.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|bool
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Bulk Update Item permission check.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|bool
         */
        public function bulk_action_permissions_check($request)
        {
        }
        /**
         * Delete Item permission check.
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|bool
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Item schema.
         *
         * @return array
         */
        public function get_item_schema(): array
        {
        }
        /**
         * Retrieves the query params for the collections.
         *
         * @since 3.11.0
         * @return array Query parameters for the collection.
         */
        public function get_collection_params(): array
        {
        }
        /**
         * Method to take an input string and tokenize it into an array of words for Full Text Searching (FTS).
         * This method is used when an input string can be made up of multiple words (let's say, separated by space characters),
         * and we need to use different Boolean operators on each of the words. The tokenizing process is similar to extraction
         * of words by FTS parser in MySQL. The operators used for matching in Boolean condition are removed from the input $phrase.
         * These characters as of latest version of MySQL (8+) are: +-><()~*:""&|@  (@ is specific for InnoDB)
         * We can also execute the following query to get updated list: show variables like 'ft_boolean_syntax';
         * Afterwards, the modified string is split into individual words considering either space, comma, and, period (.) characters.
         * Details at: https://dev.mysql.com/doc/refman/8.0/en/fulltext-natural-language.html
         *
         * @since 3.11.0
         *
         * @param string $phrase Input statement/phrase consisting of words
         *
         * @return string Tokenized words
         */
        public function tokenize_string_into_FTS_words(string $phrase): string
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductQA {
    /**
     * Vendor class
     *
     * @since 3.11.0
     */
    class Vendor
    {
        public const QUERY_VAR = 'product-questions-answers';
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Register dashboard menu.
         *
         * @since 3.11.0
         *
         * @param array $urls URLs.
         *
         * @return array
         */
        public function register_menu($urls): array
        {
        }
        /**
         * Return request endpoind
         *
         * @since 1.0.0
         * @return void
         */
        public function register_endpoints($query_var)
        {
        }
        /**
         * Load rma template for vendor
         *
         * @since 1.0.0
         * @return void
         */
        public function load_main_template($query_vars)
        {
        }
        /**
         * Load Inside before content.
         *
         * @return void
         */
        public function load_inside_before_content()
        {
        }
        /**
         * Load list content.
         *
         * @since 3.11.0
         * @return void
         */
        public function load_list_content()
        {
        }
        /**
         * Load list filter content.
         *
         * @since 3.11.0
         *
         * @return void
         */
        public function load_filter_content()
        {
        }
        /**
         * Load single question content.
         *
         * @since 3.11.0
         *
         * @return void
         */
        public function load_single_content()
        {
        }
        /**
         * Add back button on single page.
         *
         * @since 3.11.0
         *
         * @return void
         */
        public function add_back_button_on_single_page()
        {
        }
        /**
         * Add unread question count.
         *
         * @since 3.11.0
         *
         * @param string $title Title.
         *
         * @return string
         */
        public function add_unread_question_count(string $title): string
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\RankMath {
    /**
     * Asset manager class
     *
     * @since 3.4.0
     */
    class Assets extends \RankMath\Admin\Assets
    {
        /**
         * Class constructor
         *
         * @since 3.4.0
         */
        public function __construct()
        {
        }
        /**
         * Enqueues required styles and scripts
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function enqueue()
        {
        }
        /**
         * Includes styles for new vendor dashboard.
         *
         * @since 3.7.14
         *
         * @param array $styles Array of styles.
         *
         * @return array
         */
        public function include_styles_for_vendor_dashboard($styles)
        {
        }
    }
    /**
     * Schema manger class
     *
     * @since 3.5.0
     */
    class ContentAi extends \RankMath\ContentAI\Content_AI
    {
        /**
         * Class constructor
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Registers necessary hooks.
         *
         * @since 3.7.10
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Check content AI is enabled in rank math
         * @return bool
         */
        public function content_ai_is_enable(): bool
        {
        }
        /**
         * Renders content ai section.
         *
         * @since 3.7.10
         *
         * @param int $product_id
         *
         * @return void
         */
        public function render_content_ai_section($product_id)
        {
        }
        /**
         * Enqueue assets for post editors.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function editor_scripts()
        {
        }
        /**
         * Checks whether content ai should be rendered.
         *
         * @since 3.7.10
         *
         * @return boolean
         */
        public function should_render_content_ai()
        {
        }
        /**
         * Add Content AI JSON data.
         *
         * @since 3.11.4
         *
         * @return void
         */
        public function add_content_ai_json_data()
        {
        }
    }
    /**
     * Dependency Notice Handler Class
     *
     * @since 3.5.0
     */
    class DependencyNotice
    {
        /**
         * Whether the module is loadable or not.
         *
         * @var bool
         */
        protected $missing_dependency = false;
        /**
         * Class constructor
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Check has missing dependency
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public function is_missing_dependency()
        {
        }
        /**
         * Rank Math SEO plugin activation notice
         *
         * @since 3.4.0
         *
         * @param array $notices
         *
         * @return array
         * */
        public function rank_math_activation_notice($notices)
        {
        }
        /**
         * Adds notice to update Rank math SEO plugin.
         *
         * @since 3.5.0
         *
         * @param array $notices
         *
         * @return array
         */
        public function rank_math_update_notice($notices)
        {
        }
        /**
         * Adds notice to configure the Rank Math SEO.
         *
         * @since 3.7.6
         *
         * @param array $notices
         *
         * @return array
         */
        public function rank_math_setup_needed_notice($notices)
        {
        }
        /**
         * Activate Rank Math SEO plugin
         *
         * @since 3.4.3
         *
         * @return void
         * */
        public function activate_rank_math_seo()
        {
        }
        /**
         * Installs Rank Math SEO plugin
         *
         * @since 3.4.0
         *
         * @return void
         * */
        public function install_rank_math_seo()
        {
        }
    }
    class Frontend implements \RankMath\Runner
    {
        use \RankMath\Traits\Hooker;
        /**
         * Renders the frontend view
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function process()
        {
        }
        /**
         * Registers hooks.
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Enqueue styles and scripts for the metabox.
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function enqueue()
        {
        }
        /**
         * Function to replace domain with seo-by-rank-math in translation file
         *
         * @since 3.4.0
         *
         * @param string|false $file   Path to the translation file to load. False if there isn't one.
         * @param string       $handle Name of the script to register a translation domain to.
         * @param string       $domain The text domain.
         *
         * @return void
         */
        public function load_script_translation_file($file, $handle, $domain)
        {
        }
        /**
         * Invalidate facebook object cache for the post
         *
         * @since 3.4.0
         *
         * @param string     $field_id The current field id paramater.
         * @param bool       $updated  Whether the metadata update action occurred.
         * @param string     $action   Action performed. Could be "repeatable", "updated", or "removed".
         * @param CMB2_Field $field    This field object.
         *
         * @return void
         */
        public function invalidate_facebook_object_cache($field_id, $updated, $action, $field)
        {
        }
    }
    /**
     * Class for post screen handler
     *
     * @since 3.4.0
     */
    class PostScreen extends \RankMath\Admin\Metabox\Post_Screen
    {
        /**
         * Class constructor
         *
         * @since 3.4.0
         */
        public function __construct()
        {
        }
        /**
         * Retrieves object id
         *
         * @since 3.4.0
         * @since 3.7.13 Added logics for handle from the new
         *                        Vendor Dashboard Product edit page.
         *
         * @return int
         */
        public function get_object_id()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\RankMath\REST {
    /**
     * Class Rank Math Controller
     *
     * @package WeDevs\DokanPro\Modules\RankMath\REST
     *
     * @since 3.7.13
     */
    class RankMathController extends \WP_REST_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v2';
        /**
         * Route name.
         *
         * @var string
         */
        protected $base = 'rank-math';
        /**
         * Register all routes.
         *
         * @since 3.7.13
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * This method will check if a product exists or not by that ID.
         *
         * @param int             $product_id
         * @param WP_REST_Request $request
         *
         * @since 3.7.13
         *
         * @return bool
         */
        public function product_exists($product_id, $request)
        {
        }
        /**
         * Checks if user has edit post permission.
         *
         * @since 3.7.13
         *
         * @param WP_REST_Request $request REST Request.
         *
         * @return bool True if the request has read access, false otherwise.
         */
        public function store_current_post_id_permissions_check($request)
        {
        }
        /**
         * Store current edit post id for the user.
         *
         * @param WP_REST_Request $request
         *
         * @since 3.7.13
         *
         * @return WP_REST_Response
         */
        public function store_current_post_id(\WP_REST_Request $request)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\RankMath {
    /**
     * Schema manger class
     *
     * @since 3.4.0
     */
    class Schema extends \RankMath\Schema\Admin
    {
        /**
         * Class constructor
         *
         * @since 3.4.0
         */
        public function __construct()
        {
        }
        /**
         * Enqueue Styles and Scripts required for the metabox on the post screen
         *
         * @since 3.4.0
         *
         * @return integer
         */
        public function enqueue()
        {
        }
    }
    /**
     * The base screen class
     *
     * @since 3.4.0
     */
    class Screen implements \RankMath\Admin\Metabox\IScreen
    {
        use \RankMath\Traits\Meta;
        use \RankMath\Traits\Hooker;
        /**
         * Class constructor
         *
         * @since 3.4.0
         */
        public function __construct()
        {
        }
        /**
         * Is creen loaded.
         *
         * @since 3.4.0
         *
         * @return bool
         */
        public function is_loaded()
        {
        }
        /**
         * Get object id
         *
         * @since 3.4.0
         *
         * @return int
         */
        public function get_object_id()
        {
        }
        /**
         * Get object type
         *
         * @since 3.4.0
         *
         * @return string
         */
        public function get_object_type()
        {
        }
        /**
         * Get object types to register metabox to
         *
         * @since 3.4.0
         *
         * @return array
         */
        public function get_object_types()
        {
        }
        /**
         * Enqueue Styles and Scripts required for screen.
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function enqueue()
        {
        }
        /**
         * Get analysis to run.
         *
         * @since 3.4.0
         *
         * @return array
         */
        public function get_analysis()
        {
        }
        /**
         * Get values for localize.
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function localize()
        {
        }
        /**
         * Get common values
         *
         * @since 3.4.0
         *
         * @return array
         */
        public function get_values()
        {
        }
        /**
         * Get object values for localize
         *
         * @since 3.4.0
         *
         * @return array
         */
        public function get_object_values()
        {
        }
        /**
         * Load required screen
         *
         * @since 3.4.0
         *
         * @param string $manual To load any screen manually.
         */
        public function load_screen($manual = '')
        {
        }
    }
    /**
     * Class for Rank math SEO integration module
     *
     * @since 3.4.0
     */
    class Module
    {
        /**
         * Class constructor
         *
         * @since 3.4.0
         */
        public function __construct()
        {
        }
        /**
         * Initializes all processing.
         *
         * @since 3.7.6
         *
         * @return void
         */
        public function init()
        {
        }
        /**
         * Maps meta cap for users with vendor staff role to bypass some primitive
         * capability requirements.
         *
         * To access the rank math rest api functionality, a user must have one or some
         * primitive capabilities which are `edit_products`, `edit_published_products`,
         * `edit_others_products`, and `edit_private_products`
         *
         * Often users with `vendor_staff` role miss those required capabilities that
         * would lead them to being unable to update the product although they are given
         * permission to edit product.
         *
         * So to ensure their ability to update product and to use the Rank Math SEO
         * functionalities, the required premitive capabilities are bypassed.
         *
         * Note that it is ensured the capabilities will be bypassed only while
         * the rest api endpoint for Rank Math SEO is being hit.
         *
         * Also for rank math redirection settings, all users need to have the
         * capability of `rank_math_redirections`. So it needs to be ensured all users
         * are given that capability while updating the rank math redirection settings
         * for products.
         *
         * @since 3.4.0
         *
         * @uses global   $wp          Used to retrieve \WP class data
         * @uses function get_userdata Used to retrieve userdata by id
         *
         * @param array   $caps    Premitive capabilities that must be possessed by user
         * @param string  $cap     Capability that is mapping the premitive capabilities
         * @param integer $user_id ID of the current user
         *
         * @return array List of premitive capabilities to be satisfied
         */
        public function map_meta_cap_for_rank_math($caps, $cap, $user_id, $args)
        {
        }
        /**
         * Loads rank math seo content for product update
         *
         * @since 3.4.0
         *
         * @param object $product
         * @param int    $product_id
         *
         * @return void
         */
        public function load_product_seo_content($product, $product_id)
        {
        }
        /**
         * Load hidden product content in vendor dashboard.
         *
         * It's used to fix as if React DOM will through an exception
         * that it could not get valid DOM element.
         *
         * @since 3.7.13
         *
         * @return void
         */
        public function load_hidden_product_sections()
        {
        }
        /**
         * Load rank math's scripts in product-edit page.
         *
         * @since 3.7.13
         *
         * This will be only applied to new Vendor-Dashboard's
         * product edit page.
         *
         * @return void
         */
        public function load_product_scripts_for_blocks()
        {
        }
        /**
         * Registers necessary rest routes.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function init_rest_api()
        {
        }
        /**
         * Registers rank maths rest routes in dokan rest class-maps.
         *
         * @since 3.7.13
         *
         * @param array $classes Array of classes.
         *
         * @return array
         */
        public function rest_api_class_map($classes)
        {
        }
        /**
         * Retrieves product block config data for rank math seo.
         *
         * @since 3.7.17
         *
         * @param array $config Block configuration.
         *
         * @return array
         */
        public function get_product_block_configurations($config)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay\Abstracts {
    /**
     * Class WebhookHandler.
     *
     * @package WeDevs\Dokan\Gateways\Razorpay\Interfaces
     *
     * @since 3.5.0
     */
    abstract class WebhookEventHandler
    {
        /**
         * Handle the event.
         *
         * @since 3.5.0
         *
         * @return void
         */
        abstract public function handle();
        /**
         * Set the event.
         *
         * @param $event
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function set_event($event)
        {
        }
        /**
         * Get the event.
         *
         * @since 3.5.0
         *
         * @return array|object
         */
        public function get_event()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay\BackgroundProcess {
    class DelayDisburseFund extends \WC_Background_Process
    {
        /**
         * Initiate new background process.
         */
        public function __construct()
        {
        }
        /**
         * Dispatch updater.
         *
         * Updater will still run via cron job if this fails for any reason.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function dispatch()
        {
        }
        /**
         * Handle cron healthcheck.
         *
         * Restart the background process if not already running
         * and data exists in the queue.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function handle_cron_healthcheck()
        {
        }
        /**
         * Schedule fallback event.
         *
         * @since 3.5.0
         *
         * @return void
         */
        protected function schedule_event()
        {
        }
        /**
         * Task.
         *
         * Override this method to perform any actions required on each
         * queue item. Return the modified item for further processing
         * in the next pass through. Or, return false to remove the
         * item from the queue.
         *
         * @since 3.5.0
         *
         * @param object $vendor Update callback function.
         *
         * @return string|bool
         */
        protected function task($args)
        {
        }
        /**
         * Complete.
         *
         * Override if applicable, but ensure that the below actions are
         * performed, or, call parent::complete().
         *
         * @since 3.5.0
         *
         * @return void
         */
        protected function complete()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay\Cart {
    /**
     * Class CartHandler.
     *
     * @package WeDevs\DokanPro\Modules\Razorpay\Cart
     *
     * @since 3.5.0
     */
    class CartHandler
    {
        /**
         * CartHandler constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Register scripts to load razorpay checkout js.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function register_scripts()
        {
        }
        /**
         * Display Razorpay Payment form on the checkout page after order receipt.
         *
         * @since 3.5.0
         *
         * @param int|\WC_Order $order
         *
         * @return string
         */
        public function generate_razorpay_form($order_id)
        {
        }
        /**
         * Validation after checkout.
         *
         * @see https://razorpay.com/docs/api/route/#request-parameters
         *
         * @since 3.5.0
         *
         * @param array $data
         * @param array $errors
         *
         * @return void
         */
        public function after_checkout_validation($data, $errors)
        {
        }
        /**
         * If Dokan-Razorpay is only payment gateway available and vendor is not connected with Razorpay,
         * product can not be added to cart for that vendor
         *
         * @since 3.5.0
         *
         * @param bool $passed
         * @param int $product_id
         *
         * @return bool
         */
        public function validate_vendor_is_connected($passed, $product_id)
        {
        }
        /**
         * Hide Razorpay payment gateway for subscription product.
         *
         * It's a temporary check. After adding subscription feature, we'll remove this.
         *
         * @since 3.5.0
         *
         * @param array $gateways
         *
         * @return array
         */
        public function checkout_filter_gateway($gateways)
        {
        }
        /**
         * Loads the order from the current request.
         *
         * @since 3.5.0
         *
         * @return \WC_Order
         * @throws DokanException An exception if there is no order key or the order does not exist.
         */
        public function get_order_from_request()
        {
        }
        /**
         * Clear Customer Woocommerce Cart if exists.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public static function maybe_clear_cart()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay\Factories {
    /**
     * Class EventFactory.
     *
     * @package WeDevs\DokanPro\Modules\Razorpay\Factories
     *
     * @since 3.5.0
     */
    class EventFactory
    {
        /**
         * Call the defined static methods.
         *
         * @since 3.5.0
         *
         * @param $name
         * @param $arguments
         *
         * @return mixed
         * @throws DokanException
         */
        public static function __callStatic($name, $arguments)
        {
        }
        /**
         * Create required event class instance.
         *
         * @since 3.5.0
         *
         * @param $event
         *
         * @return WebhookEventHandler|void instance
         * @throws DokanException
         */
        public static function get($event)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay\Gateways {
    /**
     * Class RegisterGateways.
     *
     * @package WeDevs\DokanPro\Modules\Razorpay\Gateways
     *
     * @since 3.5.0
     */
    class RegisterGateways
    {
        /**
         * RegisterGateways constructor.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Register payment gateway.
         *
         * @since 3.5.0
         *
         * @param array $gateways
         *
         * @return array
         */
        public function register_gateway($gateways)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay {
    /**
     * Class Helper.
     *
     * @package WeDevs\DokanPro\Modules\Razorpay
     *
     * @since 3.5.0
     */
    class Helper
    {
        /**
         * Get Razorpay gateway id.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_gateway_id()
        {
        }
        /**
         * Get settings of the gateway.
         *
         * @since 3.5.0
         *
         * @param string $key
         *
         * @return mixed|void
         */
        public static function get_settings($key = null)
        {
        }
        /**
         * Get Gateway title name.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_gateway_title()
        {
        }
        /**
         * Check whether it's enabled or not.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_enabled()
        {
        }
        /**
         * Check if this gateway is enabled and ready to use.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_ready()
        {
        }
        /**
         * Check if this gateway is enabled and ready to use.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_api_ready()
        {
        }
        /**
         * Check if the seller is enabled for receive razorpay payment.
         *
         * @since 3.5.0
         *
         * @param int $seller_id
         *
         * @return bool
         */
        public static function is_seller_enable_for_receive_payment($seller_id)
        {
        }
        /**
         * Check whether the gateway in test mode or not.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function is_test_mode()
        {
        }
        /**
         * Get Seller Account ID Key.
         *
         * @since 3.5.0
         *
         * @param bool|null $test_mode
         *
         * @return string
         */
        public static function get_seller_account_id_key($test_mode = null)
        {
        }
        /**
         * Get Seller Account ID Key in trash mode.
         *
         * @since 3.5.0
         *
         * @param bool|null $test_mode
         *
         * @return string
         */
        public static function get_seller_account_id_key_trashed($test_mode = null)
        {
        }
        /**
         * Get Seller Account ID for razorpay.
         *
         * @since 3.5.0
         *
         * @param int $seller_id
         *
         * @return string
         */
        public static function get_seller_account_id($seller_id)
        {
        }
        /**
         * Get seller enabled received payment key.
         *
         * @since 3.5.0
         *
         * @param bool|null $test_mode
         *
         * @return string
         */
        public static function get_seller_enabled_for_received_payment_key($test_mode = null)
        {
        }
        /**
         * Get Seller Payment Receivable Key.
         *
         * @since 3.5.0
         *
         * @param bool|null $test_mode
         *
         * @return string
         */
        public static function get_seller_payments_receivable_key($test_mode = null)
        {
        }
        /**
         * Check Seller Enable for recive payment or not.
         *
         * @since 3.5.0
         *
         * @param int $seller_id
         *
         * @return string
         */
        public static function get_seller_enabled_for_received_payment($seller_id)
        {
        }
        /**
         * Get Razorpay Key Id.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_key_id()
        {
        }
        /**
         * Get Razorpay Key Secret.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_key_secret()
        {
        }
        /**
         * Get Disbursement mode for transfer.
         *
         * Values could be - 'INSTANT', 'ON_ORDER_COMPLETE', 'DELAYED'
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_disbursement_mode()
        {
        }
        /**
         * Get disbersement delay period.
         *
         * @since 3.5.0
         *
         * @return int
         */
        public static function get_disbursement_delay_period()
        {
        }
        /**
         * Get on hold until time for transfer or disburse.
         *
         * For disbursement mode, it will subtract the delay period from current time.
         * For transfer mode, it will add the delay period from current time.
         *
         * @since 3.5.0
         *
         * @param bool $is_disbursement. eg: true for disbursement.
         *
         * @return DateTimeImmutable
         */
        public static function get_on_hold_until_time($is_disbursement = false)
        {
        }
        /**
         * Check if non-connected sellers sees notice on their dashboard to connect their Razorpay account.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function display_notice_on_vendor_dashboard()
        {
        }
        /**
         * Check if non-connected sellers gets announcement to connect their Razorpay account.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function display_announcement_to_non_connected_sellers()
        {
        }
        /**
         * Get Connect announcement interval.
         *
         * @since DOKAN_PRO_SiNCE
         *
         * @return int
         */
        public static function non_connected_sellers_display_notice_intervals()
        {
        }
        /**
         * Does seller pays the Razorpay processing fee.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function seller_pays_the_processing_fee()
        {
        }
        /**
         * Get webhook key name registered in razorpay for dokan.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_webhook_key()
        {
        }
        /**
         * Get razorpay webhook id registered for dokan.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_webhook_id()
        {
        }
        /**
         * Get webhook secret key for webhook matching.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_webhook_secret_key()
        {
        }
        /**
         * Get webhook URL.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_webhook_url()
        {
        }
        /**
         * Get Webhook Secret value.
         *
         * We've to check this secret value to verify
         * any webhook request from Razorpay.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_webhook_secret()
        {
        }
        /**
         * Get list of webhook events managed by dokan.
         *
         * @since 3.5.0
         *
         * @param bool $is_formatted Pass it true to get formatted events list to send Razorpay.
         *
         * @return array
         */
        public static function get_webhook_events($is_formatted = false)
        {
        }
        /**
         * Get human readable error message.
         *
         * @since 3.5.0
         *
         * @param WP_Error $error
         * @return mixed|string
         */
        public static function get_error_message(\WP_Error $error)
        {
        }
        /**
         * Include module template.
         *
         * @since 3.5.0
         *
         * @param string $name template file name
         * @param array  $args
         *
         * @return void
         */
        public static function get_template($name, $args = [])
        {
        }
        /**
         * Calculate the processing fee for a single vendor for an order.
         *
         * @since 3.5.0
         *
         * @param float     $order_processing_fee
         * @param \WC_ORDER $suborder
         * @param \WC_ORDER $order
         *
         * @return float
         */
        public static function calculate_processing_fee_for_suborder($order_processing_fee, $suborder, $order)
        {
        }
        /**
         * Format balance to insert in database.
         *
         * @since 3.5.0
         *
         * @param int $amount
         *
         * @return string
         */
        public static function format_balance($amount)
        {
        }
        /**
         * Format Order Total Amount value for processing.
         *
         * @see for https://razorpay.com/docs/api/route/#request-parameters-2
         *
         * @since 3.5.0
         *
         * @param int|float $amount
         *
         * @return int
         */
        public static function format_amount($amount)
        {
        }
        /**
         * Returns redirect URL post payment processing.
         *
         * @since 3.5.0
         *
         * @param int    $order_id
         * @param string $razorpay_order_id
         * @param bool   $is_cancelled
         *
         * @return string redirect URL
         */
        public static function get_redirect_url($order_id, $razorpay_order_id, $is_cancelled = false)
        {
        }
        /**
         * Get Customer Information.
         *
         * @since 3.5.0
         *
         * @param WC_Order $order
         *
         * @return array $args
         */
        public static function get_customer_info($order)
        {
        }
        /**
         * Initialization of Razorpay API Instance.
         *
         * @since 3.5.0
         *
         * @return \Razorpay\Api\Api
         */
        public static function init_razorpay_api()
        {
        }
        /**
         * Redirect User to Return URL Page.
         *
         * @since 3.5.0
         *
         * @param WC_Order $order
         *
         * @return void
         */
        public static function redirect_user_to_return_url($order)
        {
        }
        /**
         * Get Supported Currencies for Dokan Razorpay.
         *
         * @see https://razorpay.com/docs/payments/payments/international-payments/
         * @see https://razorpay.com/docs/api/route/#transfer-entity
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_supported_currencies()
        {
        }
        /**
         * Get Razorpay business types for creating Linked account.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_razorpay_business_types()
        {
        }
        /**
         * Get Bank account types for creating Linked account.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public static function get_bank_account_types()
        {
        }
        /**
         * Check whether subscription module is enabled or not.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public static function has_vendor_subscription_module()
        {
        }
        /**
         * Check if the order is a subscription order.
         *
         * @since 3.5.0
         *
         * @param WC_Product|int $product
         *
         * @return bool
         **/
        public static function is_vendor_subscription_product($product)
        {
        }
        /**
         * Get payment setup navigation url based on page.
         *
         * It'll handle vendor setup page link and vendor dashboard settings page link.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_payment_setup_navigation_url()
        {
        }
        /**
         * Get disbursement balance date.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public static function get_balance_date()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay\Interfaces {
    /**
     * Interface RequestHandler.
     *
     * @since 3.5.0
     */
    interface RequestHandler
    {
        /**
         * Handle the request.
         *
         * @since 3.5.0
         *
         * @param array $data
         *
         * @return WP_Error|mixed
         */
        public static function handle($data = []);
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay\Logs {
    /**
     * Class RazorpayLog.
     *
     * @package WeDevs\Dokan\Gateways\Razorpay
     *
     * @since 3.5.0
     */
    class RazorpayLog
    {
        /**
         * Log Razorpay error data with debug id.
         *
         * @since 3.5.0
         *
         * @param int      $id
         * @param WP_Error $error
         * @param string   $meta_key
         * @param string   $context
         *
         * @return void
         */
        public static function error($id, $error, $meta_key, $context = 'post')
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay\Order {
    /**
     * Trait Transferable.
     *
     * Handles Tansfer Related works.
     *
     * @since 3.5.0
     */
    trait Transferable
    {
        /**
         * Generate Transfer Unit Data to transfer amount to vendors.
         *
         * @see https://razorpay.com/docs/api/route/#create-transfers-from-payments
         *
         * @since 3.5.0
         *
         * @param array $data
         *
         * @return array
         */
        public function make_transfer_unit_data($data = [])
        {
        }
        /**
         * Transfer amount to vendor Razorpay account from a payment.
         *
         * @see https://razorpay.com/docs/api/route/#create-transfers-from-payments
         *
         * @since 3.5.0
         *
         * @param string    $razorpay_payment_id
         * @param array     $transfer_data
         * @param \WC_Order $order
         * @param float     $amount
         *
         * @return bool
         */
        public function transfer($razorpay_payment_id, $transfer_data, \WC_Order $order, $amount)
        {
        }
    }
    /**
     * Class OrderController.
     *
     * @package WeDevs\Dokan\Gateways\Razorpay
     *
     * @since 3.5.0
     */
    class OrderController
    {
        /**
         * Handle transfer related works for an order.
         */
        use \WeDevs\DokanPro\Modules\Razorpay\Order\Transferable;
        /**
         * Necessary Hooks Related to Order.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Handles if Order status changed to completed.
         *
         * @since 3.5.0
         *
         * @param int    $order_id
         * @param string $old_status
         * @param string $new_status
         *
         * @return void
         */
        public function order_status_changed($order_id, $old_status, $new_status)
        {
        }
        /**
         * This method will add queue for to be disburse payments.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function disburse_delayed_payment()
        {
        }
        /**
         * This method will add metadata param.
         *
         * @since 3.5.0
         *
         * @param $query
         * @param $query_vars
         *
         * @return mixed
         */
        public function handle_custom_query_var($query, $query_vars)
        {
        }
        /**
         * Capture Razorpay Payment.
         *
         * Takes payment If the order is valid and razorpay payment is complete.
         *
         * @since 3.5.0
         *
         * @return void
         **/
        public function capture_payment()
        {
        }
        /**
         * Process vendor payments.
         *
         * @since 3.5.0
         *
         * @param \WC_Order $order
         * @param object    $payment_data Razorpay payment data
         *
         * @return void
         * @throws DokanException
         */
        public function process_vendor_payments($order, $razorpay_payment)
        {
        }
    }
    /**
     * Class OrderManager.
     *
     * @package WeDevs\Dokan\Gateways\Razorpay
     *
     * @since 3.5.0
     */
    class OrderManager
    {
        /**
         * Generate Order Unit data for razorpay order.
         *
         * @since 3.5.0
         *
         * @see https://razorpay.com/docs/api/orders/
         *
         * @param int $order_id
         *
         * @return array
         */
        public static function make_order_unit_data($order_id)
        {
        }
        /**
         * Get tax amount.
         *
         * @since 3.5.0
         *
         * @param $order
         *
         * @return float
         */
        public static function get_tax_amount(\WC_Order $order)
        {
        }
        /**
         * Get Minimum Order Discount.
         *
         * @since 3.5.0
         *
         * @param \WC_Order $order
         *
         * @return float
         */
        public static function get_minimum_order_discount(\WC_Order $order)
        {
        }
        /**
         * Handle vendor balance and withdraw request.
         *
         * @since 3.5.0
         *
         * @param array $all_withdraws
         *
         * @return bool
         */
        public static function handle_vendor_balance($all_withdraws)
        {
        }
        /**
         * This method will entry vendors withdraw and balance entries.
         *
         * @since 3.5.0
         *
         * @param array $withdraw
         * @param bool  $insert_now
         *
         * @return WP_Error|bool true on success, WP_Error instance otherwise
         */
        public static function insert_vendor_withdraw_balance(&$withdraw, $insert_now = false)
        {
        }
        /**
         * Automatically process withdrawal for sellers per order.
         *
         * @since 3.5.0
         *
         * @param array $all_withdraws
         *
         * @return void
         */
        protected static function process_seller_withdraws($withdraw)
        {
        }
        /**
         * Get Order wise Refund.
         *
         * @since 3.5.0
         *
         * @param \WC_Order|int $order
         *
         * @return array
         */
        public static function get_refund_ids_by_order($order)
        {
        }
        /**
         * Disburse delayed payment.
         *
         * If comes here, it means order could be in delayed or on_order_complete mode
         *
         * @see https://razorpay.com/docs/api/route/#modify-settlement-hold-for-transfers
         *
         * @since 3.5.0
         *
         * @param \WC_Order $order
         *
         * @return void
         */
        public static function _disburse_payment($order)
        {
        }
        /**
         * Create an order in razorpay-end.
         *
         * Find the associated Razorpay Order from the session and verify that is is still correct.
         * If not found (or incorrect), create a new Razorpay Order.
         *
         * @see https://razorpay.com/docs/api/orders/#create-an-order
         *
         * @since 3.5.0
         *
         * @param int $order_id Order Id
         *
         * @return int|WP_Error Razorpay Order Id or WP_Error
         */
        public static function create_razorpay_order($order_id)
        {
        }
        /**
         * Save the razorpay intent to the order.
         *
         * @since 3.5.0
         *
         * @param \WC_Order $order
         * @param object    $razorpay_order
         *
         * @return void
         */
        protected static function save_razorpay_intent_to_order(\WC_Order $order, $razorpay_order)
        {
        }
        /**
         * Get all Razorpay Order from a given order.
         *
         * This will get all of the suborders also.
         *
         * @since 3.5.0
         *
         * @param \WC_Order $order_id
         */
        public static function get_all_orders_to_be_processed(\WC_Order $order)
        {
        }
        /**
         * Update Order status & Notes.
         *
         * @since 3.5.0
         *
         * @param \WC_Order $order
         * @param bool      $is_cancelled, by default false
         * @param string    $razorpay_payment_id
         *
         * @return void
         */
        public static function update_order_status(&$order, $is_cancelled = false, $razorpay_payment_id = null)
        {
        }
        /**
         * Get total admin commission for a given order.
         *
         * @since 3.5.0
         *
         * @param \WC_Order $order
         *
         * @return float
         */
        protected static function get_total_admin_commission(\WC_Order $order)
        {
        }
        /**
         * Processes vendor withdraw & balance threshold date.
         *
         * @since 3.5.0
         *
         * @param int    $order_id
         * @param string $balance_date
         * @param int    $vendor_id
         * @param string $transaction_type
         *
         * @return int|boolean
         */
        public static function process_withdraw_balance_threshold($order_id, $balance_date, $vendor_id, $transaction_type = 'dokan_orders')
        {
        }
    }
    /**
     * Class OrderValidator.
     *
     * Order related validation will be added here.
     *
     * @package WeDevs\Dokan\Gateways\Razorpay
     *
     * @since 3.5.0
     */
    class OrderValidator
    {
        /**
         * Verify Razorpay Order and Order Amount.
         *
         * @see https://razorpay.com/docs/api/orders/#fetch-an-order-with-id
         *
         * @since 3.5.0
         *
         * @param string $razorpay_order_id
         * @param int    $order_id
         *
         * @return bool
         */
        public static function verify_order_amount($razorpay_order_id = null, $order_id)
        {
        }
        /**
         * Verify Razorpay Order and Payment Signature.
         *
         * @see https://razorpay.com/docs/payment-gateway/web-integration/hosted/best-practices/#3-verify-signature-to-avoid-data-tampering
         *
         * @since 3.5.0
         *
         * @param int   $order_id
         * @param array $order_id
         *
         * @return bool
         */
        public static function verify_payment_signature($order_id, $post_data = [])
        {
        }
        /**
         * Check If Order is able to transfer to the vendor.
         *
         * @since 3.5.0
         *
         * @param \WC_Order $order
         * @param string    $connected_vendor_id
         * @param float     $vendor_earning
         *
         * @return bool     true if order is able to transfer
         */
        public static function is_order_transferable(\WC_Order $order, $connected_vendor_id, $vendor_earning)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay\PaymentMethods {
    /**
     * Class Razorpay Payment Gateway.
     *
     * @package WeDevs\DokanPro\Modules\Razorpay\PaymentMethods
     *
     * @since 3.5.0
     */
    class Razorpay extends \WC_Payment_Gateway
    {
        /**
         * Test API Mode.
         *
         * @since 3.5.0
         *
         * @var bool
         */
        public $test_mode;
        /**
         * Live API Key.
         *
         * @since 3.5.0
         *
         * @var string
         */
        public $key_id;
        /**
         * Live API Secret.
         *
         * @since 3.5.0
         *
         * @var string
         */
        public $key_secret;
        /**
         * Test API Key.
         *
         * @since 3.5.0
         *
         * @var string
         */
        public $test_key_id;
        /**
         * Test API Secret.
         *
         * @since 3.5.0
         *
         * @var string
         */
        public $test_key_secret;
        /**
         * Debug Mode.
         *
         * @since 3.5.0
         *
         * @var bool
         */
        public $debug;
        /**
         * Constructor for the razorpay gateway.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Init essential fields.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function init_fields()
        {
        }
        /**
         * Initialise Gateway Settings Form Fields.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
        /**
         * Initialize necessary action hooks.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Check if this gateway is enabled and available in the user's country.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public function is_valid_for_use()
        {
        }
        /**
         * Display information in frontend after checkout process button.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function payment_fields()
        {
        }
        /**
         * Process the payment and return the result.
         *
         * @since 3.5.0
         *
         * @param int $order_id
         *
         * @return array
         */
        public function process_payment($order_id)
        {
        }
        /**
         * Admin options with extra information.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function admin_options()
        {
        }
        /**
         * Admin script.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function admin_script()
        {
        }
        /**
         * Process admin options.
         *
         * @since 3.5.0
         *
         * @return bool|void
         */
        public function process_admin_options()
        {
        }
        /**
         * Check if this payment method is available with conditions.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public function is_available()
        {
        }
        /**
         * Return whether or not this gateway still requires setup to function.
         *
         * When this gateway is toggled on via AJAX, if this returns true a
         * redirect will occur to the settings page instead.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public function needs_setup()
        {
        }
        /**
         * Process Response after getting payment from Razorpay.
         *
         * This is called after payment is made by user.
         *
         * @since 3.5.0
         *
         * @param int $order_id
         *
         * @return array
         */
        public function process_response($order_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay\Refund {
    /**
     * Trait Refundable.
     *
     * @since 3.5.0
     */
    trait Refundable
    {
        /**
         * Refund from Admin Razorpay account to customer.
         *
         * @see https://razorpay.com/docs/api/refunds/#create-a-normal-refund
         * @see https://razorpay.com/docs/api/route/#refund-payments-and-reverse-transfer-from-a-linked
         *
         * @since 3.5.0
         *
         * @param \WeDevs\DokanPro\Refund\Refund $refund
         * @param WC_Order $order
         * @param string  $payment_id
         *
         * @return object|\WP_Error
         */
        public function refund($refund, \WC_Order $order, $payment_id)
        {
        }
        /**
         * Reverse transfer from Vendor Razorpay account to Admin account.
         *
         * @see https://razorpay.com/docs/api/route/#refund-payments-and-reverse-transfer-from-a-linked
         *
         * @since 3.5.0
         *
         * @param \WeDevs\DokanPro\Refund\Refund $refund
         * @param array                          $args
         * @param float                          $vendor_refund
         *
         * @return bool|WP_Error
         */
        public function reverse_transfer($refund, $args, $vendor_refund)
        {
        }
    }
    /**
     * Class Refund.
     *
     * @since 3.5.0
     */
    class Refund
    {
        /**
         * Refundable Trait
         *
         * Added refund logics of Razorpay payment gateway added here.
         */
        use \WeDevs\DokanPro\Modules\Razorpay\Refund\Refundable;
        /**
         * Razorpay API
         *
         * @var \Razorpay\Api\Api
         */
        protected $api;
        /**
         * Refund constructor.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * This method will refund payments to seller.
         *
         * @since 3.5.0
         *
         * @param \WeDevs\DokanPro\Refund\Refund $refund
         *
         * @return void
         *
         * @throws Exception
         */
        public function process_refund($refund)
        {
        }
        /**
         * Exclude dokan razorpay from auto approve api refund.
         *
         * @since 3.5.0
         *
         * @param array                  $payment_gateways
         * @param WeDevs\DokanPro\Refund $refund
         *
         * @return array
         */
        public function exclude_auto_approve_api_refund($payment_gateways, $refund)
        {
        }
        /**
         * Withdraw entry for automatic refund as debit.
         *
         * @since 3.5.0
         *
         * @param \WeDevs\DokanPro\Refund\Refund $refund
         * @param array $args
         * @param float $vendor_refund
         *
         * @return void
         */
        public function add_vendor_withdraw_entry($refund, $args, $vendor_refund)
        {
        }
        /**
         * Get vendor refund amount as razorpay refund amount.
         *
         * @since 3.5.0
         *
         * @param float                          $vendor_refund
         * @param array                          $args
         * @param \WeDevs\DokanPro\Refund\Refund $refund
         *
         * @return float
         */
        public function get_vendor_refund_amount($vendor_refund, $args, $refund)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay\Requests {
    class VendorConnectRequest implements \WeDevs\DokanPro\Modules\Razorpay\Interfaces\RequestHandler
    {
        /**
         * Vendor Connect Request Handler.
         *
         * @since 3.5.0
         *
         * @param array $data
         *
         * @return WP_Error|array
         */
        public static function handle($data = [])
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay\Utilities {
    /**
     * Class Processor
     *
     * @package WeDevs\DokanPro\Modules\Razorpay\Utilities
     *
     * @since 3.5.0
     */
    class Processor
    {
        /**
         * Instance of self
         *
         * @var Processor
         */
        protected static $instance = null;
        /**
         * Razorpay API mode
         *
         * @var bool
         */
        protected $test_mode = false;
        /**
         * Razorpay API base URL
         *
         * @var string
         */
        protected $api_base_url = '';
        /**
         * Processor constructor.
         *
         * @since 3.5.0
         */
        protected function __construct()
        {
        }
        /**
         * Initialize Processor() class
         *
         * @since 3.5.0
         *
         * @return Processor
         */
        public static function init()
        {
        }
        /**
         * Headers data for curl request.
         *
         * @since 3.5.0
         *
         * @param bool $content_type_json
         * @param bool $request_with_token, default false. We'll use basic auth.
         *
         * @return array|WP_Error
         */
        public function get_header($content_type_json = true, $request_with_token = false)
        {
        }
        /**
         * Get base64 encoded authorization data.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public function get_authorization_data()
        {
        }
        /**
         * Make remote URL request.
         *
         * @since 3.5.0
         *
         * @param array $data
         *
         * @return array|WP_Error
         */
        public function make_request($data = [])
        {
        }
        /**
         * Make Razorpay full url.
         *
         * @since 3.5.0
         *
         * @param string $path
         *
         * @return string
         */
        public function make_razorpay_url($path)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay\Webhook {
    /**
     * Class Webhook.
     *
     * @package WeDevs\DokanPro\Modules\Razorpay
     *
     * @see https://razorpay.com/docs/payments/dashboard/settings/webhooks/
     * @see https://razorpay.com/docs/webhooks/
     *
     * @since 3.5.0
     */
    class Webhook
    {
        /**
         * Razorpay API instance.
         *
         * @var \Razorpay\Api\Api
         */
        protected $api = null;
        /**
         * Webhook URL that needs to be registered with Razorpay.
         *
         * @since 3.5.0
         *
         * @var string
         */
        public $webhook_url = null;
        /**
         * Webhook Constructor.
         *
         * @since 3.5.0
         */
        public function __construct(\Razorpay\Api\Api $api)
        {
        }
        /**
         * Get all webhooks list from razorpay.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public function get()
        {
        }
        /**
         * Create webhook on Razorpay.
         *
         * @since 3.5.0
         *
         * @return bool|\Razorpay\Api\Webhook
         */
        public function create()
        {
        }
        /**
         * Update webhook status on Razorpay.
         *
         * Razorpay currently does not support deleting a webhook.
         * So we can use this to disable a webhook status or enable if needed.
         *
         * @since 3.5.0
         *
         * @param string $webhook_id
         * @param bool    $is_active
         *
         * @return bool|WP_Error
         */
        public function update_status($webhook_id, $is_active = false)
        {
        }
        /**
         * Verify a webhook request.
         *
         * @see https://razorpay.com/docs/webhooks/validate-test/#validate-webhooks
         *
         * @since 3.5.0
         *
         * @param object $webhook_body
         * @param string $webhook_signature
         *
         * @return bool
         */
        public function verify($webhook_body, $webhook_signature)
        {
        }
        /**
         * Check if we are using required webhooks.
         *
         * @since 3.5.0
         *
         * @param array  $response
         * @param string $webhook_id
         *
         * @return bool
         */
        protected function get_webhook_events_from_response($response, $webhook_id)
        {
        }
    }
    /**
     * Class WebhookHandler.
     *
     * @package WeDevs\DokanPro\Modules\Razorpay
     *
     * @see https://razorpay.com/docs/payments/dashboard/settings/webhooks/
     * @see https://razorpay.com/docs/webhooks/
     *
     * @since 3.5.0
     */
    class WebhookHandler
    {
        /**
         * Razorpay API instance
         *
         * @var \Razorpay\Api\Api
         */
        protected $api = null;
        /**
         * WebhookHandler constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Init all the hooks.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Handle events which are coming from Razorpay.
         *
         * @since 3.5.0
         *
         * @return void
         * @throws \WeDevs\Dokan\Exceptions\DokanException
         */
        public function handle_events()
        {
        }
        /**
         * Gets the incoming request headers. Some servers are not using
         * Apache and "getallheaders()" will not work so we may need to
         * build our own headers.
         *
         * @since 3.5.0
         *
         * @return array
         */
        public function get_request_headers()
        {
        }
        /**
         * Register webhook and remove old webhook endpoints from Razorpay.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public function register_webhook()
        {
        }
        /**
         * Delete webhook on Razorpay end.
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public function deregister_webhook()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay\WithdrawMethods {
    /**
     * Class RegisterWithdrawMethods
     *
     * @package WeDevs\DokanPro\Modules\Razorpay
     *
     * @since 3.5.0
     */
    class RegisterWithdrawMethods
    {
        /**
         * RegisterWithdrawMethod constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Returns true if venddor enabled razorpay
         *
         * @since 3.9.1
         *
         * @param $data
         *
         * @return array
         */
        public function add_razorpay_to_vendor_profile_data($data)
        {
        }
        /**
         * Register Withdraw method.
         *
         * @since 3.5.0
         *
         * @param array $methods
         *
         * @return array
         */
        public function register_method($methods)
        {
        }
        /**
         * Register Scripts.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue Scripts in Vendor Setup Wizard Payment page.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function enqueue_scripts_in_seller_wizard()
        {
        }
        /**
         * This enables dokan vendors to connect their Razorpay account
         * to the site Razorpay gateway account.
         *
         * @since 3.5.0
         *
         * @global WP_User $current_user
         *
         * @param $store_settings
         *
         * @return void
         */
        public function razorpay_connect_button($store_settings)
        {
        }
        /**
         * Send announcement to vendors if their account is not connected with Razorpay.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function send_announcement_to_non_connected_vendor()
        {
        }
        /**
         * Display notice to vendors if their account is not connected with Razorpay.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function display_notice_on_vendor_dashboard()
        {
        }
        /**
         * Get payment method icon
         *
         * @since 3.5.6
         *
         * @param string $method_icon
         * @param string $method_key
         *
         * @return string
         */
        public function get_method_icon($method_icon, $method_key)
        {
        }
        /**
         * Get the heading for this payment's settings page
         *
         * @since 3.5.6
         *
         * @param string $heading
         * @param string $slug
         *
         * @return string
         */
        public function get_heading($heading, $slug)
        {
        }
        /**
         * Get if a seller is connected to this payment method
         *
         * @since 3.6.1
         *
         * @param bool $connected
         * @param string $payment_method_id
         * @param int $seller_id
         *
         * @return bool
         */
        public function is_seller_connected($connected, $payment_method_id, $seller_id)
        {
        }
        /**
         * Calculate Dokan profile completeness value
         *
         * @since 3.7.1
         *
         * @param array $progress_track_value
         *
         * @return array
         */
        public function calculate_profile_progress($progress_track_value)
        {
        }
    }
    /**
     * Class VendorLinkedAccount
     *
     * @package WeDevs\DokanPro\Modules\Razorpay
     *
     * @since 3.5.0
     */
    class VendorLinkedAccount
    {
        /**
         * VendorLinkedAccount constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Initialize hooks.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Handle razorpay connect process for vendor account.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function connect()
        {
        }
        /**
         * Handle razorpay authorization.
         *
         * @since 3.5.0
         *
         * @param int   $user_id
         * @param array $response
         *
         * @return string
         */
        public function authorize($user_id, $response)
        {
        }
        /**
         * Deauthorize vendor's Razorpay account.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function deauthorize()
        {
        }
        /**
         * De-authorize vendor's Razorpay account from Vendor setup wizard section.
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function deauthorize_from_wc_setup()
        {
        }
        /**
         * Create a linked account in razorpay for route transfer.
         *
         * @see https://razorpay.com/docs/route/api/account-apis-beta/#create-an-account
         *
         * @since 3.5.0
         *
         * @param array $data Data come here must be sanitized before come.
         *
         * @return object|WP_Error
         */
        public function create_account($data)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Razorpay {
    /**
     * Class Module.
     *
     * @package WeDevs\Dokan\Gateways
     *
     * @see https://razorpay.com/docs/api For Related API's
     *
     * @since 3.5.0
     */
    class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Manager constructor.
         *
         * @since 3.5.0
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Get plugin path.
         *
         * @since 3.5.0
         *
         * @return string
         **/
        public function plugin_path()
        {
        }
        /**
         * Load Dokan Razorpay templates.
         *
         * @since 3.5.0
         *
         * @return string
         */
        public function load_razorpay_templates($template_path, $template, $args)
        {
        }
        /**
         * Activate Module.
         *
         * @since 3.5.0
         */
        public function activate($instance)
        {
        }
        /**
         * De-activate Module.
         *
         * @since 3.5.0
         */
        public function deactivate($instance)
        {
        }
    }
}
namespace Razorpay\Api {
    interface ArrayableInterface
    {
        /**
         * Get the instance as an array.
         *
         * @return array
         */
        public function toArray();
    }
    class Resource implements \ArrayAccess, \IteratorAggregate
    {
        protected $attributes = array();
        public function getIterator()
        {
        }
        public function offsetExists($offset)
        {
        }
        public function offsetSet($offset, $value)
        {
        }
        public function offsetGet($offset)
        {
        }
        public function offsetUnset($offset)
        {
        }
        public function __get($key)
        {
        }
        public function __set($key, $value)
        {
        }
        public function __isset($key)
        {
        }
        public function __unset($key)
        {
        }
    }
    class Entity extends \Razorpay\Api\Resource implements \Razorpay\Api\ArrayableInterface
    {
        protected $attributes = array();
        /**
         * Create method 
         *
         * @param array $attributes 
         * 
         */
        protected function create($attributes = null)
        {
        }
        protected function fetch($id)
        {
        }
        protected function validateIdPresence($id)
        {
        }
        protected function all($options = array())
        {
        }
        protected function getEntityUrl()
        {
        }
        protected function snakeCase($input)
        {
        }
        /**
         * Makes a HTTP request using Request class and assuming the API returns
         * formatted entity or collection result, wraps the returned JSON as entity
         * and returns.
         *
         * @param string $method
         * @param string $relativeUrl
         * @param array  $data
         * @param array  $additionHeader
         *
         * @return Entity
         */
        protected function request($method, $relativeUrl, $data = null)
        {
        }
        /**
         * Given the JSON response of an API call, wraps it to corresponding entity
         * class or a collection and returns the same.
         *
         * @param array $data
         *
         * @return Entity
         */
        protected static function buildEntity($data)
        {
        }
        protected static function getDefinedEntitiesArray()
        {
        }
        protected static function getEntityClass($name)
        {
        }
        protected function getEntity()
        {
        }
        public function fill($data)
        {
        }
        public static function isAssocArray($arr)
        {
        }
        public function toArray()
        {
        }
        protected function convertToArray($attributes)
        {
        }
    }
    class Addon extends \Razorpay\Api\Entity
    {
        // To create an Addon,
        // use the createAddon method of the Subscription class
        public function fetch($id)
        {
        }
        public function delete()
        {
        }
        public function fetchAll($attributes = array())
        {
        }
    }
    class Api
    {
        protected static $baseUrl = 'https://api.razorpay.com/v1/';
        protected static $key = null;
        protected static $secret = null;
        /*
         * App info is to store the Plugin/integration
         * information
         */
        public static $appsDetails = array();
        const VERSION = '2.8.1';
        /**
         * @param string $key
         * @param string $secret
         */
        public function __construct($key, $secret)
        {
        }
        /*
         *  Set Headers
         */
        public function setHeader($header, $value)
        {
        }
        public function setAppDetails($title, $version = null)
        {
        }
        public function getAppsDetails()
        {
        }
        public function setBaseUrl($baseUrl)
        {
        }
        /**
         * @param string $name
         * @return mixed
         */
        public function __get($name)
        {
        }
        public static function getBaseUrl()
        {
        }
        public static function getKey()
        {
        }
        public static function getSecret()
        {
        }
        public static function getFullUrl($relativeUrl)
        {
        }
    }
    class Card extends \Razorpay\Api\Entity
    {
        /**
         * @param $id Card id
         */
        public function fetch($id)
        {
        }
    }
    class Collection extends \Razorpay\Api\Entity implements \Countable
    {
        public function count()
        {
        }
    }
    class Customer extends \Razorpay\Api\Entity
    {
        /**
         *  @param $id Customer id description
         */
        public function fetch($id)
        {
        }
        public function all($options = array())
        {
        }
        public function create($attributes = array())
        {
        }
        public function edit($attributes = null)
        {
        }
        public function tokens()
        {
        }
    }
}
namespace Razorpay\Api\Errors {
    class Error extends \Exception
    {
        protected $httpStatusCode;
        public function __construct($message, $code, $httpStatusCode)
        {
        }
        public function getHttpStatusCode()
        {
        }
    }
    class BadRequestError extends \Razorpay\Api\Errors\Error
    {
        protected $field = null;
        public function __construct($message, $code, $httpStatusCode, $field = null)
        {
        }
        public function getField()
        {
        }
    }
    class ErrorCode
    {
        const BAD_REQUEST_ERROR = 'BAD_REQUEST_ERROR';
        const SERVER_ERROR = 'SERVER_ERROR';
        const GATEWAY_ERROR = 'GATEWAY_ERROR';
        public static function exists($code)
        {
        }
    }
    class GatewayError extends \Razorpay\Api\Errors\Error
    {
    }
    class ServerError extends \Razorpay\Api\Errors\Error
    {
    }
    class SignatureVerificationError extends \Exception
    {
    }
}
namespace Razorpay\Api {
    class FundAccount extends \Razorpay\Api\Entity
    {
        /**
         * Create a Fund Account .
         *
         * @param array $attributes
         *
         * @return FundAccount
         */
        public function create($attributes = array())
        {
        }
        /**
         * Fetch all Fund Accounts
         *
         * @param array $options
         *
         * @return Collection
         */
        public function all($options = array())
        {
        }
    }
    /**
     * Invoice entity gets used for both Payment Links and Invoices system.
     * Few of the methods are only meaningful for Invoices system and calling those
     * for against/for a Payment Link would throw Bad request error.
     */
    class Invoice extends \Razorpay\Api\Entity
    {
        /**
         * Creates invoice of any type(invoice|link|ecod).
         *
         * @param array $attributes
         *
         * @return Invoice
         */
        public function create($attributes = array())
        {
        }
        /**
         * Fetches invoice entity with given id
         *
         * @param string $id
         *
         * @return Invoice
         */
        public function fetch($id)
        {
        }
        /**
         * Fetches multiple invoices with given query options
         *
         * @param array $options
         *
         * @return Collection
         */
        public function all($options = array())
        {
        }
        /**
         * Cancels issued invoice
         *
         * @return Invoice
         */
        public function cancel()
        {
        }
        /**
         * Send/re-send notification for invoice by given medium
         *
         * @param $medium - sms|email
         *
         * @return array
         */
        public function notifyBy($medium)
        {
        }
        /**
         * Patches given invoice with new attributes
         *
         * @param array $attributes
         *
         * @return Invoice
         */
        public function edit($attributes = array())
        {
        }
        /**
         * Issues drafted invoice
         *
         * @return Invoice
         */
        public function issue()
        {
        }
        /**
         * Deletes drafted invoice
         *
         * @return Invoice
         */
        public function delete()
        {
        }
    }
    class Item extends \Razorpay\Api\Entity
    {
        public function create($attributes = array())
        {
        }
        public function fetch($id)
        {
        }
        public function edit($attributes = array())
        {
        }
        public function all($options = array())
        {
        }
        public function delete()
        {
        }
    }
    class Order extends \Razorpay\Api\Entity
    {
        /**
         * @param $id Order id description
         */
        public function create($attributes = array())
        {
        }
        public function fetch($id)
        {
        }
        public function all($options = array())
        {
        }
        public function edit($attributes = array())
        {
        }
        public function payments()
        {
        }
        public function transfers($options = array())
        {
        }
    }
    class Payment extends \Razorpay\Api\Entity
    {
        /**
         * @param $id Payment id
         */
        public function fetch($id)
        {
        }
        public function all($options = array())
        {
        }
        /**
         * Patches given payment with new attributes
         *
         * @param array $attributes
         *
         * @return Payment
         */
        public function edit($attributes = array())
        {
        }
        /**
         * @param $id Payment id
         */
        public function refund($attributes = array())
        {
        }
        /**
         * @param $id Payment id
         */
        public function capture($attributes = array())
        {
        }
        public function transfer($attributes = array())
        {
        }
        public function refunds()
        {
        }
        public function transfers()
        {
        }
        public function bankTransfer()
        {
        }
        public function fetchMultipleRefund($options = array())
        {
        }
        public function fetchRefund($refundId)
        {
        }
        public function createRecurring($attributes = array())
        {
        }
        /**
         * fetch Card Details
         *
         * @param id $id
         *
         * @return card
         */
        public function fetchCardDetails()
        {
        }
        /**
         * fetchPaymentDowntime
         *
         */
        public function fetchPaymentDowntime()
        {
        }
        /**
         * fetch Payment Downtime Id
         *
         * @param id $id
         *
         * @return card
         */
        public function fetchPaymentDowntimeById($id)
        {
        }
        /**
         * create Payment Json
         *
         * @param array $attributes
         */
        public function createPaymentJson($attributes = array())
        {
        }
        /**
         * submit otp
         *
         * @param id $id
         *
         * @param array $attributes
         */
        public function otpSubmit($attributes = array())
        {
        }
        /**
         * Generate otp
         *
         * @param id $id
         *
         * @param array $attributes
         */
        public function otpGenerate()
        {
        }
    }
    class PaymentLink extends \Razorpay\Api\Entity
    {
        /**
         * Creates Payment link .
         *
         * @param array $attributes
         *
         * @return PaymentLink
         */
        public function create($attributes = array())
        {
        }
        /**
         * Fetches Payment link entity with given id
         *
         * @param string $id
         *
         * @return PaymentLink
         */
        public function fetch($id)
        {
        }
        /**
         * Fetches multiple Payment link with given query options
         *
         * @param array $options
         *
         * @return Collection
         */
        public function all($options = array())
        {
        }
        /**
         * Cancels Payment link
         *
         * @return PaymentLink
         */
        public function cancel()
        {
        }
        public function edit($attributes = array())
        {
        }
        /**
         * Send/re-send notification with short url by given medium
         *
         * @param $medium - sms|email
         *
         * @return array
         */
        public function notifyBy($medium)
        {
        }
    }
    class PaymentPage extends \Razorpay\Api\Entity
    {
        public function fetch($id)
        {
        }
        public function all($options = array())
        {
        }
        public function activate($id)
        {
        }
        public function deactivate($id)
        {
        }
    }
    class Plan extends \Razorpay\Api\Entity
    {
        public function create($attributes = array())
        {
        }
        public function fetch($id)
        {
        }
        public function all($options = array())
        {
        }
    }
    class QrCode extends \Razorpay\Api\Entity
    {
        /**
         * Create QR code
         * @param array $attributes
         * @return Entity|QrCode
         */
        public function create($attributes = array())
        {
        }
        /**
         * Fetch QR code details based QR id
         * @param $id
         * @return Entity|QrCode
         */
        public function fetch($id)
        {
        }
        /**
         * Close the QR code based on id
         * @return Entity|QrCode
         */
        public function close()
        {
        }
        /**
         * Fetch all QR code details
         * @param array $options
         * @return Entity|QrCode
         */
        public function all($options = array())
        {
        }
        /**
         * Fetch payments made to a QR Code based on QR id
         * @param array $options
         * @return Entity|QrCode
         */
        public function fetchAllPayments($options = array())
        {
        }
    }
    class Refund extends \Razorpay\Api\Entity
    {
        /**
         * @param $id Refund id
         */
        public function fetch($id)
        {
        }
        public function create($attributes = array())
        {
        }
        public function all($options = array())
        {
        }
        public function edit($attributes = array())
        {
        }
        public function refund($options = array())
        {
        }
    }
    /**
     * Request class to communicate to the request libarary
     */
    class Request
    {
        /**
         * Headers to be sent with every http request to the API
         * @var array
         */
        protected static $headers = array('Razorpay-API' => 1);
        /**
         * Fires a request to the API
         * @param  string   $method HTTP Verb
         * @param  string   $url    Relative URL for the request
         * @param  array $data Data to be passed along the request
         * @param  array $additionHeader headers to be passed along the request
         * @return array Response data in array format. Not meant
         * to be used directly
         */
        public function request($method, $url, $data = array())
        {
        }
        public function setCurlSslOpts($curl)
        {
        }
        /**
         * Adds an additional header to all API requests
         * @param string $key   Header key
         * @param string $value Header value
         * @return null
         */
        public static function addHeader($key, $value)
        {
        }
        /**
         * Returns all headers attached so far
         * @return array headers
         */
        public static function getHeaders()
        {
        }
        /**
         * Process the statusCode of the response and throw exception if necessary
         * @param Object $response The response object returned by Requests
         */
        protected function checkErrors($response)
        {
        }
        protected function processError($body, $httpStatusCode, $response)
        {
        }
        protected function throwServerError($body, $httpStatusCode)
        {
        }
        protected function getRequestHeaders()
        {
        }
        protected function constructUa()
        {
        }
        protected function getAppDetailsUa()
        {
        }
        /**
         * Verifies error is in proper format. If not then
         * throws ServerErrorException
         *
         * @param  array $body
         * @param  int $httpStatusCode
         * @return void
         */
        protected function verifyErrorFormat($body, $httpStatusCode)
        {
        }
    }
    /**
     * Settlement related actions can be done from here
     */
    class Settlement extends \Razorpay\Api\Entity
    {
        /**
         * create Ondemand Settlemententity
         * @param  array $attributes
         * @return Settlement
         */
        public function createOndemandSettlement($attributes = array())
        {
        }
        /**
         * Fetch single settlement entity
         * @param  string $id
         * @return Settlement
         */
        public function fetch($id)
        {
        }
        /**
         * Get all settlements according to options
         * @param  array $options
         * @return Collection
         */
        public function all($options = array())
        {
        }
        /**
         * Get combined report of settlements
         * @param  array  $options
         * @return array
         */
        public function reports($options = array())
        {
        }
        /**
         * Get Settlement Recon
         * @param  array  $options
         * @return array
         */
        public function settlementRecon($options = array())
        {
        }
        /**
         * fetch Ondemand Settlement by Id 
         * @param  string $id
         * @return array
         */
        public function fetchOndemandSettlementById()
        {
        }
        /**
         * fetch all Ondemand Settlement 
         * @return array
         */
        public function fetchAllOndemandSettlement()
        {
        }
    }
    class Subscription extends \Razorpay\Api\Entity
    {
        public function create($attributes = array())
        {
        }
        public function fetch($id)
        {
        }
        public function all($options = array())
        {
        }
        public function cancel($attributes = array())
        {
        }
        public function createAddon($attributes = array())
        {
        }
        /**
         * Create a Registration Link
         * @param  array $attributes
         * @return array
         */
        public function createSubscriptionRegistration($attributes = array())
        {
        }
        public function update($attributes = array())
        {
        }
        public function pendingUpdate()
        {
        }
        public function cancelScheduledChanges()
        {
        }
        public function pause($attributes = array())
        {
        }
        public function resume($attributes = array())
        {
        }
        public function deleteOffer($offerId)
        {
        }
    }
    class Token extends \Razorpay\Api\Entity
    {
        /**
         * @param $id Token id
         */
        public function fetch($id)
        {
        }
        public function all($options = array())
        {
        }
        public function delete($id)
        {
        }
    }
    class Transfer extends \Razorpay\Api\Entity
    {
        /**
         *  @param $id  Transfer ID
         */
        public function fetch($id)
        {
        }
        public function all($options = array())
        {
        }
        /**
         * Create a direct transfer from merchant's account to
         * any of the linked accounts, without linking it to a
         * payment
         */
        public function create($attributes = array())
        {
        }
        public function edit($attributes = null)
        {
        }
        /**
         * Create a reversal for a transfer
         */
        public function reverse($attributes = array())
        {
        }
        /**
         * Fetches all reversals
         */
        public function reversals($attributes = array())
        {
        }
    }
    class Utility
    {
        const SHA256 = 'sha256';
        public function verifyPaymentSignature($attributes)
        {
        }
        public function verifyWebhookSignature($payload, $actualSignature, $secret)
        {
        }
        public function verifySignature($payload, $actualSignature, $secret)
        {
        }
    }
    class VirtualAccount extends \Razorpay\Api\Entity
    {
        public function create($attributes = array())
        {
        }
        public function fetch($id)
        {
        }
        public function all($options = array())
        {
        }
        public function close()
        {
        }
        public function payments($options = array())
        {
        }
        public function addReceiver($attributes = array())
        {
        }
        public function addAllowedPayer($attributes = array())
        {
        }
        public function deleteAllowedPayer($allowedPlayerId)
        {
        }
    }
    class Webhook extends \Razorpay\Api\Entity
    {
        /**
         * @param $id webhook id description
         */
        public function create($attributes = array())
        {
        }
        public function fetch($id)
        {
        }
        public function all($options = array())
        {
        }
        /**
         * Patches given webhook with new attributes
         *
         * @param array $attributes
         *
         * @return Webhooks
         */
        public function edit($attributes = array(), $id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ReportAbuse {
    class Admin
    {
        /**
         * Class constructor
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add Dokan submenu
         *
         * @since 2.9.8
         *
         * @param string $capability
         *
         * @return void
         */
        public static function add_admin_menu($capability)
        {
        }
        /**
         * Add admin page Route
         *
         * @since 2.9.8
         *
         * @param array $routes
         *
         * @return array
         */
        public static function add_admin_route($routes)
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public static function register_scripts()
        {
        }
        /**
         * Enqueue admin script
         *
         * @since 2.9.8
         *
         * @return void
         */
        public static function enqueue_admin_script()
        {
        }
        /**
         * After Save Admin Settings.
         *
         * @since 3.10.0
         *
         * @param string $option_name Option Key (Section Key).
         * @param array $option_value Option value.
         * @param array $old_options Option Previous value.
         *
         * @return void
         */
        public function after_save_settings($option_name, $option_value, $old_options)
        {
        }
    }
    class AdminEmail extends \WC_Email
    {
        /**
         * The report to be emailed
         *
         * @var null|object
         */
        protected $report = null;
        /**
         * Class constructor
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Email settings
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
        /**
         * Email default subject
         *
         * @since 2.9.8
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Email default heading
         *
         * @since 2.9.8
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Send email
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function trigger($report)
        {
        }
        /**
         * Email content
         *
         * @since 2.9.8
         *
         * @return string
         */
        public function get_content()
        {
        }
    }
    class AdminSettings
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add admin settings section
         *
         * @since 1.0.0
         *
         * @param array $sections
         *
         * @return array
         */
        public function add_settings_section($sections)
        {
        }
        /**
         * Add admin settings fields
         *
         * @since 1.0.0
         *
         * @param array $settings_fields
         *
         * @return array
         */
        public function add_settings_fields($settings_fields)
        {
        }
    }
    class AdminSingleProduct
    {
        /**
         * Class constructor
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add metabox in product editing page
         *
         * @since 2.9.8
         *
         * @return void
         */
        public static function add_abuse_report_meta_box()
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public static function register_scripts()
        {
        }
        /**
         * Abuse Reports metabox
         *
         * @since 2.9.8
         *
         * @param \WP_Post $post
         *
         * @return void
         */
        public static function meta_box($post)
        {
        }
    }
    class Ajax
    {
        /**
         * Class constructor
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add nonce to login form popup response
         *
         * @since 2.9.8
         *
         * @param array $response
         *
         * @return array
         */
        public static function add_nonce_to_ajax_reponse($response)
        {
        }
        /**
         * Get report form
         *
         * @since 2.9.8
         *
         * @return void
         */
        public static function get_form()
        {
        }
        /**
         * Submit report form
         *
         * @since 2.9.8
         *
         * @return void
         */
        public static function submit_form()
        {
        }
    }
    class EmailLoader
    {
        /**
         * Class constructor
         *
         * @since 2.9.8
         *
         * @return array
         */
        public function __construct()
        {
        }
        /**
         * Add email class
         *
         * @since 2.9.8
         *
         * @param array $wc_emails
         *
         * @return array
         */
        public static function add_email_class($wc_emails)
        {
        }
        /**
         * Add email template
         *
         * @since 2.9.8
         *
         * @param array $template_files
         *
         * @return array
         */
        public static function add_email_template_file($template_files)
        {
        }
        /**
         * Add email action
         *
         * @since 2.9.8
         *
         * @param array $actions
         *
         * @return array
         */
        public static function add_email_action($actions)
        {
        }
    }
    /**
     * Abuse Report Cache class.
     *
     * Manage all of the cachings for abuse report.
     *
     * @since 3.4.2
     *
     * @see \WeDevs\Dokan\Cache
     */
    class ReportAbuseCache
    {
        public function __construct()
        {
        }
        /**
         * Clear Abuse Reports cache
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function clear_abuse_report_cache()
        {
        }
    }
    class Rest
    {
        /**
         * Class constructor
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add module REST Controller
         *
         * @since 2.9.8
         *
         * @param array $class_map
         */
        public function add_rest_controller($class_map)
        {
        }
    }
    class RestController extends \WP_REST_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route base.
         *
         * @var string
         */
        protected $rest_base = 'abuse-reports';
        /**
         * Register routes
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Permission callback
         *
         * @since 2.9.8
         *
         * @return bool
         */
        public function is_dokandar()
        {
        }
        /**
         * Get reports
         *
         * @since 2.9.8
         *
         * @param \WP_REST_Request $request
         *
         * @return \WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * Get abuse reasons
         *
         * @since 2.9.8
         *
         * @param \WP_REST_Request $request
         *
         * @return \WP_REST_Response
         */
        public function get_abuse_reasons($request)
        {
        }
        /**
         * Delete report
         *
         * @since 2.9.8
         *
         * @param \WP_REST_Request $request
         *
         * @return \WP_REST_Response
         */
        public function delete_item($request)
        {
        }
        /**
         * Delete reports in bulk
         *
         * @since 2.9.8
         *
         * @param \WP_REST_Request $request
         *
         * @return \WP_REST_Response|WP_Error
         */
        public function delete_items($request)
        {
        }
    }
    class SingleProduct
    {
        /**
         * Class constructor
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add report button
         *
         * @since 2.9.8
         *
         * @return void
         */
        public static function add_report_button()
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public static function register_scripts()
        {
        }
        /**
         * Enqueue scripts
         *
         * @since 2.9.8
         *
         * @return void
         */
        public static function enqueue_scripts()
        {
        }
    }
    final class Module
    {
        /**
         * Plugin constructor
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Executes on module activation
         *
         * @since 2.9.8
         *
         * @return void
         */
        public static function activate()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\RequestForQuotation\Admin {
    /**
     * Class for Hooks integration.
     *
     * @since 3.6.0
     */
    class Hooks
    {
        /**
         * Class constructor
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add Dokan submenu
         *
         * @since 3.6.0
         *
         * @param string $capability
         *
         * @return void
         */
        public function add_admin_menu($capability)
        {
        }
        /**
         * Add admin page Route
         *
         * @since 3.6.0
         *
         * @param array $routes
         *
         * @return array
         */
        public function add_admin_route($routes)
        {
        }
    }
    /**
     * Class for Settings Hooks integration.
     *
     * @since 3.6.0
     */
    class Settings
    {
        /**
         * Class constructor
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Load admin settings section.
         *
         * @since 3.6.0
         *
         * @param $section
         *
         * @return mixed
         */
        public function load_settings_section($section)
        {
        }
        /**
         * Load all settings fields.
         *
         * @since 3.6.0
         *
         * @param $fields
         *
         * @return mixed
         */
        public function load_settings_fields($fields)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\RequestForQuotation {
    /**
     * Class for Frontend Ajax integration.
     *
     * @since 3.6.0
     */
    class Ajax
    {
        /**
         * Contains an array of quote items.
         *
         * @var array
         */
        public $quote_contents = [];
        /**
         * Construct for Ajax class.
         */
        public function __construct()
        {
        }
        /**
         * Callback for Dokan_add_to_quote.
         *
         * @since 3.6.0
         *
         * @throws \Exception
         * @return void
         */
        public function dokan_add_to_quote()
        {
        }
        /**
         * Add a product to the Quote.
         *
         * @since 3.6.0
         *
         * @param int  $product_id      contains the id of the product to add to the quote.
         * @param int  $quantity        contains the quantity of the item to add.
         * @param bool $return_contents If return content.
         *
         * @throws \Exception Plugins can throw an exception to prevent adding to quote.
         * @return string|bool $quote_item_key
         */
        public function add_to_quote($product_id = 0, $quantity = 1, $return_contents = false)
        {
        }
        /**
         * Generate a unique ID for the quote item being added.
         *
         * @since 3.6.0
         *
         * @param int $product_id id of the product the key is being generated for.
         *
         * @return string quote item key
         */
        public function generate_quote_id($product_id)
        {
        }
        /**
         * Check if product is in the quote and return quote item key.
         *
         * Cart item key will be unique based on the item and its properties, such as variations.
         *
         * @since 3.6.0
         *
         * @param bool|string $quote_key
         *
         * @return string|bool|null Quote item key
         */
        public function find_product_in_quote($quote_key = false)
        {
        }
        /**
         * Check if another vendor is in the quote and return quote item key.
         *
         * @since 3.6.0
         *
         * @param int $product_id
         *
         * @return bool
         */
        public function find_another_vendor_in_quote($product_id = 0)
        {
        }
        /**
         * Get the product row price per item.
         *
         * @since 3.6.0
         *
         * @param \WC_Product $product Product object.
         *
         * @return string formatted price
         */
        public function get_product_price($product, $args = [], $view = 'view')
        {
        }
        /**
         * Returns 'incl' if tax should be included in cart, otherwise returns 'excl'.
         *
         * @since 3.6.0
         *
         * @return string
         */
        public function get_tax_price_display_mode()
        {
        }
        /**
         * Remove dokan quote item.
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function remove_dokan_quote_item()
        {
        }
        /**
         * Handle quote actions update status.
         *
         * @since 3.12.3
         *
         * @return void
         */
        public function update_quote_status()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\RequestForQuotation\Api {
    /**
     * Request A Quote Controller Class
     *
     * @since 3.6.0
     */
    class CustomerController extends \WC_REST_Customers_V2_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1/request-for-quote';
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'customers';
    }
    /**
     * Request A Quote Controller Class
     *
     * @since 3.6.0
     */
    class QuoteRuleController extends \WeDevs\Dokan\Abstracts\DokanRESTController
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1/request-for-quote';
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'quote-rule';
        /**
         * Register all request quote route
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get single object
         *
         * @since 3.6.0
         *
         * @return array|null
         */
        public function get_quote_rule_object_by_id($rule_id)
        {
        }
        /**
         * Get all request_quote
         *
         * @since 3.6.0
         *
         * @param mixed $request
         *
         * @return object
         */
        public function get_dokan_quotes_rules($request)
        {
        }
        /**
         * Create request_quote
         *
         * @since 3.6.0
         *
         * @return \WP_Error|\WP_REST_Response
         */
        public function create_quote_rule($request)
        {
        }
        /**
         * Get quote rule permissions check.
         *
         * @since 3.6.0
         *
         * @return bool
         */
        public function get_quote_rule_permissions_check()
        {
        }
        /**
         * Get quote rule permissions check.
         *
         * @since 3.6.0
         *
         * @return bool
         */
        public function batch_items_permissions_check()
        {
        }
        /**
         * Get restore request_quote permissions check
         *
         * @since 3.6.0
         *
         * @return bool
         */
        public function restore_quote_rule_permissions_check()
        {
        }
        /**
         * Create request_quote permissions check
         *
         * @since 3.6.0
         *
         * @return bool
         */
        public function create_quote_rule_permissions_check()
        {
        }
        /**
         * Prepare data for response
         *
         * @since 3.6.0
         *
         * @param mixed            $rule_object
         * @param \WP_REST_Request $request     Request object.
         *
         * @return array
         */
        public function prepare_response_for_rule_object($rule_object, $request)
        {
        }
        /**
         * Prepare data for response
         *
         * @since 3.6.0
         *
         * @param mixed            $rule_object
         * @param \WP_REST_Request $request     Request object.
         *
         * @return array
         */
        public function prepare_response_for_single_rule_object($rule_object, $request)
        {
        }
        /**
         * Prepare links for the request.
         *
         * @param mixed            $rule_object  \WC_Data Object data.
         * @param \WP_REST_Request $request      Request object.
         *
         * @return array                   Links for the given post.
         */
        protected function prepare_links($rule_object, $request)
        {
        }
        /**
         * Get collection params.
         *
         * @since 3.6.0
         *
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * Retrieves the contact schema, conforming to JSON Schema.
         *
         * @return array
         */
        public function get_rule_item_schema()
        {
        }
        /**
         * Get single request_quote object
         *
         * @since 3.6.0
         *
         * @return \WP_Error
         */
        public function get_dokan_single_quote_rule($request)
        {
        }
        /**
         * Update rule
         *
         * @since 3.6.0
         *
         * @return \WP_Error
         */
        public function update_quote_rule($request)
        {
        }
        /**
         * Delete request_quote
         *
         * @since 3.6.0
         *
         * @return array|\WP_Error
         */
        public function delete_quote_rule($request)
        {
        }
        /**
         * Trash, delete and restore bulk action
         *
         * JSON data format for sending to API
         *     {
         *         "trash" : [
         *             "1", "9", "7"
         *         ],
         *         "delete" : [
         *             "2"
         *         ],
         *         "restore" : [
         *             "4"
         *         ]
         *     }
         *
         * @since 3.6.0
         *
         * @return bool|\WP_Error
         */
        public function quote_rule_batch_items($request)
        {
        }
        /**
         * Restore request_quote
         *
         * @since 3.6.0
         *
         * @return array|\WP_Error
         */
        public function restore_quote_rule($request)
        {
        }
    }
    /**
     * Request A Quote Controller Class
     */
    class RequestForQuotationController extends \WeDevs\Dokan\Abstracts\DokanRESTController
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'request-for-quote';
        /**
         * Quote status
         *
         * @since 3.7.30
         *
         * @var array
         */
        protected const QUOTE_STATUS = ['UPDATED' => \WeDevs\DokanPro\Modules\RequestForQuotation\Model\Quote::STATUS_UPDATE, 'PENDING' => \WeDevs\DokanPro\Modules\RequestForQuotation\Model\Quote::STATUS_PENDING, 'APPROVED' => \WeDevs\DokanPro\Modules\RequestForQuotation\Model\Quote::STATUS_APPROVED, 'CONVERTED' => \WeDevs\DokanPro\Modules\RequestForQuotation\Model\Quote::STATUS_CONVERTED];
        /**
         * Class constructor
         *
         * @since 3.7.4
         */
        public function __construct()
        {
        }
        /**
         * Register all request quote route
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get single object
         *
         * @since 3.6.0
         *
         * @return array|null
         */
        public function get_quote_object_by_id($quote_id)
        {
        }
        /**
         * Get all request_quote
         *
         * @since 3.6.0
         *
         * @return object
         */
        public function get_dokan_request_quotes($request)
        {
        }
        /**
         * Get taxonomy terms.
         *
         * @param WC_Product $product  Product instance.
         * @param string     $taxonomy Taxonomy slug.
         *
         * @return array
         */
        protected function get_taxonomy_terms($product, $taxonomy = 'cat')
        {
        }
        /**
         * Get the images for a product or product variation.
         *
         * @param WC_Product|WC_Product_Variation $product Product instance.
         *
         * @return array
         */
        protected function get_images($product)
        {
        }
        /**
         * Get product attribute taxonomy name.
         *
         * @since  3.6.0
         *
         * @param WC_Product $product Product data.
         *
         * @param string     $slug    Taxonomy name.
         *
         * @return string
         */
        protected function get_attribute_taxonomy_name($slug, $product)
        {
        }
        /**
         * Get default attributes.
         *
         * @param WC_Product $product Product instance.
         *
         * @return array
         */
        protected function get_default_attributes($product)
        {
        }
        /**
         * Get attribute options.
         *
         * @param int   $product_id Product ID.
         * @param array $attribute  Attribute data.
         *
         * @return array
         */
        protected function get_attribute_options($product_id, $attribute)
        {
        }
        /**
         * Get the attributes for a product or product variation.
         *
         * @param WC_Product|WC_Product_Variation $product Product instance.
         *
         * @return array
         */
        protected function get_attributes($product)
        {
        }
        /**
         * Get the downloads for a product or product variation.
         *
         * @param WC_Product|WC_Product_Variation $product Product instance.
         *
         * @return array
         */
        protected function get_downloads($product)
        {
        }
        /**
         * Get single request_quote object
         *
         * @since 3.6.0
         *
         * @return \WP_Error
         */
        public function get_dokan_request_single_quote($request)
        {
        }
        /**
         * Create request_quote
         *
         * @since 3.6.0
         *
         * @return \WP_Error
         */
        public function create_request_quote($request)
        {
        }
        /**
         * Create request_quote
         *
         * @since 3.6.0
         *
         * @return  WP_Error | WP_HTTP_Response | WP_REST_Response
         *
         * @throws WC_Data_Exception | Exception
         */
        public function convert_to_order($request)
        {
        }
        /**
         * Update request_quote
         *
         * @since 3.6.0
         *
         * @param \WP_REST_Request $request Request object.
         *
         * @return \WP_Error
         */
        public function update_request_quote($request)
        {
        }
        /**
         * Delete request_quote
         *
         * @since 3.6.0
         *
         * @return array|\WP_Error
         */
        public function delete_request_quote($request)
        {
        }
        /**
         * Restore request_quote
         *
         * @since 3.6.0
         *
         * @return array|\WP_Error
         */
        public function restore_request_quote($request)
        {
        }
        /**
         * Trash, delete and restore bulk action
         *
         * JSON data format for sending to API
         *     {
         *         "trash" : [
         *             "1", "9", "7"
         *         ],
         *         "delete" : [
         *             "2"
         *         ],
         *         "restore" : [
         *             "4"
         *         ]
         *     }
         *
         * @since 3.6.0
         *
         * @return bool|\WP_Error
         */
        public function request_quote_batch_items($request)
        {
        }
        /**
         * Get request_quote permissions check
         *
         * @since 3.6.0
         *
         * @return bool
         */
        public function get_request_quote_permissions_check()
        {
        }
        /**
         * Get restore request_quote permissions check
         *
         * @since 3.6.0
         *
         * @return bool
         */
        public function restore_request_quote_permissions_check()
        {
        }
        /**
         * Get restore request_quote permissions check
         *
         * @since 3.6.0
         *
         * @return bool
         */
        public function batch_items_permissions_check()
        {
        }
        /**
         * Get restore request_quote permissions check
         *
         * @since 3.6.0
         *
         * @return bool
         */
        public function convert_to_order_permissions_check()
        {
        }
        /**
         * Create request_quote permissions check
         *
         * @since 3.6.0
         *
         * @return bool
         */
        public function create_request_quote_permissions_check()
        {
        }
        /**
         * Prepare data for response
         *
         * @since 3.6.0
         *
         * @param mixed            $quote
         * @param \WP_REST_Request $request Request object.
         *
         * @return array
         */
        public function prepare_response_for_object($quote, $request)
        {
        }
        /**
         * Prepare data for response
         *
         * @since 3.6.0
         *
         * @param mixed            $quote_request
         * @param \WP_REST_Request $request       Request object.
         *
         * @return void|array
         */
        public function prepare_response_for_single_quote_object($quote_request, $request)
        {
        }
        /**
         * Prepare links for the request.
         *
         * @param mixed            $quote_object  Object data.
         * @param \WP_REST_Request $request       Request object.
         *
         * @return array Links for the given post.
         */
        protected function prepare_links($quote_object, $request)
        {
        }
        /**
         * Get collection params.
         *
         * @since 3.6.0
         *
         * @return array
         */
        public function get_collection_params()
        {
        }
        /**
         * Retrieves the contact schema, conforming to JSON Schema.
         *
         * @since 3.6.0
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * Retrieves the contact schema, conforming to JSON Schema.
         *
         * @since 3.6.0
         *
         * @return array
         */
        public function get_product_item_schema()
        {
        }
        /**
         * Remove author args from query args.
         *
         * @since 3.7.4
         *
         * @param array $args
         * @param \WP_REST_Request $request Full details about the request.
         *
         * @return array
         */
        public function remove_author_arg($args, $request)
        {
        }
    }
    /**
     * Request A Quote Controller Class
     *
     * @since 3.6.0
     */
    class RolesController extends \WeDevs\Dokan\Abstracts\DokanRESTController
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1/request-for-quote';
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'roles';
        /**
         * Register all request quote route
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get all request_quote
         *
         * @since 3.6.0
         *
         * @return object
         */
        public function get_dokan_roles($request)
        {
        }
        /**
         * Create request_quote permissions check
         *
         * @since 3.6.0
         *
         * @return bool
         */
        public function get_roles_permissions_check()
        {
        }
        /**
         * Prepare data for response
         *
         * @since 2.8.0
         *
         * @return \WP_Error|\WP_HTTP_Response|\WP_REST_Response
         */
        public function prepare_response_for_object($object, $request)
        {
        }
        /**
         * Get collection params.
         *
         * @since 3.6.0
         *
         * @return array
         */
        public function get_collection_params()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\RequestForQuotation {
    class Assets
    {
        /**
         * Class constructor for hooks class.
         */
        public function __construct()
        {
        }
        /**
         * Add nonce to login form popup response
         *
         * @since 3.12.3
         *
         * @param array $default_script
         *
         * @return array
         */
        public function add_nonce_to_dokan_localized_args(array $default_script): array
        {
        }
        /**
         * Add admin data to handle admin actions.
         *
         * @since 3.12.3
         *
         * @param array $args
         *
         * @return array
         */
        public function add_admin_data_to_localize_script(array $args): array
        {
        }
        /**
         * Register scripts.
         *
         * @since 3.12.3
         *
         * @return void
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue scripts.
         *
         * @since 3.12.3
         *
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Enqueue admin script
         *
         * @since 3.12.3
         *
         * @return void
         */
        public function enqueue_admin_script()
        {
        }
    }
    class CatalogMode
    {
        /**
         * @var array Catalog Mode Group Child Product
         * @since 3.7.4
         */
        protected $catalog_child_products = [];
        public $quote_rules;
        /**
         * Class Constructor
         *
         * @since 3.7.4
         */
        public function __construct()
        {
        }
        /**
         * This method will hide add to cart button for products if enabled by vendor
         *
         * @since 3.7.4
         *
         * @param bool        $purchasable
         * @param \WC_Product $product
         *
         * @return bool
         */
        public function hide_add_to_cart_button_for_quote($purchasable, $product)
        {
        }
        /**
         * This method will hide Add to Cart button for quote request
         *
         * @since 3.7.4
         *
         * @param $button_html string
         * @param $product     \WC_Product
         *
         * @return string
         */
        public function hide_add_to_cart_button_for_quote_custom_button($button_html, $product)
        {
        }
        /**
         * This method will show/hide product price for quote module
         *
         * @since 3.7.4
         *
         * @param string      $purchasable
         * @param \WC_Product $product
         *
         * @return mixed|string
         */
        public function hide_product_price($purchasable, $product)
        {
        }
        /**
         * This method will determine if quote rules will apply based on catalog mode settings
         *
         * @since 3.7.4
         *
         * @param bool $apply
         * @param \WC_Product $product
         *
         * @return bool
         */
        public function apply_quote_rules($apply, $product)
        {
        }
        /**
         * Render Request A Quote setting fields for vendor
         *
         * @since 3.7.4
         *
         * @param int $user_id
         * @param array $catalog_mode_data
         *
         * @return void
         */
        public function render_extra_settings_fields($user_id, $catalog_mode_data)
        {
        }
        /**
         * This method will save settings fields for Catalog Mode
         *
         * @since 3.7.4
         *
         * @param int   $store_id
         * @param array $dokan_settings
         *
         * @return array
         */
        public function save_settings_fields($dokan_settings, $store_id)
        {
        }
        /**
         * This method will add default settings field for Catalog Mode
         *
         * @since 3.7.4
         *
         * @param string[] $catalog_mode_settings
         *
         * @return string[]
         */
        public function catalog_mode_vendor_settings($catalog_mode_settings)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\RequestForQuotation\Emails {
    /**
     * Accepted Quote Email.
     *
     * An email sent to the admin and vendor when a quote is accepted by customer.
     *
     * @class       AcceptQuote
     * @version     3.12.3
     * @package     Dokan/Modules/RequestAQuote/Emails
     * @author      weDevs
     * @extends     WC_Email
     */
    class AcceptQuote extends \WC_Email
    {
        /**
         * @var int $quote_id ID for the quote
         */
        public $quote_id;
        /**
         * @var mixed $request_quote Request quote object
         */
        public $request_quote;
        /**
         * @var mixed $quote_details Quote details
         */
        public $quote_details;
        /**
         * @var mixed $customer_info Customer info
         */
        public $customer_info;
        /**
         * @var mixed $store_info Store info
         */
        public $store_info;
        /**
         * @var string $sending_to Sending to whom
         */
        public $sending_to;
        /**
         * @var string $seller_email Seller email address
         */
        public $seller_email = '';
        /**
         * @var float $shipping_cost Shipping cost
         */
        public $shipping_cost;
        /**
         * @var string $expected_date Delivery expected date.
         */
        public $expected_date;
        /**
         * @var int $quote_expiry Quote expiry timestamp.
         */
        public $quote_expiry;
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since 3.12.3
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since 3.12.3
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @since 3.12.3
         *
         * @param int $quote_id
         *
         * @return void
         */
        public function trigger($quote_id)
        {
        }
        /**
         * Get content html.
         *
         * @since 3.12.3
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @since 3.12.3
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         *
         * @since 3.12.3
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * Dokan email handler class
     *
     * @package Dokan
     */
    class Manager
    {
        /**
         * Load automatically when class initiate
         */
        public function __construct()
        {
        }
        /**
         * Add Dokan Email classes in WC Email
         *
         * @since 3.6.0
         *
         * @param array $wc_emails
         *
         * @return array $wc_emails
         */
        public function load_dokan_emails($wc_emails)
        {
        }
    }
    /**
     * New Quote Email.
     *
     * An email sent to the admin, vendor and customer when a new quote is created.
     *
     * @class       NewQuote
     * @version     3.6.0
     * @package     Dokan/Modules/RequestAQuote/Emails
     * @author      weDevs
     * @extends     WC_Email
     */
    class NewQuote extends \WC_Email
    {
        /**
         * @var int $quote_id ID for the quote
         */
        public $quote_id;
        /**
         * @var mixed $request_quote Request quote object
         */
        public $request_quote;
        /**
         * @var mixed $quote_details Quote details
         */
        public $quote_details;
        /**
         * @var mixed $customer_info Customer info
         */
        public $customer_info;
        /**
         * @var mixed $store_info Store info
         */
        public $store_info;
        /**
         * @var string $expected_date Delivery expected date.
         */
        public $expected_date;
        /**
         * @var string $sending_to Sending to whom
         */
        public $sending_to;
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.6.0
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.6.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Set email heading for customer.
         *
         * @since  3.6.0
         * @return string
         */
        public function set_customer_email_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @since 3.6.0
         *
         * @param int $quote_id
         *
         * @return void
         */
        public function trigger($quote_id)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * New Quote Email.
     *
     * An email sent to the admin, vendor and customer when a new quote is created.
     *
     * @class       NewQuote
     * @version     3.6.0
     * @package     Dokan/Modules/RequestAQuote/Emails
     * @author      weDevs
     * @extends     WC_Email
     */
    class UpdateQuote extends \WC_Email
    {
        /**
         * @var int $quote_id ID for the quote
         */
        public $quote_id;
        /**
         * @var mixed $request_quote Request quote object
         */
        public $request_quote;
        /**
         * @var mixed $old_quote_details Old quote details
         */
        public $old_quote_details;
        /**
         * @var mixed $quote_details Quote details
         */
        public $quote_details;
        /**
         * @var mixed $customer_info Customer info
         */
        public $customer_info;
        /**
         * @var string $sending_to Sending to whom
         */
        public $sending_to;
        /**
         * @var string $quote_status Quatation status
         */
        public $quote_status;
        /**
         * @var float $shipping_cost Shipping cost
         */
        public $shipping_cost;
        /**
         * @var string $vendor_msg Vendor quote message.
         */
        public $vendor_msg;
        /**
         * @var int $quote_expiry Quote expiry timestamp.
         */
        public $quote_expiry;
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.6.0
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.6.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @since 3.6.0
         *
         * @param $quote_id
         * @param $old_quote_details
         * @param $new_quote_details
         *
         * @return void
         */
        public function trigger($quote_id, $old_quote_details, $new_quote_details)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\RequestForQuotation\Frontend {
    /**
     * RFQ Customer Responsibility Class.
     *
     * @since 3.12.3
     */
    class CustomerDashboard
    {
        /**
         * Class constructor for hooks class.
         */
        public function __construct()
        {
        }
        /**
         * Dokan new menu items.
         *
         * @since 3.12.3
         *
         * @param array $items
         *
         * @return array
         */
        public function dokan_new_menu_items($items): array
        {
        }
        /**
         * Dokan endpoint title.
         *
         * @since 3.6.0
         *
         * @param $title
         *
         * @return mixed|string
         */
        public function dokan_endpoint_title($title)
        {
        }
        /**
         * Dokan endpoint content.
         *
         * @since 3.12.3
         *
         * @return void
         */
        public function dokan_endpoint_content()
        {
        }
        /**
         * Customer request quote heading.
         *
         * @since 3.12.3
         *
         * @param $quote
         *
         * @return void
         */
        public function my_account_request_quote_heading($quote)
        {
        }
        /**
         * Customer request quote details.
         *
         * @since 3.12.3
         *
         * @param array     $quote_details
         * @param \stdClass $quote
         *
         * @return void
         */
        public function request_quote_details($quote_details, $quote)
        {
        }
    }
    /**
     * Class for Frontend Hooks integration.
     *
     * @since 3.6.0
     */
    class Hooks
    {
        /**
         * @var mixed $quote_rules
         */
        public $quote_rules;
        /**
         * @var mixed $single_quote_rule
         */
        public $single_quote_rule;
        /**
         * @var array $group_child_products
         */
        public static $group_child_products;
        /**
         * Construct for hooks class.
         */
        public function __construct()
        {
        }
        /**
         * Remove woocommerce price html.
         *
         * @since 3.6.0
         *
         * @param             $price
         * @param WC_Product $product
         *
         * @return mixed
         */
        public function remove_woocommerce_price_html($price, \WC_Product $product)
        {
        }
        /**
         * Filtered the quote products for min-maxi order quantities in the cart.
         *
         * @since 3.12.3
         *
         * @param bool  $is_valid  Indicates whether the cart item is valid before applying this validation.
         * @param array $cart_item The cart item array containing product details.
         *
         * @return bool
         */
        public function validate_order_min_max_for_quote_product($is_valid, $cart_item)
        {
        }
        /**
         * Add archive page hooks.
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function add_archive_page_hooks()
        {
        }
        /**
         * Replace loop add to cart link.
         *
         * @since 3.6.0
         *
         * @param $html
         * @param $product
         *
         * @return mixed|string
         */
        public function replace_loop_add_to_cart_link($html, $product)
        {
        }
        /**
         * Custom_add_to_quote_button.
         *
         * @since 3.6.0
         *
         * @return string|void
         */
        public function custom_add_to_quote_button()
        {
        }
        /**
         * Check required addons.
         *
         * @since 3.6.0
         *
         * @param $product_id
         *
         * @return bool
         */
        public function check_required_addons($product_id): bool
        {
        }
        /**
         * Custom product button.
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function custom_product_button()
        {
        }
        /**
         * Custom button replacement.
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function custom_button_replacement()
        {
        }
        /**
         * Insert customer quote.
         *
         * @since 3.6.0
         *
         * @throws WC_Data_Exception
         * @throws Exception
         * @return void
         */
        public function insert_customer_quote()
        {
        }
        /**
         * Handle quotation reopened by vendor statements.
         *
         * @since 3.12.3
         *
         * @param array $data
         *
         * @return void
         */
        public function handle_quotation_reopened_statement($data): void
        {
        }
        /**
         * Get the quote list from session.
         *
         * @since 3.12.3
         *
         * @param array $data
         *
         * @return array|mixed
         */
        public function get_updated_quotes($data)
        {
        }
        /**
         * Handle quotation accepted by customer statements.
         *
         * @since 3.12.3
         *
         * @param array $data
         *
         * @return void
         */
        public function handle_quotation_accepted_statement($data)
        {
        }
        /**
         * Handle quotation approved by vendor statements.
         *
         * @since 3.12.3
         *
         * @param array $data
         *
         * @return void
         */
        public function handle_quotation_approve_statement($data)
        {
        }
        /**
         * Handle quote expiration date based on the scheduled action.
         *
         * @since 3.12.3
         *
         * @param int $quote_id
         *
         * @return void
         */
        public function handle_quote_expiration_date($quote_id)
        {
        }
        /**
         * Handle quotation approve by vendor statements.
         *
         * @since 3.12.3
         *
         * @param array $data
         *
         * @return void
         */
        public function handle_quotation_convert_statement($data)
        {
        }
        /**
         * Validate customer info inputs for quote placements.
         *
         * @since 3.12.3
         *
         * @param array $data
         *
         * @return array
         */
        public function validate_customer_info_fields($data)
        {
        }
        /**
         * Dokan save quote.
         *
         * @since 3.6.0
         *
         * @param array $data
         * @param array $quotes
         *
         * @return void
         */
        public function dokan_quote_save_action($data, $quotes)
        {
        }
        /**
         * Dokan update quote.
         *
         * @since 3.6.0
         *
         * @param array $data
         *
         * @return void | bool | WP_Error
         */
        public function dokan_update_quote($data)
        {
        }
        /**
         * Convert to order.
         *
         * @since 3.6.0
         *
         * @param $quote_id
         * @param $converted_by
         *
         * @throws Exception
         * @return int | WP_Error
         */
        public function convert_to_order($quote_id, $converted_by)
        {
        }
        /**
         * Get pagination.
         *
         * @since 3.6.0
         *
         * @param int | string $total_page
         * @param int | string $page_no
         *
         * @return string
         */
        public static function get_pagination($total_page, $page_no): string
        {
        }
    }
    /**
     * RFQ Vendor Responsibility Class.
     *
     * @since 3.12.3
     */
    class VendorDashboard
    {
        /**
         * Class constructor for hooks class.
         */
        public function __construct()
        {
        }
        /**
         * Add vendor rma menu
         *
         * @since 3.12.3
         *
         * @return void
         */
        public function add_quote_menu($urls)
        {
        }
        /**
         * Load quote template for vendor
         *
         * @since 3.12.3
         *
         * @return void
         */
        public function load_quote_template($query_vars)
        {
        }
        /**
         * Vendor request quote heading.
         *
         * @since 3.12.3
         *
         * @param \stdClass $quote
         *
         * @return void
         */
        public function vendor_request_quote_heading($quote)
        {
        }
        /**
         * Vendor request quote details.
         *
         * @since 3.12.3
         *
         * @param array     $quote_details
         * @param \stdClass $quote
         *
         * @return void
         */
        public function vendor_request_quote_details($quote_details, $quote)
        {
        }
        /**
         * Load Settings Header
         *
         * @since 3.12.3
         *
         * @param string $header
         * @param string $query_vars
         *
         * @return string
         */
        public function load_settings_header(string $header, string $query_vars): string
        {
        }
        /**
         * Filter and display quote statuses on the dashboard.
         *
         * @since 3.12.3
         *
         * @param mixed $quote_counts Quote counts.
         *
         * @return void
         */
        public function dokan_quote_status_filter($quote_counts)
        {
        }
        /**
         * Process bulk action.
         *
         * @since 3.12.3
         *
         * @return void
         */
        public function handle_quote_bulk_actions()
        {
        }
        /**
         * Request quote list table.
         *
         * @since 3.12.3
         *
         * @param \stdClass $vendor_all_quotes
         * @param string    $endpoint
         * @param string    $pagination_html
         * @param array     $quote_counts
         *
         * @return void
         */
        public function dokan_request_quote_list($vendor_all_quotes, $endpoint, $pagination_html, $quote_counts)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\RequestForQuotation {
    /**
     * Request A Quote Helper Class.
     */
    class Helper
    {
        public static $retry = 0;
        /**
         * Dokan get all request quotes.
         *
         * @since 3.6.0
         *
         * @param $args
         *
         * @return array|object|null
         *
         * @return void
         */
        public static function get_request_quote($args)
        {
        }
        /**
         * Dokan get vendor specific request quotes.
         *
         * @since 3.6.0
         *
         * @param $args
         *
         * @return array|object|null
         *
         * @return void
         */
        public static function get_request_quote_for_vendor($args)
        {
        }
        /**
         * Dokan get vendor specific request quotes total.
         *
         * @since 3.6.0
         *
         * @param $args
         *
         * @return array|object|null
         *
         * @return void
         */
        public static function count_request_quote_for_vendor($args)
        {
        }
        /**
         * Dokan get all request quote rules.
         *
         * @since 3.6.0
         *
         * @param $args
         *
         * @return array|object|null
         *
         * @return array|null|object|stdClass[]
         */
        public static function get_quote_rules($args)
        {
        }
        /**
         * Dokan get all request quote rules.
         *
         * @since 3.6.0
         *
         * @return array|object|null
         */
        public static function get_all_quote_rules()
        {
        }
        /**
         * Dokan get all request quote details.
         *
         * @since 3.6.0
         *
         * @param int $quote_id
         *
         * @return array|object|null
         */
        public static function get_request_quote_details_by_quote_id($quote_id)
        {
        }
        /**
         * Dokan get all request quote details by vendor id.
         *
         * @since 3.6.0
         *
         * @param int $quote_id
         * @param int $vendor_id
         *
         * @return array|object|null
         */
        public static function get_request_quote_details_by_vendor_id($quote_id, $vendor_id)
        {
        }
        /**
         * Dokan get all request quote details.
         *
         * @since 3.6.0
         *
         * @param int $quote_id
         *
         * @return array|object|null
         */
        public static function get_request_quote_by_id($quote_id)
        {
        }
        /**
         * Dokan get all request quote details.
         *
         * @since 3.6.0
         *
         * @param int $quote_id
         * @param int $vendor_id
         *
         * @return array|object|null
         */
        public static function get_request_quote_vendor_by_id($quote_id, $vendor_id)
        {
        }
        /**
         * Dokan get all request quote details.
         *
         * @since 3.6.0
         *
         * @param $rule_id
         *
         * @return array|object|null
         */
        public static function get_quote_rule_by_id($rule_id)
        {
        }
        /**
         * Get the count of total quotes
         *
         * @since 3.6.0
         *
         * @return object
         */
        public static function get_request_quote_count()
        {
        }
        /**
         * Dokan get user specific request quotes total.
         *
         * @since 3.12.3
         *
         * @param $args
         *
         * @return array|object|null
         *
         * @return void
         */
        public static function count_request_quote_for_frontend($args)
        {
        }
        /**
         * Get the count of total quotes
         *
         * @since 3.6.0
         *
         * @return object
         */
        public static function get_quote_rules_count()
        {
        }
        /**
         * Create_request_quote.
         *
         * @since 3.6.0
         *
         * @return \WP_Error|int
         */
        public static function create_request_quote($args)
        {
        }
        /**
         * Create_request_quote.
         *
         * @since 3.6.0
         *
         * @return \WP_Error|int
         */
        public static function create_quote_rule($args)
        {
        }
        /**
         * Create_request_quote.
         *
         * @since 3.6.0
         *
         * @return \WP_Error|int
         */
        public static function create_request_quote_details($args)
        {
        }
        /**
         * Change status.
         *
         * @since 3.6.0
         *
         * @param string $table_name
         * @param int    $id
         * @param string $status
         *
         * @return bool|int|\WP_Error
         */
        public static function change_status($table_name, $id, $status = \WeDevs\DokanPro\Modules\RequestForQuotation\Model\Quote::STATUS_PENDING)
        {
        }
        /**
         * Update dokan request quote converted.
         *
         * @since 3.6.0
         *
         * @param $quote_id
         * @param $converted_by
         * @param $order_id
         *
         * @return bool|int|\WP_Error
         */
        public static function update_dokan_request_quote_converted($quote_id, $converted_by, $order_id = 0)
        {
        }
        /**
         * Schedule for quotation expiration.
         *
         * @since 3.12.3
         *
         * @return int
         */
        public static function handle_schedule_for_quote_expiration($quote_id)
        {
        }
        /**
         * Create_request_quote.
         *
         * @since 3.6.0
         *
         * @return \WP_Error|int
         */
        public static function update_request_quote($quote_id, $args)
        {
        }
        /**
         * Create_request_quote.
         *
         * @since 3.6.0
         *
         * @return \WP_Error|int
         */
        public static function update_quote_rule($rule_id, $args)
        {
        }
        /**
         * Trash/Delete with an id form given table.
         *
         * @since 3.6.0
         *
         * @param string $key
         * @param int    $id
         * @param string $where
         * @param false  $force
         *
         * @return bool|int
         */
        public static function delete($key, $id, $where, $force = false)
        {
        }
        /**
         * Convert quote to_order.
         *
         * @since 3.6.0
         *
         * @param mixed $quote
         * @param mixed $quote_details
         *
         * @throws \Exception
         * @return void|int
         */
        public static function convert_quote_to_order($quote, $quote_details)
        {
        }
        /**
         * Get the quote subtotal.
         *
         * @since 3.6.0
         *
         * @param array $contents
         *
         * @return int[] formatted price
         */
        public function get_calculated_totals($contents = [])
        {
        }
        /**
         * This method will check if quote is enabled for catalog mode
         *
         * @since 3.7.4
         *
         * @param int $vendor_id
         *
         * @return bool
         */
        public static function is_quote_support_disabled_for_catalog_mode($vendor_id = 0)
        {
        }
        /**
         * Extra params trimmer method.
         *
         * @since 3.7.14
         *
         * @param array $args     Passed arguments
         * @param array $defaults Default arguments
         *
         * @return array
         */
        public static function trim_extra_params($args, $defaults)
        {
        }
        /**
         * Returns site administrators id
         *
         * @since 3.9.3
         *
         * @return int
         */
        protected static function get_site_admin_id(): int
        {
        }
        /**
         * Creates add to quote page
         *
         * @since 3.9.3
         *
         * @return int|\WP_Error
         */
        protected static function create_add_to_quote_page(): int
        {
        }
        /**
         * Returns quote page id, creates is necessary
         *
         * @since 3.9.3
         *
         * @return int
         */
        public static function get_quote_page_id(): int
        {
        }
        /**
         * Get bulk action list for admin new quote page.
         *
         * @since 3.12.3
         *
         * @return mixed|null
         */
        public static function get_quote_bulk_action_list_for_new()
        {
        }
        /**
         * Get quote applicable rule.
         *
         * @since 3.12.3
         *
         * @return mixed|null
         */
        public static function get_quote_applicable_rule()
        {
        }
        /**
         * Check quote hide price rule.
         *
         * @since 3.12.3
         *
         * @return bool
         */
        public static function enable_quote_hide_price_rule(): bool
        {
        }
        /**
         * Get quote expiry date rules.
         *
         * @since 3.12.3
         *
         * @return array
         */
        public static function get_quote_expiry_rules(): array
        {
        }
        /**
         * Get order current quote status html.
         *
         * @since 3.12.3
         *
         * @param string $get_status
         *
         * @param string
         */
        public static function get_order_quote_status_html($get_status)
        {
        }
        /**
         * Check quote is available to converted by vendor or not.
         *
         * @since 3.12.3
         *
         * @param array     $data
         * @param \stdClass $quote
         *
         * @return bool
         */
        public static function compare_quote_for_update_status_availability($data, $quote)
        {
        }
        /**
         * Check if the quote has a specific status.
         *
         * This function verifies if the given quote object has the specified status.
         *
         * @since 3.12.3
         *
         * @param string    $status The status to check against the quote's status.
         * @param \stdClass $quote  The quote object to check the status of.
         *
         * @return bool True if the quote exists and its status matches the given status, false otherwise.
         */
        public static function is_qoute_status(string $status, $quote)
        {
        }
    }
    class Installer
    {
        public function __construct()
        {
        }
        /**
         * Create all tables related with RAQ
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function create_tables()
        {
        }
        /**
         * Create pages.
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function create_pages()
        {
        }
        /**
         * Create capabilities for vendor
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function create_capabilities()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\RequestForQuotation\Model {
    /**
     * Quotation Status Class.
     *
     * @since 3.12.3
     */
    class Quote
    {
        public const STATUS_TRASH = 'trash';
        public const STATUS_CANCEL = 'cancel';
        public const STATUS_REJECT = 'reject';
        public const STATUS_UPDATE = 'updated';
        public const STATUS_ACCEPT = 'accepted';
        public const STATUS_EXPIRED = 'expired';
        public const STATUS_PENDING = 'pending';
        public const STATUS_APPROVED = 'approve';
        public const STATUS_CONVERTED = 'converted';
        public const STATUS_DELETE = 'delete';
        public const STATUS_RESTORE = 'restore';
        /**
         * Get the quote statuses.
         *
         * @since 3.12.3
         *
         * This function returns the different statuses that a quote can have,
         * filtered through the 'dokan_get_quote_statuses' filter.
         *
         * @return array The array of quote statuses.
         */
        public static function get_quote_statuses()
        {
        }
        /**
         * Get all status keys for the request for quote.
         *
         * This method returns an array of all possible status keys, allowing filters
         * to modify the list of statuses if needed.
         *
         * @since 3.12.3
         *
         * @return array The list of all status keys.
         */
        public static function get_status_keys()
        {
        }
        /**
         * Get the label for a given status.
         *
         * @since 3.12.3
         *
         * @param string $status
         *
         * @return string
         */
        public static function get_status_label(string $status): string
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\RequestForQuotation {
    /**
     * Class QuoteSession
     *
     * This class extends the session storage mechanism and manages storing quote data in WordPress transients.
     * It also sets and retrieves the transient key from cookies, ensuring session persistence.
     *
     * @package WeDevs\DokanPro\Storage
     */
    class QuoteSession extends \WeDevs\DokanPro\Storage\Session
    {
        /**
         * Get the session cookie, if set. Otherwise, return false.
         *
         * Session cookies without a customer ID are invalid.
         *
         * @since 3.12.4
         *
         * @return bool|array
         */
        public function get_session_cookie()
        {
        }
        /**
         * Sets the session cookie on-demand (usually after adding an item to the cart).
         *
         * Warning: Cookies will only be set if this is called before the headers are sent.
         *
         * @param bool $set Should the session cookie be set.
         *
         * @since 3.3.6
         *
         * @return void
         */
        public function set_customer_session_cookie($set)
        {
        }
    }
    /**
     * Quote Rules Validator Class.
     *
     * @since 3.12.3
     */
    class RulesValidator
    {
        /**
         * Quotation rule.
         *
         * @since 3.12.3
         *
         * @var object $rule
         */
        protected object $rule;
        /**
         * Quotation rule.
         *
         * @since 3.12.3
         *
         * @var array $rule_contents
         */
        protected array $rule_contents;
        /**
         * Product id.
         *
         * @since 3.12.3
         *
         * @var int $product_id
         */
        protected int $product_id;
        /**
         * Class constructor.
         *
         * @since 3.12.3
         *
         * @param object $rule
         * @param int    $product_id
         */
        public function __construct($rule, $product_id)
        {
        }
        /**
         * Validate quote availability for product.
         *
         * @since 3.12.3
         *
         * @param object $rule
         * @param int    $product_id
         *
         * @return bool
         */
        public static function validate_availability($rule, $product_id)
        {
        }
        /**
         * Validate a product against quote rules.
         *
         * This method checks if a given product satisfies the specified quote rules.
         *
         * @since 3.12.3
         *
         * @return bool Returns true if the product satisfies the quote rules, otherwise false.
         */
        public function validate_product_quote_availability(): bool
        {
        }
        /**
         * Validate product wise rules.
         *
         * @since 3.12.3
         *
         * @return bool|null
         */
        public function validate_product_wise_rules(): ?bool
        {
        }
        /**
         * Validate vendor wise rules.
         *
         * @since 3.12.3
         *
         * @return bool|null
         */
        public function validate_vendor_wise_rules(): ?bool
        {
        }
        /**
         * Validate category rules.
         *
         * @since 3.12.3
         *
         * @return bool
         */
        public function validate_category_rules(): ?bool
        {
        }
        /**
         * Retrieve the boolean value of a specified switch.
         *
         * This method checks if the given switch name exists in the 'switches' array
         * within the rule contents and returns its boolean value.
         *
         * @param string $switch_name The name of the switch to retrieve.
         *
         * @return bool The boolean value of the specified switch. Returns false if the switch
         *              is not set or if it cannot be validated as a boolean.
         */
        public function get_boolean_switch(string $switch_name): bool
        {
        }
    }
    class Session
    {
        /**
         * Load session storage.
         *
         * @since 3.6.0
         *
         * @return bool|\WeDevs\DokanPro\Storage\Session
         */
        public static function init()
        {
        }
    }
    class SettingsHelper
    {
        /**
         * Get enable out of stock settings.
         *
         * @since 3.6.0
         *
         * @return bool
         */
        public static function is_out_of_stock_enabled()
        {
        }
        /**
         * Get ajax add to quote settings.
         *
         * @since 3.6.0
         *
         * @return bool
         */
        public static function is_ajax_add_to_quote_enabled()
        {
        }
        /**
         * Get redirect to quote page settings.
         *
         * @since 3.6.0
         *
         * @return bool
         */
        public static function is_redirect_to_quote_page()
        {
        }
        /**
         * Get increase offer price settings.
         *
         * @since 3.6.0
         *
         * @return float
         */
        public static function decrease_offered_price()
        {
        }
        /**
         * Get enable convert to order settings.
         *
         * @since 3.6.0
         *
         * @return bool
         */
        public static function is_convert_to_order_enabled()
        {
        }
        /**
         * Get enable quote converter display settings.
         *
         * @since 3.6.0
         *
         * @return bool
         */
        public static function is_quote_converter_display_enabled()
        {
        }
    }
    class Shortcode
    {
        /**
         * Class construct.
         */
        public function __construct()
        {
        }
        /**
         * Render [dokan-request-quote] shortcode.
         *
         * @since 3.6.0
         *
         * @return false|string
         */
        public function render_shortcode()
        {
        }
    }
    /**
     * Class for Request A Quote module integration.
     *
     * @since 3.6.0
     */
    final class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Class constructor.
         *
         * @since 3.6.0
         */
        public function __construct()
        {
        }
        /**
         * Add rfq shortocde to Dokan shortcode menu
         *
         * @since 3.9.0
         *
         * @param array $shortcodes
         *
         * @return array
         */
        public function add_to_dokan_shortcode_menu($shortcodes)
        {
        }
        /**
         * Activates the module
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function activate()
        {
        }
        /**
         * Deactivates the module
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function deactivate()
        {
        }
        /**
         * Initiate all classes
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function initiate()
        {
        }
        /**
         * Add module REST Controller
         *
         * @since 3.6.0
         *
         * @param array $class_map
         */
        public function add_rest_controller($class_map)
        {
        }
        /**
         * Set template path for Request Quote
         *
         * @since 3.6.0
         *
         * @return string
         */
        public function load_templates($template_path, $template, $args)
        {
        }
        /**
         * Add rewrite rules for vendor dashboard and my account Request for Quotation menu
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function vendor_dashboard_endpoint($query_var)
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.6.0
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
    }
}
namespace {
    /**
    * Trail Class for RMA
    */
    trait Dokan_RMA_Common
    {
        /**
         * Transform conversation response
         *
         * @since 1.0.0
         *
         * @param array $request
         *
         * @return array
         */
        public function transform_request_conversation($request)
        {
        }
        /**
         * Transform warranty request items
         *
         * @since 1.0.0
         *
         * @param array $request
         *
         * @return array|WP_Error
         */
        public function transform_warranty_requests($request)
        {
        }
        /**
         * Transform post request for rma settings
         *
         * @since 1.0.0
         *
         * @param array $request
         *
         * @return array
         */
        public function transform_rma_settings($request = [])
        {
        }
        /**
         * Get setting value
         *
         * @since 1.0.0
         *
         * @param int $product_id
         *
         * @return array
         */
        public function get_settings($product_id = 0)
        {
        }
        /**
         * Check required add-ons.
         *
         * @param int $product_id Product ID.
         *
         * @return bool
         */
        public function check_required_warranty($product_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\RMA {
    /**
     * RMA Module block data.
     *
     * @since 3.7.13
     */
    class BlockData
    {
        use \Dokan_RMA_Common;
        /**
         * Block section name.
         *
         * @since 3.7.13
         *
         * @var string
         */
        public $section;
        /**
         * Constructor class.
         *
         * @since 3.7.13
         */
        public function __construct()
        {
        }
        /**
         * Get RMA module product block configurations.
         *
         * @since 3.7.13
         *
         * @param $configuration array
         *
         * @return array
         */
        public function get_product_block_configurations($configuration = [])
        {
        }
        /**
         * Get order-min-max product data for Dokan-pro
         *
         * @since 3.7.13
         *
         * @param array      $block
         * @param WC_Product $product
         * @param string     $context
         *
         * @return array
         */
        public function get_product_block_data(array $block, $product, string $context)
        {
        }
        /**
         * Save order-min-max data after REST-API insert or update.
         *
         * @since 3.7.13
         *
         * @param WC_Product      $product  Inserted object.
         * @param WP_REST_Request $request  Request object.
         * @param boolean         $creating True when creating object, false when updating.
         *
         * @return void
         */
        public function set_product_block_data($product, $request, $creating = true)
        {
        }
    }
    /**
     * RMA Cache class.
     *
     * Manage all caches for RMA module.
     *
     * @since 3.4.2
     *
     * @see \WeDevs\Dokan\Cache
     */
    class RmaCache
    {
        public function __construct()
        {
        }
        /**
         * Clear RMA caches.
         *
         * @since 3.4.2
         *
         * @param int|array $data
         *
         * @return void
         */
        public static function clear_rma_cache($data)
        {
        }
    }
}
namespace {
    /**
    * Admin class
    */
    class Dokan_RMA_Admin
    {
        /**
         * Load automatically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Load admin settings section
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function load_settings_section($section)
        {
        }
        /**
         * Load all settings fields
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function load_settings_fields($fields)
        {
        }
        /**
         * After Save Admin Settings.
         *
         * @since 3.10.0
         *
         * @param string $option_name Option Key (Section Key).
         * @param array $option_value Option value.
         * @param array $old_options Option Previous value.
         *
         * @return void
         */
        public function after_save_settings($option_name, $option_value, $old_options)
        {
        }
    }
    /**
    * Ajax handling class
    */
    class Dokan_RMA_Ajax
    {
        /**
         * Load automatically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Update request status
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function update_status()
        {
        }
        /**
         * Get order data for refund
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function get_order_data()
        {
        }
        /**
         * Send refund request
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function send_refund_request()
        {
        }
        /**
         * Send coupon to customer
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function send_coupon_request()
        {
        }
        /**
         * Validate form submit request for rma refund or coupon form
         *
         * @since 3.4.0
         *
         * @return array
         */
        protected function validate_request()
        {
        }
    }
    /**
    * Frontend product and cart management
    */
    class Dokan_RMA_Frontend
    {
        use \Dokan_RMA_Common;
        /**
         * Load automatically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Show a product's warranty information
         *
         * @since 1.0.0
         */
        public function show_product_warranty()
        {
        }
        /**
         * Adds a dokan_warranty_index to a cart item.
         * Used in tracking the selected warranty options
         *
         * @since 1.0.0
         *
         * @param array $item_data
         * @param int $product_id
         *
         * @return array $item_data
         */
        public function add_cart_item_data($item_data, $product_id)
        {
        }
        /**
         * Add custom data to a cart item based on the selected warranty type
         *
         * @since 1.0.0
         *
         * @param array $item_data
         *
         * @return array $item_data
         */
        public function add_cart_item($item_data)
        {
        }
        /**
         * Make sure an add-to-cart request is valid
         *
         * @param bool $valid
         * @param int $product_id
         * @return bool $valid
         */
        public function add_cart_validation($valid = '', $product_id = '')
        {
        }
        /**
         * Get warranty index and add it to the cart item
         *
         * @since 1.0.0
         *
         * @param array $cart_item
         * @param array $values
         *
         * @return array $cart_item
         */
        public function get_cart_item_from_session($cart_item, $values)
        {
        }
        /**
         * Returns warranty data about a cart item
         *
         * @since 1.0.0
         *
         * @param array $other_data
         * @param array $cart_item
         *
         * @return array $other_data
         */
        public function get_item_data($other_data, $cart_item)
        {
        }
        /**
         * Add warranty index to the cart items from POST
         *
         * @since 1.0.0
         *
         * @param string $cart_key
         * @param int $product_Id
         * @param int $quantity
         * @param int $variation_id
         * @param object $variation
         * @param array $cart_item_data
         *
         * @return void
         */
        public function add_warranty_index($cart_key, $product_id, $quantity, $variation_id = \null, $variation = \null, $cart_item_data = \null)
        {
        }
        /**
         * Add to cart text.
         *
         * @since 1.0.0
         * @version 2.9.0
         * @param string $text Add to cart text.
         * @param object $product
         * @return string
         */
        public function add_to_cart_text($text, $product = \null)
        {
        }
        /**
         * Handle customer submit request
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function handle_warranty_submit_request()
        {
        }
        /**
         * Handle Warranty Conversation.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function handle_warranty_conversation()
        {
        }
        /**
         * This method will change add to cart text from Select Options to Read More
         *
         * @sience 3.7.4
         *
         * @param $add_to_cart_text string
         * @param $product          \WC_Product
         *
         * @return string
         */
        public function change_rma_add_to_cart_text($add_to_cart_text, $product)
        {
        }
    }
    /**
    * Order Manage
    */
    class Dokan_RMA_Order
    {
        use \Dokan_RMA_Common;
        /**
         * Load automatically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Register rewrite endpoint for license upgrade pages
         *
         * @return void
         */
        public function rewrite_endpoint()
        {
        }
        /**
         * Register the query vars
         *
         * @param array
         *
         * @return array
         */
        public function add_query_vars($vars)
        {
        }
        /**
         * Set endpoint title.
         *
         * @since 1.0.0
         *
         * @param string $title
         *
         * @return string
         */
        public function endpoint_title($title)
        {
        }
        /**
         * Request warrany template for customer end
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function content_request_warranty()
        {
        }
        /**
         * View details RMA in customer END
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function content_rma_requests_view()
        {
        }
        /**
         * Load content for all RMA requests
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function content_rma_requests()
        {
        }
        /**
         * List of all RMA request for a customer
         *
         * @param array $menu_links
         *
         * @return array
         */
        public function dokan_rma_requests_link($menu_links)
        {
        }
        /**
         * Show request warranty button
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function request_button($actions, $order)
        {
        }
        /**
         * Listens to order status changes and sets the completed date if the current
         * order status matches the start status of the warranty period
         *
         * @param int       $order_id
         * @param string    $old_status
         * @param string    $new_status
         * @param WC_Order  Actual order
         */
        public function order_status_changed($order_id, $old_status, $new_status, $order)
        {
        }
        /**
         * Include add-ons line item meta.
         *
         * @since 1.0.0
         *
         * @param  WC_Order_Item_Product $item          Order item data.
         * @param  string                $cart_item_key Cart item key.
         * @param  array                 $values        Order item values.
         *
         * @return  void
         */
        public function order_item_meta($item, $cart_item_key, $values)
        {
        }
        /**
         * Display an order item's warranty data
         *
         * @param int           $item_id
         * @param array         $item
         * @param WC_Product    $product
         */
        public function render_order_item_warranty($item_id, $item, $product)
        {
        }
    }
    /**
    * Vendor product releate functions
    *
    * @since 1.0.0
    *
    * @package dokan
    */
    class Dokan_RMA_Product
    {
        use \Dokan_RMA_Common;
        /**
         * Load automatically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Render product rma options
         *
         * @since 1.0.0
         *
         * @return void
         **/
        public function load_rma_content($post, $post_id)
        {
        }
        /**
         * Save RMA data
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function save_rma_data($post_id)
        {
        }
        /**
         * Refund policy tab
         *
         * @since  2.9.16
         *
         * @param  array $tabs
         *
         * @return array
         */
        public function refund_policy_tab($tabs)
        {
        }
        /**
         * Get refund policy tab template
         *
         * @since  2.9.16
         *
         * @param  string $title
         * @param  array $data
         *
         * @return void
         */
        public function get_refund_policy_tab($title, $data)
        {
        }
    }
    /**
     * Vendor dashboard for RMA
     *
     * @package dokan
     *
     * @since 1.0.0
     */
    class Dokan_RMA_Vendor
    {
        use \Dokan_RMA_Common;
        /**
         * Load automatically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Show Seller Enable Error Message
         *
         * @since 2.4
         *
         * @return void
         */
        public function show_seller_enable_message()
        {
        }
        /**
         * Add popup template from refund
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function add_popup_template()
        {
        }
        /**
         * Load rma templates. so that it can overide from theme
         *
         * Just create `rma` folder inside dokan folder then
         * override your necessary template.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function load_rma_templates($template_path, $template, $args)
        {
        }
        /**
         * Add vendor rma menu
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function add_rma_menu($urls)
        {
        }
        /**
         * Return request endpoind
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function rma_endpoints($query_var)
        {
        }
        /**
         * Load rma template for vendor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function load_rma_template($query_vars)
        {
        }
        /**
         * Load rma settings menu in dashboard
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function load_settings_menu($sub_settins)
        {
        }
        /**
         * Load Settings Header
         *
         * @since 1.0.0
         *
         * @param  string $header
         * @param  array $query_vars
         *
         * @return string
         */
        public function load_settings_header($header, $query_vars)
        {
        }
        /**
         * Load Settings page helper
         *
         * @since 1.0.0
         *
         * @param  string $help_text
         * @param  array $query_vars
         *
         * @return string
         */
        public function load_settings_helper_text($help_text, $query_vars)
        {
        }
        /**
         * Load Settings Content
         *
         * @since 1.0.0
         *
         * @param  array $query_vars
         *
         * @return void
         */
        public function load_settings_content($query_vars)
        {
        }
        /**
         * Save vendor rma all settings
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function save_rma_settings()
        {
        }
        /**
         * Handle delete rma request
         *
         * @since 3.0.7
         *
         * @return void
         */
        public function handle_delete_rma_request()
        {
        }
    }
    /**
    * className
    */
    class Dokan_Warranty_Item
    {
        public $item_id;
        public $type;
        public $label;
        public $addons;
        public $addon_selected;
        public $addon_default;
        public $length;
        public $duration_value;
        public $duration_type;
        public $no_warranty_option;
        public $order_id;
        public $policy;
        public $reasons;
        public $length_value;
        public $length_duration;
        public $addon_settings;
        public $from;
        /**
         * Load automatically when class initiate
         *
         * @since 1.0.0
         *
         * @param integer $item_id
         */
        public function __construct($item_id)
        {
        }
        /**
         * Get order id
         *
         * @return integer $order_id
         */
        public function get_order_id()
        {
        }
        /**
         * Get quantity remaining
         *
         * @return integer
         */
        public function get_quantity_remaining()
        {
        }
        /**
         * Check if has warranty
         *
         * @return boolean
         */
        public function has_warranty()
        {
        }
        /**
         * Get the warranty's expiration date.
         *
         * @param string $duration_value
         * @param string $duration_type
         *
         * @return bool|int
         */
        public function get_expiry($duration_value = '', $duration_type = '')
        {
        }
        /**
         * Get warranty reasons from product.
         * Only if the RMA settings override in Product.
         *
         * @string 3.3.7
         *
         * @return array
         * @throws Exception
         */
        public function get_reasons()
        {
        }
    }
    /**
    * Warranty request releated conversation
    *
    * @since 1.0.0
    *
    * @package dokan
    */
    class Dokan_RMA_Conversation
    {
        use \Dokan_RMA_Common;
        protected $table_name;
        /**
         * Construct functions
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Insert Conversations between two userd
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function insert($data = [])
        {
        }
        /**
         * Get conv
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function get($data = [])
        {
        }
    }
    /**
    * Warranty Request class
    *
    * @package dokan
    *
    * @since 1.0.0
    */
    class Dokan_RMA_Warranty_Request
    {
        use \Dokan_RMA_Common;
        /**
         * Get all request
         *
         * @since 1.0.0
         *
         * @param array $data
         *
         * @return array
         */
        public function all($data = [])
        {
        }
        /**
         * Get a single request
         *
         * @since 1.0.0
         *
         * @param int $id
         *
         * @return array|WP_Error
         */
        public function get($id = 0)
        {
        }
        /**
         * Save warranty request data
         *
         * @since 1.0.0
         *
         * @param array $data
         *
         * @return void
         */
        public function create($data = [])
        {
        }
        /**
         * Update status
         *
         * @since 1.0.0
         *
         * @param array $data
         *
         * @return int|WP_Error
         */
        public function update($data = [])
        {
        }
        /**
         * Delete warranty request
         *
         * @param int $id
         * @param int $vendor_id
         *
         * @since 3.0.7
         *
         * @return bool|WP_Error
         */
        public function delete($id = 0, $vendor_id = 0)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\RMA\emails {
    /**
     * New Conversation Notification Email.
     * An email sent to the vendor or customer when a warranty request conversation is made by customer or vendor.
     *
     * @class       Dokan_Rma_Conversation_Notification
     * @version     3.9.5
     * @author      weDevs
     * @extends     WC_Email
     */
    class ConversationNotification extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since 3.9.5
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since 3.9.5
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @param int $conversation_id The Conversation id.
         * @param array $data Data of the Conversation.
         */
        public function trigger($conversation_id, $data)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html(): string
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain(): string
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
}
namespace {
    /**
     * Dokan Send Coupon Email
     *
     * An email sent to the admin and customer when a vendor generate a coupon for customer
     *
     * @class       Dokan_Send_Coupon_Email
     * @version     2.9.3
     * @author      weDevs
     * @extends     WC_Email
     */
    class Dokan_Send_Coupon_Email extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @param int $product_id The product ID.
         * @param array $postdata.
         */
        public function trigger($coupon, $data)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         *
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         *
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * New Product Published Email to vendor.
     *
     * An email sent to the vendor when a warranty request is made by customer.
     *
     * @class       Dokan_Rma_Send_Warranty_Request
     * @version     2.9.3
     * @author      weDevs
     * @extends     WC_Email
     */
    class Dokan_Rma_Send_Warranty_Request extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  2.9.3
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  2.9.3
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @param array $data
         */
        public function trigger($data)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         *
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         *
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\RMA {
    class Module
    {
        /**
         * Load automatically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Hooks
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function define()
        {
        }
        /**
         * Get plugin path
         *
         * @since 1.5.1
         *
         * @return void
         **/
        public function plugin_path()
        {
        }
        /**
         * Includes all necessary class a functions file
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function includes()
        {
        }
        /**
         * Initiate all classes
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function initiate()
        {
        }
        /**
         * Init all hooks
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Load emails
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function load_emails()
        {
        }
        /**
         * Load all email class related with RMA
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function load_rma_email_classes($wc_emails)
        {
        }
        /**
         * Register all email actions
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function register_rma_email_actions($actions)
        {
        }
        /**
         * Register Scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Load scripts
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function load_scripts()
        {
        }
        /**
         * Create Mapping table for product and vendor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function activate()
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        /**
         * Set Proper template directory.
         *
         * @param array $template_array
         *
         * @return array
         */
        public function set_email_template_directory($template_array)
        {
        }
        /**
         * Create all tables related with RMA
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function create_tables()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SellerBadge\Abstracts {
    /**
     * Abstraction for badge events, all events will implement this class
     *
     * @since 3.7.14
     */
    abstract class BadgeEvents
    {
        /**
         * @since 3.7.14
         *
         * @var string $event_type
         */
        protected $event_type;
        /**
         * @since 3.7.14
         *
         * @var BadgeEvent
         */
        protected $badge_event;
        /**
         * @since 3.7.14
         *
         * @var int $badge_id
         */
        protected $badge_id;
        /**
         * @since 3.7.14
         *
         * @var array $badge_data
         */
        protected $badge_data;
        /**
         * @since 3.7.14
         *
         * @var array $badge_level_data
         */
        protected $badge_level_data;
        /**
         * No of vendors to process at a time
         *
         * @since 3.7.14
         *
         * @var int $vendor_queue_limit
         */
        protected $vendor_queue_limit = 20;
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @param $event_type
         */
        public function __construct($event_type)
        {
        }
        /**
         * Get current compare data
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return mixed
         */
        abstract protected function get_current_data($vendor_id);
        /**
         * Run the event job
         *
         * @since 3.7.14
         *
         * @param int $vendor_id single vendor id.
         *
         * @return void
         */
        protected function run($vendor_id)
        {
        }
        /**
         * This method can be called directly or will be call after a badge has been added/updated.
         *
         * @since 3.7.14
         *
         * @return void
         */
        public function add_to_queue($badge_id = 0, $badge_data = [])
        {
        }
        /**
         * Process the background task.
         *
         * @since 3.7.14
         *
         * @param int[] $vendors
         *
         * @return void
         */
        public function process_background_task($vendors)
        {
        }
        /**
         * Set badge and badge level data
         *
         * @since 3.7.14
         *
         * @param array $badge_data
         *
         * @return bool
         */
        protected function set_badge_and_badge_level_data($badge_data = [])
        {
        }
        /**
         * This method will get badge data from database via event_type
         *
         * @since 3.7.14
         *
         * @return Object|\WP_Error
         */
        protected function get_badge_data_by_event_type()
        {
        }
        /**
         * Get badge levels by badge id
         *
         * @since 3.7.14
         *
         * @param int $badge_id
         *
         * @return object[]|\WP_Error
         */
        protected function get_badge_levels($badge_id)
        {
        }
        /**
         * This method will merge badge level data with seller acquired badge level data
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return array
         */
        protected function get_acquired_level_data($vendor_id)
        {
        }
        /**
         * Unpublish acquired badge for vendor
         *
         * @since 3.7.14
         *
         * @param $vendor_id
         *
         * @return void
         */
        protected function unpublished_acquired_badge($vendor_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SellerBadge\Admin {
    /**
     * Class for Hooks integration.
     *
     * @since 3.7.14
     */
    class Hooks
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add Dokan submenu
         *
         * @since 3.7.14
         *
         * @param string $capability
         *
         * @return void
         */
        public function add_admin_menu($capability)
        {
        }
        /**
         * Add admin page Route
         *
         * @since 3.7.14
         *
         * @param array $routes
         *
         * @return array
         */
        public function add_admin_route($routes)
        {
        }
        /**
         * Enqueue admin scripts
         *
         * @since 3.7.14
         *
         * @param string $hook
         *
         * @return void
         */
        public function enqueue_admin_script($hook)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SellerBadge {
    /**
     * Delete all cache related to seller badge
     *
     * @since 3.7.14
     */
    class Cache
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         */
        public function __construct()
        {
        }
        /**
         * Delete all object and transient cache
         *
         * @since 3.7.14
         *
         * @param int|array $badge_id
         *
         * @return void
         */
        public function delete_cache($badge_id)
        {
        }
        /**
         * Update acquired badge level hooks
         *
         * @since 3.7.14
         *
         * @param array $acquired_badge_level_data
         *
         * @return void
         */
        public function acquired_badge_level_data($acquired_badge_level_data)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SellerBadge\Events {
    /**
     * Class CustomerReview. This class will handle the customer review logic.
     *
     * @since   3.7.14
     *
     * @package WeDevs\DokanPro\Modules\SellerBadge\Events
     */
    class CustomerReview extends \WeDevs\DokanPro\Modules\SellerBadge\Abstracts\BadgeEvents
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @param string $event_type
         */
        public function __construct($event_type)
        {
        }
        /**
         * Process hooks related to this badge
         *
         * @since 3.7.14
         *
         * @param int        $comment_id
         * @param int|string $comment_approved
         *
         * @return void
         */
        public function process_hook($comment_id, $comment_approved)
        {
        }
        /**
         * Determines if the object is a review or a reply to a review.
         *
         * @since 3.7.14
         *
         * @param WP_Comment|mixed $object Object to check.
         *
         * @return bool
         */
        protected function is_review_or_reply($object)
        {
        }
        /**
         * Get current compare data
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return int
         */
        protected function get_current_data($vendor_id)
        {
        }
    }
    /**
     * Class sale only here count badge
     *
     * @since   3.7.14
     *
     * @package WeDevs\DokanPro\Modules\SellerBadge\Events
     */
    class ExclusiveToPlatform extends \WeDevs\DokanPro\Modules\SellerBadge\Abstracts\BadgeEvents
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @param string $event_type
         */
        public function __construct($event_type)
        {
        }
        /**
         * Process hooks related to this badge
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return void
         */
        public function process_hook($vendor_id)
        {
        }
        /**
         * Get current compare data
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return false|float
         */
        protected function get_current_data($vendor_id)
        {
        }
        /**
         * Run the event job
         *
         * @since 3.7.14
         *
         * @param int $vendor_id single vendor id.
         *
         * @return void
         */
        public function run($vendor_id)
        {
        }
    }
    /**
     * Class Feature product count badge
     *
     * @since   3.7.14
     *
     * @package WeDevs\DokanPro\Modules\SellerBadge\Events
     */
    class FeaturedProducts extends \WeDevs\DokanPro\Modules\SellerBadge\Abstracts\BadgeEvents
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @param string $event_type
         */
        public function __construct($event_type)
        {
        }
        /**
         * Process hooks related to this badge
         *
         * @since 3.7.14
         *
         * @param int $post_id
         *
         * @return void
         */
        public function process_hook($post_id)
        {
        }
        /**
         * Get current compare data
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return false|float
         */
        protected function get_current_data($vendor_id)
        {
        }
        /**
         * Run the event job
         *
         * @since 3.7.14
         *
         * @param int $vendor_id single vendor id.
         *
         * @return void
         */
        public function run($vendor_id)
        {
        }
    }
    /**
     * Class featured vendor count badge
     *
     * @since   3.7.14
     *
     * @package WeDevs\DokanPro\Modules\SellerBadge\Events
     */
    class FeaturedSeller extends \WeDevs\DokanPro\Modules\SellerBadge\Abstracts\BadgeEvents
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @param string $event_type
         */
        public function __construct($event_type)
        {
        }
        /**
         * Process hooks related to this badge
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return void
         */
        public function process_hook($vendor_id)
        {
        }
        /**
         * Get current compare data
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return bool
         */
        protected function get_current_data($vendor_id)
        {
        }
        /**
         * Run the event job
         *
         * @since 3.7.14
         *
         * @param int $vendor_id single vendor id.
         *
         * @return void
         */
        public function run($vendor_id)
        {
        }
    }
    /**
     * Class number of item sold count badge
     *
     * @since   3.7.14
     *
     * @package WeDevs\DokanPro\Modules\SellerBadge\Events
     */
    class NumberOfItemSold extends \WeDevs\DokanPro\Modules\SellerBadge\Abstracts\BadgeEvents
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @param string $event_type
         */
        public function __construct($event_type)
        {
        }
        /**
         * Process hooks related to this badge
         *
         * @since 3.7.14
         *
         * @param int $order_id
         * @param string $old_status
         * @param string $new_status
         *
         * @return void
         */
        public function process_hook($order_id, $old_status, $new_status)
        {
        }
        /**
         * Get current compare data
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return false|float
         */
        protected function get_current_data($vendor_id)
        {
        }
    }
    /**
     * Class number of orders count badge
     *
     * @since   3.7.14
     *
     * @package WeDevs\DokanPro\Modules\SellerBadge\Events
     */
    class NumberOfOrders extends \WeDevs\DokanPro\Modules\SellerBadge\Abstracts\BadgeEvents
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @param string $event_type
         */
        public function __construct($event_type)
        {
        }
        /**
         * Process hooks related to this badge
         *
         * @since 3.7.14
         *
         * @param int $order_id
         * @param string $old_status
         * @param string $new_status
         *
         * @return void
         */
        public function process_hook($order_id, $old_status, $new_status)
        {
        }
        /**
         * Get current compare data
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return false|float
         */
        protected function get_current_data($vendor_id)
        {
        }
    }
    /**
     * Class vendor first product count badge
     *
     * @since   3.7.14
     *
     * @package WeDevs\DokanPro\Modules\SellerBadge\Events
     */
    class ProductPublished extends \WeDevs\DokanPro\Modules\SellerBadge\Abstracts\BadgeEvents
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @param string $event_type
         */
        public function __construct($event_type)
        {
        }
        /**
         * Process hooks related to this badge
         *
         * @since 3.7.14
         *
         * @param int $post_id
         *
         * @return void
         */
        public function process_hook($post_id)
        {
        }
        /**
         * Get current compare data
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return false|int
         */
        protected function get_current_data($vendor_id)
        {
        }
    }
    /**
     * Class sales amount count badge
     *
     * @since   3.7.14
     *
     * @package WeDevs\DokanPro\Modules\SellerBadge\Events
     */
    class SalesAmount extends \WeDevs\DokanPro\Modules\SellerBadge\Abstracts\BadgeEvents
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @param string $event_type
         */
        public function __construct($event_type)
        {
        }
        /**
         * Process hooks related to this badge
         *
         * @since 3.7.14
         *
         * @param int $post_id
         *
         * @return void
         */
        public function process_hook($order_id)
        {
        }
        /**
         * Get current compare data
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return false|float
         */
        protected function get_current_data($vendor_id)
        {
        }
    }
    /**
     * Class store support count badge
     *
     * @since   3.7.14
     *
     * @package WeDevs\DokanPro\Modules\SellerBadge\Events
     */
    class StoreSupportCount extends \WeDevs\DokanPro\Modules\SellerBadge\Abstracts\BadgeEvents
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @param string $event_type
         */
        public function __construct($event_type)
        {
        }
        /**
         * Process hooks related to this badge
         *
         * @since 3.7.14
         *
         * @param int $post_id
         *
         * @return void
         */
        public function process_hook($post_id)
        {
        }
        /**
         * Get current compare data
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return false|float
         */
        protected function get_current_data($vendor_id)
        {
        }
    }
    /**
     * Class trending products count badge
     *
     * @since 3.7.14
     *
     * @package WeDevs\DokanPro\Modules\SellerBadge\Events
     */
    class TrendingProduct extends \WeDevs\DokanPro\Modules\SellerBadge\Abstracts\BadgeEvents
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @param string $event_type
         */
        public function __construct($event_type)
        {
        }
        /**
         * Get current compare data
         *
         * @since 3.7.14
         *
         * @param string[] $args
         *
         * @return object[]
         */
        protected function get_current_data($args)
        {
        }
        /**
         * Run the event job
         *
         * @since 3.7.14
         *
         * @param int $vendor_id single vendor id.
         *
         * @return void
         */
        public function run($vendor_id)
        {
        }
        /**
         * Add task to queue.
         *
         * @since 3.7.14
         *
         * @return void
         */
        public function add_to_queue($badge_id = 0, $badge_data = [])
        {
        }
        /**
         * Process the background task.
         *
         * @since 3.7.14
         *
         * @param int[] $vendors
         *
         * @return void
         */
        public function process_background_task($vendors)
        {
        }
    }
    /**
     * Class verified seller count badge
     *
     * @since   3.7.14
     *
     * @package WeDevs\DokanPro\Modules\SellerBadge\Events
     */
    class VerifiedSeller extends \WeDevs\DokanPro\Modules\SellerBadge\Abstracts\BadgeEvents
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @param string $event_type
         */
        public function __construct($event_type)
        {
        }
        /**
         * Process hooks related to this badge
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return void
         */
        public function process_hook($vendor_id)
        {
        }
        /**
         * On verification request updated.
         *
         * @since 3.14.1
         *
         * @param int $request_id Verification request id.
         *
         * @return void
         */
        public function on_verification_request_updated(int $request_id)
        {
        }
        /**
         * Get current compare data
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return false|string[]
         */
        protected function get_current_data($vendor_id)
        {
        }
        /**
         * Run the event job
         *
         * @since 3.7.14
         *
         * @param int $vendor_id single vendor id.
         *
         * @return void
         */
        public function run($vendor_id)
        {
        }
    }
    /**
     * Class number of years count badge
     *
     * @since   3.7.14
     *
     * @package WeDevs\DokanPro\Modules\SellerBadge\Events
     */
    class YearsActive extends \WeDevs\DokanPro\Modules\SellerBadge\Abstracts\BadgeEvents
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @param string $event_type
         */
        public function __construct($event_type)
        {
        }
        /**
         * Get current compare data
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return false|float
         */
        protected function get_current_data($vendor_id)
        {
        }
        /**
         * Run the event job
         *
         * @since 3.7.14
         *
         * @param int $vendor_id single vendor id.
         *
         * @return void
         */
        public function run($vendor_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SellerBadge\Frontend {
    /**
     * Class Feature product count badge
     *
     * @since   3.7.14
     *
     * @package WeDevs\DokanPro\Modules\SellerBadge\Events
     */
    class Hooks
    {
        /**
         * Endpoint for vendor dashboard.
         *
         * @var string $vendor_endpoint
         */
        protected $vendor_endpoint = 'seller-badge';
        /**
         * Load automatically when class initiate.
         *
         * @since 3.7.14
         */
        public function __construct()
        {
        }
        /**
         * Add menu to dashboard
         *
         * @param array $menu_items
         *
         * @return array
         */
        public function add_menu($menu_items)
        {
        }
        /**
         * Add badge endpoint
         *
         * @param array $query_vars
         *
         * @return array
         */
        public function badge_endpoints($query_vars)
        {
        }
        /**
         * Load badge template
         *
         * @param array $query_vars
         *
         * @return void
         */
        public function load_badge_template($query_vars)
        {
        }
        /**
         * Load vue root component
         *
         * @since 3.7.14
         *
         * @return void
         */
        public function load_vue_root_template()
        {
        }
        /**
         * Enqueue script
         *
         * @since 3.7.14
         *
         * @return void
         */
        public function enqueue_script()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SellerBadge {
    /**
     * Seller Badge Helper
     */
    class Helper
    {
        /**
         * Get dokan seller badge events.
         *
         * @since 3.7.14
         *
         * @param string $event
         * @param bool   $get_event_keys
         *
         * @return BadgeEvent|WP_Error|array
         */
        public static function get_dokan_seller_badge_events($event = '', $get_event_keys = false)
        {
        }
        /**
         * Get formatted event badge status
         *
         * @since 3.7.14
         *
         * @param $status
         *
         * @return array|string
         */
        public static function get_formatted_event_status($status = '')
        {
        }
        /**
         * @return string
         */
        public static function get_week_start_day()
        {
        }
        /**
         * Get condition data for a given event type.
         *
         * @since 3.7.14
         *
         * @param $condition
         *
         * @return string
         */
        public static function get_condition_data($condition)
        {
        }
        /**
         * Get no of years a vendor has been active on marketplace
         *
         * @since 3.7.14
         *
         * @param int $vendor_id
         *
         * @return int
         */
        public static function get_vendor_year_count($vendor_id)
        {
        }
    }
    /**
     * Class for Hooks integration.
     *
     * @since 3.7.14
     */
    class Hooks
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add params to store collection.
         *
         * @since 3.7.14
         *
         * @param array $args
         *
         * @return array
         */
        public function add_params_to_store_collection($args)
        {
        }
        /**
         * Get dokan stores args
         *
         * @since 3.7.14
         *
         * @param array $args
         * @param \WP_REST_Request $request
         *
         *
         * @return array
         */
        public function rest_get_stores_args($args, $request)
        {
        }
        /**
         * Store custom fields data during add/edit vendors
         *
         * @since 3.7.14
         *
         * @param array $data
         *
         * @param int   $vendor_id
         *
         * @return void
         */
        public function update_vendor_custom_fields($vendor_id, $data)
        {
        }
        /**
         * Populated custom fields data during creating vendor instance
         *
         * @since 3.7.14
         *
         * @param Vendor $vendor
         *
         * @param array  $shop_info
         *
         * @return array
         */
        public function populate_shop_data($shop_info, $vendor)
        {
        }
        /**
         * Add badge_id Collection parameter.
         *
         * @since 3.7.30
         *
         * @param array $params Collection parameters.
         * @return array
         */
        public function rest_add_stores_collection_param(array $params): array
        {
        }
    }
    /**
     * Dokan Seller Badge Installer Class
     *
     * @since 3.7.14
     */
    class Installer
    {
        /**
         * Install Seller Badge Module
         *
         * @since 3.7.14
         */
        public function __construct()
        {
        }
        /**
         * Create all the table for the module
         *
         * @since 3.7.14
         *
         * @return void
         */
        public function create_tables()
        {
        }
        /**
         * Create capabilities for vendor.
         *
         * @since 3.7.14
         *
         * @return void
         */
        public function create_capabilities()
        {
        }
        /**
         * Schedule cron for daily midnight
         *
         * @since 3.7.14
         *
         * @return bool
         */
        public function daily_schedule_cron()
        {
        }
    }
    /**
     * Seller Badge Manager
     *
     * @since 3.7.14
     */
    class Manager
    {
        /**
         * Class constructor
         *
         * @since 3.7.14
         */
        public function __construct()
        {
        }
        /**
         * Get badge table string
         *
         * @since 3.7.14
         *
         * @return string
         */
        public function get_badge_table()
        {
        }
        /**
         * Get badge level table string
         *
         * @since 3.7.14
         *
         * @return string
         */
        public function get_badge_level_table()
        {
        }
        /**
         * Get badge acquired table string
         *
         * @since 3.7.14
         *
         * @return string
         */
        public function get_badge_acquired_table()
        {
        }
        /**
         * Get seller badge count
         *
         * @since 3.7.14
         *
         * @param array $args
         *
         * @return object|WP_Error
         */
        public function get_badge_count($args = [])
        {
        }
        /**
         * Get a single badge details
         *
         * @since 3.7.14
         *
         * @param array $args
         *
         * @return object|WP_Error
         */
        public function get_badge($args = [])
        {
        }
        /**
         * Get all seller badge with acquired vendor badge count
         *
         * @since 3.7.14
         *
         * @param array $args
         *
         * @return object[]|WP_Error
         */
        public function get_seller_badges($args = [])
        {
        }
        /**
         * This method will return all available seller badges from database.
         *
         * @since 3.7.14
         *
         * @return WP_Error|Object[]
         */
        public function get_all_seller_badges()
        {
        }
        /**
         * Get unseen badges for a vendor
         *
         * @since 3.7.14
         *
         * @param array $args
         *
         * @return object[]|WP_Error
         */
        public function get_unseen_badges_by_vendor($args = [])
        {
        }
        /**
         * This method will return badge data with given badge key.
         *
         * @since 3.7.14
         *
         * @param string $event_type
         *
         * @return Object|WP_Error
         */
        public function get_badge_data_by_event_type($event_type)
        {
        }
        /**
         * Get badge level for a single badge
         *
         * @since 3.7.14
         *
         * @param array $args
         *
         * @return object[]|WP_Error
         */
        public function get_badge_levels($args = [])
        {
        }
        /**
         * Get acquired vendors by badge id
         *
         * @since 3.7.14
         *
         * @param int $badge_id
         * @param int $per_page
         *
         * @return int[]|WP_Error
         */
        public function get_acquired_vendors_by_badge_id($badge_id = 0, $per_page = -1)
        {
        }
        /**
         * Get vendor acquired badges
         *
         * @since 3.7.14
         *
         * @param $vendor_id
         *
         * @return object[]|WP_Error
         */
        public function get_vendor_acquired_badges($vendor_id)
        {
        }
        /**
         * This method will return acquired levels for a specific badge
         *
         * @since 3.7.14
         *
         * @param int    $vendor_id
         * @param int    $badge_id
         * @param string $acquired_badge_status
         *
         * @return object[]|WP_Error
         */
        public function get_vendor_acquired_levels_by_badge_id($vendor_id, $badge_id, $acquired_badge_status = 'all')
        {
        }
        /**
         * Create Seller Badge Data
         *
         * @since 3.7.14
         *
         * @param array $args
         *
         * @return WP_Error|array
         */
        public function create_seller_badge($args = [])
        {
        }
        /**
         * Insert or update a single badge data
         *
         * @since 3.7.14
         *
         * @param array $args
         *
         * @return array|WP_Error
         */
        public function update_seller_badge($args = [])
        {
        }
        /**
         * Insert or update badge level data
         *
         * @since 3.7.14
         *
         * @param int   $badge_id
         * @param array $badge_level_data
         *
         * @return WP_Error|int Error on failure, effected row count on success
         */
        public function update_badge_level_data($badge_id, $badge_level_data = [])
        {
        }
        /**
         * Insert or update vendor acquired badge levels data
         *
         * @since 3.7.14
         *
         * @param array[] $acquired_badge_level_data
         *
         * @return void|WP_Error
         */
        public function update_vendor_acquired_badge_levels_data($acquired_badge_level_data = [])
        {
        }
        /**
         * Delete Single or multiple Badge Data
         *
         * @since 3.7.14
         *
         * @param int|array $badge_id
         *
         * @return WP_Error|array array if delete is successful otherwise WP_Error
         */
        public function delete_badges($badge_id)
        {
        }
        /**
         * Update badge seen status.
         *
         * @since 3.7.14
         *
         * @param int   $vendor_id
         * @param array $badge_id
         *
         * @return WP_Error|bool
         */
        public function set_badge_status_as_seen($vendor_id)
        {
        }
        /**
         * Set acquired badge status to draft for a specific badge
         *
         * @since 3.7.14
         *
         * @param int $badge_id
         *
         * @return bool|WP_Error
         */
        public function remove_all_acquired_data_for_a_badge($badge_id)
        {
        }
        /**
         * Check if a variable is empty, if zero is set as default value, this method will return true
         *
         * @since 3.7.14
         *
         * @param mixed $var
         *
         * @return bool
         */
        protected function is_empty($var)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SellerBadge\Models {
    class BadgeEvent
    {
        /**
         * Badge properties
         *
         * @since 3.7.14
         *
         * @var array
         */
        protected $data = ['id' => '', 'title' => '', 'description' => '', 'condition_text' => [], 'responsible_class' => '', 'responsible_hooks' => [], 'hover_text' => '', 'group' => [], 'has_multiple_levels' => false, 'badge_logo' => '', 'badge_logo_raw' => '', 'input_group_icon' => ['condition' => '', 'data' => ''], 'status' => 'draft', 'created' => false];
        /**
         * Class constructor
         *
         * @since 3.7.14
         *
         * @param string $event_id
         * @param array  $data
         */
        public function __construct($event_id = '', $data = [])
        {
        }
        /**
         * Get object data as json string
         *
         * @since 3.7.14
         *
         * @return false|string
         */
        public function __toString()
        {
        }
        /**
         * Get badge event id
         *
         * @since 3.7.14
         *
         * @return string
         */
        public function get_event_id()
        {
        }
        /**
         * Get badge title
         *
         * @since 3.7.14
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Get badge description
         *
         * @since 3.7.14
         *
         * @return string
         */
        public function get_description()
        {
        }
        /**
         * Get badge conditional help text
         *
         * @since 3.7.14
         *
         * @return array
         */
        public function get_conditional_text()
        {
        }
        /**
         * Get responsible badge class name
         *
         * @since 3.7.14
         *
         * @return string
         */
        public function get_class()
        {
        }
        /**
         * Get responsible badge hooks
         *
         * @since 3.7.14
         *
         * @return array
         */
        public function get_hooks()
        {
        }
        /**
         * Get badge hover text
         *
         * @since 3.7.14
         *
         * @return string
         */
        public function get_hover_text()
        {
        }
        /**
         * Get badge group
         *
         * @since 3.7.14
         *
         * @return string
         */
        public function get_group()
        {
        }
        /**
         * Get badge url
         *
         * @since 3.7.14
         *
         * @return string
         */
        public function get_formatted_badge_logo()
        {
        }
        /**
         * Get badge url
         *
         * @since 3.7.14
         *
         * @return string
         */
        public function get_badge_logo()
        {
        }
        /**
         * Get badge icon
         *
         * @since 3.7.14
         *
         * @return array
         */
        public function get_icon()
        {
        }
        /**
         * Get badge created value
         *
         * @since 3.7.14
         *
         * @return bool
         */
        public function get_badge_created()
        {
        }
        /**
         * Get formatted hover text for a badge
         *
         * @since 3.7.14
         *
         * @param object $db_item
         *
         * @return string
         */
        public function get_formatted_hover_text($db_item)
        {
        }
        /**
         * Get event data
         *
         * @since 3.7.14
         *
         * @return array
         */
        public function get_data()
        {
        }
        /**
         * Set badge event id
         *
         * @param $event_id
         *
         * @return $this
         */
        public function set_event_id($event_id)
        {
        }
        /**
         * Set badge title
         *
         * @since 3.7.14
         *
         * @param string $title
         *
         * @return $this
         */
        public function set_title($title)
        {
        }
        /**
         * Set badge description
         *
         * @since 3.7.14
         *
         * @param string $description
         *
         * @return $this
         */
        public function set_description($description)
        {
        }
        /**
         * Set badge conditional help text
         *
         * @since 3.7.14
         *
         * @param array $conditional_text
         *
         * @return $this
         */
        public function set_conditional_text($conditional_text)
        {
        }
        /**
         * Set responsible badge class name
         *
         * @since 3.7.14
         *
         * @param string $class_name
         *
         * @return $this
         */
        public function set_class($class_name)
        {
        }
        /**
         * Set responsible hooks for this badge to work
         *
         * @since 3.7.14
         *
         * @param array|string $responsible_hooks
         *
         * @return $this
         */
        public function set_hooks($responsible_hooks)
        {
        }
        /**
         * Set badge hover help text
         *
         * @since 3.7.14
         *
         * @param string $hover_text
         *
         * @return $this
         */
        public function set_hover_text($hover_text)
        {
        }
        /**
         * Set badge group
         *
         * @since 3.7.14
         *
         * @param array $group_name
         *
         * @return $this
         */
        public function set_group($group_name)
        {
        }
        /**
         * Set is badge event has multiple levels
         *
         * @since 3.7.14
         *
         * @param bool $has_multiple_level
         *
         * @return $this
         */
        public function set_has_multiple_levels($has_multiple_level = false)
        {
        }
        /**
         * Set badge logo
         *
         * @since 3.7.14
         *
         * @param string $badge_logo
         *
         * @return $this
         */
        public function set_badge_logo($badge_logo)
        {
        }
        /**
         * Set badge logo
         *
         * @since 3.7.14
         *
         * @param string $badge_logo_raw
         *
         * @return $this
         */
        public function set_badge_logo_raw($badge_logo_raw)
        {
        }
        /**
         * Set badge icon css class name
         *
         * @since 3.7.14
         *
         * @param array $icon_class_name
         *
         * @return $this
         */
        public function set_icon($icon_class_name)
        {
        }
        /**
         * Set badge created param
         *
         * @since 3.7.14
         *
         * @param string $status
         *
         * @return $this
         */
        public function set_status($status)
        {
        }
        /**
         * Set badge created param
         *
         * @since 3.7.14
         *
         * @param bool $badge_created
         *
         * @return $this
         */
        public function set_created($badge_created)
        {
        }
        /**
         * Check if badge event has multiple levels
         *
         * @since 3.7.14
         *
         * @return bool
         */
        public function has_multiple_levels()
        {
        }
        /**
         * Check if event class exists
         *
         * @since 3.7.14
         *
         * @return bool
         */
        public function is_event_class_exists()
        {
        }
        /**
         * Check if badge is created on database
         *
         * @since 3.7.14
         *
         * @return bool
         */
        public function is_event_created()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SellerBadge\REST {
    /**
     * Seller badge api controller
     *
     * @since 3.7.14
     */
    class SellerBadgeController extends \WeDevs\Dokan\Abstracts\DokanRESTController
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'seller-badge';
        /**
         * Register all routes related with seller badge.
         *
         * @since 3.7.14
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Checks if a given request has access to get items.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return bool True if the request has read access, WP_Error object otherwise.
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Get all seller badges.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * Checks if a given request has access to get a specific item.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return bool True if the request has read access for the item, false otherwise.
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Retrieves one item from the collection.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_item($request)
        {
        }
        /**
         * Checks if a given request has access to update a specific item.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return bool True if the request has access to update the item, false otherwise.
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Get all seller badge events.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function create_item($request)
        {
        }
        /**
         * Checks if a given request has access to delete a specific item.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return true True if the request has access to delete the item, false otherwise.
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Deletes one item from the collection.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Checks if a given request has access to process bulk actions.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return bool True if the request has read access, false otherwise.
         */
        public function bulk_actions_permissions_check($request)
        {
        }
        /**
         * Process bulk actions
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request
         *
         * @return bool|WP_Error
         */
        public function bulk_actions($request)
        {
        }
        /**
         * Checks if a given request has access to process bulk actions.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return bool True if the request has read access, false otherwise.
         */
        public function row_actions_permissions_check($request)
        {
        }
        /**
         * Process bulk actions
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request
         *
         * @return bool|WP_Error
         */
        public function row_actions($request)
        {
        }
        /**
         * Checks if a given request has access to update a specific item.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return bool True if the request has access to update the item, false otherwise.
         */
        public function get_events_permission_check($request)
        {
        }
        /**
         * Get all seller badge events.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_events($request)
        {
        }
        /**
         * Checks if a given request has access to update a specific item.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return bool True if the request has access to update the item, false otherwise.
         */
        public function get_vendor_verification_types_permission_check($request)
        {
        }
        /**
         * Checks if a given request has access to update a specific item.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function get_vendor_verification_types($request)
        {
        }
        /**
         * Checks if a given request has access to update a specific item.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return bool True if the request has access to update the item, false otherwise.
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Updates one item from the collection.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Checks if a given request has access to get items.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return bool True if the request has read access, WP_Error object otherwise.
         */
        public function get_vendor_unseen_badges_permissions_check($request)
        {
        }
        /**
         * Get vendors unseen badges with levels.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function get_vendor_unseen_badges($request)
        {
        }
        /**
         * Checks if a given request has access to get items.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return bool True if the request has read access, WP_Error object otherwise.
         */
        public function get_set_badge_as_seen_permissions_check($request)
        {
        }
        /**
         * Get vendors unseen badges with levels.
         *
         * @since 3.7.14
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function set_badge_as_seen($request)
        {
        }
        /**
         * Prepare badge data for response
         *
         * @since 3.7.14
         *
         * @param object          $item
         * @param WP_REST_Request $request
         * @param object[]        $vendor_acquired_levels
         *
         * @return WP_Error|WP_REST_Response
         */
        public function prepare_item_for_response($item, $request, $vendor_acquired_levels = [])
        {
        }
        /**
         * Prepare data for level object.
         *
         * @since 3.7.14
         *
         * @param object          $level
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response[]
         */
        public function prepare_response_for_badge_level($level, $request, $index)
        {
        }
        /**
         * Prepare data for level object.
         *
         * @since 3.7.14
         *
         * @param object          $level
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response[]
         */
        public function prepare_response_for_acquired_badge_level($level, $request, $index)
        {
        }
        /**
         * Prepare links for the request.
         *
         * @param mixed           $object  Object data.
         * @param WP_REST_Request $request Request object.
         *
         * @return array                   Links for the given post.
         */
        protected function prepare_links($object, $request)
        {
        }
        /**
         * This method will verify per page item value, will be used only with rest api validate callback
         *
         * @since 3.7.14
         *
         * @param $value
         * @param $request WP_REST_Request
         * @param $key
         *
         * @return bool|WP_Error
         */
        public function validate_per_page($value, $request, $key)
        {
        }
        /**
         * Get seller badge collection params.
         *
         * @since 3.7.14
         *
         * @return array
         */
        public function get_seller_badge_collection_params()
        {
        }
        /**
         * Get seller badge collection params.
         *
         * @since 3.7.14
         *
         * @return array
         */
        public function get_single_seller_badge_collection_params()
        {
        }
        /**
         * Get seller badge collection params.
         *
         * @since 3.7.14
         *
         * @return array
         */
        public function get_badge_as_seen_collection_params()
        {
        }
        /**
         * Schema for batch processing/bulk actions
         *
         * @since 3.7.14
         *
         * @return array
         */
        public function get_bulk_actions_collection_params()
        {
        }
        /**
         * Get the badge item schema, conforming to JSON Schema.
         *
         * @since 3.7.14
         *
         * @return array
         */
        public function get_item_schema()
        {
        }
        /**
         * Get the badge event schema, conforming to JSON Schema
         *
         * @since 3.7.14
         *
         * @return array
         */
        public function get_events_schema()
        {
        }
        /**
         * Get the badge event schema, conforming to JSON Schema
         *
         * @since 3.7.14
         *
         * @return array
         */
        public function get_verification_types_schema()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SellerBadge {
    /**
     * This class will be responsible for registering all badge events
     *
     * @since 3.7.14
     */
    class RegisterBadgeEvents
    {
        use \WeDevs\Dokan\Traits\Singleton;
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 3.7.14
         */
        public function __wakeup()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SellerBadge\Widgets {
    /**
     * Seller Badge Widget
     *
     * @since 3.7.14
     */
    class SellerBadge extends \WC_Widget
    {
        /**
         * Class Constructor.
         *
         * @since 3.7.14
         */
        public function __construct()
        {
        }
        /**
         * Front-end display of widget.
         *
         * @since 3.7.14
         *
         * @param array $args     Widget arguments.
         * @param array $instance Saved values from database.
         *
         * @see   WP_Widget::widget()
         */
        public function widget($args, $instance)
        {
        }
        public function load_widget_css()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SellerBadge {
    /**
     * Class for Seller Badge module integration.
     *
     * @since 3.7.14
     */
    class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Cloning is forbidden.
         *
         * @since 3.7.14
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 3.7.14
         */
        public function __wakeup()
        {
        }
        /**
         * Class constructor.
         *
         * @since 3.7.14
         */
        public function __construct()
        {
        }
        /**
         * Add module REST Controller
         *
         * @since 3.7.14
         *
         * @param array $class_map
         */
        public function add_rest_controller($class_map)
        {
        }
        /**
         * Initiate all classes
         *
         * @since 3.7.14
         *
         * @return void
         */
        public function initiate()
        {
        }
        /**
         * Register Badge Event Hooks
         *
         * @since 3.7.14
         *
         * @return void
         */
        public function register_badge_events()
        {
        }
        /**
         * Register seller badge scripts
         *
         * @since 3.7.14
         *
         * @return void
         */
        public function register_scripts()
        {
        }
        /**
         * Set template path for Request Quote
         *
         * @since 3.7.14
         *
         * @return string
         */
        public function load_templates($template_path, $template, $args)
        {
        }
        /**
         * Install all tables when module is activated.
         *
         * @since 3.7.14
         *
         * @return void
         */
        public function activate()
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.7.14
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        /**
         * This method will be called during module deactivation
         *
         * @since 3.7.14
         */
        public function deactivate()
        {
        }
        /**
         * Register widgets.
         *
         * @since 3.7.14
         *
         * @param array $widgets
         *
         * @return array
         */
        public function register_widgets($widgets)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SellerVacation\SettingsApi {
    /**
     * Store settings for SellerVacation.
     *
     * @since 3.7.13
     */
    class Store
    {
        /**
         * Constructor
         *
         * @since 3.7.13
         */
        public function __construct()
        {
        }
        /**
         * Add store vacation to store weekly timing card.
         *
         * @since 3.7.13
         *
         * @param array $store_weekly_timing_card array of settings.
         *
         * @return array
         */
        public function add_store_vacation_api_to_store_weekly_timing_card($store_weekly_timing_card): array
        {
        }
    }
}
namespace {
    class Dokan_Seller_Vacation_Ajax
    {
        /**
         * Class constructor
         *
         * @since 2.9.10
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Save vacation item via AJAX request
         *
         * @since 2.9.10
         *
         * @return void
         */
        public function ajax_vacation_save_item()
        {
        }
        /**
         * Delete vacation item via AJAX request
         *
         * @since 2.9.10
         *
         * @return void
         */
        public function ajax_vacation_delete_item()
        {
        }
        /**
         * Sort vacation list by date `from` ascending order
         *
         * @since 2.9.10
         *
         * @param string $a
         * @param string $b
         *
         * @return int
         */
        public function sort_by_date_asc($a, $b)
        {
        }
        /**
         * Send JSON error on AJAX response
         *
         * @since 2.9.10
         *
         * @param \Exception $e
         * @param string $default_message
         *
         * @return void
         */
        protected function send_json_error(\Exception $e, $default_message)
        {
        }
    }
    class Dokan_Seller_Vacation_Store_Settings
    {
        /**
         * Class construct
         *
         * @since 2.9.10
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Store settings form
         *
         * @since 2.9.10
         *
         * @param object $current_user
         * @param array  $profile_info
         *
         * @return void
         */
        public function store_settings_form($current_user, $profile_info)
        {
        }
        /**
         * Register Scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue admin scripts
         *
         * Allows plugin assets to be loaded.
         *
         * @uses wp_enqueue_script()
         * @uses wp_localize_script()
         * @uses wp_enqueue_style
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Save vacation settings with store settings
         *
         * @since 2.9.10
         *
         * @param int   $store_id
         * @param array $dokan_settings
         *
         * @return void
         */
        public function save_settings($store_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SellerVacation {
    class Module
    {
        /**
         * Constructor for the Dokan_Seller_Vacation class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @since 2.9.10
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Show vacation message on product single page.
         *
         * @since 3.9.3
         *
         * @return void
         */
        public function show_vacation_message_on_product_page()
        {
        }
        /**
         * Show Vacation message in store page
         * @param  \WP_User $store_user
         * @param  array $store_info
         * @return void
         */
        public function show_vacation_message($store_user, $store_info, $raw_output = false)
        {
        }
        /**
         * Remove product from cart for closed store
         * @param  null
         * @return void
         */
        public function remove_product_from_cart_for_closed_store()
        {
        }
        /**
         * Hide Add to Cart Button.
         *
         * @since 3.9.0
         *
         * @param bool        $purchasable Is Purchasable
         * @param \WC_Product $product     Product object
         *
         * @return void
         */
        public function hide_add_to_cart_button($purchasable, $product)
        {
        }
        /**
         * Apply Quote Rules.
         *
         * @since 3.9.0
         *
         * @param bool        $applicable Is Applicable
         * @param \WC_Product $product    Product Object
         *
         * @return bool
         */
        public function apply_quote_rules($applicable, $product)
        {
        }
    }
}
namespace {
    /**
     * Conflict Resolution Class.
     *
     * @since 3.7.15
     */
    class ConflictResolution
    {
        /**
         * Whether the conflict found or not.
         *
         * @var bool
         */
        protected $found_conflict = \false;
        /**
         * Class constructor.
         *
         * @since 3.7.15
         */
        public function __construct()
        {
        }
        /**
         * WooCommerce ShipStation Integration plugin deactivation notice.
         *
         * @since 3.7.15
         *
         * @param array $notices  Admin notices
         *
         * @return array $notices Admin notices
         * */
        public function wc_shipstation_dectivation_notice($notices)
        {
        }
        /**
         * Deactivate Woocommerce ShipStation plugin.
         *
         * @since Dokan_PRO_SINCE
         *
         * @return void
         * */
        public function deactivate_wc_shipstation_plugin()
        {
        }
    }
    abstract class Dokan_ShipStation_Api_Request
    {
        /**
         * Log something
         *
         * @since 1.0.0
         *
         * @param string $message
         */
        public function log($message)
        {
        }
        /**
         * Run the request
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function request()
        {
        }
        /**
         * Validate data
         *
         * @since 1.0.0
         *
         * @param array $required_fields fields to look for
         *
         * @return void
         */
        public function validate_input($required_fields)
        {
        }
        /**
         * Trigger and log an error
         *
         * @since 1.0.0
         *
         * @param string $message
         *
         * @return void
         */
        public function trigger_error($message)
        {
        }
    }
    /**
     * Drop in replacement for DOMDocument that is secure against XML eXternal Entity (XXE) Injection.
     * Bails if any DOCTYPE is found
     *
     * Comments in quotes come from the DOMDocument documentation: http://php.net/manual/en/class.domdocument.php
     */
    class Dokan_Safe_DOMDocument extends \DOMDocument
    {
        /**
         * When called non-statically (as an object method) with malicious data, no Exception is thrown, but the object is emptied of all DOM nodes.
         *
         * @since 1.0.0
         *
         * @param string $filename The path to the XML document.
         * @param int $options Bitwise OR of the libxml option constants. http://us3.php.net/manual/en/libxml.constants.php
         *
         * @return bool|DOMDocument true on success, false on failure.  If called statically (E_STRICT error), returns DOMDocument on success.
         */
        public function load($filename, $options = 0)
        {
        }
        /**
         * When called non-statically (as an object method) with malicious data, no Exception is thrown, but the object is emptied of all DOM nodes.
         *
         * @since 1.0.0
         *
         * @param string $source The string containing the XML.
         * @param int $options Bitwise OR of the libxml option constants. http://us3.php.net/manual/en/libxml.constants.php
         *
         * @return bool|DOMDocument true on success, false on failure.  If called statically (E_STRICT error), returns DOMDocument on success.
         */
        public function loadXML($source, $options = 0)
        {
        }
    }
    class Dokan_ShipStation_Api_Export extends \Dokan_ShipStation_Api_Request
    {
        /**
         * Dokan Seller object
         *
         * @since 1.0.0
         *
         * @var null|WP_User_Query
         */
        public $seller = \null;
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @param bool          $authenticated
         * @param WP_User_Query $seller
         */
        public function __construct($authenticated, $seller)
        {
        }
        /**
         * Do the request
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function request()
        {
        }
    }
    class Dokan_ShipStation_Api_ShipNotify extends \Dokan_ShipStation_Api_Request
    {
        /**
         * Dokan Seller object
         *
         * @since 1.0.0
         *
         * @var null|WP_User_Query
         */
        public $seller = \null;
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @param bool          $authenticated
         * @param WP_User_Query $seller
         */
        public function __construct($authenticated, $seller)
        {
        }
        /**
         * Handling the request.
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function request()
        {
        }
    }
    /**
     * @see https://help.shipstation.com/hc/en-us/articles/205928478#2 Documentation on ShipStation request endpoints
     */
    class Dokan_ShipStation_Api extends \Dokan_ShipStation_Api_Request
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Has API been authenticated?
         *
         * @since 1.0.0
         *
         * @return bool
         */
        public static function authenticated()
        {
        }
        /**
         * Handle the request
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function request()
        {
        }
    }
    class Dokan_ShipStation_Hooks
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Init ShipStation API
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function init_shipstation_api()
        {
        }
    }
    class Dokan_ShipStation_Settings
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add admin settings fields
         *
         * @since 1.0.0
         *
         * @param array $settings_fields
         */
        public function add_admin_settings_fields($settings_fields)
        {
        }
        /**
         * Backward compatible settings option map
         *
         * @since 2.9.13
         *
         * @param array $map
         *
         * @return array
         */
        public function admin_settings_rearrange_map($map)
        {
        }
        /**
         * Register Scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue ShipStation scripts in vendor settings page
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Add settings nav in settings page
         *
         * @since 1.0.0
         *
         * @param array $settings
         */
        public function add_settings_nav($settings)
        {
        }
        /**
         * Add heading title in settings page
         *
         * @since 1.0.0
         *
         * @param string $header
         * @param string $query_vars
         */
        public function add_heading_title($header, $query_vars)
        {
        }
        /**
         * Add helper text in settings page
         *
         * @since 1.0.0
         *
         * @param string $help_text
         * @param string $query_vars
         */
        public function add_helper_text($help_text, $query_vars)
        {
        }
        /**
         * Add settings form in settings page
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function add_settings_content()
        {
        }
        /**
         * Generate read-only auth key for ShipStation
         *
         * @since 1.0.0
         *
         * @param int $seller_id
         *
         * @return string
         */
        public function generate_key($seller_id)
        {
        }
        /**
         * Ajax form submission handler
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function form_handler()
        {
        }
        /**
         * Save vendor settings
         *
         * @since 1.0.0
         *
         * @param int   $seller_id
         * @param array $data
         *
         * @return void
         */
        public function save_vendor_settings($seller_id, $data)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ShipStation {
    class Module
    {
        /**
         * Module version
         *
         * @var string
         *
         * @since 1.0.0
         */
        public $version = '1.0.0';
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
    }
}
namespace {
    /**
     * Tempalte shortcode class file
     *
     * @load all shortcode for template  rendering
     */
    class Dokan_Template_Auction
    {
        public static $errors;
        public static $post_content;
        public static $validated;
        public static $validate;
        /**
         * __construct function
         *
         * @since 1.0.0
         */
        function __construct()
        {
        }
        /**
         * Initializes the Dokan_Template_Auction() class
         *
         * Checks for an existing Dokan_Template_Auction() instance
         * and if it doesn't find one, creates it.
         */
        public static function init()
        {
        }
        /**
         * Load attribute templates
         *
         * @since 1.5.2
         *
         * @return void
         **/
        public function load_attribute_options($post_id)
        {
        }
        /**
         * Load Shipping templates
         *
         * @since 1.5.2
         *
         * @return void
         **/
        public function load_shipping_options($post_id)
        {
        }
        /**
         * Saving handle for auction data
         *
         * @since  1.0.0
         *
         * @return void
         */
        function auction_handle_all_submit()
        {
        }
        /**
         * Relist our auction & update relisted data.
         *
         * @since 3.5.0
         *
         * @param int    $post_id
         * @param string $relist_from
         * @param string $relist_to
         *
         * @return void
         */
        public function relist_auction($post_id, $relist_from, $relist_to)
        {
        }
        /**
         * Handle auction product delete
         *
         * @since  1.0.0
         *
         * @return void
         */
        function handle_auction_product_delete()
        {
        }
        /**
         * Handles product duplicator for auction product
         *
         * @since 3.9.4
         *
         * @return void|WP_Error
         */
        public function handle_auction_product_duplicate()
        {
        }
        /**
         * Replace action inventory template
         *
         * @since  3.2.2
         *
         * @return void
         */
        public function replace_auction_inventory_template()
        {
        }
        /**
         * Load inventory template
         *
         * @since  3.2.2
         *
         * @param WP_Post $post
         * @param int $post_id
         *
         * @return void
         */
        public function load_inventory_template($post, $post_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Auction {
    /**
     * Dependency Notice Handler Class
     *
     * @since 3.5.0
     */
    class DependencyNotice
    {
        /**
         * Whether the module is loadable or not.
         *
         * @var bool
         */
        protected $missing_dependency = false;
        /**
         * Class constructor
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Check has missing dependency
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public function is_missing_dependency()
        {
        }
        /**
         * WooCommerce Simple Auction activation notice
         *
         * @since 3.5.0
         *
         * @param array $notices
         *
         * @return array
         */
        public function wc_simple_auction_activation_notice($notices)
        {
        }
        /**
         * Activate Woocommerce Simple Auction plugin
         *
         * @since 3.5.0
         *
         * @return void
         * */
        public function activate_wc_simple_auction()
        {
        }
    }
}
namespace {
    /**
     * Dokan Auction Cache class.
     *
     * Manage all cachings for dokan auction module.
     *
     * @since 3.4.2
     *
     * @see \WeDevs\Dokan\Cache
     */
    class DokanAuctionCache
    {
        /**
         * Constructor for the DokanAuctionCache class.
         *
         * Manage the following Caching groups:
         * 1. auction_products[seller_id]    => Seller's auction products
         * 2. auction_activities_[seller_id] => Seller's Main Auction Activities
         *
         * @since 3.4.2
         */
        public function __construct()
        {
        }
        /**
         * Clear Seller Auction product caches.
         *
         * @since 3.4.2
         *
         * @param int $product_id
         *
         * @return void
         */
        public function clear_auction_product_caches($product_id)
        {
        }
        /**
         * Clear Seller Auction activity caches.
         *
         * @since 3.4.2
         *
         * @param int $product_id
         *
         * @return void
         */
        public function clear_auction_activity_caches($product_id)
        {
        }
        /**
         * Reset cache group related to seller products.
         *
         * @since 3.4.2
         *
         * @param int|\WC_Product $product
         *
         * @return void
         */
        public function clear_auction_type_product_caches($product)
        {
        }
        /**
         * Clear Auction caches after creating auction product.
         *
         * @since 3.4.2
         *
         * @param int   $product_id
         * @param array $post_data
         *
         * @return void
         */
        public function after_created_auction_product($product_id, $post_data)
        {
        }
        /**
         * Clear Auction caches after deleting auction product.
         *
         * @since 3.4.2
         *
         * @param int $product_id
         *
         * @return void
         */
        public function after_deleted_auction_product($product_id)
        {
        }
        /**
         * Clear Auction caches after placing / deleting bid.
         *
         * @since 3.4.2
         *
         * @param array $data
         *
         * @return void
         */
        public function after_update_bid($data)
        {
        }
        /**
         * Clear Auction started, failed, own or finished.
         *
         * @since 3.4.2
         *
         * @param int $id
         *
         * @return void
         */
        public function after_auction_meta_changes($id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Auction {
    /**
     * Dokan_Auction class
     *
     * @class Dokan_Auction The class that holds the entire Dokan_Auction plugin
     */
    class Module
    {
        /**
         * Module version
         *
         * @since 3.2.2
         *
         * @var string
         */
        public $version = DOKAN_PRO_PLUGIN_VERSION;
        /**
         * Script suffix.
         *
         * @var null
         */
        public $suffix = '';
        /**
         * Constructor for the Dokan_Auction class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @uses register_activation_hook()
         * @uses register_deactivation_hook()
         * @uses is_admin()
         * @uses add_action()
         */
        public function __construct()
        {
        }
        /**
         * Register activation hook
         *
         * @since  1.5.2
         *
         * @return void
         */
        public function activate()
        {
        }
        /**
         * @param $plugin
         *
         * @return void
         */
        public function after_plugins_activated($plugin)
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        /**
         * Add capabilities
         *
         * @since 1.0.0
         *
         * @param array $capabilities
         *
         * @return array
         */
        public function add_capabilities(array $capabilities): array
        {
        }
        /**
         * Add caps labels
         *
         * @since 3.0.0
         *
         * @param array $caps
         *
         * @return array
         */
        public function add_caps_labels(array $caps): array
        {
        }
        /**
         * Insert auction product type
         *
         * @param  array $types
         *
         * @return array
         */
        public function insert_auction_product_type(array $types): array
        {
        }
        /**
         * Include files
         *
         * @since 1.5.0
         *
         * @return void
         **/
        public function includes()
        {
        }
        /**
         * Register Scripts
         *
         * @since 3.7.4
         *
         * @return void
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue admin scripts
         *
         * Allows plugin assets to be loaded.
         *
         * @uses wp_enqueue_script()
         * @uses wp_localize_script()
         * @uses wp_enqueue_style
         *
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Get plugin path
         *
         * @since 1.5.1
         *
         * @return string
         **/
        public function plugin_path(): string
        {
        }
        /**
         * Show auction action in user profile
         *
         * @since 1.0.0
         *
         * @param WP_User $user
         *
         * @return void
         */
        public function add_admin_user_options(\WP_User $user)
        {
        }
        /**
         * Save admin user profile options
         *
         * @since  1.0.0
         *
         * @param  int $user_id
         *
         * @return void
         */
        public function save_admin_user_option(int $user_id)
        {
        }
        /**
         * Add auction settings in dokan settings
         *
         * @since 1.0.0
         *
         * @param array $settings_fields
         *
         * @return array
         */
        public function add_auction_dokan_settings(array $settings_fields): array
        {
        }
        /**
         * Show dashboard auction menu
         *
         * @since 1.0.0
         *
         * @param array $urls
         *
         * @return array
         */
        public function add_auction_dashboard_menu(array $urls): array
        {
        }
        /**
         * Register endpoint for auction
         *
         * @since 1.0.0
         *
         * @param array $query_var
         *
         * @return array
         */
        public function add_dokan_auction_endpoint(array $query_var): array
        {
        }
        /**
         * Load dokan pro templates
         *
         * @since 1.5.1
         *
         * @param string $template_path
         * @param string $template
         * @param array $args
         *
         * @return string
         */
        public function load_auction_templates(string $template_path, string $template, array $args): string
        {
        }
        /**
         * Render auction dashboard template
         *
         * @since  1.0.0
         *
         * @param  array $query_vars
         *
         * @return void
         */
        public function load_dokan_auction_template(array $query_vars)
        {
        }
        /**
         * Disable selling capability by default once a seller is registered
         *
         * @since 1.0.0
         *
         * @param int $user_id
         */
        public function dokan_admin_user_register_enable_auction(int $user_id)
        {
        }
        /**
         * Exclude auction product from product listing
         *
         * @since 1.5.1
         *
         * @param array $product_type
         *
         * @return array
         **/
        public function product_listing_exclude_auction(array $product_type): array
        {
        }
        /**
         * Set auction active menu in dokan dashboard
         *
         * @since  1.0.0
         *
         * @param  string $active_menu
         *
         * @return string
         */
        public function dashboard_auction_active_menu(string $active_menu): string
        {
        }
        /**
         * Send bid email to seller and admin
         *
         * @since 2.8.2
         *
         * @param $recipient
         * @param $object
         *
         * @return string
         */
        public function send_bid_email($recipient, $object): string
        {
        }
        /**
         * Set localized args
         *
         * @since 2.8.2
         *
         * @param array $args
         *
         * @return array
         */
        public function set_localized_args(array $args): array
        {
        }
        /**
         * @since 3.1.4
         *
         * @param $url
         * @param $product
         *
         * @return mixed|string
         */
        public function modify_edit_product_url($url, $product)
        {
        }
        /**
         * Load downloadable and virtual option on product edit page
         *
         * @param int $auction_id Auction Product ID
         *
         * @return void
         */
        public function load_downloadable_virtual_option(int $auction_id)
        {
        }
        /**
         * Returns new category select ui html elements.
         *
         * @since 3.7.5
         *
         * @return void
         */
        public function load_add_category_modal()
        {
        }
        /**
         * WooCommerce Simple Auction `bid now` button override
         *
         * @since 3.7.30
         *
         * @param string $text
         * @param object $auction_object
         *
         * @return string
         */
        public function bid_now_button(string $text, object $auction_object): string
        {
        }
        /**
         * Overrides WooCommerce Simple Auction product single page template bidding template
         *
         * @since 3.7.30
         *
         * @param string $located
         * @param string $template_name
         *
         * @return string
         */
        function override_single_page_bidding_form(string $located, string $template_name): string
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SPMV\REST {
    /**
    * SPMV Product Variation controller
    *
    * @since 3.7.19
    *
    * @package dokan
    */
    class SpmvProductController extends \WP_REST_Controller
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'spmv-product';
        /**
         * Register the routes for products.
         *
         * @since 3.7.19
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Retrieves the query params for the collections.
         *
         * @since 3.7.19
         *
         * @return array Query parameters for the collection.
         */
        public function spmv_collection_params()
        {
        }
        /**
         * Checks the permission for product spmv.
         *
         * @since 3.7.19
         *
         * @return bool
         */
        public function permissions_check()
        {
        }
        /**
         * Returns spmv settings.
         *
         * @since 3.7.19
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function get_settings()
        {
        }
        /**
         * Get spmv products.
         *
         * @since 3.7.19
         *
         * @param WP_REST_Request $request
         *
         * @return WP_REST_Response
         */
        public function get_spmv_products(\WP_REST_Request $request)
        {
        }
        /**
         * Format item's collection for response
         *
         * @param  WP_REST_Response $response
         * @param  WP_REST_Request  $request
         * @param  int              $total_items
         * @param  int              $page
         *
         * @return WP_REST_Response
         */
        public function format_collection_response($response, $request, $total_items, $max_pages, $page)
        {
        }
        /**
         * Prepare spmv data for response
         *
         * @since 3.7.19
         *
         * @param WC_Product      $item
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Add product to current vendor store.
         *
         * @since 3.7.19
         * @param WP_REST_Request $request Request data.
         *
         * @return WP_REST_Response|WP_Error
         */
        public function add_product_to_store(\WP_REST_Request $request)
        {
        }
        /**
         * Get spmv settings schema, conforming to JSON Schema
         *
         * @since 3.7.19
         *
         * @return array
         */
        public function get_settings_item_schema()
        {
        }
        /**
         * Get spmv products item schema, conforming to JSON Schema
         *
         * @since 3.7.19
         *
         * @return array
         */
        public function get_search_item_schema()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SPMV\Search {
    /**
     * Class Assets.
     *
     * @since 3.5.2
     */
    class Assets
    {
        /**
         * Constructor.
         *
         * @since 3.5.2
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Register assets.
         *
         * @since 3.5.2
         *
         * @return void
         */
        public function register()
        {
        }
        /**
         * Enqueue assets.
         *
         * @since 3.5.2
         *
         * @return void
         */
        public function enqueue()
        {
        }
    }
    /**
     * Class Dashboard.
     * Here we are implementing all the Product search and add to store
     * related logic.
     *
     * @since 3.5.2
     */
    class Dashboard
    {
        use \WeDevs\Dokan\Traits\Singleton;
        /**
         * Load search template.
         *
         * @since 3.5.2
         *
         * @param array $query_vars
         *
         * @return void
         */
        public function load_search_template($query_vars)
        {
        }
        /**
         * Set Products menu as active.
         *
         * @since 3.5.2
         *
         * @param string $active_menu
         * @param $request
         * @param array $active
         *
         * @return string
         */
        public function active_dashboard_nav_menu($active_menu, $request, $active)
        {
        }
        /**
         * Add woocommerce search filter
         *
         * @since 3.5.2
         *
         * @return void
         */
        public function add_filter_content()
        {
        }
        /**
         * Add woocommerce search page count content
         *
         * @since 3.5.2
         *
         * @return void
         */
        public function add_count_content()
        {
        }
        /**
         * Search box template to display before new product form.
         *
         * @since 3.5.2
         *
         * @return void
         */
        public function load_product_search_box_template()
        {
        }
        /**
         * Search box template to display before new product form.
         *
         * @since 3.5.2
         *
         * @return void
         */
        public function load_product_listing_search_box_template()
        {
        }
        /**
         * Handle Product clone ajax request.
         *
         * @since 3.5.2
         *
         * @return void
         */
        public function handle_product_clone_request()
        {
        }
        /**
         * Redirect to vendor dashboard.
         *
         * @since 3.5.2
         *
         * @return void
         */
        public function redirect_to_dashboard()
        {
        }
        /**
         * Returns new category select ui html elements.
         *
         * @since 3.7.6
         *
         * @return void
         */
        public function load_add_category_modal()
        {
        }
        /**
         * Returns spmv products
         *
         * @since 3.7.19
         *
         * @param integer $paged
         * @param string  $search_word
         * @param integer $products_per_page
         * @param string  $product_type_for_search
         *
         * @return array|stdClass
         */
        public static function dokan_spmv_get_products(int $paged = 1, string $search_word = '', int $products_per_page = 10, string $product_type_for_search = 'all')
        {
        }
    }
}
namespace {
    /**
    * Admin class
    *
    * @package Dokan Pro
    */
    class Dokan_SPMV_Admin
    {
        /**
         * Load automatically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Add new Section in admin dokan settings
         *
         * @param array  $sections
         *
         * @return array
         */
        public function add_new_section_admin_panel($sections)
        {
        }
        /**
         * Add new Settings field in admin settings area
         *
         * @param array  $settings_fields
         *
         * @return array
         */
        public function add_new_setting_field_admin_panel($settings_fields)
        {
        }
    }
    /**
     * Update vendor and product geolocation data
     *
     * @since 2.9.11
     */
    class Dokan_SPMV_Update_Product_Visibility extends \Abstract_Dokan_Background_Processes
    {
        /**
         * Action
         *
         * @since 2.9.11
         *
         * @var string
         */
        protected $action = 'Dokan_SPMV_Update_Product_Visibility';
        /**
         * Perform updates
         *
         * @since 2.9.11
         *
         * @param mixed $item
         *
         * @return mixed
         */
        public function task($item)
        {
        }
    }
    /**
    * Product related functionality
    *
    * @package Dokan
    */
    class Dokan_SPMV_Product_Duplicator
    {
        use \WeDevs\Dokan\Traits\Singleton;
        const PUBLISHED_STATUS = 0;
        const TRASHED_STATUS = 1;
        const PENDING_STATUS = 2;
        const DRAFT_STATUS = 3;
        protected $product_id = 0;
        protected $vendor_id = 0;
        /**
         * Clone a product
         *
         * @since 2.9.8
         *
         * @return int|WP_Error
         */
        public function clone_product($product_id, $vendor_id)
        {
        }
        /**
         * Set product author
         *
         * @since 2.9.8
         *
         * @param array $args
         */
        public function set_product_author($args)
        {
        }
        /**
         * Check is seller is elligible for sell this item
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function is_valid_user($product_id, $vendor_id)
        {
        }
        /**
         * Check already cloned this product
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function check_already_cloned($product_id, $vendor_id)
        {
        }
        /**
         * Get mapping ID for next execution
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function get_next_map_id()
        {
        }
        /**
         * Set mapping ids for product
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function set_map_id($map_id, $product_ids)
        {
        }
        /**
         * Udpate product status in product mapping table
         *
         * @since 2.9.8
         *
         * @param integer $product_id
         * @param string $status [ 0 -> publish | 1 -> trash | 2 -> pending | 3 -> draft ]
         *
         * @return void
         */
        public function update_product_status($product_id, $status)
        {
        }
        /**
         * Get mapping status
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function get_product_map_status_code($status = '')
        {
        }
    }
    class Dokan_SPMV_Product_Visibility
    {
        protected $started_background_process = \false;
        /**
         * Class constructor
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Fires right save admin settings
         *
         * @since 2.9.11
         *
         * @param string $option_name
         * @param mixed  $option_value
         *
         * @return void
         */
        public function after_saving_settings($option_name, $option_value)
        {
        }
        /**
         * Fires after cloning a product
         *
         * @since 2.9.11
         *
         * @param int $cloned_product_id
         * @param int $product_id
         * @param int $map_id
         *
         * @return void
         */
        public function after_create_clone($cloned_product_id, $product_id, $map_id)
        {
        }
        /**
         * Update visibility on product update
         *
         * @since 2.9.11
         *
         * @param int $product_id
         *
         * @return void
         */
        public function woocommerce_update_product($product_id)
        {
        }
        /**
         * Filter WC product query
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function add_query_filters()
        {
        }
        /**
         * Filter the where query
         *
         * @since 2.9.11
         *
         * @param string    $where
         * @param \WP_Query $wp_query
         *
         * @return string
         */
        public function filter_where_request($where, $wp_query)
        {
        }
        /**
         * Filter the join query
         *
         * @since 2.9.11
         *
         * @param string    $join
         * @param \WP_Query $wp_query
         *
         * @return string
         */
        public function filter_join_request($join, $wp_query)
        {
        }
    }
    class Dokan_SPMV_Products_Admin
    {
        /**
         * Class constructor
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add metabox
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function add_meta_box()
        {
        }
        /**
         * Metabox
         *
         * @since 2.9.8
         *
         * @param WP_Post $post
         *
         * @return void
         */
        public function dokan_seller_meta_box($post)
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue scripts in product editing admin page
         *
         * @since 2.9.8
         *
         * @param string $hook
         *
         * @return void
         */
        public function enqueue_scripts($hook)
        {
        }
        /**
         * Add additional localized vars
         *
         * @since 2.9.8
         *
         * @param array $params
         *
         * @return array
         */
        public function add_localize_params($params)
        {
        }
        /**
         * Ajax method to search vendors
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function search_vendors()
        {
        }
        /**
         * Clone products for vendors
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function assign_vendors()
        {
        }
        /**
         * Delete cloned product
         *
         * @since 2.9.8
         *
         * @return void
         */
        public function delete_clone_product()
        {
        }
        /**
         * Remove request interception from wc_booking
         *
         * @since 3.10.0
         *
         * @return void
         */
        public function remove_request_interception_from_wc_booking()
        {
        }
    }
    /**
    * Product related functionality
    *
    * @package Dokan
    */
    class Dokan_SPMV_Products
    {
        /**
         * Load automatically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Check is seller is elligible for sell this item
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function is_valid_user($product_id)
        {
        }
        /**
         * Check already cloned this product
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function check_already_cloned($product_id)
        {
        }
        /**
         * Handle sell item form submission
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function handle_sell_item_action()
        {
        }
        /**
         * Show vendor comparison inside product tabs
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function show_vendor_comparison_inside_tab($tabs)
        {
        }
        /**
         * Added Sell this item btn
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function show_sell_now_btn()
        {
        }
        /**
         * Get mapping status
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function get_product_map_status_code($status = '')
        {
        }
        /**
         * Delete map and meta data for product
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function delete_product_meta($product_id)
        {
        }
        /**
         * Delete product form admin area
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function delete_product($product_id)
        {
        }
        /**
         * Update trash flag during product trash
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function trash_product($product_id)
        {
        }
        /**
         * Untrash product and restore
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function untrash_product($product_id)
        {
        }
        /**
         * Trigger product status changes
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function on_product_status_changes($new_status, $old_status, $post)
        {
        }
        /**
         * Udpate product status status from seller end
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function after_dokan_product_updated($product_id)
        {
        }
        /**
         * Udpate product status in product mapping table
         *
         * @since 1.0.0
         *
         * @param integer $product_id
         * @param string $status [ 0 -> publish | 1 -> trash | 2 -> pending | 3 -> draft ]
         *
         * @return void
         */
        public function update_product_status($product_id, $status)
        {
        }
        /**
         * Show Vendor comparison
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function show_vendor_comparison()
        {
        }
        /**
         * Get mapping ID for next execution
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function get_next_map_id()
        {
        }
        /**
         * Set mapping ids for product
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function set_map_id($map_id, $product_ids)
        {
        }
        /**
         * Delete product map data
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function delete_map_id($product_id)
        {
        }
        /**
         * Get other reseller vendors
         *
         * @since 1.0.0
         *
         * @param integer $product_id
         *
         * @return void
         */
        public function get_other_reseller_vendors($product_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\SPMV {
    class Module
    {
        /**
         * Load automatically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Hooks
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function define()
        {
        }
        /**
         * Includes all necessary class a functions file
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function includes()
        {
        }
        /**
         * Initiate all classes
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function initiate()
        {
        }
        /**
         * Init all hooks
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Create Mapping table for product and vendor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function activate()
        {
        }
        /**
         * Update duplicate product if exists multi vendor
         *
         * @since 3.1.2
         *
         * @param array $clone_product
         * @param array $product
         *
         * @return void
         */
        public function update_duplicate_product_spmv($clone_product, $product)
        {
        }
        /**
         * Add search endpoint to vendor dashboard.
         *
         * @sience 3.5.2
         *
         * @param array $query_var
         *
         * @return array
         */
        public function add_search_endpoints($query_var)
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.5.2
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        /**
         * REST API classes Mapping
         *
         * @since 3.7.19
         *
         * @return array
         */
        public function rest_api_class_map($class_map)
        {
        }
    }
}
namespace {
    class DSR_SPMV
    {
        /**
         * Product vendors
         *
         * @since 2.9.11
         *
         * @var array
         */
        protected $product_vendors = [];
        /**
         * Vendor ratings
         *
         * @since 2.9.11
         *
         * @var array
         */
        protected $vendor_ratings = [];
        /**
         * Class constructor
         *
         * @since 2.9.11
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Add show order option
         *
         * @since 2.9.11
         *
         * @param array $options
         *
         * @return array
         */
        public function add_show_order_option($options)
        {
        }
        /**
         * Filter cloned product order
         *
         * @since 2.9.11
         *
         * @param string      $price
         * @param \WC_Product $a
         * @param \WC_Product $b
         * @param string      $show_order
         *
         * @return int|double
         */
        public function set_cloned_product_order($price, $a, $b, $show_order)
        {
        }
        /**
         * Review rating for a vendor
         *
         * @since 2.9.11
         *
         * @param \WC_Product $product
         *
         * @return double
         */
        protected function get_product_vendor_review($product)
        {
        }
    }
    /**
     * Description of DSR_View
     *
     * @author weDevs
     */
    class DSR_View
    {
        public function __construct()
        {
        }
        /**
         * Initializes the DSR_View() class
         *
         * Checks for an existing DSR_View() instance
         * and if it doesn't find one, creates it.
         */
        public static function init()
        {
        }
        /**
         * Hnadles all ajax requests
         *
         * @since 1.0
         *
         * @return void
         */
        function ajax_handler()
        {
        }
        /**
         * Render Review form
         *
         * @since 1.0
         *
         * @return string
         */
        function review_form()
        {
        }
        /**
         * Render edit review form
         *
         * @since 1.0
         *
         * @return string
         */
        function edit_review_form()
        {
        }
        /**
         * Render add button for review
         *
         * @since 1.0
         *
         * @param int $seller_id
         *
         * @return string
         */
        function render_add_review_button($seller_id)
        {
        }
        /**
         * Render edit button for review
         *
         * @since 1.0
         *
         * @param int $seller_id
         * @param int $post_id
         *
         * @return string
         */
        function render_edit_review_button($seller_id, $post_id)
        {
        }
        /**
         * Submit or Edit new review
         *
         * @since 1.0
         *
         * @return void Success | Error
         */
        function submit_review()
        {
        }
        public function print_store_reviews($posts, $msg)
        {
        }
        /**
         * Render review list for store by all customer
         *
         * @since 1.0
         *
         * @param object $posts
         *
         * @return String List of reviews
         */
        public function get_review_list($posts)
        {
        }
        /**
         * Render Single Review Section
         *
         * @since 1.0
         *
         * @return array
         */
        function get_current_user_review()
        {
        }
        /**
         * Check if Customer has bought any product for this seller
         *
         * @since 1.0
         *
         * @param int $seller_id
         *
         * @param int $customer_id
         *
         * @return bool
         */
        function check_if_valid_customer($seller_id, $customer_id)
        {
        }
        /**
         * Include store lists filter category template
         *
         * @since 2.9.9
         *
         * @return void
         */
        public function after_store_lists_filter_category()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StoreReviews\Emails {
    /**
     * Dokan email handler class
     *
     * @package Dokan
     */
    class Manager
    {
        /**
         * Load automatically when class initiate
         */
        public function __construct()
        {
        }
        /**
         * Add Dokan Store Review Email classes in WC Email
         *
         * @since 3.5.5
         *
         * @param array $wc_emails
         *
         * @return array $wc_emails
         */
        public function load_dokan_emails($wc_emails)
        {
        }
    }
    /**
     * New Quote Email.
     *
     * An email sent to the admin, vendor and customer when a new quote is created.
     *
     * @class       NewQuote
     * @version     3.5.5
     * @package     Dokan/Modules/RequestAQuote/Emails
     * @author      weDevs
     * @extends     WC_Email
     */
    class NewStoreReview extends \WC_Email
    {
        /**
         * Reviewer name.
         *
         * @var string
         */
        public $reviewer_name = '';
        /**
         * Review id.
         *
         * @since 3.10.3
         *
         * @var int
         */
        protected $post_id;
        /**
         * Review title.
         *
         * @since 3.10.3
         *
         * @var string
         */
        protected $post_title;
        /**
         * Review details.
         *
         * @since 3.10.3
         *
         * @var string
         */
        protected $post_details;
        /**
         * Review rating.
         *
         * @since 3.10.3
         *
         * @var int
         */
        protected $rating;
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.5.5
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email recipient.
         *
         * @since  3.5.5
         *
         * @return string
         */
        public function get_default_recipient()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.5.5
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @since 3.5.5
         *
         * @param int   $post_id
         * @param array $post_data
         * @param int   $rating
         *
         * @return void
         */
        public function trigger($post_id, $post_data, $rating)
        {
        }
        /**
         * Get content html.
         *
         * @since 3.5.5
         *
         * @return false|string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @since 3.5.5
         *
         * @return false|string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         *
         * @since 3.5.5
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StoreReviews {
    class Manager
    {
        /**
         * Create or update a store review
         *
         * @since 2.9.5
         *
         * @param int   $store_id
         * @param array $data
         *
         * @return int|\WP_Error
         */
        public function save_store_review($store_id, $data)
        {
        }
        /**
         * Returns users store review.
         *
         * @since 3.9.1
         *
         * @param array $args
         *
         * @return array
         */
        public function get_user_review($args)
        {
        }
        /**
         * Check if Customer has bought any product for this seller
         *
         * @since 3.9.1
         *
         * @param int $seller_id
         *
         * @param int $customer_id
         *
         * @return boolean
         */
        public function check_if_valid_customer($seller_id, $customer_id)
        {
        }
    }
}
namespace {
    /**
    * Admin class for store reviews
    *
    * @since 1.0.0
    */
    class DSR_Admin
    {
        /**
         * Load autometically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Initializes the DSR_Admin() class
         *
         * Checks for an existing DSR_Admin() instance
         * and if it doesn't find one, creates it.
         */
        public static function init()
        {
        }
        /**
         * Load store review menu
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function load_store_review_menu($capability)
        {
        }
        /**
         * Load store review routes
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function vue_admin_routes($routes)
        {
        }
        /**
         * Register Scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Load admin vue scripts
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function vue_admin_enqueue_scripts()
        {
        }
    }
    /**
    * Announcement Controller class
    */
    class Dokan_REST_Store_Review_Controller extends \WeDevs\Dokan\Abstracts\DokanRESTController
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'store-reviews';
        /**
         * Post type.
         *
         * @var string
         */
        protected $post_type = 'dokan_store_reviews';
        /**
         * Register all announcement route
         *
         * @since 2.8.2
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get single object
         *
         * @since 2.8.2
         *
         * @return WP_Post|array|null
         */
        public function get_object($id)
        {
        }
        /**
         * Get all announcement
         *
         * @since 2.8.2
         *
         * @return void
         */
        public function get_items($request)
        {
        }
        /**
         * Get single announcement object
         *
         * @since 2.8.2
         *
         * @return void
         */
        public function get_item($request)
        {
        }
        /**
         * Update announcement
         *
         * @since 2.8.2
         *
         * @return void
         */
        public function update_review($request)
        {
        }
        /**
         * Delete announcement
         *
         * @since 2.8.2
         *
         * @return void
         */
        public function delete_review($request)
        {
        }
        /**
         * Restore announcement
         *
         * @since 2.8.2
         *
         * @return void
         */
        public function restore_reviews($request)
        {
        }
        /**
         * trash, delete and restore bulk action
         *
         * JSON data format for sending to API
         *     {
         *         "trash" : [
         *             "1", "9", "7"
         *         ],
         *         "delete" : [
         *             "2"
         *         ],
         *         "restore" : [
         *             "4"
         *         ]
         *     }
         *
         * @since 2.8.2
         *
         * @return void
         */
        public function batch_items($request)
        {
        }
        /**
         * Udpate review permission
         *
         * @since 2.8.2
         *
         * @return void
         */
        public function update_review_permissions_check()
        {
        }
        /**
         * Delete review permissions
         *
         * @since 2.8.2
         *
         * @return void
         */
        public function delete_review_permissions_check()
        {
        }
        /**
         * Restore review permission
         *
         * @since 2.8.2
         *
         * @return void
         */
        public function restore_review_permissions_check()
        {
        }
        /**
         * Batch item permissions
         *
         * @since 2.8.2
         *
         * @return void
         */
        public function batch_items_permissions_check()
        {
        }
        /**
         * Prepare data for response
         *
         * @since 2.8.0
         *
         * @return WP_REST_Response
         */
        public function prepare_response_for_object($object, $request)
        {
        }
        /**
         * Prepare links for the request.
         *
         * @param WC_Data         $object  Object data.
         * @param WP_REST_Request $request Request object.
         *
         * @return array                   Links for the given post.
         */
        protected function prepare_links($object, $request)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StoreReviews {
    class Module
    {
        /**
         * Constructor for the Dokan_Store_Reviews class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @uses register_activation_hook()
         * @uses register_deactivation_hook()
         * @uses is_admin()
         * @uses add_action()
         */
        public function __construct()
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue admin scripts.
         *
         * Allows plugin assets to be loaded.
         *
         * @uses wp_enqueue_script()
         * @uses wp_localize_script()
         * @uses wp_enqueue_style
         *
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Include files
         *
         * @return void
         */
        public function includes()
        {
        }
        public function instances()
        {
        }
        /**
         * REST API classes Mapping
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function rest_api_class_map($class_map)
        {
        }
        /**
         * Register Custom Post type for Store Reviews
         *
         * @since 1.0
         *
         * @return void
         */
        public function register_dokan_store_review_type()
        {
        }
        /**
         * Filter Dokan Core rating calculation value
         *
         * @since 1.0
         *
         * @param array $rating
         * @param int $store_id
         *
         * @return array calculated Rating
         */
        public function replace_rating_value($rating, $store_id)
        {
        }
        /**
         * Filter the Review list shown on review tab by default core
         *
         * @since 1.0
         *
         * @param string $review_list
         * @param int $store_id
         *
         * @return string Review List HTML
         */
        public function replace_ratings_list($review_list, $store_id)
        {
        }
    }
}
namespace {
    /**
     * Support ticket class for admin
     *
     * This class creates menu in admin dashboard, registers vue.js routes for admin
     * dashboard and enqueue scripts and styles.
     *
     * @class Dokan_Admin_Support
     *
     * @version 3.5.0
     */
    class Dokan_Admin_Support
    {
        /**
         * Class constructor.
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Add Dokan submenu
         *
         * @since 3.5.0
         *
         * @param string $capability
         *
         * @return void
         */
        public function add_admin_menu($capability)
        {
        }
        /**
         * Add admin page Route
         *
         * @since 3.5.0
         *
         * @param array $routes
         *
         * @return array
         */
        public function add_admin_route($routes)
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue admin script
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function enqueue_admin_script()
        {
        }
    }
    /**
     * Store Support Cache class.
     *
     * Manage all caching functionalities for Store Support module.
     *
     * @since 3.4.2
     *
     * @see \WeDevs\Dokan\Cache
     */
    class DokanStoreSupportCache
    {
        public function __construct()
        {
        }
        /**
         * Clear Store Support caches.
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function clear_cache_after_new_comment($post_id, $seller_id)
        {
        }
        /**
         * Clear Cache after change topic status.
         *
         * @since 3.4.2
         *
         * @param int    $post_id
         * @param string $status
         *
         * @return void
         */
        public function clear_cache_change_topic_status($post_id, $status)
        {
        }
    }
    /**
     * Dokan admin store suppoer rest controller class.
     *
     * @since 3.5.0
     *
     * @class AdminStoreSupportTicketController
     *
     * @extends DokanRESTAdminController
     */
    class AdminStoreSupportTicketController extends \WeDevs\Dokan\Abstracts\DokanRESTAdminController
    {
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'support-ticket';
        /**
         * Register all routes related with logs
         *
         * @since 3.5.0
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get all support tickets list
         *
         * @param \WP_REST_Request $request Request object.
         *
         * @since 3.5.0
         *
         * @return array $response
         */
        public function get_all_tickets($request)
        {
        }
        /**
         * Get single topic and its comments.
         *
         * @since 3.5.0
         *
         * @param \WP_REST_Request $request Request object.
         *
         * @return object $result
         */
        public function get_single_topic($request)
        {
        }
        /**
         * Delete a comment by its comment id.
         *
         * @since 3.5.0
         *
         * @param \WP_REST_Request $request Request object.
         *
         * @return int|boolean
         */
        public function delete_comment($request)
        {
        }
        /**
         * Create a new comment or reply from admin dashboard.
         *
         * @since 3.5.0
         *
         * @param \WP_REST_Request $request Request object.
         *
         * @return boolean|int
         */
        public function create_reply($request)
        {
        }
        /**
         * Change ticket staus form admin.
         *
         * @since 3.5.0
         *
         * @param \WP_REST_Request $request Request object.
         *
         * @return array
         */
        public function change_status($request)
        {
        }
        /**
         * Returns collection parameters
         *
         * @since 3.5.0
         *
         * @return array $collection
         */
        public function get_collection_params()
        {
        }
        /**
         * Batch update for store support listing
         *
         * @since 3.5.0
         *
         * @param $request
         *
         * @since 3.5.0
         *
         * @return array|WP_Error
         */
        public function batch_update($request)
        {
        }
        /**
         * Prepare a single support ticket output for response
         *
         * @since 3.5.0
         *
         * @param $suooprt_tickets
         * @param \WP_REST_Request $request Request object.
         * @param array $additional_fields (optional)
         *
         * @return \WP_REST_Response $response Response data.
         */
        public function prepare_item_for_response($support_tickets, $request, $additional_fields = [])
        {
        }
        /**
         * Prepare links for the request.
         *
         * @since 3.5.0
         *
         * @param \WC_Data $object Object data.
         * @param \WP_REST_Request $request Request object.
         *
         * @return array Links for the given post.
         */
        protected function prepare_links($object, $request)
        {
        }
        /**
         * Format item's collection for response
         *
         * @since 3.5.0
         *
         * @param object $response
         * @param object $request
         * @param int $total_items
         *
         * @return object
         */
        public function format_collection_response($response, $request, $total_items)
        {
        }
        /**
         * Get customers.
         *
         * @since 3.5.0
         *
         * @param \WP_REST_Request $request Request object.
         *
         * @return array
         */
        public function get_customers($request)
        {
        }
        /**
         * Enables or disable email notification for admin.
         *
         * @since 3.6.0
         *
         * @param object $request
         *
         * @return array $response
         */
        public function enable_disable_email_notification($request)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StoreSupport\SettingsApi {
    /**
     * Store support Vendor settings.
     *
     * @since 3.7.13
     */
    class Store
    {
        /**
         * Constructor
         *
         * @since 3.7.13
         */
        public function __construct()
        {
        }
        /**
         * Add support to Support card.
         *
         * @since 3.7.13
         *
         * @param array $support_card Support card data.
         *
         * @return array
         */
        public function add_store_support_to_support_card(array $support_card): array
        {
        }
    }
}
namespace {
    /**
     * New Support Ticket.
     *
     * An email sent to the admin when a new support ticket submit.
     *
     * @class       DokanNewSupportTicketForAdmin
     * @version     3.6.0
     * @package     Dokan/Classes/Emails
     * @extends     WC_Email
     */
    class DokanNewSupportTicketForAdmin extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.6.0
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.6.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Triggers to send the email to admin.
         *
         * @since  3.6.0
         *
         * @param int            $order_id The order ID.
         * @param WC_Order|false $order Order object.
         *
         * @return void
         */
        public function trigger($store_id, $topic_id)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * New Support Ticket.
     *
     * An email sent to the seller when a new support ticket submit.
     *
     * @class       Dokan_New_Support_Ticket
     * @version     3.3.4
     * @package     Dokan/Classes/Emails
     * @extends     WC_Email
     */
    class Dokan_New_Support_Ticket extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.3.4
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.3.4
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @param int            $order_id The order ID.
         * @param WC_Order|false $order Order object.
         */
        public function trigger($store_id, $topic_id)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * Support Ticket Replay Email.
     *
     * An email sent to the admin when vendor or customer replies on a ticket depending on settings.
     *
     * @class       DokanReplyToAdminSupportTicket
     * @version     3.6.0
     * @package     Dokan/Classes/Emails
     * @extends     WC_Email
     */
    class DokanReplyToAdminSupportTicket extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.6.0
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.6.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @param int            $order_id The order ID.
         * @param WC_Order|false $order Order object.
         */
        public function trigger($store_id, $email_data)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * New Support Ticket.
     *
     * An email sent to the seller when a new support ticket submit.
     *
     * @class       Dokan_Reply_To_Store_Support_Ticket
     * @version     3.3.4
     * @package     Dokan/Classes/Emails
     * @extends     WC_Email
     */
    class Dokan_Reply_To_Store_Support_Ticket extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.3.4
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.3.4
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @param int            $order_id The order ID.
         * @param WC_Order|false $order Order object.
         */
        public function trigger($store_id, $email_data)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * New Support Ticket.
     *
     * An email sent to the seller when a new support ticket submit.
     *
     * @class       Dokan_Reply_To_User_Support_Ticket
     * @version     3.3.4
     * @package     Dokan/Classes/Emails
     * @extends     WC_Email
     */
    class Dokan_Reply_To_User_Support_Ticket extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.3.4
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.3.4
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @param int            $order_id The order ID.
         * @param WC_Order|false $order Order object.
         */
        public function trigger($store_id, $email_data)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * StoreSupportHelper class
     * This class has all the static helper methods for store support.
     *
     * @since 3.5.0
     */
    class StoreSupportHelper
    {
        /**
         * Query for all support topics
         *
         * @since 3.5.0
         *
         * @param array $args
         *
         * @return array $query
         */
        public static function dokan_get_all_support_topics($args = [])
        {
        }
        /**
         * Returns total support topics count
         *
         * @since 3.5.0
         *
         * @return int $topics
         */
        public static function dokan_get_total_support_topics_count()
        {
        }
        /**
         * Return all, opened and closed topics count
         *
         * @since 3.5.0
         *
         * @return array $result
         */
        public static function dokan_get_support_topics_status_count()
        {
        }
        /**
         * Returns topic count
         *
         * @since 3.12.5
         *
         * @param string $status      Accepted arguments are any, open, closed
         * @param string $read_status Accepted arguments are '', read, unread
         *
         * @return int
         */
        public static function get_support_topic_count(string $status = 'any', string $read_status = ''): int
        {
        }
        /**
         * Change status of topic from support list action
         *
         * @since 3.5.0
         *
         * @param int $support_ticket_topic_id
         * @param string $status open/closed
         *
         * @return int $support_ticket_topic_id
         */
        public static function dokan_change_topic_status($support_ticket_topic_id, $status = 'open')
        {
        }
        /**
         * Get those customers who created support tickets.
         *
         * @since 3.5.0
         *
         * @param $searched_customer Searched customer name.
         *
         * @return array $results
         */
        public static function dokan_get_support_topic_created_customers($searched_customer = '')
        {
        }
        /**
         * Returns the count of unread support topics.
         *
         * @since 3.6.0
         *
         * @return int $topics_count
         */
        public static function get_unread_support_topic_count()
        {
        }
        // ===============Admin store support rest process/calculation methods================
        /**
         * Returns all support tickets
         *
         * @param array $args
         * @return array $result
         */
        public static function get_all_tickets($args = [])
        {
        }
        /**
         * Returns true if fillterable/current loop vendor id and returnable/search topic vendor id is same
         *
         * @since 3.5.0
         *
         * @param array $filters
         * @param object $topic
         *
         * @return boolean
         */
        public static function filter_topics_by_vendor($filters, $topic)
        {
        }
        /**
         * Returns single topic informaitons.
         *
         * @since 3.5.0
         *
         * @param array $request
         *
         * @return array $result
         */
        public static function get_single_topic($request)
        {
        }
        /**
         * Loads and injects extra data of comments that needed.
         *
         * @since 3.5.0
         *
         * @param array $comments
         * @param int $vendor_id
         *
         * @return array $comments
         */
        public static function load_comments_extra_data($comments, $vendor_id)
        {
        }
        /**
         * Create a new comment replay for a ticket as vendor or admin.
         *
         * @since 3.5.0
         *
         * @param string  $topic_id
         * @param string  $replire_name
         * @param WP_User $replier
         * @param string  $replay
         *
         * @return int|false
         */
        public static function create_comment_replay($topic_id, $replire_name, $replier, $replay)
        {
        }
        /**
         * Check if email notification is enabled for a specific email class.
         *
         * @param string $email_class
         *
         * @return bool
         */
        public static function is_email_notification_enabled($email_class = 'DokanNewSupportTicketForAdmin')
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StoreSupport {
    class Module
    {
        /**
         * Constructor for the Dokan_Store_Support class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @uses register_activation_hook()
         * @uses register_deactivation_hook()
         * @uses is_admin()
         * @uses add_action()
         */
        public function __construct()
        {
        }
        /**
         * Initialize all hooks and filters
         *
         * @since  1.0.0
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Add store support section in Dokan Settings
         *
         * @since 3.2.0
         *
         * @param array $sections
         *
         * @return array
         */
        public function render_store_support_section($sections)
        {
        }
        /**
         * Add store support options on Dokan Settings under General section
         *
         * @since 3.2.0
         *
         * @param array $settings_fields
         *
         * @return array
         */
        public function render_store_support_settings($settings_fields)
        {
        }
        /**
         * Placeholder for activation function
         *
         * Nothing being called here yet.
         */
        public function activate()
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        /**
         * Register Scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue admin scripts
         *
         * Allows plugin assets to be loaded.
         *
         * @uses wp_enqueue_script()
         * @uses wp_localize_script()
         * @uses wp_enqueue_style
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Set per page value
         *
         * @since 1.3.5
         *
         * @param type $val
         */
        public function set_per_page($val)
        {
        }
        /**
         * Register Custom Post type for support
         *
         * @since 1.0
         *
         * @return void
         */
        public function register_dokan_store_support()
        {
        }
        public function register_dokan_support_topic_status()
        {
        }
        /**
         * Register dokan support meta fields
         *
         * @since 3.7.23
         *
         * @return void
         */
        public function register_dokan_support_meta_fields()
        {
        }
        /**
         * Get store support button
         *
         * @since 2.9.7
         *
         * @param int $store_id
         *
         * @return array
         */
        public function get_support_button($store_id)
        {
        }
        /**
         * Prints Get support button on store page
         *
         * @since 1.0
         *
         * @param int store_id
         */
        public function generate_support_button($store_id)
        {
        }
        /**
         * Prints Get support button on above tab
         *
         * @since 3.2.0
         */
        public function generate_support_button_product_page()
        {
        }
        /**
         * Prints Get support button on product page inner tab
         *
         * @since 3.2.0
         *
         * @param obj $author
         * @param obj $store
         */
        public function generate_support_button_product_page_inner_tab($author, $store)
        {
        }
        /**
         * Prints Get support button on order details page for customers
         *
         * @since 3.2.3
         *
         * @param obj $order
         */
        public function generate_support_button_customer_order_page($order)
        {
        }
        /**
         * Ajax handler for all frontend Ajax submits
         *
         * @since 1.0
         *
         * @return void
         */
        public function ajax_handler()
        {
        }
        /**
         * Generate login form
         *
         * @since 1.0
         *
         * @return string Login form Html
         */
        public function login_form()
        {
        }
        /**
         * Generate Support form
         *
         * @since 1.0
         *
         * @return string support form html
         */
        public function get_support_form($seller_id = '')
        {
        }
        /**
         * Handles login data and signs in user
         *
         * @since 1.0
         *
         * @return string success|failed
         */
        public function login_data_submit()
        {
        }
        /**
         * Create post from fronend AJAX data
         *
         * @since 1.0
         *
         * @return string success | failed
         */
        public function support_msg_submit($postdata = [])
        {
        }
        /**
         * Load new support ticket email class
         *
         * @param  array $emails
         *
         * @return array
         */
        public function load_support_ticekt_emails($emails)
        {
        }
        /**
         * Set Proper template directory.
         *
         * @param array $template_array
         *
         * @return array
         */
        public function set_email_template_directory($template_array)
        {
        }
        /**
         * Register Dokan Email actions for WC
         *
         * @since 3.3.4
         *
         * @param array $actions
         *
         * @return $actions
         */
        public function register_email_actions($actions)
        {
        }
        /**
         * Register dokan query vars
         *
         * @since 1.0
         *
         * @param array $vars
         *
         * @return array new $vars
         */
        public function register_support_queryvar($vars)
        {
        }
        /**
         * Add menu on seller dashboard
         *
         * @since 1.0
         *
         * @param array $urls
         *
         * @return array $urls
         */
        public function add_store_support_page($urls)
        {
        }
        /**
         * Get plugin path
         *
         * @since 2.8
         *
         * @return void
         **/
        public function plugin_path()
        {
        }
        /**
         * Load Dokan Store support templates
         *
         * @since 2.8
         *
         * @return void
         **/
        public function load_store_support_templates($template_path, $template, $args)
        {
        }
        /**
         * Register page templates
         *
         * @since 1.0
         *
         * @param array $query_vars
         *
         * @return array $query_vars
         */
        public function load_template_from_plugin($query_vars)
        {
        }
        /**
         * Query for support topics using given arguments
         *
         * @since 1.0
         *
         * @param array $args
         *
         * @return WP_Query $query
         */
        public function get_support_topics($args = array())
        {
        }
        /**
         * Print html of all topics for given arguments
         *
         * @since 1.0
         *
         * @param array $args
         *
         * @return void
         */
        public function print_support_topics($args = array())
        {
        }
        /**
         * Query single topic for given seller id
         *
         * @since 1.0
         *
         * @param int $topic_id
         * @param int $seller_id
         *
         * @return WP_Query $query_dss
         */
        public function get_single_topic($topic_id, $seller_id)
        {
        }
        /**
         * Query single topic for given customer id
         *
         * @since 1.0
         *
         * @param int $topic_id
         * @param int $customer_id
         *
         * @return WP_Query $query_dss
         */
        public function get_single_topic_by_customer($topic_id, $customer_id)
        {
        }
        /**
         * Print Html for single topic with given topic object
         *
         * @since 1.0
         *
         * @param object $topic Custom post type 'dokan_store_support' object
         *
         * @return void
         */
        public function print_single_topic($topic)
        {
        }
        /**
         * Redirect users to same topic after a comment is submitted if it is dokan_store_support post type
         *
         * @since 1.0
         *
         * @param string $location
         * @param object $comment
         *
         * @return string location
         */
        public function redirect_after_comment($location, $comment)
        {
        }
        /**
         * Print support topics on customer my account page
         *
         * @since 1.0
         *
         * @return void
         */
        public function my_account_support_topics()
        {
        }
        /**
         * Prints html of all topics for given customer
         *
         * @since 1.0
         *
         * @param int $customer_id
         *
         * @return void
         */
        public function print_support_topics_by_customer($customer_id)
        {
        }
        /**
         * Query all topics by given customer
         *
         * @since 1.0
         *
         * @param int $customer_id
         *
         * @return WP_Query $topic_query
         */
        public function get_topics_by_customer($customer_id)
        {
        }
        /**
         * Disable edit of comments on comment listing
         *
         * @since 1.0
         *
         * @return string
         */
        public function remove_comment_edit_link($link, $comment_id, $text)
        {
        }
        /**
         * Show pagination on support listing
         *
         * @since 1.0
         *
         * @param array $query_var
         *
         * @return void
         */
        public function topics_pagination($query_var)
        {
        }
        /**
         * Print comments into formatted html, callback for wp_comment_list function
         *
         * @since 1.0
         */
        public function support_comment_format($comment, $args, $depth)
        {
        }
        /**
         * Change status of topic from support list action
         *
         * @since 1.0
         *
         * @return void
         */
        public function change_topic_status()
        {
        }
        /**
         * Change topic status from comment section
         *
         * @param int $comment_id
         * @param obj $comment
         *
         * @return void
         */
        public function change_topic_status_on_comment($comment_id, $comment)
        {
        }
        /**
         * Send email notification on a new reply
         *
         * @param object   $comment
         * @param \WP_Post $ticket
         * @param bool     $to_store
         *
         * @return void
         */
        public function notify_ticket_author($comment, $ticket, $to_store = false)
        {
        }
        /**
         * Support button text input field generator
         *
         * @param int   $current_user
         * @param array $profile_info
         *
         * @return void
         */
        public function add_support_btn_title_input($current_user, $profile_info)
        {
        }
        /**
         * Save support button text on store settings
         *
         * @param int   $user_id
         * @param array $profile_info
         */
        public function save_supoort_btn_title($user_id)
        {
        }
        /**
         * Return counts for all topic status count
         *
         * @since 1.0
         *
         * @global $wpdb
         *
         * @param int $store_id
         *
         * @return object|bool $result
         */
        public function topic_count($store_id)
        {
        }
        /**
         * Return counts for all ticket status count for customer
         *
         * @since 1.0
         *
         * @global $wpdb
         *
         * @param int $customer_id
         *
         * @return object|bool $result
         */
        public function topic_count_by_customer($customer_id)
        {
        }
        /**
         * Generate support topic status list with count
         *
         * @since 1.0
         *
         * @return void
         */
        public function support_topic_status_list($seller = true)
        {
        }
        /**
         * Add Support ticket in My Account Menu
         *
         * @since 1.3.3
         *
         * @param arrat $items
         *
         * @return $items
         */
        public function place_support_menu($items)
        {
        }
        /**
         * Add capabilities
         *
         * @return void
         */
        public function add_capabilities($capabilities)
        {
        }
        /**
         * Add caps labels
         *
         * @since 3.0.0
         *
         * @param string $caps
         *
         * @return array
         */
        public function add_caps_labels($caps)
        {
        }
        /**
         * Register widgets
         *
         * @since 2.8
         *
         * @return void
         */
        public function register_widgets($widgets)
        {
        }
        /**
         * Register store support endpoint on my-account page
         *
         * @since 2.9.17
         *
         * @return void
         */
        public function register_support_tickets_endpoint()
        {
        }
        /**
         * Load support tickets content
         *
         * @since 2.9.17
         *
         * @return void
         */
        public function support_tickets_content()
        {
        }
        /**
         * Load store support rest api class.
         *
         * @since 3.5.0
         *
         * @param array $class_map
         *
         * @return array $class_map
         */
        public function rest_api_class_map($class_map)
        {
        }
        /**
         * Search for support topics customer id and names
         *
         * @since 3.4.2
         *
         * @return AJAX Success/fail
         */
        public function dokan_ajax_search_support_customers()
        {
        }
    }
}
namespace {
    /**
     * Dokan Store Support Widget
     *
     * @since 1.3
     *
     * @package dokan
     */
    class Dokan_Store_Support_Widget extends \WP_Widget
    {
        /**
         * Constructor
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Outputs the HTML for this widget.
         *
         * @param array  An array of standard parameters for widgets in this theme
         * @param array  An array of settings for this widget instance
         *
         * @return void Echoes it's output
         */
        public function widget($args, $instance)
        {
        }
        /**
         * Deals with the settings when they are saved by the admin. Here is
         * where any validation should be dealt with.
         *
         * @param array  An array of new settings as submitted by the admin
         * @param array  An array of the previous settings
         *
         * @return array The validated and (if necessary) amended settings
         */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Displays the form for this widget on the Widgets page of the WP Admin area.
         *
         * @param array  An array of the current settings for this widget
         *
         * @return void Echoes it's output
         */
        public function form($instance)
        {
        }
        /**
         * Prints Get support button on store page
         *
         * @since 1.3
         * @param int store_id
         */
        public function generate_support_button_on_widget($store_id = '')
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Admin {
    // Exit if called directly.
    /**
     * Class to handle admin assets.
     *
     * @since 3.6.1
     */
    class Assets
    {
        /**
         * Classs constructor.
         *
         * @since 3.6.1
         */
        public function __construct()
        {
        }
        /**
         * Registers admin scripts
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function register_scripts()
        {
        }
    }
    // Exit if called directly.
    /**
     * Manager class for Admin.
     *
     * @since 3.6.1
     */
    class Manager
    {
        /**
         * Class constructor
         *
         * @since 3.6.1
         */
        public function __construct()
        {
        }
    }
    /**
     * Seller profile handler class for admin.
     *
     * @since 3.7.18
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Admin
     */
    class SellerProfile
    {
        /**
         * Class constructor.
         *
         * @since 3.7.18
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Registers all necessary hooks.
         *
         * @since 3.7.18
         *
         * @return void
         */
        protected function hooks()
        {
        }
        /**
         * Renders a menu for stripe express status of vendor.
         *
         * @since 3.7.18
         *
         * @param \WP_User $user
         *
         * @return void
         */
        public function render_stripe_express_status($user)
        {
        }
        /**
         * Update vendor profile
         *
         * @since 3.7.18
         *
         * @param int $vendor_id
         *
         * @return void
         */
        public function update_seller($vendor_id)
        {
        }
        /**
         * Process stripe express data for vendor.
         *
         * @since 3.7.18
         *
         * @param array $data
         *
         * @return array
         */
        public function process_stripe_express_data($data)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Support {
    /**
     * API handler class
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Support
     */
    class Api
    {
        /**
         * Retrieves the desired API object.
         *
         * @since 3.6.1
         *
         * @return \Stripe\StripeClient
         */
        protected static function api()
        {
        }
        /**
         * Returns instance of configuration.
         *
         * @since 3.6.1
         *
         * @return Config
         */
        protected static function config()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Admin {
    /**
     * Deletes stripe account
     *
     * @since 3.9.4
     */
    class StripeDeleteAccount extends \WeDevs\DokanPro\Modules\StripeExpress\Support\Api
    {
        /**
         * Initializes and calls all hooks
         *
         * @since 3.9.4
         */
        public function __construct()
        {
        }
        /**
         * Checks is the account has been deleted from stripe server
         *
         * @since 3.9.4
         *
         * @param string $account_id
         *
         * @return void
         */
        public function delete_stripe_account($account_id)
        {
        }
    }
    /**
     * Disconnect stripe account
     *
     * @since 3.11.2
     */
    class StripeDisconnectAccount
    {
        /**
         * Initializes and calls all hooks
         *
         * @since 3.11.2
         */
        public function __construct()
        {
        }
        public function init_hooks()
        {
        }
        /**
         * Start the queue for disconnecting vendors
         *
         * @since 3.11.2
         *
         * @param int $offset The starting point for the queue, example: 0 is user id.
         *
         * @return void
         */
        public static function start_disconnect_queue($offset = 0)
        {
        }
        /**
         * Create individual disconnect queue
         *
         * @since 3.11.2
         *
         * @param int   $offset             The starting point for the queue, example: 0 is user id.
         * @param array $countries          The list of onboarding countries
         * @param bool  $remove_connected   Whether to remove non-US vendors
         *
         * @return void
         */
        public static function disconnect_vendors($offset, $countries, $remove_connected = false)
        {
        }
        /**
         * Disconnect individual vendor from Stripe Express
         *
         * @since 3.11.2
         *
         * @param int $user_id The user ID of the vendor
         *
         * @return void
         */
        public static function disconnect_vendor($user_id, $force = false, $reason = 'restriction')
        {
        }
        /**
         * Disconnect vendor when the store country is changed
         *
         * @since 3.11.2
         *
         * @param int       $meta_id        ID of the metadata entry to update.
         * @param int       $store_id       ID of the object metadata is for.
         * @param string    $meta_key       Metadata key.
         * @param mixed     $_meta_value    Metadata value.
         *
         * @return void
         */
        public static function disconnect_on_country_changed($meta_id, $store_id, $meta_key, $_meta_value)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Api {
    /**
     * Client API handler class
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Api
     */
    class Account extends \WeDevs\DokanPro\Modules\StripeExpress\Support\Api
    {
        /**
         * Retrieves a client.
         *
         * @since 3.6.1
         *
         * @param int|string          $account_id
         * @param array<string,mixed> $args
         *
         * @return \Stripe\Account
         * @throws DokanException
         */
        public static function get($account_id, array $args = [])
        {
        }
        /**
         * Retrieves all connected accounts.
         *
         * @since 3.6.1
         *
         * @param array<string,mixed> $args
         *
         * @return \Stripe\Account[]|false
         */
        public static function all(array $args = [])
        {
        }
        /**
         * Creates an express client.
         *
         * @since 3.6.1
         *
         * @param array<string,mixed> $args
         *
         * @return \Stripe\Account
         * @throws DokanException
         */
        public static function create(array $args = [])
        {
        }
        /**
         * Updates an connected account.
         *
         * @since 3.6.1
         *
         * @param string $account_id
         * @param array  $data
         *
         * @return \Stripe\Account
         * @throws DokanException
         */
        public static function update($account_id, array $data = [])
        {
        }
        /**
         * Creates link for client onboarding.
         *
         * @since 3.6.1
         *
         * @param int|string          $account_id
         * @param array<string,mixed> $args
         *
         * @return \Stripe\AccountLink
         * @throws DokanException
         */
        public static function create_onboarding_link($account_id, array $args = [])
        {
        }
        /**
         * Creates login link for a connnected express account.
         *
         * @since 3.6.1
         *
         * @param string              $account_id
         * @param array<string,mixed> $args
         *
         * @return \Stripe\LoginLink
         * @throws DokanException
         */
        public static function create_login_link($account_id, $args = [])
        {
        }
        /**
         * Retrieve balance data.
         *
         * @since 3.7.8
         *
         * @return \Stripe\Balance|false
         */
        public static function get_balance()
        {
        }
    }
    /**
     * API handler class for charges.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Api
     */
    class Charge extends \WeDevs\DokanPro\Modules\StripeExpress\Support\Api
    {
        /**
         * Retrieves charge data from Stripe.
         *
         * @since 3.7.8
         *
         * @param string $charge_id
         * @param array  $args
         *
         * @return \Stripe\Charge|false
         */
        public static function get($charge_id, $args = [])
        {
        }
    }
    /**
     * Country specifications API handler class
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Api
     */
    class CountrySpec extends \WeDevs\DokanPro\Modules\StripeExpress\Support\Api
    {
        /**
         * Retrieves a client.
         *
         * @since 3.6.1
         *
         * @param string              $id
         * @param array<string,mixed> $args
         *
         * @return \Stripe\CountrySpec
         * @throws DokanException
         */
        public static function get($id, array $args = [])
        {
        }
    }
    /**
     * Coupon API handler class.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Api
     */
    class Coupon extends \WeDevs\DokanPro\Modules\StripeExpress\Support\Api
    {
        /**
         * Retrieves stripe coupon.
         *
         * @since 3.7.8
         *
         * @param string $coupon_id
         * @param array  $args
         *
         * @return \Stripe\Coupon|false
         */
        public static function get($coupon_id, $args = [])
        {
        }
        /**
         * Creates a Stripe coupon.
         *
         * @since 3.7.8
         *
         * @param array $args
         *
         * @return \Stripe\Coupon
         * @throws DokanException
         */
        public static function create($args)
        {
        }
    }
    /**
     * Customer API handler class.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Api
     */
    class Customer extends \WeDevs\DokanPro\Modules\StripeExpress\Support\Api
    {
        /**
         * Retrieves a Customer object.
         *
         * @since 3.11.4
         *
         * @param string $id The ID of the customer to retrieve.
         *
         * @throws DokanException if the request fails
         *
         * @return \Stripe\Customer
         */
        public static function retrieve($id)
        {
        }
        /**
         * Creates stripe customer.
         *
         * @since 3.6.1
         *
         * @param array $data
         *
         * @return \Stripe\Customer The newly created customer object.
         * @throws DokanException
         */
        public static function create($data)
        {
        }
        /**
         * Updates a Stripe customer.
         *
         * @since 3.6.1
         *
         * @param int|string $id
         * @param array      $data
         *
         * @return \Stripe\Customer The updated customer object.
         * @throws DokanException
         */
        public static function update($id, $data)
        {
        }
    }
    /**
     * API handler class for paymrnt intent
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Api
     */
    class PaymentIntent extends \WeDevs\DokanPro\Modules\StripeExpress\Support\Api
    {
        /**
         * Creates a payment intent.
         *
         * @since 3.6.1
         *
         * @param array $args
         *
         * @return \Stripe\PaymentIntent
         * @throws DokanException
         */
        public static function create($args)
        {
        }
        /**
         * Updates a payment intent.
         *
         * @since 3.6.1
         *
         * @param string $intent_id
         * @param array $data
         *
         * @return \Stripe\PaymentIntent
         * @throws DokanException
         */
        public static function update($intent_id, $data)
        {
        }
        /**
         * Retrieves a Payment intent.
         *
         * @since 3.6.1
         *
         * @param string $intent_id
         * @param array  $args      (optional)
         *
         * @return \Stripe\PaymentIntent|false
         */
        public static function get($intent_id, $args = [])
        {
        }
    }
    /**
     * API handler class for paymrnt intent
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Api
     */
    class PaymentMethod extends \WeDevs\DokanPro\Modules\StripeExpress\Support\Api
    {
        /**
         * Creates a payment method.
         *
         * @since 3.6.1
         *
         * @param array $args
         *
         * @return \Stripe\PaymentMethod
         * @throws DokanException
         */
        public static function create($args)
        {
        }
        /**
         * Updates a setup intent.
         *
         * @since 3.6.1
         *
         * @param string $method_id
         * @param array $data
         *
         * @return \Stripe\PaymentMethod
         * @throws DokanException
         */
        public static function update($method_id, $data)
        {
        }
        /**
         * Retrieves a payment method.
         *
         * @since 3.6.1
         * @since 3.7.8 Added additional `$args` parameter.
         *
         * @param string $method_id
         * @param array  $args      (Optional)
         *
         * @return \Stripe\PaymentMethod|false
         */
        public static function get($method_id, $args = [])
        {
        }
        /**
         * Retrieves all paymemnt methods of a customer.
         *
         * @since 3.6.1
         *
         * @param string $customer_id
         * @param array $args
         *
         * @return \Stripe\PaymentMethod[]
         */
        public static function get_by_customer($customer_id, $args)
        {
        }
        /**
         * Attaches a payment method to a customer.
         *
         * @since 3.6.1
         *
         * @param string $payment_method_id
         * @param string $customer_id
         *
         * @return \Stripe\PaymentMethod
         * @throws DokanException
         */
        public static function attach($payment_method_id, $customer_id)
        {
        }
        /**
         * Detaches a payment method to a customer.
         *
         * @since 3.6.1
         *
         * @param string $payment_method_id
         *
         * @return \Stripe\PaymentMethod
         * @throws DokanException
         */
        public static function detach($payment_method_id)
        {
        }
    }
    /**
     * Product API handler class
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Api
     */
    class Product extends \WeDevs\DokanPro\Modules\StripeExpress\Support\Api
    {
        /**
         * Retrieves a client.
         *
         * @since 3.7.8
         *
         * @param string $product_id
         * @param array  $args
         *
         * @return false|\Stripe\Product
         */
        public static function get($product_id, $args = [])
        {
        }
        /**
         * Creates an express client.
         *
         * @since 3.7.8
         *
         * @param array $args
         *
         * @return \Stripe\Product
         * @throws DokanException
         */
        public static function create($args = [])
        {
        }
        /**
         * Updates an connected account.
         *
         * @since 3.7.8
         *
         * @param string $account_id
         * @param array  $data
         *
         * @return \Stripe\Product
         * @throws DokanException
         */
        public static function update($account_id, array $data = [])
        {
        }
    }
    /**
     * Refund API handler class
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Api
     */
    class Refund extends \WeDevs\DokanPro\Modules\StripeExpress\Support\Api
    {
        /**
         * Refund reasons that are suggested by Stripe.
         *
         * @since 3.6.1
         */
        const REASON_DUPLICATE = 'duplicate';
        const REASON_FRAUD = 'fraudulent';
        const REASON_CUSTOMER_REQUEST = 'requested_by_customer';
        /**
         * Retrieves a refund data.
         *
         * @since 3.6.1
         *
         * @param string $refund_id
         * @param array  $args
         *
         * @return \Stripe\Refund|false
         */
        public static function get($refund_id, $args = [])
        {
        }
        /**
         * Creates a refund.
         *
         * @since 3.6.1
         *
         * @param array $args
         *
         * @return \Stripe\Refund
         * @throws DokanException
         */
        public static function create($args = [])
        {
        }
    }
    /**
     * API handler class for setup intent
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Api
     */
    class SetupIntent extends \WeDevs\DokanPro\Modules\StripeExpress\Support\Api
    {
        /**
         * Creates a setup intent.
         *
         * @since 3.6.1
         *
         * @param array $args The data to create the setup intent with.
         *
         * @return \Stripe\SetupIntent
         * @throws DokanException
         */
        public static function create($args)
        {
        }
        /**
         * Updates a setup intent.
         *
         * @since 3.6.1
         *
         * @param string $intent_id The ID of the setup intent to update.
         * @param array $data The data to update the setup intent with.
         *
         * @return \Stripe\SetupIntent
         * @throws DokanException
         */
        public static function update($intent_id, $data)
        {
        }
        /**
         * Retrieves a Setup intent.
         *
         * @since 3.6.1
         *
         * @param string $intent_id The ID of the setup intent to retrieve.
         * @param array  $args     Optional arguments to pass to the API request.
         *
         * @return \Stripe\SetupIntent|false
         */
        public static function get($intent_id, $args = array())
        {
        }
    }
    /**
     * Subscription API handler class
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Api
     */
    class Subscription extends \WeDevs\DokanPro\Modules\StripeExpress\Support\Api
    {
        /**
         * Retrieves a subscription.
         *
         * @since 3.7.8
         *
         * @param string $subscription_id The subscription ID.
         * @param array  $args            (Optional)
         *
         * @return \Stripe\Subscription
         * @throws DokanException
         */
        public static function get($subscription_id, $args = [])
        {
        }
        /**
         * Creates a subscription.
         *
         * @since 3.7.8
         *
         * @param array $data
         *
         * @return \Stripe\Subscription
         * @throws DokanException
         */
        public static function create($data)
        {
        }
        /**
         * Creates a subscription.
         *
         * @since 3.7.8
         *
         * @param string $subscription_id
         * @param array  $data
         *
         * @return \Stripe\Subscription
         * @throws DokanException
         */
        public static function update($subscription_id, $data)
        {
        }
    }
    /**
     * API handler class for balance transaction
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Api
     */
    class Transaction extends \WeDevs\DokanPro\Modules\StripeExpress\Support\Api
    {
        /**
         * Retrieves a balance transaction.
         *
         * @since 3.6.1
         *
         * @param string $id
         *
         * @return \Stripe\BalanceTransaction|false
         */
        public static function get($id)
        {
        }
    }
    /**
     * Transfer API handler class
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Api
     */
    class Transfer extends \WeDevs\DokanPro\Modules\StripeExpress\Support\Api
    {
        /**
         * Retrieves a transfer data.
         *
         * @since 3.6.1
         *
         * @param int|string $transfer_id
         * @param array      $args
         *
         * @return \Stripe\Transfer|false
         */
        public static function get($transfer_id, $args = [])
        {
        }
        /**
         * Creates a transfer.
         *
         * @since 3.6.1
         *
         * @param array $args
         *
         * @return \Stripe\Transfer
         * @throws DokanException
         */
        public static function create($args = [])
        {
        }
        /**
         * Reverses a transfer.
         *
         * @since 3.6.1
         *
         * @param string $transfer_id
         * @param array  $args
         *
         * @return \Stripe\Transfer
         * @throws DokanException
         */
        public static function reverse($transfer_id, $args)
        {
        }
    }
    /**
     * Webhook Endpoint API handler class
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Api
     */
    class WebhookEndpoint extends \WeDevs\DokanPro\Modules\StripeExpress\Support\Api
    {
        /**
         * Retrieves a webhook endpoint.
         *
         * @since 3.6.1
         *
         * @param string $webhook_id
         *
         * @return \Stripe\WebhookEndpoint|false
         */
        public static function get($webhook_id)
        {
        }
        /**
         * Lists all webhook endpoints.
         *
         * @since 3.6.1
         *
         * @param array $args (Optional)
         *
         * @return \Stripe\WebhookEndpoint[]|false
         */
        public static function all($args = [])
        {
        }
        /**
         * Creates webhook endpoint.
         *
         * @since 3.6.1
         *
         * @param array $args (Optional)
         *
         * @return \Stripe\WebhookEndpoint
         * @throws DokanException
         */
        public static function create($args = [])
        {
        }
        /**
         * Updates a webhook endpoint.
         *
         * @since 3.6.1
         *
         * @param string $webhook_id
         * @param array  $args       (Optional)
         *
         * @return \Stripe\WebhookEndpoint
         * @throws DokanException
         */
        public static function update($webhook_id, $args = [])
        {
        }
        /**
         * Deletes a webhook endpoint.
         *
         * @since 3.6.1
         *
         * @param string $webhook_id
         *
         * @return \Stripe\WebhookEndpoint
         * @throws DokanException
         */
        public static function delete($webhook_id)
        {
        }
        /**
         * Retrieves a webhook event object
         *
         * @since 3.6.1
         *
         * @param string $event_id
         * @param array  $args     (Optional)
         *
         * @return \Stripe\Event|false
         */
        public static function get_event($event_id, $args = [])
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Controllers {
    /**
     * Cart controller class.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Controllers
     */
    class Cart
    {
        /**
         * Class constructor.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Registers all necessary hooks.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Validates if a product is eligible to be added to cart.
         *
         * If Stripe express is only payment gateway available
         * and vendor is not connected with Stripe,
         * restrict adding product to cart for that vendor.
         *
         * @since 3.6.1
         *
         * @param boolean $passed
         * @param int     $product_id
         *
         * @return boolean
         */
        public function validate_add_to_cart($passed, $product_id)
        {
        }
    }
    /**
     * Ajax controller class for checkout.
     *
     * Handles in-checkout AJAX calls, related to Payment Intents.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Controllers
     */
    class Checkout
    {
        /**
         * Holds an instance of the gateway class.
         *
         * @since 3.6.1
         *
         * @var \WeDevs\DokanPro\Modules\StripeExpress\PaymentGateways\Stripe
         */
        protected $gateway;
        /**
         * Class constructor.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Returns an instantiated gateway.
         *
         * @since 3.6.1
         *
         * @return \WeDevs\DokanPro\Modules\StripeExpress\PaymentGateways\Stripe
         */
        protected function gateway()
        {
        }
        /**
         * Handle AJAX requests for creating a payment intent for Stripe.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function create_payment_intent()
        {
        }
        /**
         * Handle AJAX request for updating a payment intent for Stripe.
         *
         * @since 3.6.1
         *
         * @return mixed
         */
        public function update_payment_intent()
        {
        }
        /**
         * Verifies the payment intent.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function verify_intent()
        {
        }
        /**
         * Handle AJAX requests for creating a setup intent without confirmation for Stripe.
         *
         * @since 3.6.1
         *
         * @return mixed
         */
        public function init_setup_intent()
        {
        }
        /**
         * Handle AJAX request after authenticating payment at checkout.
         *
         * This function is used to update the order status after the user has
         * been asked to authenticate their payment.
         *
         * This function is used for both:
         * - regular checkout
         * - Pay for Order page (in theory).
         *
         * @since 3.6.1
         *
         * @return mixed
         * @throws Exception
         */
        public function update_order_status()
        {
        }
        /**
         * Handle AJAX request if error occurs while confirming intent.
         * We will log the error and update the order.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function update_failed_order(): void
        {
        }
        /**
         * Creates initial subscription.
         *
         * @since 3.7.8
         *
         * @return mixed
         */
        public function create_subscription()
        {
        }
        /**
         * Sets subscription data if needed.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function maybe_set_subscription_data()
        {
        }
        /**
         * Filters available payment gateways as necessary.
         *
         * In this case, we are disabling Stripe Connect from
         * checkout page when Stripe Express is available for use.
         *
         * @since 3.7.8
         *
         * @param array $available_gateways
         *
         * @return array
         */
        public function filter_available_payment_gateways($available_gateways)
        {
        }
    }
    /**
     * Class for managing Stripe gateway
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Controllers
     */
    class Gateway
    {
        /**
         * Class constructor
         *
         * @since 3.6.1
         */
        public function __construct()
        {
        }
        /**
         * Registers necessary hooks
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Registers payment gateway
         *
         * @since 3.6.1
         *
         * @param array $gateways
         *
         * @return array
         */
        public function register_gateway($gateways)
        {
        }
    }
    /**
     * Class for controlling payment intents.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Controllers
     */
    class Order
    {
        /**
         * Constructor for Intent controller.
         *
         * @since 3.6.1
         */
        public function __construct()
        {
        }
        /**
         * Registers all hooks.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Processes order redirect if necessary.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function maybe_process_order_redirect()
        {
        }
        /**
         * Processes order redirect after payment.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param string   $intent_id
         * @param boolean  $save_payment_method
         *
         * @return void
         */
        public function process_order_redirect($order, $intent_id, $save_payment_method)
        {
        }
        /**
         * Handles payment disbursement on order status changed.
         *
         * @since 3.6.1
         *
         * @param int    $order_id
         * @param string $old_status
         * @param string $new_status
         *
         * @return void
         */
        public function handle_payment_disbursement($order_id, $old_status, $new_status)
        {
        }
        /**
         * Disburses delayed payment.
         *
         * Adds order to queue for payments
         * that needs to be disbursed.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function disburse_delayed_payment()
        {
        }
        /**
         * Adds metadata param for
         * orders with delayed disbursements.
         *
         * @param $query
         * @param $query_vars
         *
         * @since 3.6.1
         *
         * @return mixed
         */
        public function add_order_query_vars_for_delayed_disbursement($query, $query_vars)
        {
        }
        /**
         * Retrieves order processing fees for stripe.
         *
         * @since 3.6.1
         *
         * @param float     $processing_fee
         * @param \WC_Order $order
         *
         * @return float
         */
        public function get_order_processing_fee($processing_fee, $order)
        {
        }
        /**
         * Calculates gateway fee for a suborder.
         *
         * @since 3.6.1
         *
         * @param float     $gateway_fee
         * @param \WC_Order $suborder
         * @param \WC_Order $order
         *
         * @return float|int
         */
        public function get_processing_gateway_fee($gateway_fee, $suborder, $order)
        {
        }
        /**
         * Retrieves net earning of a vendor.
         *
         * @since 3.6.1
         *
         * @param float     $net_amount
         * @param float     $vendor_earning
         * @param float     $gateway_fee
         * @param \WC_Order $suborder
         * @param \WC_Order $order
         *
         * @return float|string
         */
        public function get_vendor_net_amount($net_amount, $vendor_earning, $gateway_fee, $suborder, $order)
        {
        }
        /**
         * Logs gateway fee if seller pays processing fees.
         *
         * @since 3.10.3
         *
         * @param bool $do_log Log in Order note?
         * @param WC_Order $order Order.
         *
         * @return bool
         */
        public function log_gateway_fee($do_log, $order)
        {
        }
    }
    // Exit if called directly
    /**
     * Ajax controller class for Refunds.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Controllers
     */
    class Refund
    {
        /**
         * Class constructor.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Registers necessary hooks.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Processes dokan refund request.
         *
         * @since 3.6.1
         *
         * @param object $refund
         *
         * @return void
         */
        public function process_refund($refund)
        {
        }
        /**
         * Sets vendor refund amount as Stripe refund amount.
         *
         * @since 3.6.1
         *
         * @param float   $amount
         * @param array  $args
         * @param object $refund
         *
         * @return float
         */
        public function process_vendor_refund_amount($amount, $args, $refund)
        {
        }
        /**
         * Withdraw entry for automatic refund as debit.
         *
         * @since 3.6.1
         *
         * @param object $refund
         * @param array  $args
         * @param float   $amount
         *
         * @return void
         */
        public function process_vendor_withdraw_entry($refund, $args, $amount)
        {
        }
        /**
         * Excludes Stripe Express gateway from auto processing API refund request.
         *
         * @since 3.6.1
         *
         * @param array $gateways
         *
         * @return array
         */
        public function exclude_from_auto_process_api_refund($gateways)
        {
        }
    }
    /**
     * Handles and process WC payment tokens API.
     * Seen in checkout page and my account->add payment method page.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Controllers
     */
    class Token
    {
        /**
         * Class constructor.
         *
         * @since 3.6.1
         */
        public function __construct()
        {
        }
        /**
         * Registers all necessary hooks.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Normalizes the SEPA IBAN label on My Account page.
         *
         * @since 3.6.1
         *
         * @param string $label
         *
         * @return string
         */
        public function normalize_sepa_label($label)
        {
        }
        /**
         * Gets saved tokens from Stripe, if they don't already exist in WooCommerce.
         *
         * @since 3.6.1
         *
         * @param \WC_Payment_Token[]  $tokens     Array of tokens
         * @param string               $user_id    WC User ID
         * @param string               $gateway_id WC Gateway ID
         *
         * @return array
         */
        public function get_customer_payment_tokens($tokens, $user_id, $gateway_id)
        {
        }
        /**
         * Controls the output for SEPA on the my account page.
         *
         * @since 3.6.1
         *
         * @param  array                $item          Individual list item from woocommerce_saved_payment_methods_list
         * @param  \WC_Payment_Token_CC $payment_token The payment token associated with this method entry
         *
         * @return array                           Filtered item
         */
        public function get_account_saved_payment_methods_list_item_sepa($item, $payment_token)
        {
        }
        /**
         * Delete token from Stripe.
         *
         * @since 3.6.1
         *
         * @param string            $token_id
         * @param \WC_Payment_Token $token
         *
         * @return void
         */
        public function payment_token_deleted($token_id, $token)
        {
        }
        /**
         * Set as default in Stripe.
         *
         * @since 3.6.1
         *
         * @param string $token_id
         *
         * @return void
         */
        public function payment_token_set_default($token_id)
        {
        }
    }
    /**
     * Class to handle Webhook operations.
     *
     * @since 3.6.1
     *
     * @package \WeDevs\DokanPro\Modules\StripeExpress\Controllers
     */
    class Webhook
    {
        /**
         * Webhook secret key.
         *
         * @since 3.6.1
         *
         * @var string
         */
        protected $webhook_secret;
        /**
         * Class constructor.
         *
         * @since 3.6.1
         */
        public function __construct()
        {
        }
        /**
         * Registers all hooks.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Handle events which are comming from stripe
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function handle_events()
        {
        }
        /**
         * Register webhook and remove old webhook endpoints from stripe
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function register()
        {
        }
        /**
         * Deregisters all webhooks.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function deregister()
        {
        }
        /**
         * Validates the request to ensure authenticity.
         *
         * @since 3.6.1
         *
         * @param array $request_headers
         * @param array $request_body
         *
         * @return void
         */
        public function validate_request($request_headers, $request_body)
        {
        }
        /**
         * Gets the incoming request headers. Some servers are not using
         * Apache and "getallheaders()" will not work so we may need to
         * build our own headers.
         *
         * @since 3.6.1
         *
         * @return array
         */
        public function get_request_headers()
        {
        }
        /**
         * Verify the incoming webhook notification to make sure it is legit.
         *
         * @since 3.6.1
         *
         * @param array $request_headers The request headers from Stripe.
         * @param array $request_body    The request body from Stripe.
         *
         * @return string The validation result
         */
        public function verify_request_status($request_headers, $request_body)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts {
    /**
     * Authentication email handler class.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts
     */
    abstract class AuthenticationEmail extends \WC_Email
    {
        /**
         * An instance of the email, which would normally be sent after a failed payment.
         *
         * @since 3.7.8
         *
         * @var WC_Email
         */
        public $original_email;
        /**
         * Data to pass to the template.
         *
         * @since 3.7.8
         *
         * @var array
         */
        public $template_data = [];
        /**
         * Type of the object.
         *
         * @since 3.7.8
         *
         * @var string
         */
        public $object_type = 'order';
        /**
         * The object to maintain all data.
         *
         * @since 3.7.8
         *
         * @var object
         */
        public $object;
        /**
         * Generates the HTML for the email while keeping the `template_base` in mind.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Generates the plain text for the email while keeping the `template_base` in mind.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Generates the URL, which will be used to authenticate the payment.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order The order whose payment needs authentication.
         *
         * @return string
         */
        public function get_authorization_url($order)
        {
        }
        /**
         * Uses specific fields from `WC_Email_Customer_Invoice` for this email.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
        /**
         * Triggers the email.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function send_email()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Emails {
    /**
     * Invoice email handler class.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Emails
     */
    class InvoiceAuthentication extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\AuthenticationEmail
    {
        /**
         * Class constructor.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Retrieves default email subject.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Retrieves default email heading.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Generates the URL, which will be used to authenticate the payment.
         *
         * @since 3.7.8
         *
         * @param object $invoice_data
         *
         * @return string
         */
        public function get_authorization_url($invoice_data)
        {
        }
        /**
         * Triggers the email.
         *
         * @since 3.7.8
         *
         * @param \Stripe\Invoice $invoice
         * @param string          $vendor_id
         *
         * @return void
         */
        public function trigger($invoice, $vendor_id)
        {
        }
    }
    /**
     * Subscription failed renewal authentication handler class.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Emails
     */
    class RenewalAuthentication extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\AuthenticationEmail
    {
        /**
         * Class constructor.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Returns the default subject of the email (modifyable in settings).
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Returns the default heading of the email (modifyable in settings).
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Triggers the email while also disconnecting the original Subscriptions email.
         *
         * @since 3.7.8
         *
         * @param \WC_Order              $order
         * @param \Stripe\PaymentIntent $intent (Optional)
         *
         * @return void
         */
        public function trigger($order, $intent = null)
        {
        }
        /**
         * Prevent all customer-facing retry notifications from being sent after this email.
         *
         * @since 3.7.8
         *
         * @param array $rule_array   The raw details about the retry rule.
         * @param int   $retry_number The number of the retry.
         * @param int   $order_id     The ID of the order that needs payment.
         *
         * @return array
         */
        public function prevent_retry_notification_email($rule_array, $retry_number, $order_id)
        {
        }
        /**
         * Send store owner a different email when the retry is related to an authentication required error.
         *
         * @since 3.7.8
         *
         * @param array $rule_array   The raw details about the retry rule.
         * @param int   $retry_number The number of the retry.
         * @param int   $order_id     The ID of the order that needs payment.
         *
         * @return array
         */
        public function set_store_owner_custom_email($rule_array, $retry_number, $order_id)
        {
        }
    }
    /**
     * Subscription failed renewal handler class.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Emails
     */
    class RenewalAuthenticationRetry extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\AuthenticationEmail
    {
        /**
         * Class constructor.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Retrieves the default email subject.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Retrieves the default email heading.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Triggers the email.
         *
         * @since 3.7.8
         *
         * @param int      $order_id
         * @param \WC_Order $order    (Optional)
         *
         * @return void
         */
        public function trigger($order_id, $order = null)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Frontend {
    // Exit if called directly
    /**
     * Class for handling frontend assets
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Frontend
     */
    class Assets
    {
        /**
         * Class constructor
         *
         * @since 3.6.1
         */
        public function __construct()
        {
        }
        /**
         * Registers necessary scripts
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function register_scripts()
        {
        }
    }
    // Exit if called directly
    /**
     * Class for managing frontend hooks
     *
     * @since 3.7.25
     */
    class Hooks
    {
        /**
         * Class constructor
         *
         * @since 3.7.25
         */
        public function __construct()
        {
        }
        /**
         * Redirects user to stripe onboarding page
         *
         * @since 3.7.25
         *
         * @return void
         */
        public function maybe_redirect_user()
        {
        }
    }
    /**
     * Class for managing frontend
     *
     * @since   3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Frontend
     */
    class Manager
    {
        /**
         * Class constructor.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function __construct()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits {
    /**
     * Trait to manage payment utilities.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits
     */
    trait PaymentUtils
    {
        /**
         * Validates that the order meets the minimum order amount
         * set by Stripe.
         *
         * @since 3.6.1
         *
         * @param \WC_Order $order
         *
         * @return void
         * @throws DokanException
         */
        public function validate_minimum_order_amount($order)
        {
        }
        /**
         * Retrieves minimum amount for an order based on the currency.
         *
         * @since 3.6.1
         *
         * @param string $currency
         *
         * @return float
         */
        public function get_minimum_amount($currency = '')
        {
        }
        /**
         * Checks if request is the original to prevent double processing
         * on WC side. The original-request header and request-id header
         * needs to be the same to mean its the original request.
         *
         * @since 3.6.1
         *
         * @param array $headers
         *
         * @return boolean
         */
        public function is_original_request($headers)
        {
        }
        /**
         * Adds a token to current user from a setup intent id.
         *
         * @since 3.7.8
         *
         * @param string $setup_intent_id ID of the setup intent.
         * @param int    $user_id         User to add token to.
         *
         * @return \WC_Payment_Token|false
         */
        public function create_token_from_setup_intent($setup_intent_id, $user_id)
        {
        }
        /**
         * Gets payment method settings to pass to client scripts.
         *
         * @since 3.7.8
         *
         * @return array<string,bool>
         */
        public function get_enabled_payment_method_config()
        {
        }
        /**
         * Retries the payment process once an error occured.
         *
         * @since 3.7.8
         *
         * @param \Stripe\PaymentIntent $intent            The Payment Intent response from the Stripe API.
         * @param \WC_Order              $order             An order that is being paid for.
         * @param bool                  $retry             A flag that indicates whether another retry should be attempted.
         * @param bool                  $force_save_source Force save the payment source.
         * @param mixed                 $previous_error    Any error message from previous request.
         * @param bool                  $use_order_source  Whether to use the source, which should already be attached to the order.
         *
         * @return array|void
         * @throws DokanException If the payment is not accepted.
         */
        public function retry_after_error($intent, $order, $retry, $force_save_source = false, $previous_error = false, $use_order_source = false)
        {
        }
        /**
         * Renders gateway description if available.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function maybe_show_description()
        {
        }
    }
    /**
     * Trait for subscription utility functions.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits
     */
    trait SubscriptionUtils
    {
        /**
         * Processes payment for subscriptions.
         *
         * @since 3.7.8
         *
         * @param float    $amount
         * @param WC_Order $renewal_order
         * @param boolean  $retry
         * @param object   $previous_error
         *
         * @return void
         */
        public function process_subscription_payment($amount, $renewal_order, $retry = true, $previous_error = false)
        {
        }
        /**
         * Processes subscription payments.
         *
         * @since 3.7.8
         *
         * @param int     $order_id ID of the order being processed.
         * @param boolean $retry    (Optional) Whether this is a retry attempt.
         *
         * @return array
         */
        public function process_subscription($order_id, $retry = true)
        {
        }
        /**
         * Processes subscription that is being created using a saved payment method.
         *
         * @since 3.7.8
         *
         * @param int     $order_id        ID of the order being processed.
         * @param string  $subscription_id The Stripe subscription ID.
         * @param boolean $can_retry       (Optional) Indicates if the order can be retried if failed.
         *
         * @return array
         */
        public function process_subscription_with_saved_payment_method($order_id, $subscription_id, $can_retry = true)
        {
        }
        /**
         * Process the payment method change for subscriptions.
         *
         * @since 3.7.8
         *
         * @param int $order_id
         *
         * @return array|null
         */
        public function change_subscription_payment_method($order_id)
        {
        }
        /**
         * Hijacks `wp_redirect` in order to generate a JS-friendly object with the URL.
         *
         * @since 3.7.8
         *
         * @param string $url The URL that Subscriptions attempts a redirect to.
         *
         * @return void
         */
        public function redirect_after_early_renewal($url)
        {
        }
        /**
         * Retrieves card statuses to update subscription payment methods.
         *
         * @since 3.7.8
         *
         * @return string[]
         */
        public function get_payment_method_card_statuses()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts {
    /**
     * Base class for Stripe payment gateway.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts
     */
    abstract class PaymentGateway extends \WC_Payment_Gateway_CC
    {
        use \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits\PaymentUtils;
        use \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits\SubscriptionUtils;
        /**
         * The delay between retries.
         *
         * @since 3.6.1
         *
         * @var int
         */
        protected $retry_interval = 1;
        /**
         * Checks whether the gateway is enabled.
         *
         * @since 3.6.1
         *
         * @return bool The result.
         */
        public function is_enabled()
        {
        }
        /**
         * Disables gateway.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function disable()
        {
        }
        /**
         * Enables gateway.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function enable()
        {
        }
        /**
         * Admin options in WC payments settings
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function admin_options()
        {
        }
        /**
         * Checks if the gateways is available for use.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function is_available()
        {
        }
        /**
         * Process the payment.
         *
         * @since 3.6.2
         *
         * @param int    $order_id Reference.
         * @param bool   $retry Should we retry on fail.
         * @param bool   $force_save_source Force save the payment source.
         * @param string $previous_error Any error message from previous request.
         * @param bool   $use_order_source Whether to use the source, which should already be attached to the order.
         *
         * @throws Exception If payment will not be accepted.
         * @return array|void
         */
        public function process_payment($order_id, $retry = true, $force_save_source = false, $previous_error = false, $use_order_source = false)
        {
        }
        /**
         * Displays the save to account checkbox.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function save_payment_method_checkbox($force_checked = false)
        {
        }
        /**
         * Attached to `woocommerce_payment_successful_result` with a late priority,
         * this method will combine the "naturally" generated redirect URL from
         * WooCommerce and a payment/setup intent secret into a hash, which contains both
         * the secret, and a proper URL, which will confirm whether the intent succeeded.
         *
         * @since 3.6.1
         *
         * @param array $result   The result from `process_payment`.
         * @param int   $order_id The ID of the order which is being paid for.
         *
         * @return array
         */
        public function modify_successful_payment_result($result, $order_id)
        {
        }
        /**
         * Handles payment complete process of free orders.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param object   $prepared_source
         * @param boolean  $force_save_source
         *
         * @return array
         */
        public function complete_free_order($order, $prepared_source, $force_save_source)
        {
        }
        /**
         * Includes the template for Stripe element form.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function element_form()
        {
        }
        /**
         * Retrieves description for test mode.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public function testmode_description()
        {
        }
        /**
         * Checks if save payment request requested.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function save_payment_method_requested()
        {
        }
        /**
         * Checks if customer has saved payment methods.
         *
         * @since 3.7.8
         *
         * @param int $customer_id
         *
         * @return bool
         */
        public static function customer_has_saved_methods($customer_id)
        {
        }
        /**
         * Builds the return URL from redirects.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order (optional)
         * @param int      $id    Stripe session id.
         *
         * @return string
         */
        public function get_stripe_return_url($order = null, $id = null)
        {
        }
        /**
         * Customer param wrong? The user may have been deleted on stripe's end. Remove customer_id. Can be retried without.
         *
         * @since 3.6.1
         *
         * @param object   $error The error that was returned from Stripe's API.
         * @param WC_Order $order The order those payment is being processed.
         *
         * @return bool    A flag that indicates that the customer does not exist and should be removed.
         */
        public function maybe_remove_non_existent_customer($error, $order)
        {
        }
        /**
         * Check to see if we need to update the idempotency
         * key to be different from previous charge request.
         *
         * @since 3.7.8
         *
         * @param object $source_object
         * @param object $error
         *
         * @return bool
         */
        public function idempotency_key_update_needed($source_object, $error)
        {
        }
        /**
         * Gets a localized message for an error from a response, adds it as a note to the order, and throws it.
         *
         * @since 3.6.1
         *
         * @param  object $response  The response from the Stripe API.
         * @param  WC_Order $order     The order to add a note to.
         *
         * @return void
         * @throws DokanException An exception with the right message.
         */
        public function throw_error_message($response, $order)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\PaymentGateways {
    /**
     * Stripe Apple Pay Registration Class.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\PaymentGateways
     */
    class ApplePay extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\PaymentGateway
    {
        /**
         * Apple domain association file name.
         *
         * @since 3.6.1
         *
         * @var string
         */
        const DOMAIN_ASSOCIATION_FILE_NAME = 'apple-developer-merchantid-domain-association';
        /**
         * Apple domain association file directory.
         *
         * @since 3.6.1
         *
         * @var string
         */
        const DOMAIN_ASSOCIATION_FILE_DIR = '.well-known';
        /**
         * Stripe gateway settings.
         *
         * @since 3.6.1
         *
         * @var array
         */
        public $stripe_settings;
        /**
         * Apple Pay Domain Set.
         *
         * @since 3.6.1
         *
         * @var bool
         */
        public $apple_pay_domain_set;
        /**
         * Stores Apple Pay domain verification issues.
         *
         * @since 3.6.1
         *
         * @var string
         */
        public $apple_pay_verify_notice;
        /**
         * Class constructor.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Registers necessary hooks.
         *
         * @since 3.6.1
         *
         * @return void
         */
        protected function hooks()
        {
        }
        /**
         * Retrieves main settings value.
         *
         * @since 3.6.1
         *
         * @param string $key
         * @param mixed  $empty_value
         *
         * @return mixed
         */
        public function get_option($key, $empty_value = null)
        {
        }
        /**
         * Whether the gateway and Payment Request Button (prerequisites for Apple Pay) are enabled.
         *
         * @since 3.6.1
         *
         * @return string Whether Apple Pay required settings are enabled.
         */
        public function is_enabled()
        {
        }
        /**
         * Trigger Apple Pay registration upon domain name change.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function verify_domain_on_domain_name_change()
        {
        }
        /**
         * Updates the Apple Pay domain association file.
         * Reports failure only if file isn't already being served properly.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function update_domain_association_file()
        {
        }
        /**
         * Adds a rewrite rule for serving the domain association file from the proper location.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function add_domain_association_rewrite_rule()
        {
        }
        /**
         * Add to the list of publicly allowed query variables.
         *
         * @since 3.6.1
         *
         * @param  array $query_vars - provided public query vars.
         *
         * @return array Updated public query vars.
         */
        public function whitelist_domain_association_query_param($query_vars)
        {
        }
        /**
         * Serve domain association file when proper query param is provided.
         *
         * @since 3.6.1
         *
         * @param WP WordPress environment object.
         *
         * @return void
         */
        public function parse_domain_association_request($wp)
        {
        }
        /**
         * Retrieves path for domain registration file.
         *
         * @since 3.6.1
         *
         * @return string
         */
        protected function get_registration_file_path()
        {
        }
        /**
         * Processes the Apple Pay domain verification.
         *
         * @since 3.6.1
         *
         * @param string $secret_key
         *
         * @return bool Whether domain verification succeeded.
         */
        public function register_domain_with_apple($secret_key)
        {
        }
        /**
         * Process the Apple Pay domain verification if proper settings are configured.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function verify_domain_if_configured()
        {
        }
        /**
         * Conditionally process the Apple Pay domain verification after settings are initially set.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function verify_domain_on_new_settings($option, $settings)
        {
        }
        /**
         * Conditionally process the Apple Pay domain verification after settings are updated.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function verify_domain_on_updated_settings($prev_settings, $settings)
        {
        }
        /**
         * Adds admin notices regarding apple pay verification status.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function show_verification_status_on_payment_settings()
        {
        }
        /**
         * Adds dokan admin notices regarding apple pay verification status.
         *
         * @since 3.7.8
         *
         * @param array $notices
         *
         * @return array
         */
        public function show_verification_status($notices)
        {
        }
        /**
         * Checks whether or not domain verification status should be showed.
         *
         * @since 3.7.8
         *
         * @return boolean
         */
        public function should_show_verification_status()
        {
        }
        /**
         * Generates notice regarding the status of Apple Pay domain verification.
         * Apple pay is enabled by default and domain verification initializes
         * when setting screen is displayed. So if domain verification is not set,
         * something went wrong so lets notify user.
         *
         * @since 3.7.8
         *
         * @return array{title:string,description:string}
         */
        public function get_domain_verification_notice()
        {
        }
    }
    /**
     * Gateway handler class.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\PaymentGateways
     */
    class Stripe extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\PaymentGateway
    {
        /**
         * ID for the gateway
         *
         * @since 3.6.1
         *
         * @param string
         */
        const ID = 'dokan_stripe_express';
        /**
         * @var string $payment_methods
         */
        public $payment_methods;
        /**
         * @var boolean $testmode
         */
        public $testmode;
        /**
         * @var string $secret_key
         */
        public $secret_key;
        /**
         * @var string $publishable_key
         */
        public $publishable_key;
        /**
         * @var string $debug
         */
        public $debug;
        /**
         * @var boolean $capture
         */
        public $capture;
        /**
         * @var boolean $payment_request
         */
        public $payment_request;
        /**
         * @var boolean $saved_cards
         */
        public $saved_cards;
        /**
         * @var string $statement_descriptor
         */
        public $statement_descriptor;
        /**
         * @var string $selected_payment_methods
         */
        public $selected_payment_methods;
        /**
         * Class constructor.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Initiates all required info for payment gateway
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function init_fields()
        {
        }
        /**
         * Retrieves the gateway ID.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_gateway_id()
        {
        }
        /**
         * Checks if the gateways is available for use.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function is_available()
        {
        }
        /**
         * Initiates form fields for admin settings
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
        /**
         * Init settings for gateways.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function init_settings()
        {
        }
        /**
         * Processes the admin options.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function process_admin_options()
        {
        }
        /**
         * Renders the input fields needed
         * to get the user's payment information
         * on the checkout page.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function payment_fields()
        {
        }
        /**
         * Enqueues payment scripts.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function payment_scripts()
        {
        }
        /**
         * Process the payment for a given order.
         *
         * @since 3.6.1
         *
         * @param int   $order_id          ID of the order being processed.
         * @param bool  $retry             Should we retry on fail.
         * @param bool  $force_save_source Force save the payment source.
         * @param mixed $previous_error    Any error message from previous request.
         * @param bool  $use_order_source  Whether to use the source, which should already be attached to the order.
         *
         * @return array|null An array with result of payment and redirect URL, or nothing.
         */
        public function process_payment($order_id, $retry = true, $force_save_source = false, $previous_error = false, $use_order_source = false)
        {
        }
        /**
         * Process payment using saved payment method.
         * This follows Stripe::process_payment,
         * but uses Payment Methods instead of Sources.
         *
         * @since 3.6.1
         *
         * @param int    $order_id          The order ID being processed.
         * @param bool   $can_retry         Should we retry on fail.
         * @param string $payment_intent_id The payment intent ID.
         *
         * @return mixed
         */
        public function process_payment_with_saved_payment_method($order_id, $can_retry = true, $payment_intent_id = null)
        {
        }
        /**
         * Checks whether an order is refundable.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return boolean
         */
        public function can_refund_order($order)
        {
        }
        /**
         * Adds a notice for customer when they update their billing address.
         *
         * @since 3.7.8
         *
         * @param int    $user_id      The ID of the current user.
         * @param string $load_address The address to load.
         *
         * @return void
         */
        public function show_update_card_notice($user_id, $load_address)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts {
    /**
     * Extendable abstract class for payment methods.
     *
     * Handles general functionality for payment methods.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts
     */
    abstract class PaymentMethod
    {
        /**
         * Stripe key for payment method.
         *
         * @since 3.6.1
         *
         * @var string
         */
        protected $stripe_id;
        /**
         * Display title.
         *
         * @since 3.6.1
         *
         * @var string
         */
        protected $title;
        /**
         * Method label.
         *
         * @since 3.6.1
         *
         * @var string
         */
        protected $label;
        /**
         * Method description.
         *
         * @since 3.6.1
         *
         * @var string
         */
        protected $description;
        /**
         * Identify if the method is reusable.
         *
         * @since 3.6.1
         *
         * @var boolean
         */
        protected $is_reusable;
        /**
         * Array of currencies supported by this method.
         *
         * @since 3.6.1
         *
         * @var array
         */
        protected $supported_currencies;
        /**
         * Identify if the method can refund an order.
         *
         * @since 3.6.1
         *
         * @var boolean
         */
        protected $can_refund = true;
        /**
         * Identify if the method is enabled.
         *
         * @since 3.6.1
         *
         * @var bool
         */
        protected $enabled;
        /**
         * List of supported countries.
         *
         * @since 3.6.1
         *
         * @var array
         */
        protected $supported_countries;
        /**
         * Class constructor.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Retrieves payment method ID.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * Retrieves true if the method is enabled.
         *
         * @since 3.6.1
         *
         * @return bool
         */
        public function is_enabled()
        {
        }
        /**
         * Retrieves payment method title.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public function get_title()
        {
        }
        /**
         * Retrieves payment method label.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public function get_label()
        {
        }
        /**
         * Retrieves payment method description.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public function get_description()
        {
        }
        /**
         * Checks whether payment method
         * can be used at checkout or not.
         *
         * @since 3.6.1
         *
         * @param int|null $order_id
         *
         * @return boolean
         */
        public function is_enabled_at_checkout($order_id = null)
        {
        }
        /**
         * Validates if a payment method is available on a given country.
         *
         * @since 3.6.1
         *
         * @param string $country a two-letter country code
         *
         * @return boolean
         */
        public function is_allowed_on_country($country)
        {
        }
        /**
         * Returns boolean dependent on whether payment method
         * will support saved payments/subscription payments.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function is_reusable()
        {
        }
        /**
         * Returns string representing payment method type
         * to query to retrieve saved payment methods from Stripe.
         *
         * @since 3.6.1
         *
         * @return string|null
         */
        public function get_retrievable_type()
        {
        }
        /**
         * Create new WC payment token and add to user.
         *
         * @since 3.6.1
         *
         * @param int|string            $user_id        WP User ID
         * @param \Stripe\PaymentMethod $payment_method Stripe payment method object
         *
         * @return PaymentTokenSepa
         */
        public function create_payment_token_for_user($user_id, $payment_method)
        {
        }
        /**
         * Returns the currencies this method supports.
         *
         * @since 3.6.1
         *
         * @return array|null
         */
        public function get_supported_currencies()
        {
        }
        /**
         * Returns whether the payment method requires automatic capture.
         * By default all the payment methods require automatic capture, except for "card".
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function requires_automatic_capture()
        {
        }
        /**
         * Checks if payment method allows refund via stripe.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function can_refund_via_stripe()
        {
        }
        /**
         * Returns the HTML for the subtext messaging.
         *
         * @since 3.6.1
         *
         * @param string $stripe_method_status (optional) Status of this payment method based on the Stripe's account capabilities
         * @return string
         */
        public function get_subtext_messages($stripe_method_status)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\PaymentMethods {
    /**
     * Payment method handler class for Stripe Credit/Debit Cards.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\PaymentMethods
     */
    class Card extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\PaymentMethod
    {
        /**
         * Stores Stripe ID.
         *
         * @since 3.6.1
         *
         * @var string
         */
        const STRIPE_ID = 'card';
        /**
         * Strores label for the method.
         *
         * @since 3.6.1
         *
         * @var string
         */
        const LABEL = 'Credit/Debit Card';
        /**
         * Class constructor.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Retrieves payment method title.
         *
         * @since 3.6.1
         *
         * @param array $payment_details Optional payment details from charge object.
         *
         * @return string
         */
        public function get_title($payment_details = false)
        {
        }
        /**
         * Returns string representing payment method type
         * to query to retrieve saved payment methods from Stripe.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public function get_retrievable_type()
        {
        }
        /**
         * Create and return WC payment token for user.
         *
         * @since 3.6.1
         *
         * @param int|string            $user_id        WP User ID
         * @param \Stripe\PaymentMethod $payment_method Stripe payment method object
         *
         * @return PaymentTokenCC
         */
        public function create_payment_token_for_user($user_id, $payment_method)
        {
        }
        /**
         * The Credit Card method allows automatic capture.
         *
         * @since 3.6.1
         *
         * @return bool
         */
        public function requires_automatic_capture()
        {
        }
    }
    /**
     * Payment method handler class for Stripe iDeal.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\PaymentMethods
     */
    class Ideal extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\PaymentMethod
    {
        /**
         * Stores Stripe ID.
         *
         * @since 3.6.1
         *
         * @var string
         */
        const STRIPE_ID = 'ideal';
        /**
         * Strores label for the method.
         *
         * @since 3.6.1
         *
         * @var string
         */
        const LABEL = 'iDEAL';
        /**
         * Constructor for iDEAL payment method.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Returns string representing payment method type
         * to query to retrieve saved payment methods from Stripe.
         *
         * @since 3.7.8
         *
         * @return string|null
         */
        public function get_retrievable_type()
        {
        }
    }
    /**
     * Gateway handler class for SEPA Direct Debit.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\PaymentMethods
     */
    class Sepa extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\PaymentMethod
    {
        /**
         * Stores Stripe ID.
         *
         * @since 3.7.8
         *
         * @var string
         */
        const STRIPE_ID = 'sepa_debit';
        /**
         * Strores label for the method.
         *
         * @since 3.7.8
         *
         * @var string
         */
        const LABEL = 'SEPA Direct Debit';
        /**
         * Constructor for iDEAL payment method.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Returns string representing payment method type
         * to query to retrieve saved payment methods from Stripe.
         *
         * @since 3.7.8
         *
         * @return string|null
         */
        public function get_retrievable_type()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits {
    // Exit if called directly
    /**
     * Trait for subscription utility functions.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits
     */
    trait HongKongStates
    {
        /**
         * States of Hong Kong.
         *
         * Contains a list of districts (equivalent to WC states) in Hong Kong used for normalization and validation purposes.
         * This is necessary due to a bug in Apple Pay that's currently being worked on. Until
         * that bug is fixed this workaround will be necessary.
         *
         * @since 3.6.1
         *
         * @source https://www.rvd.gov.hk/doc/tc/hkpr13/06.pdf
         *
         * @var array
         */
        private static $hk_states = ['hong kong', '港島', 'central and western', '中西區', 'kennedy town', 'shek tong tsui', 'sai ying pun', 'sheung wan', 'central', 'admiralty', 'mid-levels', 'peak', '堅尼地城', '石塘咀', '西營盤', '上環', '中環', '金鐘', '半山區', '山頂', 'wan chai', '灣仔', 'causeway bay', 'happy valley', 'tai hang', 'so kon po', "jardine's lookout", '灣仔', '銅鑼灣', '跑馬地', '大坑', '掃桿埔', '渣甸山', 'eastern', '東區', 'tin hau', 'braemar hill', 'north point', 'quarry bay', 'sai wan ho', 'shau kei wan', 'chai wan', 'siu sai wan', '天后', '寶馬山', '北角', '鰂魚涌', '西灣河', '筲箕灣', '柴灣', '小西灣', 'southern', '南區', 'pok fu lam', 'aberdeen', 'ap lei chau', 'wong chuk hang', 'shouson hill', 'repulse bay', 'chung hom kok', 'stanley', 'tai tam', 'shek o', '薄扶林', '香港仔', '鴨脷洲', '黃竹坑', '壽臣山', '淺水灣', '舂磡角', '赤柱', '大潭', '石澳', 'kowloon', '九龍', 'yau tsim mong', '油尖旺', 'tsim sha tsui', 'yau ma tei', 'west kowloon reclamation', "king's park, mong kok", 'tai kok tsui', '尖沙咀', '油麻地', '西九龍填海區', '京士柏', '旺角', '大角咀', 'sham shui po', '深水埗', 'mei foo', 'lai chi kok', 'cheung sha wan', 'shek kip mei', 'yau yat tsuen', 'tai wo ping', 'stonecutters island', '美孚', '荔枝角', '長沙灣', '石硤尾', '又一村', '大窩坪', '昂船洲', 'kowloon city', '九龍城', 'hung hom', 'to kwa wan', 'ma tau kok', 'ma tau wai', 'kai tak', 'ho man tin', 'kowloon tong', 'beacon hill', '紅磡', '土瓜灣', '馬頭角', '馬頭圍', '啟德', '何文田', '九龍塘', '筆架山', 'wong tai sin', '黃大仙', 'san po kong', 'tung tau', 'wang tau hom', 'lok fu', 'diamond hill', 'tsz wan shan', 'ngau chi wan', '新蒲崗', '東頭', '橫頭磡', '樂富', '鑽石山', '慈雲山', '牛池灣', 'kwun tong', '觀塘', 'ping shek', 'kowloon bay', 'ngau tau kok', 'jordan valley', 'kwun tong', 'sau mau ping', 'lam tin', 'yau tong', 'lei yue mun', '坪石', '九龍灣', '牛頭角', '佐敦谷', '觀塘', '秀茂坪', '藍田', '油塘', '鯉魚門', 'new territories', '新界', 'kwai tsing', '葵青', 'kwai chung', 'tsing yi', '葵涌', '青衣', 'tsuen wan', '荃灣', 'lei muk shue', 'ting kau', 'sham tseng', 'tsing lung tau', 'ma wan', 'sunny bay', '梨木樹', '汀九', '深井', '青龍頭', '馬灣', '欣澳', 'tuen mun', '屯門', 'tai lam chung', 'so kwun wat', 'tuen mun', 'lam tei', '大欖涌', '掃管笏', '屯門', '藍地', 'yuen long', '元朗', 'hung shui kiu', 'ha tsuen', 'lau fau shan', 'tin shui wai', 'yuen long', 'san tin', 'lok ma chau', 'kam tin', 'shek kong', 'pat heung', '洪水橋', '廈村', '流浮山', '天水圍', '元朗', '新田', '落馬洲', '錦田', '石崗', '八鄉', 'north', '北區', 'fanling', 'luen wo hui', 'sheung shui', 'shek wu hui', 'sha tau kok', 'luk keng', 'wu kau tang', '粉嶺', '聯和墟', '上水', '石湖墟', '沙頭角', '鹿頸', '烏蛟騰', 'tai po', '大埔', 'tai po market', 'tai po kau', 'tai mei tuk', 'shuen wan', 'cheung muk tau', 'kei ling ha', '大埔墟', '大埔', '大埔滘', '大尾篤', '船灣', '樟木頭', '企嶺下', 'sha tin', '沙田', 'tai wai', 'fo tan', 'ma liu shui', 'wu kai sha', 'ma on shan', '大圍', '火炭', '馬料水', '烏溪沙', '馬鞍山', 'sai kung', '西貢', 'clear water bay', 'tai mong tsai', 'tseung kwan o', 'hang hau', 'tiu keng leng', 'ma yau tong', '清水灣', '大網仔', '將軍澳', '坑口', '調景嶺', '馬游塘', 'islands', '離島', 'cheung chau', 'peng chau', 'lantau island (including tung chung)', 'lamma island', '長洲', '坪洲', '大嶼山(包括東涌)', '南丫島'];
        /**
         * Checks if the given state is a valid region (equivalent to WC state) in Hong Kong.
         *
         * @since 3.6.1
         *
         * @param string $state  The state to be evaluated.
         *
         * @return bool  True if the provided state is valid, false otherwise.
         */
        public function is_valid_hongkong_state($state)
        {
        }
    }
    /**
     * Payment Request States Trait.
     *
     * Provides a map between WC states and Payment Request API states.
     * The list is based on libaddressinput: https://github.com/google/libaddressinput,
     * which is used by Chromium based browsers in the native Payment Request address dialog.
     *
     * Known issues/inconsistencies:
     *    1. WC provides a dropdown list of states, but there's no state field in Chrome for the following countries:
     *        AO (Angola), BD (Bangladesh), BG (Bulgaria), BJ (Benin), BO (Bolivia), DO (Dominican Republic),
     *        DZ (Algeria), GH (Ghana), GT (Guatemala), HU (Hungary), KE (Kenya), LA (Laos),
     *        LR (Liberia), MD (Moldova), NA (Namibia), NP (Nepal), PK (Pakistan),
     *        PY (Paraguay), RO (Romania), TZ (Tanzania), UG (Uganda), UM (United States Minor Outlying Islands),
     *        ZA (South Africa), ZM (Zambia).
     *    2. Chrome does not provide a dropdown list of states for 161 countries in total, out of the 249 countries WC supports,
     *        so the countries in which the state field is required by WC, and not provided by the browser are not supported.
     *    3. Chrome does not provide a zip/postal code field for 60 out of the 249 countries WC supports. Only for 5 countries
     *        the zip code field is missing while the state field is present: BS (Bahamas), PA (Panama), SC (Seychelles),
     *        SR (Suriname), TV (Tuvalu). Several other countries provide an optional zip code field.
     *    4. WC expects it, but there's no city field in the Payment Request API for the following:
     *        JP (Japan), MO (Macao), TN (Tunisia), KY (Cayman Islands), GI (Gibraltar).
     *    5. The following countries are not listed in WC:
     *        AC (Ascension Island), IC (Canary Islands), EA (Ceuta & Melilla), CP (Clipperton Island), DG (Diego Garcia),
     *        TA (Tristan da Cunha), XK (Kosovo).
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits
     */
    trait PaymentRequestStates
    {
        use \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits\HongKongStates;
        // phpcs:disable
        /**
         * A list of states which is compatible with Chromium based browsers for the Payment Request API.
         * If the input comes from Chrome, we will always match with `code`, but if the request comes from
         * Safari or other browsers which don't provide a dropdown list, we can match one of the following:
         *    - [0] = code (string)
         *    - [1] = name (string)
         *    - [2] = localName (string|null)
         */
        private static $payment_request_states = [
            // Afghanistan.
            'AF' => [],
            // Angola.
            'AO' => [],
            // Argentina.
            'AR' => ['C' => ['Ciudad Autónoma de Buenos Aires', 'Ciudad Autónoma de Buenos Aires', NULL], 'B' => ['Buenos Aires', 'Buenos Aires', NULL], 'K' => ['Catamarca', 'Catamarca', NULL], 'H' => ['Chaco', 'Chaco', NULL], 'U' => ['Chubut', 'Chubut', NULL], 'X' => ['Córdoba', 'Córdoba', NULL], 'W' => ['Corrientes', 'Corrientes', NULL], 'E' => ['Entre Ríos', 'Entre Ríos', NULL], 'P' => ['Formosa', 'Formosa', NULL], 'Y' => ['Jujuy', 'Jujuy', NULL], 'L' => ['La Pampa', 'La Pampa', NULL], 'F' => ['La Rioja', 'La Rioja', NULL], 'M' => ['Mendoza', 'Mendoza', NULL], 'N' => ['Misiones', 'Misiones', NULL], 'Q' => ['Neuquén', 'Neuquén', NULL], 'R' => ['Río Negro', 'Río Negro', NULL], 'A' => ['Salta', 'Salta', NULL], 'J' => ['San Juan', 'San Juan', NULL], 'D' => ['San Luis', 'San Luis', NULL], 'Z' => ['Santa Cruz', 'Santa Cruz', NULL], 'S' => ['Santa Fe', 'Santa Fe', NULL], 'G' => ['Santiago del Estero', 'Santiago del Estero', NULL], 'V' => ['Tierra del Fuego', 'Tierra del Fuego', NULL], 'T' => ['Tucumán', 'Tucumán', NULL]],
            // Austria.
            'AT' => [],
            // Australia.
            'AU' => ['ACT' => ['ACT', 'Australian Capital Territory', NULL], 'NSW' => ['NSW', 'New South Wales', NULL], 'NT' => ['NT', 'Northern Territory', NULL], 'QLD' => ['QLD', 'Queensland', NULL], 'SA' => ['SA', 'South Australia', NULL], 'TAS' => ['TAS', 'Tasmania', NULL], 'VIC' => ['VIC', 'Victoria', NULL], 'WA' => ['WA', 'Western Australia', NULL]],
            // Aland Islands.
            'AX' => [],
            // Bangladesh.
            'BD' => [],
            // Belgium.
            'BE' => [],
            // Bulgaria.
            'BG' => [],
            // Bahrain.
            'BH' => [],
            // Burundi.
            'BI' => [],
            // Benin.
            'BJ' => [],
            // Bolivia.
            'BO' => [],
            // Brazil.
            'BR' => ['AC' => ['AC', 'Acre', NULL], 'AL' => ['AL', 'Alagoas', NULL], 'AP' => ['AP', 'Amapá', NULL], 'AM' => ['AM', 'Amazonas', NULL], 'BA' => ['BA', 'Bahia', NULL], 'CE' => ['CE', 'Ceará', NULL], 'DF' => ['DF', 'Distrito Federal', NULL], 'ES' => ['ES', 'Espírito Santo', NULL], 'GO' => ['GO', 'Goiás', NULL], 'MA' => ['MA', 'Maranhão', NULL], 'MT' => ['MT', 'Mato Grosso', NULL], 'MS' => ['MS', 'Mato Grosso do Sul', NULL], 'MG' => ['MG', 'Minas Gerais', NULL], 'PA' => ['PA', 'Pará', NULL], 'PB' => ['PB', 'Paraíba', NULL], 'PR' => ['PR', 'Paraná', NULL], 'PE' => ['PE', 'Pernambuco', NULL], 'PI' => ['PI', 'Piauí', NULL], 'RJ' => ['RJ', 'Rio de Janeiro', NULL], 'RN' => ['RN', 'Rio Grande do Norte', NULL], 'RS' => ['RS', 'Rio Grande do Sul', NULL], 'RO' => ['RO', 'Rondônia', NULL], 'RR' => ['RR', 'Roraima', NULL], 'SC' => ['SC', 'Santa Catarina', NULL], 'SP' => ['SP', 'São Paulo', NULL], 'SE' => ['SE', 'Sergipe', NULL], 'TO' => ['TO', 'Tocantins', NULL]],
            // Canada.
            'CA' => ['AB' => ['AB', 'Alberta', 'Alberta'], 'BC' => ['BC', 'British Columbia', 'Colombie-Britannique'], 'MB' => ['MB', 'Manitoba', 'Manitoba'], 'NB' => ['NB', 'New Brunswick', 'Nouveau-Brunswick'], 'NL' => ['NL', 'Newfoundland and Labrador', 'Terre-Neuve-et-Labrador'], 'NT' => ['NT', 'Northwest Territories', 'Territoires du Nord-Ouest'], 'NS' => ['NS', 'Nova Scotia', 'Nouvelle-Écosse'], 'NU' => ['NU', 'Nunavut', 'Nunavut'], 'ON' => ['ON', 'Ontario', 'Ontario'], 'PE' => ['PE', 'Prince Edward Island', 'Île-du-Prince-Édouard'], 'QC' => ['QC', 'Quebec', 'Québec'], 'SK' => ['SK', 'Saskatchewan', 'Saskatchewan'], 'YT' => ['YT', 'Yukon', 'Yukon']],
            // Switzerland.
            'CH' => [],
            // China.
            'CN' => ['CN1' => ['Yunnan Sheng', 'Yunnan Sheng', '云南省'], 'CN2' => ['Beijing Shi', 'Beijing Shi', '北京市'], 'CN3' => ['Tianjin Shi', 'Tianjin Shi', '天津市'], 'CN4' => ['Hebei Sheng', 'Hebei Sheng', '河北省'], 'CN5' => ['Shanxi Sheng', 'Shanxi Sheng', '山西省'], 'CN6' => ['Neimenggu Zizhiqu', 'Neimenggu Zizhiqu', '内蒙古'], 'CN7' => ['Liaoning Sheng', 'Liaoning Sheng', '辽宁省'], 'CN8' => ['Jilin Sheng', 'Jilin Sheng', '吉林省'], 'CN9' => ['Heilongjiang Sheng', 'Heilongjiang Sheng', '黑龙江省'], 'CN10' => ['Shanghai Shi', 'Shanghai Shi', '上海市'], 'CN11' => ['Jiangsu Sheng', 'Jiangsu Sheng', '江苏省'], 'CN12' => ['Zhejiang Sheng', 'Zhejiang Sheng', '浙江省'], 'CN13' => ['Anhui Sheng', 'Anhui Sheng', '安徽省'], 'CN14' => ['Fujian Sheng', 'Fujian Sheng', '福建省'], 'CN15' => ['Jiangxi Sheng', 'Jiangxi Sheng', '江西省'], 'CN16' => ['Shandong Sheng', 'Shandong Sheng', '山东省'], 'CN17' => ['Henan Sheng', 'Henan Sheng', '河南省'], 'CN18' => ['Hubei Sheng', 'Hubei Sheng', '湖北省'], 'CN19' => ['Hunan Sheng', 'Hunan Sheng', '湖南省'], 'CN20' => ['Guangdong Sheng', 'Guangdong Sheng', '广东省'], 'CN21' => ['Guangxi Zhuangzuzizhiqu', 'Guangxi Zhuangzuzizhiqu', '广西'], 'CN22' => ['Hainan Sheng', 'Hainan Sheng', '海南省'], 'CN23' => ['Chongqing Shi', 'Chongqing Shi', '重庆市'], 'CN24' => ['Sichuan Sheng', 'Sichuan Sheng', '四川省'], 'CN25' => ['Guizhou Sheng', 'Guizhou Sheng', '贵州省'], 'CN26' => ['Shaanxi Sheng', 'Shaanxi Sheng', '陕西省'], 'CN27' => ['Gansu Sheng', 'Gansu Sheng', '甘肃省'], 'CN28' => ['Qinghai Sheng', 'Qinghai Sheng', '青海省'], 'CN29' => ['Ningxia Huizuzizhiqu', 'Ningxia Huizuzizhiqu', '宁夏'], 'CN30' => ['Macau', 'Macau', '澳门'], 'CN31' => ['Xizang Zizhiqu', 'Xizang Zizhiqu', '西藏'], 'CN32' => ['Xinjiang Weiwuerzizhiqu', 'Xinjiang Weiwuerzizhiqu', '新疆']],
            // Czech Republic.
            'CZ' => [],
            // Germany.
            'DE' => [],
            // Denmark.
            'DK' => [],
            // Dominican Republic.
            'DO' => [],
            // Algeria.
            'DZ' => [],
            // Estonia.
            'EE' => [],
            // Egypt.
            'EG' => ['EGALX' => ['Alexandria Governorate', 'Alexandria Governorate', 'الإسكندرية'], 'EGASN' => ['Aswan Governorate', 'Aswan Governorate', 'أسوان'], 'EGAST' => ['Asyut Governorate', 'Asyut Governorate', 'أسيوط'], 'EGBA' => ['Red Sea Governorate', 'Red Sea Governorate', 'البحر الأحمر'], 'EGBH' => ['El Beheira Governorate', 'El Beheira Governorate', 'البحيرة'], 'EGBNS' => ['Beni Suef Governorate', 'Beni Suef Governorate', 'بني سويف'], 'EGC' => ['Cairo Governorate', 'Cairo Governorate', 'القاهرة'], 'EGDK' => ['Dakahlia Governorate', 'Dakahlia Governorate', 'الدقهلية'], 'EGDT' => ['Damietta Governorate', 'Damietta Governorate', 'دمياط'], 'EGFYM' => ['Faiyum Governorate', 'Faiyum Governorate', 'الفيوم'], 'EGGH' => ['Gharbia Governorate', 'Gharbia Governorate', 'الغربية'], 'EGGZ' => ['Giza Governorate', 'Giza Governorate', 'الجيزة'], 'EGIS' => ['Ismailia Governorate', 'Ismailia Governorate', 'الإسماعيلية'], 'EGJS' => ['South Sinai Governorate', 'South Sinai Governorate', 'جنوب سيناء'], 'EGKB' => ['Qalyubia Governorate', 'Qalyubia Governorate', 'القليوبية'], 'EGKFS' => ['Kafr El Sheikh Governorate', 'Kafr El Sheikh Governorate', 'كفر الشيخ'], 'EGKN' => ['Qena Governorate', 'Qena Governorate', 'قنا'], 'EGLX' => ['Luxor Governorate', 'Luxor Governorate', 'الأقصر'], 'EGMN' => ['Menia Governorate', 'Menia Governorate', 'المنيا'], 'EGMNF' => ['Menofia Governorate', 'Menofia Governorate', 'المنوفية'], 'EGMT' => ['Matrouh Governorate', 'Matrouh Governorate', 'مطروح'], 'EGPTS' => ['Port Said Governorate', 'Port Said Governorate', 'بورسعيد'], 'EGSHG' => ['Sohag Governorate', 'Sohag Governorate', 'سوهاج'], 'EGSHR' => ['Ash Sharqia Governorate', 'Ash Sharqia Governorate', 'الشرقية'], 'EGSIN' => ['North Sinai Governorate', 'North Sinai Governorate', 'شمال سيناء'], 'EGSUZ' => ['Suez Governorate', 'Suez Governorate', 'السويس'], 'EGWAD' => ['New Valley Governorate', 'New Valley Governorate', 'الوادي الجديد']],
            // Spain.
            'ES' => ['C' => ['A Coruña', 'A Coruña', NULL], 'VI' => ['Álava', 'Álava', NULL], 'AB' => ['Albacete', 'Albacete', NULL], 'A' => ['Alicante', 'Alicante', NULL], 'AL' => ['Almería', 'Almería', NULL], 'O' => ['Asturias', 'Asturias', NULL], 'AV' => ['Ávila', 'Ávila', NULL], 'BA' => ['Badajoz', 'Badajoz', NULL], 'PM' => ['Balears', 'Balears', NULL], 'B' => ['Barcelona', 'Barcelona', NULL], 'BU' => ['Burgos', 'Burgos', NULL], 'CC' => ['Cáceres', 'Cáceres', NULL], 'CA' => ['Cádiz', 'Cádiz', NULL], 'S' => ['Cantabria', 'Cantabria', NULL], 'CS' => ['Castellón', 'Castellón', NULL], 'CE' => ['Ceuta', 'Ceuta', NULL], 'CR' => ['Ciudad Real', 'Ciudad Real', NULL], 'CO' => ['Córdoba', 'Córdoba', NULL], 'CU' => ['Cuenca', 'Cuenca', NULL], 'GI' => ['Girona', 'Girona', NULL], 'GR' => ['Granada', 'Granada', NULL], 'GU' => ['Guadalajara', 'Guadalajara', NULL], 'SS' => ['Guipúzcoa', 'Guipúzcoa', NULL], 'H' => ['Huelva', 'Huelva', NULL], 'HU' => ['Huesca', 'Huesca', NULL], 'J' => ['Jaén', 'Jaén', NULL], 'LO' => ['La Rioja', 'La Rioja', NULL], 'GC' => ['Las Palmas', 'Las Palmas', NULL], 'LE' => ['León', 'León', NULL], 'L' => ['Lleida', 'Lleida', NULL], 'LU' => ['Lugo', 'Lugo', NULL], 'M' => ['Madrid', 'Madrid', NULL], 'MA' => ['Málaga', 'Málaga', NULL], 'ML' => ['Melilla', 'Melilla', NULL], 'MU' => ['Murcia', 'Murcia', NULL], 'NA' => ['Navarra', 'Navarra', NULL], 'OR' => ['Ourense', 'Ourense', NULL], 'P' => ['Palencia', 'Palencia', NULL], 'PO' => ['Pontevedra', 'Pontevedra', NULL], 'SA' => ['Salamanca', 'Salamanca', NULL], 'TF' => ['Santa Cruz de Tenerife', 'Santa Cruz de Tenerife', NULL], 'SG' => ['Segovia', 'Segovia', NULL], 'SE' => ['Sevilla', 'Sevilla', NULL], 'SO' => ['Soria', 'Soria', NULL], 'T' => ['Tarragona', 'Tarragona', NULL], 'TE' => ['Teruel', 'Teruel', NULL], 'TO' => ['Toledo', 'Toledo', NULL], 'V' => ['Valencia', 'Valencia', NULL], 'VA' => ['Valladolid', 'Valladolid', NULL], 'BI' => ['Vizcaya', 'Vizcaya', NULL], 'ZA' => ['Zamora', 'Zamora', NULL], 'Z' => ['Zaragoza', 'Zaragoza', NULL]],
            // Finland.
            'FI' => [],
            // France.
            'FR' => [],
            // French Guiana.
            'GF' => [],
            // Ghana.
            'GH' => [],
            // Guadeloupe.
            'GP' => [],
            // Greece.
            'GR' => [],
            // Guatemala.
            'GT' => [],
            // Hong Kong.
            'HK' => ['HONG KONG' => ['Hong Kong Island', 'Hong Kong Island', '香港島'], 'KOWLOON' => ['Kowloon', 'Kowloon', '九龍'], 'NEW TERRITORIES' => ['New Territories', 'New Territories', '新界']],
            // Hungary.
            'HU' => [],
            // Indonesia.
            'ID' => ['AC' => ['Aceh', 'Aceh', NULL], 'SU' => ['Sumatera Utara', 'Sumatera Utara', NULL], 'SB' => ['Sumatera Barat', 'Sumatera Barat', NULL], 'RI' => ['Riau', 'Riau', NULL], 'KR' => ['Kepulauan Riau', 'Kepulauan Riau', NULL], 'JA' => ['Jambi', 'Jambi', NULL], 'SS' => ['Sumatera Selatan', 'Sumatera Selatan', NULL], 'BB' => ['Kepulauan Bangka Belitung', 'Kepulauan Bangka Belitung', NULL], 'BE' => ['Bengkulu', 'Bengkulu', NULL], 'LA' => ['Lampung', 'Lampung', NULL], 'JK' => ['DKI Jakarta', 'DKI Jakarta', NULL], 'JB' => ['Jawa Barat', 'Jawa Barat', NULL], 'BT' => ['Banten', 'Banten', NULL], 'JT' => ['Jawa Tengah', 'Jawa Tengah', NULL], 'JI' => ['Jawa Timur', 'Jawa Timur', NULL], 'YO' => ['Daerah Istimewa Yogyakarta', 'Daerah Istimewa Yogyakarta', NULL], 'BA' => ['Bali', 'Bali', NULL], 'NB' => ['Nusa Tenggara Barat', 'Nusa Tenggara Barat', NULL], 'NT' => ['Nusa Tenggara Timur', 'Nusa Tenggara Timur', NULL], 'KB' => ['Kalimantan Barat', 'Kalimantan Barat', NULL], 'KT' => ['Kalimantan Tengah', 'Kalimantan Tengah', NULL], 'KI' => ['Kalimantan Timur', 'Kalimantan Timur', NULL], 'KS' => ['Kalimantan Selatan', 'Kalimantan Selatan', NULL], 'KU' => ['Kalimantan Utara', 'Kalimantan Utara', NULL], 'SA' => ['Sulawesi Utara', 'Sulawesi Utara', NULL], 'ST' => ['Sulawesi Tengah', 'Sulawesi Tengah', NULL], 'SG' => ['Sulawesi Tenggara', 'Sulawesi Tenggara', NULL], 'SR' => ['Sulawesi Barat', 'Sulawesi Barat', NULL], 'SN' => ['Sulawesi Selatan', 'Sulawesi Selatan', NULL], 'GO' => ['Gorontalo', 'Gorontalo', NULL], 'MA' => ['Maluku', 'Maluku', NULL], 'MU' => ['Maluku Utara', 'Maluku Utara', NULL], 'PA' => ['Papua', 'Papua', NULL], 'PB' => ['Papua Barat', 'Papua Barat', NULL]],
            // Ireland.
            'IE' => ['CW' => ['Co. Carlow', 'Co. Carlow', NULL], 'CN' => ['Co. Cavan', 'Co. Cavan', NULL], 'CE' => ['Co. Clare', 'Co. Clare', NULL], 'CO' => ['Co. Cork', 'Co. Cork', NULL], 'DL' => ['Co. Donegal', 'Co. Donegal', NULL], 'D' => ['Co. Dublin', 'Co. Dublin', NULL], 'G' => ['Co. Galway', 'Co. Galway', NULL], 'KY' => ['Co. Kerry', 'Co. Kerry', NULL], 'KE' => ['Co. Kildare', 'Co. Kildare', NULL], 'KK' => ['Co. Kilkenny', 'Co. Kilkenny', NULL], 'LS' => ['Co. Laois', 'Co. Laois', NULL], 'LM' => ['Co. Leitrim', 'Co. Leitrim', NULL], 'LK' => ['Co. Limerick', 'Co. Limerick', NULL], 'LD' => ['Co. Longford', 'Co. Longford', NULL], 'LH' => ['Co. Louth', 'Co. Louth', NULL], 'MO' => ['Co. Mayo', 'Co. Mayo', NULL], 'MH' => ['Co. Meath', 'Co. Meath', NULL], 'MN' => ['Co. Monaghan', 'Co. Monaghan', NULL], 'OY' => ['Co. Offaly', 'Co. Offaly', NULL], 'RN' => ['Co. Roscommon', 'Co. Roscommon', NULL], 'SO' => ['Co. Sligo', 'Co. Sligo', NULL], 'TA' => ['Co. Tipperary', 'Co. Tipperary', NULL], 'WD' => ['Co. Waterford', 'Co. Waterford', NULL], 'WH' => ['Co. Westmeath', 'Co. Westmeath', NULL], 'WX' => ['Co. Wexford', 'Co. Wexford', NULL], 'WW' => ['Co. Wicklow', 'Co. Wicklow', NULL]],
            // Israel.
            'IL' => [],
            // Isle of Man.
            'IM' => [],
            // India.
            'IN' => [
                'AP' => ['Andhra Pradesh', 'Andhra Pradesh', NULL],
                'AR' => ['Arunachal Pradesh', 'Arunachal Pradesh', NULL],
                'AS' => ['Assam', 'Assam', NULL],
                'BR' => ['Bihar', 'Bihar', NULL],
                'CT' => ['Chhattisgarh', 'Chhattisgarh', NULL],
                'GA' => ['Goa', 'Goa', NULL],
                'GJ' => ['Gujarat', 'Gujarat', NULL],
                'HR' => ['Haryana', 'Haryana', NULL],
                'HP' => ['Himachal Pradesh', 'Himachal Pradesh', NULL],
                'JK' => ['Jammu and Kashmir', 'Jammu & Kashmir', NULL],
                'JH' => ['Jharkhand', 'Jharkhand', NULL],
                'KA' => ['Karnataka', 'Karnataka', NULL],
                'KL' => ['Kerala', 'Kerala', NULL],
                // 'LA' => __( 'Ladakh', 'woocommerce' ),
                'MP' => ['Madhya Pradesh', 'Madhya Pradesh', NULL],
                'MH' => ['Maharashtra', 'Maharashtra', NULL],
                'MN' => ['Manipur', 'Manipur', NULL],
                'ML' => ['Meghalaya', 'Meghalaya', NULL],
                'MZ' => ['Mizoram', 'Mizoram', NULL],
                'NL' => ['Nagaland', 'Nagaland', NULL],
                'OR' => ['Odisha', 'Odisha', NULL],
                'PB' => ['Punjab', 'Punjab', NULL],
                'RJ' => ['Rajasthan', 'Rajasthan', NULL],
                'SK' => ['Sikkim', 'Sikkim', NULL],
                'TN' => ['Tamil Nadu', 'Tamil Nadu', NULL],
                'TS' => ['Telangana', 'Telangana', NULL],
                'TR' => ['Tripura', 'Tripura', NULL],
                'UK' => ['Uttarakhand', 'Uttarakhand', NULL],
                'UP' => ['Uttar Pradesh', 'Uttar Pradesh', NULL],
                'WB' => ['West Bengal', 'West Bengal', NULL],
                'AN' => ['Andaman and Nicobar Islands', 'Andaman & Nicobar', NULL],
                'CH' => ['Chandigarh', 'Chandigarh', NULL],
                'DN' => ['Dadra and Nagar Haveli', 'Dadra & Nagar Haveli', NULL],
                'DD' => ['Daman and Diu', 'Daman & Diu', NULL],
                'DL' => ['Delhi', 'Delhi', NULL],
                'LD' => ['Lakshadweep', 'Lakshadweep', NULL],
                'PY' => ['Puducherry', 'Puducherry', NULL],
            ],
            // Iran.
            'IR' => ['KHZ' => ['Khuzestan Province', 'Khuzestan Province', 'استان خوزستان'], 'THR' => ['Tehran Province', 'Tehran Province', 'استان تهران'], 'ILM' => ['Ilam Province', 'Ilam Province', 'استان ایلام'], 'BHR' => ['Bushehr Province', 'Bushehr Province', 'استان بوشهر'], 'ADL' => ['Ardabil Province', 'Ardabil Province', 'استان اردبیل'], 'ESF' => ['Isfahan Province', 'Isfahan Province', 'استان اصفهان'], 'YZD' => ['Yazd Province', 'Yazd Province', 'استان یزد'], 'KRH' => ['Kermanshah Province', 'Kermanshah Province', 'استان کرمانشاه'], 'KRN' => ['Kerman Province', 'Kerman Province', 'استان کرمان'], 'HDN' => ['Hamadan Province', 'Hamadan Province', 'استان همدان'], 'GZN' => ['Qazvin Province', 'Qazvin Province', 'استان قزوین'], 'ZJN' => ['Zanjan Province', 'Zanjan Province', 'استان زنجان'], 'LRS' => ['Lorestan Province', 'Lorestan Province', 'استان لرستان'], 'ABZ' => ['Alborz Province', 'Alborz Province', 'استان البرز'], 'EAZ' => ['East Azerbaijan Province', 'East Azerbaijan Province', 'استان آذربایجان شرقی'], 'WAZ' => ['West Azerbaijan Province', 'West Azerbaijan Province', 'استان آذربایجان غربی'], 'CHB' => ['Chaharmahal and Bakhtiari Province', 'Chaharmahal and Bakhtiari Province', 'استان چهارمحال و بختیاری'], 'SKH' => ['South Khorasan Province', 'South Khorasan Province', 'استان خراسان جنوبی'], 'RKH' => ['Razavi Khorasan Province', 'Razavi Khorasan Province', 'استان خراسان رضوی'], 'NKH' => ['North Khorasan Province', 'North Khorasan Province', 'استان خراسان شمالی'], 'SMN' => ['Semnan Province', 'Semnan Province', 'استان سمنان'], 'FRS' => ['Fars Province', 'Fars Province', 'استان فارس'], 'QHM' => ['Qom Province', 'Qom Province', 'استان قم'], 'KRD' => ['Kurdistan Province', 'Kurdistan Province', 'استان کردستان'], 'KBD' => ['Kohgiluyeh and Boyer-Ahmad Province', 'Kohgiluyeh and Boyer-Ahmad Province', 'استان کهگیلویه و بویراحمد'], 'GLS' => ['Golestan Province', 'Golestan Province', 'استان گلستان'], 'GIL' => ['Gilan Province', 'Gilan Province', 'استان گیلان'], 'MZN' => ['Mazandaran Province', 'Mazandaran Province', 'استان مازندران'], 'MKZ' => ['Markazi Province', 'Markazi Province', 'استان مرکزی'], 'HRZ' => ['Hormozgan Province', 'Hormozgan Province', 'استان هرمزگان'], 'SBN' => ['Sistan and Baluchestan Province', 'Sistan and Baluchestan Province', 'استان سیستان و بلوچستان']],
            // Iceland.
            'IS' => [],
            // Italy.
            'IT' => ['AG' => ['AG', 'Agrigento', NULL], 'AL' => ['AL', 'Alessandria', NULL], 'AN' => ['AN', 'Ancona', NULL], 'AO' => ['AO', 'Aosta', NULL], 'AR' => ['AR', 'Arezzo', NULL], 'AP' => ['AP', 'Ascoli Piceno', NULL], 'AT' => ['AT', 'Asti', NULL], 'AV' => ['AV', 'Avellino', NULL], 'BA' => ['BA', 'Bari', NULL], 'BT' => ['BT', 'Barletta-Andria-Trani', NULL], 'BL' => ['BL', 'Belluno', NULL], 'BN' => ['BN', 'Benevento', NULL], 'BG' => ['BG', 'Bergamo', NULL], 'BI' => ['BI', 'Biella', NULL], 'BO' => ['BO', 'Bologna', NULL], 'BZ' => ['BZ', 'Bolzano', NULL], 'BS' => ['BS', 'Brescia', NULL], 'BR' => ['BR', 'Brindisi', NULL], 'CA' => ['CA', 'Cagliari', NULL], 'CL' => ['CL', 'Caltanissetta', NULL], 'CB' => ['CB', 'Campobasso', NULL], 'CE' => ['CE', 'Caserta', NULL], 'CT' => ['CT', 'Catania', NULL], 'CZ' => ['CZ', 'Catanzaro', NULL], 'CH' => ['CH', 'Chieti', NULL], 'CO' => ['CO', 'Como', NULL], 'CS' => ['CS', 'Cosenza', NULL], 'CR' => ['CR', 'Cremona', NULL], 'KR' => ['KR', 'Crotone', NULL], 'CN' => ['CN', 'Cuneo', NULL], 'EN' => ['EN', 'Enna', NULL], 'FM' => ['FM', 'Fermo', NULL], 'FE' => ['FE', 'Ferrara', NULL], 'FI' => ['FI', 'Firenze', NULL], 'FG' => ['FG', 'Foggia', NULL], 'FC' => ['FC', 'Forlì-Cesena', NULL], 'FR' => ['FR', 'Frosinone', NULL], 'GE' => ['GE', 'Genova', NULL], 'GO' => ['GO', 'Gorizia', NULL], 'GR' => ['GR', 'Grosseto', NULL], 'IM' => ['IM', 'Imperia', NULL], 'IS' => ['IS', 'Isernia', NULL], 'SP' => ['SP', 'La Spezia', NULL], 'AQ' => ['AQ', "L'Aquila", NULL], 'LT' => ['LT', 'Latina', NULL], 'LE' => ['LE', 'Lecce', NULL], 'LC' => ['LC', 'Lecco', NULL], 'LI' => ['LI', 'Livorno', NULL], 'LO' => ['LO', 'Lodi', NULL], 'LU' => ['LU', 'Lucca', NULL], 'MC' => ['MC', 'Macerata', NULL], 'MN' => ['MN', 'Mantova', NULL], 'MS' => ['MS', 'Massa-Carrara', NULL], 'MT' => ['MT', 'Matera', NULL], 'ME' => ['ME', 'Messina', NULL], 'MI' => ['MI', 'Milano', NULL], 'MO' => ['MO', 'Modena', NULL], 'MB' => ['MB', 'Monza e Brianza', NULL], 'NA' => ['NA', 'Napoli', NULL], 'NO' => ['NO', 'Novara', NULL], 'NU' => ['NU', 'Nuoro', NULL], 'OR' => ['OR', 'Oristano', NULL], 'PD' => ['PD', 'Padova', NULL], 'PA' => ['PA', 'Palermo', NULL], 'PR' => ['PR', 'Parma', NULL], 'PV' => ['PV', 'Pavia', NULL], 'PG' => ['PG', 'Perugia', NULL], 'PU' => ['PU', 'Pesaro e Urbino', NULL], 'PE' => ['PE', 'Pescara', NULL], 'PC' => ['PC', 'Piacenza', NULL], 'PI' => ['PI', 'Pisa', NULL], 'PT' => ['PT', 'Pistoia', NULL], 'PN' => ['PN', 'Pordenone', NULL], 'PZ' => ['PZ', 'Potenza', NULL], 'PO' => ['PO', 'Prato', NULL], 'RG' => ['RG', 'Ragusa', NULL], 'RA' => ['RA', 'Ravenna', NULL], 'RC' => ['RC', 'Reggio Calabria', NULL], 'RE' => ['RE', 'Reggio Emilia', NULL], 'RI' => ['RI', 'Rieti', NULL], 'RN' => ['RN', 'Rimini', NULL], 'RM' => ['RM', 'Roma', NULL], 'RO' => ['RO', 'Rovigo', NULL], 'SA' => ['SA', 'Salerno', NULL], 'SS' => ['SS', 'Sassari', NULL], 'SV' => ['SV', 'Savona', NULL], 'SI' => ['SI', 'Siena', NULL], 'SR' => ['SR', 'Siracusa', NULL], 'SO' => ['SO', 'Sondrio', NULL], 'SU' => ['SU', 'Sud Sardegna', NULL], 'TA' => ['TA', 'Taranto', NULL], 'TE' => ['TE', 'Teramo', NULL], 'TR' => ['TR', 'Terni', NULL], 'TO' => ['TO', 'Torino', NULL], 'TP' => ['TP', 'Trapani', NULL], 'TN' => ['TN', 'Trento', NULL], 'TV' => ['TV', 'Treviso', NULL], 'TS' => ['TS', 'Trieste', NULL], 'UD' => ['UD', 'Udine', NULL], 'VA' => ['VA', 'Varese', NULL], 'VE' => ['VE', 'Venezia', NULL], 'VB' => ['VB', 'Verbano-Cusio-Ossola', NULL], 'VC' => ['VC', 'Vercelli', NULL], 'VR' => ['VR', 'Verona', NULL], 'VV' => ['VV', 'Vibo Valentia', NULL], 'VI' => ['VI', 'Vicenza', NULL], 'VT' => ['VT', 'Viterbo', NULL]],
            // Jamaica.
            'JM' => ['JM-01' => ['Kingston', 'Kingston', NULL], 'JM-02' => ['St. Andrew', 'St. Andrew', NULL], 'JM-03' => ['St. Thomas', 'St. Thomas', NULL], 'JM-04' => ['Portland', 'Portland', NULL], 'JM-05' => ['St. Mary', 'St. Mary', NULL], 'JM-06' => ['St. Ann', 'St. Ann', NULL], 'JM-07' => ['Trelawny', 'Trelawny', NULL], 'JM-08' => ['St. James', 'St. James', NULL], 'JM-09' => ['Hanover', 'Hanover', NULL], 'JM-10' => ['Westmoreland', 'Westmoreland', NULL], 'JM-11' => ['St. Elizabeth', 'St. Elizabeth', NULL], 'JM-12' => ['Manchester', 'Manchester', NULL], 'JM-13' => ['Clarendon', 'Clarendon', NULL], 'JM-14' => ['St. Catherine', 'St. Catherine', NULL]],
            // Japan.
            'JP' => ['JP01' => ['Hokkaido', 'Hokkaido', '北海道'], 'JP02' => ['Aomori', 'Aomori', '青森県'], 'JP03' => ['Iwate', 'Iwate', '岩手県'], 'JP04' => ['Miyagi', 'Miyagi', '宮城県'], 'JP05' => ['Akita', 'Akita', '秋田県'], 'JP06' => ['Yamagata', 'Yamagata', '山形県'], 'JP07' => ['Fukushima', 'Fukushima', '福島県'], 'JP08' => ['Ibaraki', 'Ibaraki', '茨城県'], 'JP09' => ['Tochigi', 'Tochigi', '栃木県'], 'JP10' => ['Gunma', 'Gunma', '群馬県'], 'JP11' => ['Saitama', 'Saitama', '埼玉県'], 'JP12' => ['Chiba', 'Chiba', '千葉県'], 'JP13' => ['Tokyo', 'Tokyo', '東京都'], 'JP14' => ['Kanagawa', 'Kanagawa', '神奈川県'], 'JP15' => ['Niigata', 'Niigata', '新潟県'], 'JP16' => ['Toyama', 'Toyama', '富山県'], 'JP17' => ['Ishikawa', 'Ishikawa', '石川県'], 'JP18' => ['Fukui', 'Fukui', '福井県'], 'JP19' => ['Yamanashi', 'Yamanashi', '山梨県'], 'JP20' => ['Nagano', 'Nagano', '長野県'], 'JP21' => ['Gifu', 'Gifu', '岐阜県'], 'JP22' => ['Shizuoka', 'Shizuoka', '静岡県'], 'JP23' => ['Aichi', 'Aichi', '愛知県'], 'JP24' => ['Mie', 'Mie', '三重県'], 'JP25' => ['Shiga', 'Shiga', '滋賀県'], 'JP26' => ['Kyoto', 'Kyoto', '京都府'], 'JP27' => ['Osaka', 'Osaka', '大阪府'], 'JP28' => ['Hyogo', 'Hyogo', '兵庫県'], 'JP29' => ['Nara', 'Nara', '奈良県'], 'JP30' => ['Wakayama', 'Wakayama', '和歌山県'], 'JP31' => ['Tottori', 'Tottori', '鳥取県'], 'JP32' => ['Shimane', 'Shimane', '島根県'], 'JP33' => ['Okayama', 'Okayama', '岡山県'], 'JP34' => ['Hiroshima', 'Hiroshima', '広島県'], 'JP35' => ['Yamaguchi', 'Yamaguchi', '山口県'], 'JP36' => ['Tokushima', 'Tokushima', '徳島県'], 'JP37' => ['Kagawa', 'Kagawa', '香川県'], 'JP38' => ['Ehime', 'Ehime', '愛媛県'], 'JP39' => ['Kochi', 'Kochi', '高知県'], 'JP40' => ['Fukuoka', 'Fukuoka', '福岡県'], 'JP41' => ['Saga', 'Saga', '佐賀県'], 'JP42' => ['Nagasaki', 'Nagasaki', '長崎県'], 'JP43' => ['Kumamoto', 'Kumamoto', '熊本県'], 'JP44' => ['Oita', 'Oita', '大分県'], 'JP45' => ['Miyazaki', 'Miyazaki', '宮崎県'], 'JP46' => ['Kagoshima', 'Kagoshima', '鹿児島県'], 'JP47' => ['Okinawa', 'Okinawa', '沖縄県']],
            // Kenya.
            'KE' => [],
            // South Korea.
            'KR' => [],
            // Kuwait.
            'KW' => [],
            // Laos.
            'LA' => [],
            // Lebanon.
            'LB' => [],
            // Sri Lanka.
            'LK' => [],
            // Liberia.
            'LR' => [],
            // Luxembourg.
            'LU' => [],
            // Moldova.
            'MD' => [],
            // Martinique.
            'MQ' => [],
            // Malta.
            'MT' => [],
            // Mexico.
            'MX' => ['DF' => ['CDMX', 'Ciudad de México', NULL], 'JA' => ['Jal.', 'Jalisco', NULL], 'NL' => ['N.L.', 'Nuevo León', NULL], 'AG' => ['Ags.', 'Aguascalientes', NULL], 'BC' => ['B.C.', 'Baja California', NULL], 'BS' => ['B.C.S.', 'Baja California Sur', NULL], 'CM' => ['Camp.', 'Campeche', NULL], 'CS' => ['Chis.', 'Chiapas', NULL], 'CH' => ['Chih.', 'Chihuahua', NULL], 'CO' => ['Coah.', 'Coahuila de Zaragoza', NULL], 'CL' => ['Col.', 'Colima', NULL], 'DG' => ['Dgo.', 'Durango', NULL], 'GT' => ['Gto.', 'Guanajuato', NULL], 'GR' => ['Gro.', 'Guerrero', NULL], 'HG' => ['Hgo.', 'Hidalgo', NULL], 'MX' => ['Méx.', 'Estado de México', NULL], 'MI' => ['Mich.', 'Michoacán', NULL], 'MO' => ['Mor.', 'Morelos', NULL], 'NA' => ['Nay.', 'Nayarit', NULL], 'OA' => ['Oax.', 'Oaxaca', NULL], 'PU' => ['Pue.', 'Puebla', NULL], 'QT' => ['Qro.', 'Querétaro', NULL], 'QR' => ['Q.R.', 'Quintana Roo', NULL], 'SL' => ['S.L.P.', 'San Luis Potosí', NULL], 'SI' => ['Sin.', 'Sinaloa', NULL], 'SO' => ['Son.', 'Sonora', NULL], 'TB' => ['Tab.', 'Tabasco', NULL], 'TM' => ['Tamps.', 'Tamaulipas', NULL], 'TL' => ['Tlax.', 'Tlaxcala', NULL], 'VE' => ['Ver.', 'Veracruz', NULL], 'YU' => ['Yuc.', 'Yucatán', NULL], 'ZA' => ['Zac.', 'Zacatecas', NULL]],
            // Malaysia.
            'MY' => ['JHR' => ['Johor', 'Johor', NULL], 'KDH' => ['Kedah', 'Kedah', NULL], 'KTN' => ['Kelantan', 'Kelantan', NULL], 'LBN' => ['Labuan', 'Labuan', NULL], 'MLK' => ['Melaka', 'Melaka', NULL], 'NSN' => ['Negeri Sembilan', 'Negeri Sembilan', NULL], 'PHG' => ['Pahang', 'Pahang', NULL], 'PNG' => ['Pulau Pinang', 'Pulau Pinang', NULL], 'PRK' => ['Perak', 'Perak', NULL], 'PLS' => ['Perlis', 'Perlis', NULL], 'SBH' => ['Sabah', 'Sabah', NULL], 'SWK' => ['Sarawak', 'Sarawak', NULL], 'SGR' => ['Selangor', 'Selangor', NULL], 'TRG' => ['Terengganu', 'Terengganu', NULL], 'PJY' => ['Putrajaya', 'Putrajaya', NULL], 'KUL' => ['Kuala Lumpur', 'Kuala Lumpur', NULL]],
            // Mozambique.
            'MZ' => ['MZP' => ['Cabo Delgado', 'Cabo Delgado', NULL], 'MZG' => ['Gaza', 'Gaza', NULL], 'MZI' => ['Inhambane', 'Inhambane', NULL], 'MZB' => ['Manica', 'Manica', NULL], 'MZL' => ['Maputo', 'Maputo', NULL], 'MZMPM' => ['Cidade de Maputo', 'Cidade de Maputo', NULL], 'MZN' => ['Nampula', 'Nampula', NULL], 'MZA' => ['Niassa', 'Niassa', NULL], 'MZS' => ['Sofala', 'Sofala', NULL], 'MZT' => ['Tete', 'Tete', NULL], 'MZQ' => ['Zambezia', 'Zambezia', NULL]],
            // Namibia.
            'NA' => [],
            // Nigeria.
            'NG' => ['AB' => ['Abia', 'Abia', NULL], 'FC' => ['Federal Capital Territory', 'Federal Capital Territory', NULL], 'AD' => ['Adamawa', 'Adamawa', NULL], 'AK' => ['Akwa Ibom', 'Akwa Ibom', NULL], 'AN' => ['Anambra', 'Anambra', NULL], 'BA' => ['Bauchi', 'Bauchi', NULL], 'BY' => ['Bayelsa', 'Bayelsa', NULL], 'BE' => ['Benue', 'Benue', NULL], 'BO' => ['Borno', 'Borno', NULL], 'CR' => ['Cross River', 'Cross River', NULL], 'DE' => ['Delta', 'Delta', NULL], 'EB' => ['Ebonyi', 'Ebonyi', NULL], 'ED' => ['Edo', 'Edo', NULL], 'EK' => ['Ekiti', 'Ekiti', NULL], 'EN' => ['Enugu', 'Enugu', NULL], 'GO' => ['Gombe', 'Gombe', NULL], 'IM' => ['Imo', 'Imo', NULL], 'JI' => ['Jigawa', 'Jigawa', NULL], 'KD' => ['Kaduna', 'Kaduna', NULL], 'KN' => ['Kano', 'Kano', NULL], 'KT' => ['Katsina', 'Katsina', NULL], 'KE' => ['Kebbi', 'Kebbi', NULL], 'KO' => ['Kogi', 'Kogi', NULL], 'KW' => ['Kwara', 'Kwara', NULL], 'LA' => ['Lagos', 'Lagos', NULL], 'NA' => ['Nasarawa', 'Nasarawa', NULL], 'NI' => ['Niger', 'Niger', NULL], 'OG' => ['Ogun State', 'Ogun State', NULL], 'ON' => ['Ondo', 'Ondo', NULL], 'OS' => ['Osun', 'Osun', NULL], 'OY' => ['Oyo', 'Oyo', NULL], 'PL' => ['Plateau', 'Plateau', NULL], 'RI' => ['Rivers', 'Rivers', NULL], 'SO' => ['Sokoto', 'Sokoto', NULL], 'TA' => ['Taraba', 'Taraba', NULL], 'YO' => ['Yobe', 'Yobe', NULL], 'ZA' => ['Zamfara', 'Zamfara', NULL]],
            // Netherlands.
            'NL' => [],
            // Norway.
            'NO' => [],
            // Nepal.
            'NP' => [],
            // New Zealand.
            'NZ' => [],
            // Peru.
            'PE' => ['CAL' => ['Callao', 'Callao', NULL], 'LMA' => ['Municipalidad Metropolitana de Lima', 'Municipalidad Metropolitana de Lima', NULL], 'AMA' => ['Amazonas', 'Amazonas', NULL], 'ANC' => ['Áncash', 'Áncash', NULL], 'APU' => ['Apurímac', 'Apurímac', NULL], 'ARE' => ['Arequipa', 'Arequipa', NULL], 'AYA' => ['Ayacucho', 'Ayacucho', NULL], 'CAJ' => ['Cajamarca', 'Cajamarca', NULL], 'CUS' => ['Cuzco', 'Cuzco', NULL], 'HUV' => ['Huancavelica', 'Huancavelica', NULL], 'HUC' => ['Huánuco', 'Huánuco', NULL], 'ICA' => ['Ica', 'Ica', NULL], 'JUN' => ['Junín', 'Junín', NULL], 'LAL' => ['La Libertad', 'La Libertad', NULL], 'LAM' => ['Lambayeque', 'Lambayeque', NULL], 'LIM' => ['Gobierno Regional de Lima', 'Gobierno Regional de Lima', NULL], 'LOR' => ['Loreto', 'Loreto', NULL], 'MDD' => ['Madre de Dios', 'Madre de Dios', NULL], 'MOQ' => ['Moquegua', 'Moquegua', NULL], 'PAS' => ['Pasco', 'Pasco', NULL], 'PIU' => ['Piura', 'Piura', NULL], 'PUN' => ['Puno', 'Puno', NULL], 'SAM' => ['San Martín', 'San Martín', NULL], 'TAC' => ['Tacna', 'Tacna', NULL], 'TUM' => ['Tumbes', 'Tumbes', NULL], 'UCA' => ['Ucayali', 'Ucayali', NULL]],
            // Philippines.
            'PH' => ['ABR' => ['Abra', 'Abra', NULL], 'AGN' => ['Agusan del Norte', 'Agusan del Norte', NULL], 'AGS' => ['Agusan del Sur', 'Agusan del Sur', NULL], 'AKL' => ['Aklan', 'Aklan', NULL], 'ALB' => ['Albay', 'Albay', NULL], 'ANT' => ['Antique', 'Antique', NULL], 'APA' => ['Apayao', 'Apayao', NULL], 'AUR' => ['Aurora', 'Aurora', NULL], 'BAS' => ['Basilan', 'Basilan', NULL], 'BAN' => ['Bataan', 'Bataan', NULL], 'BTN' => ['Batanes', 'Batanes', NULL], 'BTG' => ['Batangas', 'Batangas', NULL], 'BEN' => ['Benguet', 'Benguet', NULL], 'BIL' => ['Biliran', 'Biliran', NULL], 'BOH' => ['Bohol', 'Bohol', NULL], 'BUK' => ['Bukidnon', 'Bukidnon', NULL], 'BUL' => ['Bulacan', 'Bulacan', NULL], 'CAG' => ['Cagayan', 'Cagayan', NULL], 'CAN' => ['Camarines Norte', 'Camarines Norte', NULL], 'CAS' => ['Camarines Sur', 'Camarines Sur', NULL], 'CAM' => ['Camiguin', 'Camiguin', NULL], 'CAP' => ['Capiz', 'Capiz', NULL], 'CAT' => ['Catanduanes', 'Catanduanes', NULL], 'CAV' => ['Cavite', 'Cavite', NULL], 'CEB' => ['Cebu', 'Cebu', NULL], 'COM' => ['Compostela Valley', 'Compostela Valley', NULL], 'NCO' => ['Cotabato', 'Cotabato', NULL], 'DAV' => ['Davao del Norte', 'Davao del Norte', NULL], 'DAS' => ['Davao del Sur', 'Davao del Sur', NULL], 'DAC' => ['Davao Occidental', 'Davao Occidental', NULL], 'DAO' => ['Davao Oriental', 'Davao Oriental', NULL], 'DIN' => ['Dinagat Islands', 'Dinagat Islands', NULL], 'EAS' => ['Eastern Samar', 'Eastern Samar', NULL], 'GUI' => ['Guimaras', 'Guimaras', NULL], 'IFU' => ['Ifugao', 'Ifugao', NULL], 'ILN' => ['Ilocos Norte', 'Ilocos Norte', NULL], 'ILS' => ['Ilocos Sur', 'Ilocos Sur', NULL], 'ILI' => ['Iloilo', 'Iloilo', NULL], 'ISA' => ['Isabela', 'Isabela', NULL], 'KAL' => ['Kalinga', 'Kalinga', NULL], 'LUN' => ['La Union', 'La Union', NULL], 'LAG' => ['Laguna', 'Laguna', NULL], 'LAN' => ['Lanao del Norte', 'Lanao del Norte', NULL], 'LAS' => ['Lanao del Sur', 'Lanao del Sur', NULL], 'LEY' => ['Leyte', 'Leyte', NULL], 'MAG' => ['Maguindanao', 'Maguindanao', NULL], 'MAD' => ['Marinduque', 'Marinduque', NULL], 'MAS' => ['Masbate', 'Masbate', NULL], 'MSC' => ['Misamis Occidental', 'Misamis Occidental', NULL], 'MSR' => ['Misamis Oriental', 'Misamis Oriental', NULL], 'MOU' => ['Mountain Province', 'Mountain Province', NULL], 'NEC' => ['Negros Occidental', 'Negros Occidental', NULL], 'NER' => ['Negros Oriental', 'Negros Oriental', NULL], 'NSA' => ['Northern Samar', 'Northern Samar', NULL], 'NUE' => ['Nueva Ecija', 'Nueva Ecija', NULL], 'NUV' => ['Nueva Vizcaya', 'Nueva Vizcaya', NULL], 'MDC' => ['Mindoro Occidental', 'Mindoro Occidental', NULL], 'MDR' => ['Mindoro Oriental', 'Mindoro Oriental', NULL], 'PLW' => ['Palawan', 'Palawan', NULL], 'PAM' => ['Pampanga', 'Pampanga', NULL], 'PAN' => ['Pangasinan', 'Pangasinan', NULL], 'QUE' => ['Quezon Province', 'Quezon Province', NULL], 'QUI' => ['Quirino', 'Quirino', NULL], 'RIZ' => ['Rizal', 'Rizal', NULL], 'ROM' => ['Romblon', 'Romblon', NULL], 'WSA' => ['Samar', 'Samar', NULL], 'SAR' => ['Sarangani', 'Sarangani', NULL], 'SIQ' => ['Siquijor', 'Siquijor', NULL], 'SOR' => ['Sorsogon', 'Sorsogon', NULL], 'SCO' => ['South Cotabato', 'South Cotabato', NULL], 'SLE' => ['Southern Leyte', 'Southern Leyte', NULL], 'SUK' => ['Sultan Kudarat', 'Sultan Kudarat', NULL], 'SLU' => ['Sulu', 'Sulu', NULL], 'SUN' => ['Surigao del Norte', 'Surigao del Norte', NULL], 'SUR' => ['Surigao del Sur', 'Surigao del Sur', NULL], 'TAR' => ['Tarlac', 'Tarlac', NULL], 'TAW' => ['Tawi-Tawi', 'Tawi-Tawi', NULL], 'ZMB' => ['Zambales', 'Zambales', NULL], 'ZAN' => ['Zamboanga del Norte', 'Zamboanga del Norte', NULL], 'ZAS' => ['Zamboanga del Sur', 'Zamboanga del Sur', NULL], 'ZSI' => ['Zamboanga Sibuguey', 'Zamboanga Sibuguey', NULL], '00' => ['Metro Manila', 'Metro Manila', NULL]],
            // Pakistan.
            'PK' => [],
            // Poland.
            'PL' => [],
            // Puerto Rico.
            'PR' => [],
            // Portugal.
            'PT' => [],
            // Paraguay.
            'PY' => [],
            // Reunion.
            'RE' => [],
            // Romania.
            'RO' => [],
            // Serbia.
            'RS' => [],
            // Sweden.
            'SE' => [],
            // Singapore.
            'SG' => [],
            // Slovenia.
            'SI' => [],
            // Slovakia.
            'SK' => [],
            // Thailand.
            'TH' => ['TH-37' => ['Amnat Charoen', 'Amnat Charoen', 'อำนาจเจริญ'], 'TH-15' => ['Ang Thong', 'Ang Thong', 'อ่างทอง'], 'TH-14' => ['Phra Nakhon Si Ayutthaya', 'Phra Nakhon Si Ayutthaya', 'พระนครศรีอยุธยา'], 'TH-10' => ['Bangkok', 'Bangkok', 'กรุงเทพมหานคร'], 'TH-38' => ['Bueng Kan', 'Bueng Kan', 'จังหวัด บึงกาฬ'], 'TH-31' => ['Buri Ram', 'Buri Ram', 'บุรีรัมย์'], 'TH-24' => ['Chachoengsao', 'Chachoengsao', 'ฉะเชิงเทรา'], 'TH-18' => ['Chai Nat', 'Chai Nat', 'ชัยนาท'], 'TH-36' => ['Chaiyaphum', 'Chaiyaphum', 'ชัยภูมิ'], 'TH-22' => ['Chanthaburi', 'Chanthaburi', 'จันทบุรี'], 'TH-50' => ['Chiang Rai', 'Chiang Rai', 'เชียงราย'], 'TH-57' => ['Chiang Mai', 'Chiang Mai', 'เชียงใหม่'], 'TH-20' => ['Chon Buri', 'Chon Buri', 'ชลบุรี'], 'TH-86' => ['Chumpon', 'Chumpon', 'ชุมพร'], 'TH-46' => ['Kalasin', 'Kalasin', 'กาฬสินธุ์'], 'TH-62' => ['Kamphaeng Phet', 'Kamphaeng Phet', 'กำแพงเพชร'], 'TH-71' => ['Kanchanaburi', 'Kanchanaburi', 'กาญจนบุรี'], 'TH-40' => ['Khon Kaen', 'Khon Kaen', 'ขอนแก่น'], 'TH-81' => ['Krabi', 'Krabi', 'กระบี่'], 'TH-52' => ['Lampang', 'Lampang', 'ลำปาง'], 'TH-51' => ['Lamphun', 'Lamphun', 'ลำพูน'], 'TH-42' => ['Loei', 'Loei', 'เลย'], 'TH-16' => ['Lop Buri', 'Lop Buri', 'ลพบุรี'], 'TH-58' => ['Mae Hong Son', 'Mae Hong Son', 'แม่ฮ่องสอน'], 'TH-44' => ['Maha Sarakham', 'Maha Sarakham', 'มหาสารคาม'], 'TH-49' => ['Mukdahan', 'Mukdahan', 'มุกดาหาร'], 'TH-26' => ['Nakhon Nayok', 'Nakhon Nayok', 'นครนายก'], 'TH-73' => ['Nakhon Pathom', 'Nakhon Pathom', 'นครปฐม'], 'TH-48' => ['Nakhon Phanom', 'Nakhon Phanom', 'นครพนม'], 'TH-30' => ['Nakhon Ratchasima', 'Nakhon Ratchasima', 'นครราชสีมา'], 'TH-60' => ['Nakhon Sawan', 'Nakhon Sawan', 'นครสวรรค์'], 'TH-80' => ['Nakhon Si Thammarat', 'Nakhon Si Thammarat', 'นครศรีธรรมราช'], 'TH-55' => ['Nan', 'Nan', 'น่าน'], 'TH-96' => ['Narathiwat', 'Narathiwat', 'นราธิวาส'], 'TH-39' => ['Nong Bua Lam Phu', 'Nong Bua Lam Phu', 'หนองบัวลำภู'], 'TH-43' => ['Nong Khai', 'Nong Khai', 'หนองคาย'], 'TH-12' => ['Nonthaburi', 'Nonthaburi', 'นนทบุรี'], 'TH-13' => ['Pathum Thani', 'Pathum Thani', 'ปทุมธานี'], 'TH-94' => ['Pattani', 'Pattani', 'ปัตตานี'], 'TH-82' => ['Phang Nga', 'Phang Nga', 'พังงา'], 'TH-93' => ['Phattalung', 'Phattalung', 'พัทลุง'], 'TH-56' => ['Phayao', 'Phayao', 'พะเยา'], 'TH-67' => ['Phetchabun', 'Phetchabun', 'เพชรบูรณ์'], 'TH-76' => ['Phetchaburi', 'Phetchaburi', 'เพชรบุรี'], 'TH-66' => ['Phichit', 'Phichit', 'พิจิตร'], 'TH-65' => ['Phitsanulok', 'Phitsanulok', 'พิษณุโลก'], 'TH-54' => ['Phrae', 'Phrae', 'แพร่'], 'TH-83' => ['Phuket', 'Phuket', 'ภูเก็ต'], 'TH-25' => ['Prachin Buri', 'Prachin Buri', 'ปราจีนบุรี'], 'TH-77' => ['Prachuap Khiri Khan', 'Prachuap Khiri Khan', 'ประจวบคีรีขันธ์'], 'TH-85' => ['Ranong', 'Ranong', 'ระนอง'], 'TH-70' => ['Ratchaburi', 'Ratchaburi', 'ราชบุรี'], 'TH-21' => ['Rayong', 'Rayong', 'ระยอง'], 'TH-45' => ['Roi Et', 'Roi Et', 'ร้อยเอ็ด'], 'TH-27' => ['Sa Kaeo', 'Sa Kaeo', 'สระแก้ว'], 'TH-47' => ['Sakon Nakhon', 'Sakon Nakhon', 'สกลนคร'], 'TH-11' => ['Samut Prakan', 'Samut Prakan', 'สมุทรปราการ'], 'TH-74' => ['Samut Sakhon', 'Samut Sakhon', 'สมุทรสาคร'], 'TH-75' => ['Samut Songkhram', 'Samut Songkhram', 'สมุทรสงคราม'], 'TH-19' => ['Saraburi', 'Saraburi', 'สระบุรี'], 'TH-91' => ['Satun', 'Satun', 'สตูล'], 'TH-17' => ['Sing Buri', 'Sing Buri', 'สิงห์บุรี'], 'TH-33' => ['Si Sa Ket', 'Si Sa Ket', 'ศรีสะเกษ'], 'TH-90' => ['Songkhla', 'Songkhla', 'สงขลา'], 'TH-64' => ['Sukhothai', 'Sukhothai', 'สุโขทัย'], 'TH-72' => ['Suphanburi', 'Suphanburi', 'สุพรรณบุรี'], 'TH-84' => ['Surat Thani', 'Surat Thani', 'สุราษฎร์ธานี'], 'TH-32' => ['Surin', 'Surin', 'สุรินทร์'], 'TH-63' => ['Tak', 'Tak', 'ตาก'], 'TH-92' => ['Trang', 'Trang', 'ตรัง'], 'TH-23' => ['Trat', 'Trat', 'ตราด'], 'TH-34' => ['Ubon Ratchathani', 'Ubon Ratchathani', 'อุบลราชธานี'], 'TH-41' => ['Udon Thani', 'Udon Thani', 'อุดรธานี'], 'TH-61' => ['Uthai Thani', 'Uthai Thani', 'อุทัยธานี'], 'TH-53' => ['Uttaradit', 'Uttaradit', 'อุตรดิตถ์'], 'TH-95' => ['Yala', 'Yala', 'ยะลา'], 'TH-35' => ['Yasothon', 'Yasothon', 'ยโสธร']],
            // Turkey.
            'TR' => ['TR01' => ['Adana', 'Adana', NULL], 'TR02' => ['Adıyaman', 'Adıyaman', NULL], 'TR03' => ['Afyon', 'Afyon', NULL], 'TR04' => ['Ağrı', 'Ağrı', NULL], 'TR05' => ['Amasya', 'Amasya', NULL], 'TR06' => ['Ankara', 'Ankara', NULL], 'TR07' => ['Antalya', 'Antalya', NULL], 'TR08' => ['Artvin', 'Artvin', NULL], 'TR09' => ['Aydın', 'Aydın', NULL], 'TR10' => ['Balıkesir', 'Balıkesir', NULL], 'TR11' => ['Bilecik', 'Bilecik', NULL], 'TR12' => ['Bingöl', 'Bingöl', NULL], 'TR13' => ['Bitlis', 'Bitlis', NULL], 'TR14' => ['Bolu', 'Bolu', NULL], 'TR15' => ['Burdur', 'Burdur', NULL], 'TR16' => ['Bursa', 'Bursa', NULL], 'TR17' => ['Çanakkale', 'Çanakkale', NULL], 'TR18' => ['Çankırı', 'Çankırı', NULL], 'TR19' => ['Çorum', 'Çorum', NULL], 'TR20' => ['Denizli', 'Denizli', NULL], 'TR21' => ['Diyarbakır', 'Diyarbakır', NULL], 'TR22' => ['Edirne', 'Edirne', NULL], 'TR23' => ['Elazığ', 'Elazığ', NULL], 'TR24' => ['Erzincan', 'Erzincan', NULL], 'TR25' => ['Erzurum', 'Erzurum', NULL], 'TR26' => ['Eskişehir', 'Eskişehir', NULL], 'TR27' => ['Gaziantep', 'Gaziantep', NULL], 'TR28' => ['Giresun', 'Giresun', NULL], 'TR29' => ['Gümüşhane', 'Gümüşhane', NULL], 'TR30' => ['Hakkari', 'Hakkari', NULL], 'TR31' => ['Hatay', 'Hatay', NULL], 'TR32' => ['Isparta', 'Isparta', NULL], 'TR33' => ['Mersin', 'Mersin', NULL], 'TR34' => ['İstanbul', 'İstanbul', NULL], 'TR35' => ['İzmir', 'İzmir', NULL], 'TR36' => ['Kars', 'Kars', NULL], 'TR37' => ['Kastamonu', 'Kastamonu', NULL], 'TR38' => ['Kayseri', 'Kayseri', NULL], 'TR39' => ['Kırklareli', 'Kırklareli', NULL], 'TR40' => ['Kırşehir', 'Kırşehir', NULL], 'TR41' => ['Kocaeli', 'Kocaeli', NULL], 'TR42' => ['Konya', 'Konya', NULL], 'TR43' => ['Kütahya', 'Kütahya', NULL], 'TR44' => ['Malatya', 'Malatya', NULL], 'TR45' => ['Manisa', 'Manisa', NULL], 'TR46' => ['Kahramanmaraş', 'Kahramanmaraş', NULL], 'TR47' => ['Mardin', 'Mardin', NULL], 'TR48' => ['Muğla', 'Muğla', NULL], 'TR49' => ['Muş', 'Muş', NULL], 'TR50' => ['Nevşehir', 'Nevşehir', NULL], 'TR51' => ['Niğde', 'Niğde', NULL], 'TR52' => ['Ordu', 'Ordu', NULL], 'TR53' => ['Rize', 'Rize', NULL], 'TR54' => ['Sakarya', 'Sakarya', NULL], 'TR55' => ['Samsun', 'Samsun', NULL], 'TR56' => ['Siirt', 'Siirt', NULL], 'TR57' => ['Sinop', 'Sinop', NULL], 'TR58' => ['Sivas', 'Sivas', NULL], 'TR59' => ['Tekirdağ', 'Tekirdağ', NULL], 'TR60' => ['Tokat', 'Tokat', NULL], 'TR61' => ['Trabzon', 'Trabzon', NULL], 'TR62' => ['Tunceli', 'Tunceli', NULL], 'TR63' => ['Şanlıurfa', 'Şanlıurfa', NULL], 'TR64' => ['Uşak', 'Uşak', NULL], 'TR65' => ['Van', 'Van', NULL], 'TR66' => ['Yozgat', 'Yozgat', NULL], 'TR67' => ['Zonguldak', 'Zonguldak', NULL], 'TR68' => ['Aksaray', 'Aksaray', NULL], 'TR69' => ['Bayburt', 'Bayburt', NULL], 'TR70' => ['Karaman', 'Karaman', NULL], 'TR71' => ['Kırıkkale', 'Kırıkkale', NULL], 'TR72' => ['Batman', 'Batman', NULL], 'TR73' => ['Şırnak', 'Şırnak', NULL], 'TR74' => ['Bartın', 'Bartın', NULL], 'TR75' => ['Ardahan', 'Ardahan', NULL], 'TR76' => ['Iğdır', 'Iğdır', NULL], 'TR77' => ['Yalova', 'Yalova', NULL], 'TR78' => ['Karabük', 'Karabük', NULL], 'TR79' => ['Kilis', 'Kilis', NULL], 'TR80' => ['Osmaniye', 'Osmaniye', NULL], 'TR81' => ['Düzce', 'Düzce', NULL]],
            // Tanzania.
            'TZ' => [],
            // Uganda.
            'UG' => [],
            // United States Minor Outlying Islands.
            'UM' => [],
            // United States.
            'US' => ['AL' => ['AL', 'Alabama', NULL], 'AK' => ['AK', 'Alaska', NULL], 'AZ' => ['AZ', 'Arizona', NULL], 'AR' => ['AR', 'Arkansas', NULL], 'CA' => ['CA', 'California', NULL], 'CO' => ['CO', 'Colorado', NULL], 'CT' => ['CT', 'Connecticut', NULL], 'DE' => ['DE', 'Delaware', NULL], 'DC' => ['DC', 'District of Columbia', NULL], 'FL' => ['FL', 'Florida', NULL], 'GA' => ['GA', 'Georgia', NULL], 'HI' => ['HI', 'Hawaii', NULL], 'ID' => ['ID', 'Idaho', NULL], 'IL' => ['IL', 'Illinois', NULL], 'IN' => ['IN', 'Indiana', NULL], 'IA' => ['IA', 'Iowa', NULL], 'KS' => ['KS', 'Kansas', NULL], 'KY' => ['KY', 'Kentucky', NULL], 'LA' => ['LA', 'Louisiana', NULL], 'ME' => ['ME', 'Maine', NULL], 'MD' => ['MD', 'Maryland', NULL], 'MA' => ['MA', 'Massachusetts', NULL], 'MI' => ['MI', 'Michigan', NULL], 'MN' => ['MN', 'Minnesota', NULL], 'MS' => ['MS', 'Mississippi', NULL], 'MO' => ['MO', 'Missouri', NULL], 'MT' => ['MT', 'Montana', NULL], 'NE' => ['NE', 'Nebraska', NULL], 'NV' => ['NV', 'Nevada', NULL], 'NH' => ['NH', 'New Hampshire', NULL], 'NJ' => ['NJ', 'New Jersey', NULL], 'NM' => ['NM', 'New Mexico', NULL], 'NY' => ['NY', 'New York', NULL], 'NC' => ['NC', 'North Carolina', NULL], 'ND' => ['ND', 'North Dakota', NULL], 'OH' => ['OH', 'Ohio', NULL], 'OK' => ['OK', 'Oklahoma', NULL], 'OR' => ['OR', 'Oregon', NULL], 'PA' => ['PA', 'Pennsylvania', NULL], 'RI' => ['RI', 'Rhode Island', NULL], 'SC' => ['SC', 'South Carolina', NULL], 'SD' => ['SD', 'South Dakota', NULL], 'TN' => ['TN', 'Tennessee', NULL], 'TX' => ['TX', 'Texas', NULL], 'UT' => ['UT', 'Utah', NULL], 'VT' => ['VT', 'Vermont', NULL], 'VA' => ['VA', 'Virginia', NULL], 'WA' => ['WA', 'Washington', NULL], 'WV' => ['WV', 'West Virginia', NULL], 'WI' => ['WI', 'Wisconsin', NULL], 'WY' => ['WY', 'Wyoming', NULL], 'AA' => ['AA', 'Armed Forces (AA)', NULL], 'AE' => ['AE', 'Armed Forces (AE)', NULL], 'AP' => ['AP', 'Armed Forces (AP)', NULL]],
            // Vietnam.
            'VN' => [],
            // Mayotte.
            'YT' => [],
            // South Africa.
            'ZA' => [],
            // Zambia.
            'ZM' => [],
        ];
        // phpcs:enable
        /**
         * Retrieves payment request button states.
         *
         * @since 3.6.1
         *
         * @return array
         */
        public function get_payment_request_states()
        {
        }
    }
    /**
     * Trait for payment request utility methods.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits
     */
    trait PaymentRequestUtils
    {
        use \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits\PaymentRequestStates;
        /**
         * Checks if gateway is available.
         *
         * @since 3.7.8
         *
         * @return boolean
         */
        public function is_gateway_available()
        {
        }
        /**
         * Checks to make sure product type is supported.
         * Currently simple and variable products are supported.
         *
         * @todo Add support for the following product types:
         *      'booking',
         *      'bundle',
         *      'composite'
         *
         * @since 3.6.1
         *
         * @return array
         */
        public function supported_product_types()
        {
        }
        /**
         * Returns true if the current page supports Payment Request Buttons, false otherwise.
         *
         * @since 3.6.1
         *
         * @return boolean True if the current page is supported, false otherwise.
         */
        private function is_page_supported()
        {
        }
        /**
         * Retrieves total label for payment request option.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_total_label()
        {
        }
        /**
         * Checks whether a certain product is supported for Payment Request.
         *
         * @since 3.6.1
         *
         * @param WC_Product $product The product that's being checked for support.
         *
         * @return boolean True if the provided product is supported, false otherwise.
         */
        private function is_product_supported($product)
        {
        }
        /**
         * Gets the product data for the currently viewed page
         *
         * @since 3.6.1
         *
         * @return mixed Returns false if not on a product page, the product information otherwise.
         */
        public function get_product_data()
        {
        }
        /**
         * Gets the product tax amount for the provided product.
         *
         * @since 3.6.2
         *
         * @param \WC_Product $product The product to get the tax for.
         *
         * @return float Tax amount for the given product.
         */
        public function get_tax($product)
        {
        }
        /**
         * Retrieves customer data for the current user.
         *
         * @since 3.6.2
         *
         * @return array
         */
        public function get_customer_data()
        {
        }
        /**
         * Checks whether authentication is required for checkout.
         *
         * @since 3.6.1
         *
         * @return bool
         */
        public function is_authentication_required()
        {
        }
        /**
         * Checks whether account creation is possible upon checkout.
         *
         * @since 3.6.1
         *
         * @return bool
         */
        public function is_account_creation_possible()
        {
        }
        /**
         * Checks whether cart contains a subscription product or this is a subscription product page.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function has_subscription_product()
        {
        }
        /**
         * Checks if this is a product page or content contains a product_page shortcode.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function is_product()
        {
        }
        /**
         * Get product from product page or product_page shortcode.
         *
         * @since 3.6.1
         *
         * @return \WC_Product Product object.
         */
        public function get_product()
        {
        }
        /**
         * Gets the product total price.
         *
         * @since 3.6.1
         *
         * @param object $product WC_Product_* object.
         *
         * @return float Total price.
         */
        public function get_product_price($product)
        {
        }
        /**
         * Builds the shippings methods to pass to Payment Request
         *
         * @since 3.6.1
         *
         * @return array
         */
        protected function build_shipping_methods($shipping_methods)
        {
        }
        /**
         * Builds the line items to pass to Payment Request
         *
         * @since 3.6.1
         *
         * @return array
         */
        protected function build_display_items($itemized_display_items = false)
        {
        }
        /**
         * Calculate and set shipping method.
         *
         * @param array $address Shipping address.
         *
         * @since 3.6.1
         *
         * @return void
         */
        protected function calculate_shipping($address = [])
        {
        }
        /**
         * Gets shipping options available for specified shipping address.
         *
         * @since 3.7.8
         *
         * @param array   $shipping_address       Shipping address.
         * @param boolean $itemized_display_items Indicates whether to show subtotals or itemized views.
         *
         * @return array Shipping options data.
         * @throws \Exception
         */
        protected function process_shipping_options($shipping_address, $itemized_display_items = false)
        {
        }
        /**
         * Updates shipping method in WC session.
         *
         * @since 3.7.8
         *
         * @param array $shipping_methods Array of selected shipping methods ids.
         *
         * @return void
         */
        public function modify_shipping_method($shipping_methods)
        {
        }
        /**
         * Normalizes postal code in case of redacted data from Apple Pay.
         *
         * @since 3.6.1
         *
         * @param string $postcode Postal code.
         * @param string $country Country.
         */
        public function get_normalized_postal_code($postcode, $country)
        {
        }
        /**
         * Normalizes billing and shipping state fields.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function normalize_state()
        {
        }
        /**
         * Checks if given state is normalized.
         *
         * @since 3.6.1
         *
         * @param string $state State.
         * @param string $country Two-letter country code.
         *
         * @return bool Whether state is normalized or not.
         */
        public function is_normalized_state($state, $country)
        {
        }
        /**
         * Sanitize string for comparison.
         *
         * @since 3.6.1
         *
         * @param string $string String to be sanitized.
         *
         * @return string The sanitized string.
         */
        public function sanitize_string($string)
        {
        }
        /**
         * Get normalized state from Payment Request API dropdown list of states.
         *
         * @since 3.6.1
         *
         * @param string $state   Full state name or state code.
         * @param string $country Two-letter country code.
         *
         * @return string Normalized state or original state input value.
         */
        public function get_normalized_state_from_pr_states($state, $country)
        {
        }
        /**
         * Get normalized state from WooCommerce list of translated states.
         *
         * @since 3.6.1
         *
         * @param string $state   Full state name or state code.
         * @param string $country Two-letter country code.
         *
         * @return string Normalized state or original state input value.
         */
        public function get_normalized_state_from_wc_states($state, $country)
        {
        }
        /**
         * Gets the normalized state/county field because in some
         * cases, the state/county field is formatted differently from
         * what WC is expecting and throws an error. An example
         * for Ireland, the county dropdown in Chrome shows "Co. Clare" format.
         *
         * @since 3.6.1
         *
         * @param string $state   Full state name or an already normalized abbreviation.
         * @param string $country Two-letter country code.
         *
         * @return string Normalized state abbreviation.
         */
        public function get_normalized_state($state, $country)
        {
        }
        /**
         * The Payment Request API provides its own validation for the address form.
         * For some countries, it might not provide a state field, so we need to return a more descriptive
         * error message, indicating that the Payment Request button is not supported for that country.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function validate_state()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\PaymentRequest {
    /**
     * Ajax handler class for Payment request options.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\PaymentRequest
     */
    class Ajax
    {
        use \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits\PaymentRequestUtils;
        /**
         * Constructor for Ajax class.
         *
         * @since 3.7.8
         */
        public function __construct()
        {
        }
        /**
         * Log errors coming from Payment Request
         *
         * @since 3.7.8
         *
         * @requires void
         */
        public function log_errors()
        {
        }
        /**
         * Clears cart.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function clear_cart()
        {
        }
        /**
         * Adds the current product to the cart. Used on product detail page.
         *
         * @since 3.7.8
         *
         * @return mixed
         */
        public function add_to_cart()
        {
        }
        /**
         * Create order. Security is handled by WC.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function create_order()
        {
        }
        /**
         * Get cart details.
         *
         * @since 3.7.8
         *
         * @return mixed
         */
        public function get_cart_details()
        {
        }
        /**
         * Get shipping options.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function get_shipping_options()
        {
        }
        /**
         * Update shipping method.
         *
         * @since 3.7.8
         *
         * @return mixed
         */
        public function update_shipping_method()
        {
        }
        /**
         * Gets the selected product data.
         *
         * @since 3.7.8
         *
         * @return mixed
         */
        public function get_selected_product_data()
        {
        }
    }
    /**
     * Stripe Payment Request API controller
     * Adds support for Apple Pay and Chrome Payment Request API buttons.
     * Utilizes the Stripe Payment Request Button to support checkout from the product detail and cart pages.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\PaymentRequest
     */
    class Manager
    {
        use \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits\PaymentRequestUtils;
        /**
         * Payment request types.
         *
         * @since 3.7.8
         *
         * @var array
         */
        const PAYMENT_REQUEST_TYPES = ['apple_pay', 'google_pay', 'payment_request_api'];
        /**
         * Indicates if stripe express gateway is enabled.
         *
         * @since 3.7.8
         *
         * @var bool
         */
        protected $gateway_enabled;
        /**
         * Indicates whether gateway is ready or not.
         *
         * @since 3.7.12
         *
         * @var bool
         */
        protected $gateway_ready;
        /**
         * Indicates if API is ready to be connected.
         *
         * @since 3.7.8
         *
         * @var bool
         */
        protected $api_ready;
        /**
         * Holds the instance of configuration.
         *
         * @since 3.7.8
         *
         * @var Config
         */
        protected $config;
        /**
         * Class constructor.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Determines whether Payment Request is enabled in settings.
         *
         * @since 3.7.8
         *
         * @return boolean
         */
        public function is_enabled()
        {
        }
        /**
         * Determines whether Stripe Express is enabled in settings.
         *
         * @since 3.7.8
         *
         * @return boolean
         */
        public function is_gateway_enabled()
        {
        }
        /**
         * Retrieves option value.
         *
         * @since 3.7.8
         *
         * @param string $key
         *
         * @return mixed
         */
        protected function get_option($key)
        {
        }
        /**
         * Initialize hooks.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Instantiates all necessary classes.
         *
         * @since 3.7.8
         *
         * @return void
         */
        protected function init_classes()
        {
        }
        /**
         * Gets the button type.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_button_type()
        {
        }
        /**
         * Gets the button theme.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_button_theme()
        {
        }
        /**
         * Gets the button height.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_button_height()
        {
        }
        /**
         * Retrieves value of button locations option.
         *
         * @since 3.7.8
         *
         * @return array
         */
        public function get_button_locations()
        {
        }
        /**
         * The settings for the `button` attribute - they depend on the "settings redesign" flag value.
         *
         * @since 3.7.8
         *
         * @return array
         */
        public function get_button_settings()
        {
        }
        /**
         * Verifies whether or not payment request button should be rendered.
         *
         * @since 3.7.8
         *
         * @return boolean
         */
        public function should_render_payment_request_button()
        {
        }
        /**
         * Checks whether payment request button is enabled on certain page.
         *
         * @since 3.7.8
         *
         * @param string $page Indicates the page to check. Expected values are 'cart', 'product', and 'checkout'.
         *
         * @return boolean
         */
        public function is_payment_request_button_enabled($page)
        {
        }
        /**
         * Sets the WC customer session if one is not set.
         * This is needed so nonces can be verified by AJAX Request.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function set_session()
        {
        }
        /**
         * Handles payment request redirect when the redirect dialog "Continue" button is clicked.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function handle_payment_request_redirect()
        {
        }
        /**
         * Load public scripts and styles.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function scripts()
        {
        }
        /**
         * Returns the JavaScript configuration object used for any pages with a payment request button.
         *
         * @since 3.7.8
         *
         * @return array The settings used for the payment request button in JavaScript.
         */
        public function localized_data()
        {
        }
        /**
         * Renders the payment request button.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function render_payment_request_button()
        {
        }
        /**
         * Settings array for the user authentication dialog and redirection.
         *
         * @since 3.7.8
         *
         * @return array
         */
        public function get_login_confirmation_settings()
        {
        }
        /**
         * Filters the gateway title to reflect Payment Request type.
         *
         * @since 3.7.8
         *
         * @param string $title The gateway title.
         * @param string $id    The gateway ID.
         *
         * @return string
         */
        public function filter_gateway_title($title, $id)
        {
        }
        /**
         * Add needed order meta.
         *
         * @since 3.7.8
         *
         * @param integer $order_id    The order ID.
         * @param array   $posted_data The posted data from checkout form.
         *
         * @return  void
         */
        public function add_order_meta($order_id, $posted_data)
        {
        }
        /**
         * Returns the login redirect URL.
         *
         * @since 3.7.8
         *
         * @param string $redirect Default redirect URL.
         *
         * @return string Redirect URL.
         */
        public function get_login_redirect_url($redirect)
        {
        }
        /**
         * Verifies whether or not gateway environment is ready to host the Payment Request Buttons.
         *
         * @since 3.7.8
         *
         * @return bool
         */
        public function verify_gateway_env()
        {
        }
        /**
         * Validates cart contents to ensure they are allowed to be used with Payment Request API.
         *
         * @since 3.7.8
         *
         * @return boolean
         */
        public function validate_cart_contents()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\PaymentTokens {
    // Exit if called directly
    /**
     * Wrapper class for WC_Payment_Token_CC.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\PaymentTokens
     */
    class Card extends \WC_Payment_Token_CC
    {
    }
    /**
     * Dokan Stripe SEPA Direct Debit Payment Token.
     *
     * Representation of a payment token for SEPA.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\PaymentTokens
     */
    class Sepa extends \WC_Payment_Token
    {
        /**
         * Stores payment type.
         *
         * @since 3.6.1
         *
         * @var string
         */
        protected $type = 'sepa';
        /**
         * Stores SEPA payment token data.
         *
         * @since 3.7.8
         *
         * @var array
         */
        protected $extra_data = ['last4' => '', 'payment_method_type' => 'sepa_debit'];
        /**
         * Stores hook prefix.
         *
         * @since 3.6.1
         *
         * @var string
         */
        protected $hook_prefix = 'dokan_stripe_express_payment_token_sepa_get_';
        /**
         * Get type to display to user.
         *
         * @since 3.6.1
         *
         * @param string $deprecated Deprecated since WooCommerce 3.0
         *
         * @return string
         */
        public function get_display_name($deprecated = '')
        {
        }
        /**
         * Retrieves hook prefix
         *
         * @since 3.6.1
         *
         * @return string
         */
        protected function get_hook_prefix()
        {
        }
        /**
         * Validates SEPA payment tokens.
         *
         * These fields are required by all SEPA payment tokens:
         * last4  - string Last 4 digits of the iBAN
         *
         * @since 3.6.1
         *
         * @return boolean True if the passed data is valid
         */
        public function validate()
        {
        }
        /**
         * Retrieves the last four digits.
         *
         * @since  3.6.1
         *
         * @param string $context What the value is for. Valid values are view and edit.
         *
         * @return string Last 4 digits
         */
        public function get_last4($context = 'view')
        {
        }
        /**
         * Sets the last four digits.
         *
         * @since 3.6.1
         *
         * @param string
         *
         * @return void
         */
        public function set_last4($last4)
        {
        }
        /**
         * Sets Stripe payment method type.
         *
         * @since 3.6.1
         *
         * @param string $type Payment method type.
         *
         * @return void
         */
        public function set_payment_method_type($type)
        {
        }
        /**
         * Retrieves Stripe payment method type.
         *
         * @since 3.6.1
         *
         * @param string $context What the value is for. Valid values are view and edit.
         *
         * @return string $payment_method_type
         */
        public function get_payment_method_type($context = 'view')
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Processors {
    /**
     * Class for processing orders.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Processors
     */
    class Balance
    {
        /**
         * Sets required data.
         *
         * @since 3.7.8
         *
         * @return static
         */
        public static function set()
        {
        }
        /**
         * Retrieves balance data.
         *
         * @since 3.7.8
         *
         * @return \Stripe\Balance|false
         */
        public function get()
        {
        }
        /**
         * Checks whether balance is available in Stripe for the desired currency.
         *
         * @since 3.7.8
         *
         * @param string $currency (Optional)
         */
        public function is_available($currency = null)
        {
        }
        /**
         * Checks if balance available in Stripe against a order.
         *
         * @since 3.7.8
         *
         * @param int|\WC_Order $order
         * @param string        $context (Optional) Default `seller`, `admin` otherwise
         *
         * @return boolean
         */
        public function is_available_for_order($order, $context = 'seller')
        {
        }
        /**
         * Retrives available balance in Stripe for the desired currency.
         *
         * @since 3.7.8
         *
         * @param string  $currency      (Optional) Currency for which the available balance will be retrieved.
         * @param boolean $stripe_format (Optional) Determines whether the balance will be returned in Stripe format (i.e., 3220) or in standard format (i.e., 32.20).
         *
         * @return float
         */
        public function get_available_balance($currency = null, $stripe_format = false)
        {
        }
    }
    /**
     * Class for processing customers.
     *
     * Represents a Stripe Customer.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Processors
     */
    class Customer
    {
        /**
         * Get the class instance
         *
         * @since 3.8.3
         *
         * @return static
         */
        public static function get_instance()
        {
        }
        /**
         * Sets required data.
         *
         * @since 3.6.1
         *
         * @param int|string $user_id
         *
         * @return static
         */
        public static function set($user_id = 0)
        {
        }
        /**
         * Sets user id for customer.
         *
         * @since 3.6.1
         *
         * @param int|string $user_id
         *
         * @return static
         */
        public function set_user_id($user_id)
        {
        }
        /**
         * Retrieves WP user id.
         *
         * @since 3.6.1
         *
         * @return int
         */
        public function get_user_id()
        {
        }
        /**
         * Sets Stripe customer ID.
         *
         * @since 3.6.1
         *
         * @param int|string $id
         *
         * @return static
         */
        public function set_id($id)
        {
        }
        /**
         * Retrieves Stripe customer ID.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * Retrieves user object.
         *
         * @since 3.6.1
         *
         * @return \WP_User|false
         */
        protected function get_user()
        {
        }
        /**
         * Stores data from the Stripe API about this customer.
         *
         * @since 3.6.1
         *
         * @param \Stripe\Customer $data
         *
         * @return static
         */
        public function set_data($data)
        {
        }
        /**
         * Retrieves data from the Stripe API about this customer.
         *
         * @since 3.11.4
         *
         * @return \Stripe\Customer|null
         */
        public function get_data()
        {
        }
        /**
         * Check if a customer exists in Stripe.
         *
         * @param string|int $customer_id Customer ID
         *
         * @return bool|WP_Error
         */
        public static function is_exists($customer_id)
        {
        }
        /**
         * Retrieves a Customer object from Stripe API.
         *
         * @since 3.11.4
         *
         * @return WP_Error|\Stripe\Customer
         */
        public function retrieve()
        {
        }
        /**
         * Creates a customer via API.
         *
         * @since 3.6.1
         *
         * @param array $args Additional arguments for the request (optional).
         *
         * @return WP_Error|string
         */
        public function create($args = array())
        {
        }
        /**
         * Updates the Stripe customer through the API.
         *
         * @since 3.6.1
         *
         * @param array $args     Additional arguments for the request (optional).
         * @param bool  $is_retry Whether the current call is a retry (optional, defaults to false). If true, then an exception will be thrown instead of further retries on error.
         *
         * @return string|WP_Error
         */
        public function update($args = array(), $is_retry = false)
        {
        }
        /**
         * Updates existing Stripe customer or creates new customer for User through API.
         *
         * @since 3.6.1
         *
         * @param array $args Additional arguments for the request (optional).
         *
         * @return string|WP_Error
         */
        public function update_or_create($args = array())
        {
        }
        /**
         * Gets saved payment methods for a customer using Intentions API.
         *
         * @since 3.6.1
         *
         * @param string $payment_method_type Stripe ID of payment method type
         *
         * @return \Stripe\PaymentMethod[]
         */
        public function get_payment_methods($payment_method_type)
        {
        }
        /**
         * Attaches a payment method to the customer in Stripe.
         *
         * @since 3.7.8
         *
         * @param string $payment_method_id
         *
         * @return \Stripe\PaymentMethod|WP_Error
         */
        public function attach_payment_method($payment_method_id)
        {
        }
        /**
         * Detaches a payment method from stripe.
         *
         * @since 3.6.1
         *
         * @param string $payment_method_id Payment Method ID
         *
         * @return boolean
         */
        public function detach_payment_method($payment_method_id)
        {
        }
        /**
         * Sets default payment method in Stripe.
         *
         * @since 3.6.1
         *
         * @param string $payment_method_id Payment Method ID
         *
         * @return boolean
         */
        public function set_default_payment_method($payment_method_id): bool
        {
        }
        /**
         * Creates setup intent for a customer.
         *
         * @since 3.7.8
         *
         * @param array $data Additional arguments for the request (optional).
         *
         * @return \Stripe\SetupIntent
         * @throws DokanException
         */
        public function setup_intent($data = array())
        {
        }
        /**
         * Generates the customer request, used for both creating and updating customers.
         *
         * @since 3.6.1
         *
         * @param  array $args Additional arguments (optional).
         *
         * @return array
         */
        protected function generate_request($args = array()): array
        {
        }
        /**
         * Given a WC_Order or WC_Customer, returns an array representing a Stripe customer object.
         * At least one parameter has to not be null.
         *
         * @since 3.6.1
         *
         * @param WC_Order|null    $wc_order    The Woo order to parse.
         * @param WC_Customer|null $wc_customer The Woo customer to parse.
         *
         * @return array Customer data.
         */
        public function map_data(\WC_Order $wc_order = null, \WC_Customer $wc_customer = null)
        {
        }
        /**
         * Get the customer's preferred locale based on the user or site setting.
         *
         * @since 3.6.1
         *
         * @return array The matched locale string wrapped in an array, or empty default.
         */
        public function get_preferred_locale(): array
        {
        }
    }
    /**
     * Class for processing orders.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Processors
     */
    class Order
    {
        /**
         * Saves source to order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param object   $source
         *
         * @return void
         */
        public static function save_source(\WC_Order $order, $source)
        {
        }
        /**
         * Get payment source from an order. This could be used in the future for
         * a subscription as an example, therefore using the current user ID would
         * not work when the customer won't be logged in.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return object{customer:string|false,payment_method:string|null,payment_method_object:\Stripe\PaymentMethod|false}
         */
        public static function prepare_source($order = null)
        {
        }
        /**
         * Extracts an order to all its suborders if exists
         * and returns data containg all of those orders.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return WC_Order[]
         */
        public static function get_all_orders_to_be_processed($order)
        {
        }
        /**
         * Get charge id from from an order
         *
         * @since 3.6.1
         *
         * @param WC_Order              $order
         * @param \Stripe\PaymentIntent $intent
         *
         * @return string|false
         */
        public static function get_charge_id(\WC_Order $order, $intent = false)
        {
        }
        /**
         * Retrieves the processing for suborder.
         *
         * @since 3.6.1
         *
         * @param float    $processing_fee
         * @param WC_Order $suborder
         * @param WC_Order $order
         *
         * @return float
         */
        public static function get_fee_for_suborder($processing_fee, $suborder, $order)
        {
        }
        /**
         * Prepares a refund.
         *
         * @since 3.6.1
         *
         * @param array $args
         *
         * @return \WeDevs\DokanPro\Refund\Refund|\WP_Error
         */
        public static function prepare_refund($args = [])
        {
        }
        /**
         * Processes a refund.
         *
         * @since 3.6.1
         *
         * @param WC_Order                       $order
         * @param \WeDevs\DokanPro\Refund\Refund $dokan_refund
         * @param \Stripe\Refund                 $stripe_refund
         *
         * @return boolean
         */
        public static function refund($order, $dokan_refund, $stripe_refund)
        {
        }
        /**
         * Locks an order for processing specific operation for 5 minutes.
         *
         * @since 3.6.1
         * @since 3.7.8 Replaced parameter `$order` by `$order_id`. Added `$processing_type` as an optional parameter instead of `$intent`. Also added optional `$data` to serve the purpose of passing extra data.
         *
         * @param int    $order_id        ID of the order that is being paid.
         * @param string $processing_type (Optional) The operation type that is being processed. Default is `intent`.
         * @param string $data            (Optional) A specific data to be used for locking. For example, it can be the intent id while processing an intent. Default is `-1`
         *
         * @return bool A flag that indicates whether the order is already locked.
         */
        public static function lock_processing($order_id, $processing_type = 'intent', $data = '-1')
        {
        }
        /**
         * Unlocks an order for processing specific operation.
         *
         * @since 3.6.1
         * @since 3.7.8 Replaced parameter `$order` by `$order_id`. Added `$processing_type` as an optional parameter.
         *
         * @param int    $order_id        ID of the order that is being unlocked.
         * @param string $processing_type (Optional) The operation type that is being processed. Default is `intent`.
         *
         * @return void
         */
        public static function unlock_processing($order_id, $processing_type = 'intent')
        {
        }
        /**
         * Retrieves transaction url of an order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return string
         */
        public static function get_transaction_url($order)
        {
        }
        /**
         * Retrieves order from charge id.
         *
         * @since 3.6.1
         *
         * @param string $charge_id
         *
         * @return WC_Order|false
         */
        public static function get_order_by_charge_id($charge_id)
        {
        }
        /**
         * Retrieves order by intent id.
         *
         * @since 3.6.1
         *
         * @param string  $intent_id
         * @param boolean $is_setup
         *
         * @return WC_Order|false
         */
        public static function get_order_by_intent_id($intent_id, $is_setup = false)
        {
        }
        /**
         * Retrieves stripe customer id from order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return string
         */
        public static function get_stripe_customer_id_from_order(\WC_Order $order)
        {
        }
        /**
         * Retrieves user from order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return WP_User
         */
        public static function get_user_from_order(\WC_Order $order)
        {
        }
        /**
         * Validates cart contents to ensure they're allowed to be paid through Stripe Express.
         *
         * @since 3.7.8
         *
         * @return boolean
         */
        public static function validate_cart_items()
        {
        }
        /**
         * Checks if authentication has already failed for order.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return boolean
         */
        public static function check_if_authentication_failed($order)
        {
        }
        /**
         * Checks if the payment intent associated with an order failed and records the event.
         *
         * @since 3.7.8
         *
         * @param WC_Order              $order  The order which should be checked.
         * @param \Stripe\PaymentIntent $intent The intent, associated with the order.
         *
         * @return void
         */
        public static function process_failed_sca_auth($order, $intent)
        {
        }
        /**
         * Adds order note.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         * @param string   $note
         *
         * @return void
         */
        public static function add_note(\WC_Order $order, $note)
        {
        }
    }
    /**
     * Class for processing payments.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Processors
     */
    class Payment
    {
        /**
         * Disburse payments on demand.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return void
         */
        public static function disburse(\WC_Order $order)
        {
        }
        /**
         * Get payment intent id of an order.
         *
         * @since 3.6.1
         * @since 3.7.8 Added two additional parameters `$data` and `$is_setup`
         *
         * @param WC_Order $order     Required if intent id is not provided, otherwise optional.
         * @param string   $intent_id (Optional) If not provided, the intent id will be retrieved from order.
         * @param array    $data      (Optional) Array of data to pass as arguments.
         * @param boolean  $is_setup  (Optional) Indicates if it is a setup intent.
         *
         * @return \Stripe\PaymentIntent|false
         */
        public static function get_intent($order = null, $intent_id = null, $data = [], $is_setup = false)
        {
        }
        /**
         * Create a new Payment Intent.
         *
         * @since 3.6.1
         *
         * @param WC_Order     $order The order being processed
         * @param array|object $data  The source that is used for the payment
         * @param boolean      $setup Flag to determine if is is a setup intent
         *
         * @return \Stripe\PaymentIntent|\Stripe\SetupIntent
         * @throws DokanException
         */
        public static function create_intent(\WC_Order $order, $data, $setup = false)
        {
        }
        /**
         * Updates payment intent to be able to save payment method.
         *
         * @since 3.6.1
         *
         * @param string         $intent_id           The id of the intent to update.
         * @param WC_Order|false $order            The id of the order if intent created from Order.
         * @param array          $data                The data to update the intent with.
         * @param boolean        $save_payment_method True if saving the payment method.
         * @param string         $payment_type        The name of the selected payment type or empty string.
         *
         * @return \Stripe\PaymentIntent|\Stripe\SetupIntent
         * @throws DokanException  If the update intent call returns with an error.
         */
        public static function update_intent($intent_id, $order, $data = [], $is_setup = false, $save_payment_method = false, $payment_type = '')
        {
        }
        /**
         * Confirms an intent if it is the `requires_confirmation` state.
         *
         * @since 3.6.1
         *
         * @param \Stripe\PaymentIntent $intent         The intent to confirm.
         * @param string                $payment_method The payment method.
         *
         * @return \Stripe\Paymentintent|WP_Error
         */
        public static function confirm_intent($intent, $payment_method)
        {
        }
        /**
         * Verifies the intent after payment is requested.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return void
         */
        public static function verify_intent($order)
        {
        }
        /**
         * Update order and maybe save payment method for an order after an intent has been created and confirmed.
         *
         * @since 3.6.1
         *
         * @param \WC_Order $order               Order being processed.
         * @param string    $intent_id           Stripe setup/payment ID.
         * @param bool      $save_payment_method Boolean representing whether payment method for order should be saved.
         *
         * @return void
         */
        public static function process_confirmed_intent($order, $intent_id, $save_payment_method)
        {
        }
        /**
         * Processes the payment method from intent.
         *
         * @since 3.7.8
         *
         * @param WC_Order                                  $order
         * @param \Stripe\PaymentIntent|\Stripe\SetupIntent $intent
         * @param bool                                      $save_payment_method
         *
         * @return void
         */
        public static function process_payment_method($order, $intent, $save_payment_method)
        {
        }
        /**
         * Extracts payment method data from intent.
         *
         * @since 3.6.1
         *
         * @param \Stripe\PaymentIntent|\Stripe\SetupIntent $intent
         *
         * @return array list {payment_method_type:string|null,payment_method_details:\Stripe\PaymentMethod|false}
         */
        public static function get_method_data_from_intent($intent)
        {
        }
        /**
         * Set formatted readable payment method title for order,
         * using payment method details from accompanying charge.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order               WC Order being processed.
         * @param string   $payment_method_type Stripe payment method key.
         *
         * @return void
         */
        public static function set_method_title($order, $payment_method_type)
        {
        }
        /**
         * Stores extra meta data for an order from a Stripe Response.
         *
         * @since 3.6.1
         *
         * @param object $response
         * @param WC_Order $order
         *
         * @return object
         * @throws DokanException
         */
        public static function process_response($response, $order)
        {
        }
        /**
         * Saves payment method data top order meta
         *
         * @since 3.6.1
         * @since 3.7.8 Added action hook `dokan_stripe_express_save_payment_method_data`
         *
         * @param WC_Order              $order
         * @param \Stripe\PaymentMethod $payment_method
         *
         * @return void
         */
        public static function save_payment_method_data($order, $payment_method)
        {
        }
        /**
         * Saves payment/setup intent to order meta.
         *
         * @since 3.6.1
         *
         * @param WC_Order                                  $order
         * @param \Stripe\PaymentIntent|\Stripe\SetupIntent $intent
         *
         * @return void
         */
        public static function save_intent_data(\WC_Order $order, $intent)
        {
        }
        /**
         * Saves charge data for order.
         *
         * @since 3.6.1
         *
         * @param WC_Order              $order
         * @param \Stripe\PaymentIntent $intent
         *
         * @return void
         */
        public static function save_charge_data(\WC_Order $order, $intent)
        {
        }
        /**
         * Retrieves stripe fee from intent.
         *
         * @since 3.6.1
         *
         * @param \Stripe\PaymentIntent $intent The stripe intent object
         * @param boolean               $raw    (Optional) Whether or not to format the value. By default, formatted value will be returned.
         *
         * @return string|float
         */
        public static function get_stripe_fee($intent, $raw = false)
        {
        }
        /**
         * Get payment source. This can be a new token/source or existing WC token.
         * If user is logged in and/or has WC account, create an account on Stripe.
         * This way we can attribute the payment to the user to better fight fraud.
         *
         * @since 3.6.1
         *
         * @param int      $user_id              ID of the WP user.
         * @param bool     $force_save_source    Should we force save payment source.
         * @param int|null $existing_customer_id ID of customer if already exists.
         *
         * @return object{customer:string|false,payment_method:string|null,payment_method_object:\Stripe\PaymentMethod|false,setup_future_usage:'off_session'|'on_session'}
         * @throws Exception
         */
        public static function prepare_source($user_id, $force_save_source = false, $existing_customer_id = null)
        {
        }
        /**
         * Retrieves gateway fee from charge.
         *
         * @since 3.7.8
         *
         * @param string $charge_id
         *
         * @return string
         */
        public static function get_gateway_fee_from_charge($charge_id)
        {
        }
        /**
         * Given a response from Stripe, check if it's a card error where
         * authentication is required to complete the payment.
         *
         * @since 3.7.8
         *
         * @param \Stripe\PaymentIntent|\Stripe\SetupIntent The response from Stripe.
         *
         * @return boolean Whether or not it's a 'authentication_required' error
         */
        public static function is_authentication_required($intent)
        {
        }
        /**
         * Generate extra information for orders to send with stripe.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order                     The Order object.
         * @param WC_Order $sub_order      (Optional) The Sub Order object if available.
         * @param array    $extra_metadata (Optional) Extra metadata to attach.
         * @param string   $api_type       (Optional) The Stripe API type to use. Ex: 'payment_intent', 'setup_intent', 'transfer', 'charge', etc.
         *
         * @return array
         */
        public static function generate_data(\WC_Order $order, \WC_Order $sub_order = null, $extra_metadata = [], $api_type = 'payment_intent')
        {
        }
        /**
         * Retrieves latest charge from payment intent.
         *
         * While passing the payment intent object, make sure the `charges.data`
         * and/or `latest_charge` were expanded inside the object.
         * For example, the intent object was retrieved with the following arguments:
         * [
         *     expand => [
         *         'latest_charge',
         *         'charges.data',
         *     ]
         * ]
         *
         * @since 3.7.12
         *
         * @param \Stripe\PaymentIntent $intent The payment intent object.
         *
         * @return \Stripe\Charge|false
         */
        public static function get_latest_charge_from_intent($intent)
        {
        }
        /**
         * Retrieves supported transfer countries based on the marketplace country.
         * Currently only the EU countries are supported for each other.
         *
         * @since 3.7.17
         *
         * @param string $country_code (Optional) The two-letter ISO code of the country of the marketplace.
         *
         * @return string[] List of two-letter ISO codes of the supported transfer countries.
         */
        public static function get_supported_transfer_countries($country_code = null)
        {
        }
        /**
         * Create the level 3 data array to send to Stripe when making a purchase.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order The order that is being paid for.
         *
         * @return array          The level 3 data to send to Stripe.
         */
        public static function generate_level3_data(\WC_Order $order)
        {
        }
    }
    /**
     * Class for processing Subscription.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Processors
     */
    class Subscription
    {
        /**
         * Vendor subscription product type.
         *
         * @since 3.7.8
         *
         * @var string
         */
        const VENDOR_SUBSCRIPTION_PRODUCT_TYPE = 'product_pack';
        /**
         * Subscription billing reasons to be disallowed.
         *
         * @since 3.7.8
         *
         * @var array
         */
        const DISALLOWED_BILLING_REASONS = ['manual', 'upcoming', 'subscription_threshold'];
        /**
         * Retrieves stripe subscription ID.
         *
         * @since 3.7.8
         *
         * @param string       $stripe_subscription_id (Optional)
         * @param int|string   $customer_id            (Optional)
         * @param int|WC_Order $order                  (Optional)
         *
         * @return \Stripe\Subscription|WP_Error
         */
        public static function get($stripe_subscription_id = null, $customer_id = null, $order = null)
        {
        }
        /**
         * Creates a subscription for a vendor.
         *
         * @since 3.7.8
         *
         * @param array $data
         *
         * @return \Stripe\Subscription|WP_Error
         */
        public static function create($data)
        {
        }
        /**
         * Updates a stripe subscription.
         *
         * @since 3.7.8
         *
         * @param array             $data                   Data to update the subscription.
         * @param string            $stripe_subscription_id (Optional) Stripe subscription id. If not provided, it will be fetched from the customer ID or the order.
         * @param int|string        $customer_id            (Optional) Customer ID. If not provided, it will be according the current user id.
         * @param int|WC_Order|null $order                  (Optional) The order.
         *
         * @return \Stripe\Subscription|WP_Error
         */
        public static function update($data, $stripe_subscription_id = null, $customer_id = null, $order = null)
        {
        }
        /**
         * Parse subscription id from the customer/order.
         *
         * @since 3.7.8
         *
         * @param int|string|null   $customer_id
         * @param int|WC_Order|null $order
         *
         * @return string|false
         */
        public static function parse_subscription_id($customer_id = null, $order = null)
        {
        }
        /*
         * Retrieves the temporary subscription id from user meta.
         *
         * @since 3.8.3
         *
         * @param int $user_id
         *
         * @return string
         */
        public static function get_temporary_subscription_id($user_id = null)
        {
        }
        /**
         * Retrives the stripe product by woccommerce product id.
         *
         * @since 3.7.8
         *
         * @param int|string $product_id
         *
         * @return \Stripe\Product|WP_Error|false
         */
        public static function get_product($product_id)
        {
        }
        /**
         * Creates a product in Stripe end.
         *
         * @since 3.7.8
         *
         * @param WC_Product|int|string $product Product object or ID.
         * @param array                 $data    Additional data to add as product data (Optional)
         *
         * @return \Stripe\Product|WP_Error
         */
        public static function create_product($product, $data = [])
        {
        }
        /**
         * Updates a product in Stripe end.
         *
         * @since 3.7.8
         *
         * @param WC_Product|int|string $product
         * @param array                 $data
         *
         * @return \Stripe\Product|WP_Error
         */
        public static function update_product($product, $data)
        {
        }
        /**
         * Processes coupon for an order.
         * If coupon or discount is applied, it will create
         * a coupon with the total discounted amount in the Stripe end
         * while creating a subscription.
         *
         * @since 3.7.8
         *
         * @param array    $data     (Optional)
         * @param float    $discount (Optional)
         * @param WC_Order $order    (Optional)
         *
         * @return string|false|WP_Error `Coupon ID` on successful creation of coupon on need, `false` if no discount available, `WP_Error` for any API error.
         */
        public static function process_discount($data = [], $discount = 0, $order = false)
        {
        }
        /**
         * Prepares metadata for product.
         *
         * @since 3.7.8
         *
         * @param WC_Product $product
         * @param array      $data    (Optional)
         *
         * @return array
         */
        public static function prepare_product_data(\WC_Product $product, $data = [])
        {
        }
        /**
         * Checks if order is a subscription order.
         *
         * @since 3.7.8
         *
         * @param int|string $order_id
         *
         * @return boolean
         */
        public static function is_subscription_order($order_id)
        {
        }
        /**
         * Checks if cart contains a subscription.
         *
         * @since 3.7.8
         *
         * @return boolean
         */
        public static function exists_in_cart()
        {
        }
        /**
         * Checks if WooCOmmerce ubscription is enabled.
         *
         * @since 3.7.8
         *
         * @return boolean
         */
        public static function has_wc_subscription()
        {
        }
        /**
         * Checks if the order has subscription.
         *
         * @since 3.7.8
         *
         * @param int|string $order_id
         *
         * @return boolean
         */
        public static function is_wc_subscription_order($order_id)
        {
        }
        /**
         * Checks if the order contains subscription order.
         *
         * @since 3.7.8
         *
         * @param int $order_id
         *
         * @return boolean
         */
        public static function order_contains_wc_subscription($order_id)
        {
        }
        /**
         * Checks if the order contains subscription renewal.
         *
         * @since 3.7.8
         *
         * @param int $order_id
         *
         * @return boolean
         */
        public static function order_contains_wc_subscription_renewal($order_id)
        {
        }
        /**
         * Retrieves subscriptions from order.
         *
         * @since 3.7.8
         *
         * @param int|WC_Order $order
         *
         * @return \WC_Subscription[]
         */
        public static function get_wc_subscriptions_from_order($order)
        {
        }
        /**
         * Checks if a product is a subscription.
         *
         * @since 3.7.8
         *
         * @param int|string $product_id
         *
         * @return boolean
         */
        public static function is_wc_subscription_product($product_id)
        {
        }
        /**
         * Checks if cart contains wc subscriptions.
         *
         * @since 3.7.8
         *
         * @return boolean
         */
        public static function cart_contains_wc_subscription()
        {
        }
        /**
         * Checks the cart to see if it contains a subscription product renewal.
         *
         * @since 3.7.8
         *
         * @return mixed The cart item containing the renewal as an array, else false.
         */
        public static function cart_contains_renewal()
        {
        }
        /**
         * Checks if a payment mathod needs to be changed for a subscription.
         *
         * @since 3.7.8
         *
         * @param int|string $order_id
         *
         * @return boolean
         */
        public static function subcription_payment_method_needs_change($order_id)
        {
        }
        /**
         * Returns whether this user is changing the payment method for a subscription.
         *
         * @since 3.7.8
         *
         * @return bool
         */
        public static function is_changing_payment_method()
        {
        }
        /**
         * Once an intent has been verified, perform some final actions for early renewals.
         *
         * @since 3.7.8
         *
         * @param WC_Order $renewal_order
         *
         * @return void
         */
        public static function process_early_renewal_success($renewal_order)
        {
        }
        /**
         * During early renewals, instead of failing the renewal order, delete it and let Subscription redirect to the checkout.
         *
         * @since 3.7.8
         *
         * @param WC_Order $renewal_order
         *
         * @return void
         */
        public static function process_early_renewal_failure($renewal_order)
        {
        }
        /**
         * Check whether subscription module is enabled or not
         *
         * @since 3.7.8
         *
         * @return bool
         */
        public static function has_vendor_subscription_module()
        {
        }
        /**
         * Checks if a order is a subscription order.
         *
         * @since 3.7.8
         *
         * @param WC_Order|int $order
         *
         * @return boolean
         */
        public static function is_vendor_subscription_order($order)
        {
        }
        /**
         * Checks if an order is a recurring vendor subscription order.
         *
         * @since 3.7.8
         *
         * @param WC_Order|int $order
         *
         * @return boolean
         */
        public static function is_recurring_vendor_subscription_order($order)
        {
        }
        /**
         * Checks if the product is a vendor subscription product.
         *
         * @since 3.7.8
         *
         * @param int $product_id
         *
         * @return bool
         */
        public static function is_vendor_subscription_product($product_id)
        {
        }
        /**
         * Checks if the product is a recurring vendor subscription product.
         *
         * @since 3.7.8
         *
         * @param int $product_id
         *
         * @return bool
         */
        public static function is_recurring_vendor_subscription_product($product_id)
        {
        }
        /**
         * Verifies if Cart contains recurring vendor subscription product.
         *
         * @since 3.7.8
         *
         * @return boolean
         */
        public static function cart_contains_recurring_vendor_subscription()
        {
        }
        /**
         * Verifies if Cart contains vendor subscription product.
         *
         * @since 3.7.8
         *
         * @return boolean
         */
        public static function cart_contains_vendor_subscription()
        {
        }
        /**
         * Retrieves vendor id by stripe subscriptoin
         *
         * @since 3.7.8
         *
         * @param string|\Stripe\Subscription $subscription
         *
         * @return int|null
         */
        public static function get_vendor_id_by_subscription($subscription)
        {
        }
        /**
         * Retrieves vendor id by stripe subscriptoin
         *
         * @since 3.7.8
         *
         * @param string|\Stripe\Subscription $subscription
         *
         * @return WC_Order|false
         */
        public static function get_order_by_subscription($subscription)
        {
        }
    }
    /**
     * Class for processing WooCommerce payment tokens.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Processors
     */
    class Token
    {
        /**
         * Retrieves WooCommerce token by ID.
         *
         * @since 3.7.8
         *
         * @param string|int $token_id
         *
         * @return \WC_Payment_Token|NULL
         */
        public static function get($token_id)
        {
        }
        /**
         * Modifies the payment token class while adding/changing
         * payment method to add support for custom token types.
         *
         * @since 3.7.8
         *
         * @param string $token_class The default token class generated
         * @param string $token_type  Type of the token being processed
         *
         * @return string
         */
        public static function get_payment_token_class($token_class, $token_type)
        {
        }
        /**
         * Extract the payment token from the provided request.
         *
         * @since 3.7.8
         *
         * @return \WC_Payment_Token|NULL
         */
        public static function parse_from_request()
        {
        }
    }
    /**
     * Class for processing orders.
     *
     * @since   3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Processors
     */
    class User
    {
        /**
         * Trashed account ID.
         *
         * @since 3.7.18
         *
         * @var string
         */
        protected $trashed_account_id = false;
        /**
         * Sets required data.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         * @param array      $args (Optional)
         *
         * @return static
         */
        public static function set($user_id, $args = [])
        {
        }
        /**
         * Onboards user for a stripe express account.
         *
         * @since 3.6.1
         *
         * @param int|string $user_id
         * @param array      $args
         *
         * @return object|WP_Error
         */
        public static function onboard($user_id, $args = [])
        {
        }
        /**
         * Disconnect user account from Stripe.
         *
         * @since 3.7.18
         *
         * @param int  $user_id      The user ID to be dosconnected.
         * @param bool $force_delete Indicates whether the id should be trashed or not.
         *
         * @return bool
         */
        public static function disconnect($user_id, $force_delete = false)
        {
        }
        /**
         * Retrieves stripe login url.
         *
         * @since 3.6.1
         *
         * @param array $args
         *
         * @return string|false Login url for stripe express, false in case of error
         */
        public function get_stripe_login_url($args = [])
        {
        }
        /**
         * Gets atripe account data of an user.
         *
         * @since 3.6.1
         *
         * @return object|false
         */
        public function get_data()
        {
        }
        /**
         * Retrieves the WP user id.
         *
         * @since 3.7.8
         *
         * @return int
         */
        public function get_user_id()
        {
        }
        /**
         * Sets user id for customer.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return void
         */
        protected function set_user_id($user_id)
        {
        }
        /**
         * Retrieves the stripe account id.
         *
         * @since 3.7.8
         *
         * @return string|false
         */
        public function get_account_id()
        {
        }
        /**
         * Sets Stripe account data.
         *
         * @since 3.7.8
         *
         * @param array $args (Optional)
         *
         * @return void
         */
        protected function set_account($args = [])
        {
        }
        /**
         * Checks if user is connected to stripe.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function is_connected()
        {
        }
        /**
         * Checks if an user has completed onboarding.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function is_onboarded()
        {
        }
        /**
         * Checks if an user is enabled for payout.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function is_payout_enabled()
        {
        }
        /**
         * Checks if an user is connected and enabled for payout.
         *
         * @since 3.7.8
         *
         * @return boolean
         */
        public function is_activated()
        {
        }
        /**
         * Checks if user account is trashed.
         *
         * @since 3.7.17
         *
         * @return boolean
         */
        public function is_trashed()
        {
        }
        /**
         * Retrieves the trashed account id.
         *
         * @since 3.7.18
         *
         * @return string|false
         */
        public function get_trashed_account_id()
        {
        }
        /**
         * Retrives account data of the platform.
         *
         * @since 3.7.17
         *
         * @return \Stripe\Account|false
         */
        public static function get_platform_data()
        {
        }
        /**
         * Retrives the country of the platform.
         *
         * @since 3.7.17
         *
         * @return string|false The two-letter ISO code of the country or `false` if no data found.
         */
        public static function get_platform_country()
        {
        }
    }
    /**
     * Class for processing webhooks.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Processors
     */
    class Webhook
    {
        /**
         * Constants to indicate different webhook statuses.
         *
         * @since 3.6.1
         *
         * @var string
         */
        const STATUS_VALIDATION_SUCCEEDED = 'validation_succeeded';
        const STATUS_EMPTY_HEADERS = 'empty_headers';
        const STATUS_EMPTY_BODY = 'empty_body';
        const STATUS_USER_AGENT_INVALID = 'user_agent_invalid';
        const STATUS_SIGNATURE_INVALID = 'signature_invalid';
        const STATUS_SIGNATURE_MISMATCH = 'signature_mismatch';
        const STATUS_TIMESTAMP_OUT_OF_RANGE = 'timestamp_out_of_range';
        /**
         * Retrieves prefic for Webhook.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function prefix()
        {
        }
        /**
         * Generates URL for webhook.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function generate_url()
        {
        }
        /**
         * Generates default webhook data.
         *
         * @since 3.7.8
         *
         * @return array{url:string,enabled_events:string[],api_version:string,description:string}
         */
        public static function generate_data()
        {
        }
        /**
         * Returns instance of configuration.
         *
         * @since 3.6.1
         *
         * @return Config
         */
        protected static function config()
        {
        }
        /**
         * Retrieves supported webhook events.
         *
         * @since 3.7.8
         *
         * @return array<string,string>
         */
        public static function get_supported_events()
        {
        }
        /**
         * Creates webhook endpoint.
         * Creates the endpoint if no endpoint exists,
         * Synchronizes the endpoint otherwise.
         *
         * @since 3.7.8
         *
         * @return boolean
         */
        public static function create()
        {
        }
        /**
         * Deletes webhook endpoint.
         *
         * @since 3.7.8
         *
         * @return boolean
         */
        public static function delete()
        {
        }
        /**
         * Removes webhook key from settings.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public static function delete_key()
        {
        }
        /**
         * Add webhook secret.
         *
         * @since 3.8.0
         *
         * @return boolean
         */
        public static function add_key($value)
        {
        }
        /**
         * Retrieves status messages regarding webhook.
         *
         * @since 3.6.1
         *
         * @return array<string,string>
         */
        public static function get_status_messages()
        {
        }
        /**
         * Returns the localized reason the last webhook failed.
         *
         * @since 3.6.1
         *
         * @return string Reason the last webhook failed.
         */
        public static function get_last_error()
        {
        }
        /**
         * Sets the reason for the last failed webhook.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public static function set_last_error($reason)
        {
        }
        /**
         * Gets (and sets, if unset) the timestamp the plugin first
         * started tracking webhook failure and successes.
         *
         * @since 3.6.1
         *
         * @return integer UTC seconds since 1970.
         */
        public static function get_monitoring_began_time()
        {
        }
        /**
         * Sets the timestamp of the last successfully processed webhook.
         *
         * @since 3.6.1
         *
         * @param integer $timestamp UTC seconds since 1970.
         *
         * @return boolean
         */
        public static function set_last_success_time($timestamp)
        {
        }
        /**
         * Gets the timestamp of the last successfully processed webhook,
         * or returns 0 if no webhook has ever been successfully processed.
         *
         * @since 3.6.1
         *
         * @return integer UTC seconds since 1970 | 0.
         */
        public static function get_last_success_time()
        {
        }
        /**
         * Sets the timestamp of the last failed webhook.
         *
         * @since 3.6.1
         *
         * @param integer $timestamp UTC seconds since 1970.
         */
        public static function set_last_failure_time($timestamp)
        {
        }
        /**
         * Gets the timestamp of the last failed webhook,
         * or returns 0 if no webhook has ever failed to process.
         *
         * @since 3.6.1
         *
         * @return integer UTC seconds since 1970 | 0.
         */
        public static function get_last_failure_time()
        {
        }
        /**
         * Gets the state of webhook processing in a human readable format.
         *
         * @since 3.6.1
         *
         * @return string Details on recent webhook successes and failures.
         */
        public static function get_status_notice()
        {
        }
    }
    /**
     * Class for processing vendor withdraws.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Processors
     */
    class Withdraw
    {
        /**
         * Processes vendor withdraw data after processing orders.
         *
         * @since 3.6.1
         *
         * @param array $withdraw_data
         *
         * @return void
         */
        public static function process_data($withdraw_data)
        {
        }
        /**
         * Processes vendor's balance.
         *
         * @since 3.6.1
         *
         * @param array $withdraw
         *
         * @return true|\WP_Error
         */
        public static function add_vendor_balance($withdraw)
        {
        }
        /**
         * Processes vendor's withdraw balance
         *
         * @since 3.6.1
         *
         * @param array $withdraw
         *
         * @return void|\WP_Error
         */
        public static function process_vendor_withdraw_balance($withdraw)
        {
        }
        /**
         * Processes vendor withdraw threshold date.
         *
         * @since 3.6.1
         *
         * @param int    $order_id
         * @param int    $threshold_days
         * @param int    $vendor_id
         * @param string $transaction_type
         *
         * @return int|boolean
         */
        public static function process_vendor_balance_threshold($order_id, $threshold_days = 0, $vendor_id = 0, $transaction_type = 'dokan_orders')
        {
        }
        /**
         * Modifies balance date with threshold according to disbursement mode.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_modified_balance_date()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Subscriptions {
    /**
     * Vendor subscription handler class.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Subscription
     */
    class ProductSubscription
    {
        use \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits\SubscriptionUtils;
        /**
         * Class constructor.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Initiates all necessary hooks.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Adds subscription support for Stripe Express.
         *
         * @since 3.7.8
         *
         * @param array $supports
         *
         * @return array
         */
        public function add_subscription_support_for_gateway($supports)
        {
        }
        /**
         * Adds subscription product type support for Payment request API.
         *
         * @since 3.7.8
         *
         * @param array $supported_types
         *
         * @return array
         */
        public function add_payment_request_supported_types($supported_types)
        {
        }
        /**
         * Don't transfer Stripe customer/token meta to resubscribe orders.
         *
         * @since 3.7.8
         *
         * @param WC_Order $resubscribe_order The order created for the customer to resubscribe to the old expired/cancelled subscription
         *
         * @return void
         */
        public function delete_resubscribe_meta($resubscribe_order)
        {
        }
        /**
         * Don't transfer Stripe fee/ID meta to renewal orders.
         *
         * @since 3.7.8
         *
         * @param WC_Order $renewal_order
         *
         * @return WC_Order
         */
        public function delete_renewal_meta($renewal_order)
        {
        }
        /**
         * Manages the scheduled subscription payment.
         *
         * @since 3.7.8
         *
         * @param float    $amount        The amount to charge.
         * @param WC_Order $renewal_order Order object created to record the renewal payment.
         *
         * @return void
         */
        public function process_scheduled_subscription_payment($amount, $renewal_order)
        {
        }
        /**
         * Update postmeta for subscription after using Stripe to complete a payment to make up for
         * an automatic renewal payment which previously failed.
         *
         * @since 3.7.8
         *
         * @param WC_Subscription $subscription The subscription for which the failing payment method relates.
         * @param WC_Order        $renewal_order The order which recorded the successful payment (to make up for the failed automatic payment).
         *
         * @return void
         */
        public function update_failed_payment_meta($subscription, $renewal_order)
        {
        }
        /**
         * Updates payment method data for subscription order.
         * It operates as soon as an subscription order is initiated
         * and payment method is updated for that order.
         *
         * @since 3.7.8
         *
         * @param WC_Order              $order
         * @param \Stripe\PaymentMethod $payment_method
         *
         * @return void
         */
        public function update_payment_method_on_subscription_order($order, $payment_method)
        {
        }
        /**
         * Displays a checkbox to allow users
         * to update all subs payments with new payment.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function show_update_subscription_checkbox()
        {
        }
        /**
         * Returns a boolean value indicating whether the save payment checkbox should be
         * displayed during checkout.
         *
         * Returns `false` if the cart currently has a subscriptions or if the request has a
         * `change_payment_method` GET parameter. Returns the value in `$display` otherwise.
         *
         * @since 3.7.8
         *
         * @param bool $display Indicating whether to show the save payment checkbox in the absence of subscriptions.
         *
         * @return bool Indicates whether the save payment method checkbox should be displayed or not.
         */
        public function display_save_payment_method_checkbox($display)
        {
        }
        /**
         * Updates all active subscriptions payment method.
         *
         * @since 3.7.8
         *
         * @param string $payment_method_id
         * @param object $payment_method_object
         *
         * @return void
         */
        public function handle_add_payment_method_success($payment_method_id, $payment_method_object)
        {
        }
        /**
         * Render a dummy element in the "Change payment method" form (that does not appear in the "Pay for order" form)
         * which can be checked to determine proper SCA handling to apply for each form.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function differentiate_change_payment_method_form()
        {
        }
        /**
         * Render the payment method used for a subscription in the "My Subscriptions" table
         *
         * @since 3.7.8
         *
         * @param string          $payment_method_to_display the default payment method text to display
         * @param WC_Subscription $subscription the subscription details
         *
         * @return string the subscription payment method
         */
        public function render_subscription_payment_method($payment_method_to_display, $subscription)
        {
        }
        /**
         * Includes the payment meta data required to process automatic recurring payments so that store managers can
         * manually set up automatic recurring payments for a customer via the Edit Subscriptions screen in 2.0+.
         *
         * @since 3.7.8
         *
         * @param array           $payment_meta associative array of meta data required for automatic payments
         * @param WC_Subscription $subscription An instance of a subscription object
         *
         * @return array
         */
        public function add_subscription_payment_meta($payment_meta, $subscription)
        {
        }
        /**
         * Validates the payment meta data required to process automatic recurring payments so that store managers can
         * manually set up automatic recurring payments for a customer via the Edit Subscriptions screen in 2.0+.
         *
         * @since 3.7.8
         *
         * @param string $payment_method_id The ID of the payment method to validate
         * @param array  $payment_meta associative array of meta data required for automatic payments
         *
         * @return array
         */
        public function validate_subscription_payment_meta($payment_method_id, $payment_meta)
        {
        }
        /**
         * If this is the "Pass the SCA challenge" flow, remove a variable that is checked by WC Subscriptions
         * so WC Subscriptions doesn't redirect to the checkout
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function remove_order_pay_var()
        {
        }
        /**
         * Restore the variable that was removed in remove_order_pay_var()
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function restore_order_pay_var()
        {
        }
        /**
         * Loads email classes.
         *
         * @since 3.7.8
         *
         * @param array $emails
         *
         * @return array
         */
        public function load_emails($emails)
        {
        }
        /**
         * Loads email actions.
         *
         * @since 3.7.8
         *
         * @param array $actions
         *
         * @return array
         */
        public function load_email_actions($actions)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits {
    /**
     * Trait for vendor subscription utility functions.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits
     */
    trait DokanSubscriptions
    {
        /**
         * Retrieves the product type of dokan subscription.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public function get_product_type()
        {
        }
        /**
         * Cancel a subscription immediately.
         *
         * @since 3.7.8
         *
         * @param SubscriptionPack $vendor_subscription
         * @param string           $subscription_id     (Optional)
         *
         * @return void
         */
        protected function cancel_now($vendor_subscription, $subscription_id = false)
        {
        }
        /**
         * Activates a subscription pack.
         *
         * @since 3.7.8
         *
         * @param SubscriptionPack $vendor_subscription
         * @param int              $order_id
         *
         * @return void
         */
        protected function cancel_subscription($vendor_subscription, $order_id = 0)
        {
        }
        /**
         * Prepares data to create a subscription.
         *
         * @since 3.7.8
         *
         * @param SubscriptionPack $dokan_subscription
         * @param array            $subscription_data
         *
         * @return array
         */
        protected function prepare_data($dokan_subscription, $subscription_data = [])
        {
        }
        /**
         * Load recurring subscription cancellation email.
         *
         * @since 3.11.3
         *
         * @param int $order_id
         * @param int $vendor_id
         *
         * @return void
         */
        public function load_subscription_cancellation_email($order_id, $vendor_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Subscriptions {
    /**
     * Vendor subscription handler class.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Subscription
     */
    class VendorSubscription
    {
        use \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits\DokanSubscriptions;
        /**
         * The order object.
         *
         * @since 3.7.8
         *
         * @var WC_Order
         */
        protected $order;
        /**
         * ID of the subscription pack.
         *
         * @since 3.7.8
         *
         * @var integer
         */
        protected $product_id = 0;
        /**
         * ID of the stripe product.
         *
         * @since 3.7.8
         *
         * @var integer
         */
        protected $stripe_product_id = null;
        /**
         * The stripe customer object.
         *
         * @since 3.7.8
         *
         * @var \Stripe\Customer
         */
        protected $stripe_customer;
        /**
         * The source ID of the customer.
         *
         * @since 3.7.8
         *
         * @var integer
         */
        protected $payment_method_id;
        /**
         * Class constructor.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Initiates all necessary hooks.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Checks if payment is needed.
         *
         * @since 3.7.8
         *
         * @param bool $is_payment_needed
         * @param int  $order_id
         *
         * @return boolean
         */
        public function is_payment_needed($is_payment_needed, $order_id)
        {
        }
        /**
         * Processes data to create a subscription.
         *
         * @since 3.7.8
         *
         * @param array      $subscription_data
         * @param int|string $product_id
         * @param int|string $order_id
         *
         * @return \Stripe\Subscription|WP_Error
         */
        public function process_subscription_data($subscription_data, $product_id, $order_id)
        {
        }
        /**
         * Processes recurring subscription.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         * @param string   $payment_method_id
         *
         * @return \Stripe\Subscription|false
         */
        public function process_recurring_subscription($order, $payment_method_id)
        {
        }
        /**
         * Processes recurring subscription that is active in Stripe end.
         *
         * @since 3.7.8
         *
         * @param \Stripe\Subscription $subscription The subscription object.
         *
         * @return \Stripe\Subscription|void
         */
        public function process_active_subscription($subscription)
        {
        }
        /**
         * Sets up a recurring subscription in Stripe.
         *
         * @since 3.7.8
         *
         * @param SubscriptionPack $dokan_subscription
         *
         * @return \Stripe\Subscription|false
         */
        protected function setup_subscription($dokan_subscription)
        {
        }
        /**
         * Cancels stripe subscription.
         *
         * @since 3.7.8
         *
         * @param int|string $order_id
         * @param int|string $vendor_id
         * @param boolean    $cancel_immediately
         *
         * @return void
         */
        public function cancel_recurring_subscription($order_id, $vendor_id, $cancel_immediately)
        {
        }
        /**
         * Activates a vendor subscription
         *
         * @since 3.7.8
         *
         * @param int|string $order_id
         * @param int|string $vendor_id
         *
         * @return void
         */
        public function activate_subscription($order_id, $vendor_id)
        {
        }
        /**
         * Remove subscription forcefully. In case webhook is disabled or didn't work for some reason
         * Cancel the subscription in vendor's end. subscription is already removed in stripe's end.
         *
         * @since 3.7.8
         *
         * @param SubscriptionPack $vendor_subscription The vendor subscription pack object.
         *
         * @return void
         */
        public function remove_subscription($vendor_subscription)
        {
        }
        /**
         * Filters the flag to indicate whether or not order redirect should be processed.
         *
         * @since 3.7.8
         *
         * @param bool     $should_not_process
         * @param WC_order $order
         *
         * @return boolean
         */
        public function should_not_process_order_redirect($should_not_process, $order)
        {
        }
        /**
         * Processes subscription pack after saving.
         *
         * @since 3.7.8
         *
         * @param int $product_id
         *
         * @return void
         */
        public function process_subscription_after_save($product_id)
        {
        }
        /**
         * Empty cart if the vendor is already in a subscription.
         *
         * @since 3.7.8
         *
         * @param boolean    $is_valid
         * @param int|string $product_id
         * @param int        $quantity
         *
         * @return mixed
         */
        public function maybe_empty_cart($is_valid, $product_id, $quantity)
        {
        }
        /**
         * Checks if non-recurring Subscription should be canceled Immediately.
         *
         * @since 3.7.8
         *
         * @param bool $cancel_immediately
         * @param int  $order_id
         * @param int  $vendor_id
         *
         * @return boolean
         */
        public function should_cancel_non_recurring_subscription_immediately($cancel_immediately, $order_id)
        {
        }
        /**
         * Cancel main order before cancelling non-recurring subscription.
         *
         * @since 3.7.8
         *
         * @param int $vendor_id
         * @param int $product_id
         * @param int $order_id
         *
         * @return void
         */
        public function before_cancelling_subscriptions($vendor_id, $product_id, $order_id)
        {
        }
        /**
         * Restricts cancelling unpaid orders
         * if order is vendor subscription order.
         *
         * @since 3.7.8
         *
         * @param boolean  $cancel
         * @param WC_Order $order
         *
         * @return boolean
         */
        public function should_cancel_unpaid_order($cancel, $order)
        {
        }
        /**
         * Change notice to vendors for recurring payments.
         *
         * @since 3.7.8
         *
         * @param string   $message
         * @param WC_Order $order
         *
         * @return string
         */
        public function suborder_notice_to_vendor($message, $order)
        {
        }
        /**
         * For vendor subscription, the tax fee recipient will be admin.
         *
         * @since 3.7.8
         *
         * @param string $recipient
         * @param int    $order_id
         *
         * @return string
         */
        public function tax_fee_recipient($recipient, $order_id)
        {
        }
        /**
         * For vendor subscription, the shipping fee recipient will be admin.
         *
         * @since 3.7.8
         *
         * @param string $recipient
         * @param int    $order_id
         *
         * @return string
         */
        public function shipping_fee_recipient($recipient, $order_id)
        {
        }
        /**
         * Modifies and retrieves order button text.
         *
         * @since 3.7.8
         *
         * @param string $btn_text
         *
         * @return string
         */
        public function get_order_button_text($btn_text)
        {
        }
        /**
         * Loads email classes.
         *
         * @since 3.7.8
         *
         * @param array $emails
         *
         * @return array
         */
        public function load_emails($emails)
        {
        }
        /**
         * Loads email actions.
         *
         * @since 3.7.8
         *
         * @param array $actions
         *
         * @return array
         */
        public function load_email_actions($actions)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Support {
    /**
     * Configuration handler class
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Support
     */
    class Config
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Retrieves the singletone instance of the class.
         *
         * @since 3.6.1
         *
         * @return self
         */
        public static function instance()
        {
        }
        /**
         * Verifies if valid key format are given.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function verify_api_keys()
        {
        }
        /**
         * Retrieves secret key.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public function get_secret_key()
        {
        }
        /**
         * Retrieves publishable key.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public function get_publishable_key()
        {
        }
        /**
         * To check if the Stripe express API is running in production or sandbox environment
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function is_live_mode()
        {
        }
        /**
         * Checks if API is ready to use.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public function is_api_ready()
        {
        }
        /**
         * Retrieves API configuration error.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public function get_api_config_error()
        {
        }
        /**
         * Retrieves settings option.
         *
         * @since 3.6.1
         *
         * @param string $key
         *
         * @return mixed
         */
        public function get_option($key = '_all')
        {
        }
    }
    /**
     * Helper class for Stripe gateway.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Support
     */
    class Helper
    {
        /**
         * Retrievs gateway ID.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_gateway_id()
        {
        }
        /**
         * Retrievs gateway title.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_gateway_title()
        {
        }
        /**
         * Retrieves the Stripe gateway instance.
         *
         * @since 3.7.8
         *
         * @return Stripe
         */
        public static function get_gateway_instance()
        {
        }
        /**
         * Creates and retrieves meta key with prefix.
         *
         * @since 3.7.8
         *
         * @param string $key
         *
         * @return string
         */
        public static function meta_key($key)
        {
        }
        /**
         * Retrievs gateway description.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_gateway_description()
        {
        }
        /**
         * Retrieves API version of Stripe.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_api_version()
        {
        }
        /**
         * Retrieves text for order button on checkout page
         *
         * @since 3.6.1
         * @since 3.7.8 Added filter `dokan_stripe_express_order_button_text`
         *
         * @return string
         */
        public static function get_order_button_text()
        {
        }
        /**
         * Retrieves gateway id for Stripe SEPA.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_sepa_gateway_id()
        {
        }
        /**
         * Retrieves payment method type for Stripe SEPA.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_sepa_payment_method_type()
        {
        }
        /**
         * Checks if gateway is ready to be used
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public static function is_gateway_ready()
        {
        }
        /**
         * Checks if Stripe express api is ready.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public static function is_api_ready()
        {
        }
        /**
         * Checks if a seller is connected to Stripe express.
         *
         * @since 3.6.1
         *
         * @param int|string $seller_id
         *
         * @return boolean
         */
        public static function is_seller_connected($seller_id)
        {
        }
        /**
         * Checks if a seller is connected and enabled for payouts.
         *
         * @since 3.7.8
         *
         * @param int|string $seller_id
         *
         * @return boolean
         */
        public static function is_seller_activated($seller_id)
        {
        }
        /**
         * Retrieves available payment methods.
         *
         * @since 3.6.1
         * @since 3.7.8 Added optional `$available_method_classes` parameter
         *
         * @param array $available_method_classes (optional)
         *
         * @return array<string,string>
         */
        public static function get_available_methods($available_method_classes = [])
        {
        }
        /**
         * Retrieves human readable payment method label.
         *
         * @since 3.6.2
         *
         * @param string $method_id
         *
         * @return string
         */
        public static function get_method_label($method_id)
        {
        }
        /**
         * Retrieves instances of available payment methods' classes.
         *
         * @since 3.6.1
         *
         * @return array<string,\WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\PaymentMethod>
         */
        public static function get_available_method_instances()
        {
        }
        /**
         * Returns the list of enabled payment method types that will function with the current checkout.
         *
         * @since 3.7.8
         *
         * @param int $order_id
         *
         * @return string[]
         */
        public static function get_enabled_payment_methods_at_checkout($order_id = null)
        {
        }
        /**
         * Returns the list of enabled payment method types which are reusable
         * and will function with the current checkout.
         *
         * @since 3.7.8
         *
         * @param int $order_id
         *
         * @return string[]
         */
        public static function get_enabled_reusable_payment_methods($order_id = null)
        {
        }
        /**
         * Returns the list of enabled payment method according to their retrievable types
         * which are reusable and will be originally used.
         *
         * @since 3.7.8
         *
         * @param boolean $include_original (Optional) Indicates whether or not the original method is also needed to be included with its retrievable type
         * @param int     $order_id         (Optional) To determines the method based on the order
         *
         * @return string[]
         */
        public static function get_enabled_retrievable_payment_methods($include_original = false, $order_id = null)
        {
        }
        /**
         * Checks if viewing payment methods page.
         *
         * @since 3.6.1
         *
         * @return bool
         */
        public static function is_payment_methods_page()
        {
        }
        /**
         * Retrieves reuasable payment method ids.
         *
         * @since 3.6.1
         *
         * @param array $payment_methods
         *
         * @return string[]
         */
        public static function get_reusable_payment_methods($payment_methods = [])
        {
        }
        /**
         * Checks if a payment method is enabled for saved payments.
         *
         * @since 3.6.1
         *
         * @param string $payment_method_id Stripe payment method.
         *
         * @return boolean
         */
        public static function is_payment_method_reusable($payment_method_id)
        {
        }
        /**
         * Returns true if a payment is needed for the current cart or order.
         * Subscriptions may not require an upfront payment, so we need to check whether
         * or not the payment is necessary to decide for either a setup intent or a payment intent.
         *
         * @since 3.6.1
         *
         * @param int $order_id The order ID being processed.
         *
         * @return bool Whether a payment is necessary.
         */
        public static function is_payment_needed($order_id = null)
        {
        }
        /**
         * Check if saved card is used.
         *
         * @since 3.6.1
         *
         * @param string $payment_method
         *
         * @return boolean
         */
        public static function is_saved_card($payment_method = '')
        {
        }
        /**
         * Checks if payment is via saved payment source.
         *
         * @since 3.6.1
         *
         * @return bool
         */
        public static function is_using_saved_payment_method()
        {
        }
        /**
         * Checks if card is a prepaid card.
         *
         * @since 3.6.1
         *
         * @param object $source_object
         *
         * @return bool
         */
        public static function is_prepaid_card($source_object)
        {
        }
        /**
         * Checks if a payment method object represents a prepaid credit card and
         * throws an exception if it is one, but that is not allowed.
         *
         * @since 3.6.1
         *
         * @param \Stripe\PaymentMethod $payment_method
         *
         * @return void
         * @throws DokanException An exception if the card is prepaid, but prepaid cards are not allowed.
         */
        public static function maybe_disallow_prepaid_card($payment_method)
        {
        }
        /**
         * Retrives the formatted blogname.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function get_blogname()
        {
        }
        /**
         * Sanitizes user given title/descriptions.
         *
         * @since 3.7.8
         *
         * @param string $data
         *
         * @return string
         */
        public static function sanitize_html($data)
        {
        }
        /**
         * Sanitize statement descriptor text.
         *
         * Stripe requires max of 22 characters and no special characters.
         *
         * @since 3.6.1
         *
         * @param string $statement_descriptor
         *
         * @return string $statement_descriptor Sanitized statement descriptor
         */
        public static function clean_statement_descriptor($statement_descriptor)
        {
        }
        /**
         * Retrieves enabled billing fields.
         *
         * @since 3.6.1
         *
         * @return string[]
         */
        public static function get_enabled_billing_fields()
        {
        }
        /**
         * Get Stripe amount to pay.
         *
         * @since 3.6.1
         *
         * @param float  $total Amount due.
         * @param string $currency Accepted currency.
         *
         * @return float|int
         */
        public static function get_stripe_amount($total, $currency = '')
        {
        }
        /**
         * List of currencies supported by Stripe that has no decimals.
         *
         * @see https://stripe.com/docs/currencies#zero-decimal
         * @see https://stripe.com/docs/currencies#presentment-currencies
         *
         * @since 3.6.1
         *
         * @return string[] $currencies
         */
        public static function no_decimal_currencies()
        {
        }
        /**
         * Stripe uses smallest denomination in currencies such as cents.
         * We need to format the returned currency from Stripe into human readable form.
         * The amount is not used in any calculations so returning string is sufficient.
         *
         * @since 3.6.1
         *
         * @param \Stripe\BalanceTransaction $balance_transaction Stripe Balance transaction object
         * @param string                     $type                Type of number to format
         *
         * @return string
         */
        public static function format_balance_fee($balance_transaction, $type = 'fee')
        {
        }
        /**
         * Initiates the WP Filesystem API.
         *
         * @since 3.7.8
         *
         * @uses WP_Filesystem()
         *
         * @return void
         */
        public static function init_filesystem()
        {
        }
        /**
         * Modifies filesystem method as necessary.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function get_filesystem_method()
        {
        }
        /**
         * Checks if this page is a cart or checkout page.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public static function has_cart_or_checkout_on_current_page()
        {
        }
        /**
         * Retrieves current url.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_current_url()
        {
        }
        /**
         * Retrieves the url for payment settings of Stripe express in vendor dashboard.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_payment_settings_url()
        {
        }
        /**
         * Checks if the request contains the values that indicates
         * a redirection after a successful setup intent creation.
         *
         * @since 3.6.1
         *
         * @return bool
         */
        public static function is_setup_intent_success_creation_redirection()
        {
        }
        /**
         * Retrives dropdown options for the payment method selector.
         *
         * @since 3.7.8
         *
         * @return string[]
         */
        public static function get_payment_methods_dropdown()
        {
        }
        /**
         * Verifies whether a certain ZIP code is valid for a country.
         * The default country is US incl. 4-digit extensions.
         *
         * @since 3.6.1
         *
         * @todo Implement validation for all countries needed
         *
         * @param string $zip The ZIP code to verify.
         * @param string $country
         *
         * @return boolean
         */
        public static function is_valid_zip_code($zip, $country = 'US')
        {
        }
        /**
         * Checks if a date is valid.
         *
         * @since 3.6.1
         *
         * @param string $date
         *
         * @return boolean
         */
        public static function is_valid_date($date)
        {
        }
        /**
         * Converts a WooCommerce locale to the closest supported by Stripe.js.
         *
         * Stripe.js supports only a subset of IETF language tags,
         * if a country specific locale is not supported we use the default for that language.
         * If no match is found we return 'auto' so Stripe.js uses the browser locale.
         *
         * @see https://stripe.com/docs/js/appendix/supported_locales
         *
         * @since 3.6.1
         *
         * @param string $wc_locale The locale to convert.
         *
         * @return string Closest locale supported by Stripe ('auto' if NONE).
         */
        public static function convert_locale($wc_locale)
        {
        }
        /**
         * Retrieves locale options for Stripe.
         *
         * @see https://support.stripe.com/questions/language-options-for-customer-emails
         *
         * @since 3.6.1
         *
         * @return string[]
         */
        public static function get_stripe_locale_options()
        {
        }
        /**
         * Get supported countries from where vendors can sign up.
         *
         * @since 3.7.17
         *
         * @param bool $include_restricted_countries Whether or not the restricted countries should be included.
         *
         * @return array<string,string>|\WC_Countries
         */
        public static function get_supported_countries_for_vendors($include_restricted_countries = false)
        {
        }
        /**
         * Retrieves the supported European countries.
         *
         * @since 3.7.17
         *
         * @return array
         */
        public static function get_european_countries()
        {
        }
        /**
         * Gets the customer's locale/language based on their setting or the site settings.
         *
         * @since 3.6.1
         *
         * @param \WP_User $user
         *
         * @return string The locale/language set in the user profile or the site itself.
         */
        public static function get_locale($user = false)
        {
        }
        /**
         * Checks to see if error is of invalid request
         * error and it is no such customer.
         *
         * @since 3.6.1
         *
         * @param object|string $error
         *
         * @return boolean
         */
        public static function is_no_such_customer_error($error)
        {
        }
        /**
         * Checks if the error message is pointing to a missing subscription.
         *
         * @since 3.7.8
         *
         * @param string $error_message
         *
         * @return boolean
         */
        public static function is_no_such_subscription_error($error_message)
        {
        }
        /**
         * Checks to see if error is of same idempotency key
         * error due to retries with different parameters.
         *
         * @since 3.7.8
         *
         * @param object $error
         *
         * @return boolean
         */
        public static function is_same_idempotency_error($error)
        {
        }
        /**
         * Checks if the error os retryable.
         *
         * @since 3.6.1
         *
         * @param object $error
         *
         * @return boolean
         */
        public static function is_retryable_error($error)
        {
        }
        /**
         * Checks to see if error is of invalid request
         * error and it is no such source.
         *
         * @since 3.7.8
         *
         * @param object $error
         *
         * @return boolean
         */
        public static function is_no_such_source_error($error)
        {
        }
        /**
         * Checks to see if error is of invalid request
         * error and it is no such source linked to customer.
         *
         * @since 3.7.8
         *
         * @param object|string $error
         *
         * @return boolean
         */
        public static function is_no_linked_source_error($error)
        {
        }
        /**
         * Checks to see if error is of invalid request
         * error and it is no such customer.
         *
         * @since 3.6.1
         *
         * @param object|string $error
         *
         * @return bool
         */
        public static function is_source_already_attached_error($error)
        {
        }
        /**
         * Retrieves localized message based on code.
         *
         * @since 3.6.1
         *
         * @return array<string,string>|string
         */
        public static function get_payment_message($key = '')
        {
        }
        /**
         * Retrieves error message from response object.
         *
         * @since 3.6.1
         *
         * @param object $response
         *
         * @return string
         */
        public static function get_error_message_from_response($response)
        {
        }
        /**
         * Retrieves possible error messages.
         *
         * @since 3.6.1
         *
         * @param string $key
         *
         * @return array<string,string>|string
         */
        public static function get_error_message($key = '')
        {
        }
        /**
         * Retrieves admin settings webhook description.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_webhook_description()
        {
        }
        /**
         * Retrieves description API keys.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_api_keys_description()
        {
        }
        /**
         * Retrieves the express settings url in Stripe dashboard.
         *
         * @since 3.7.17
         *
         * @return string
         */
        public static function get_stripe_express_dashboard_settings_url()
        {
        }
        /**
         * Includes module template
         *
         * @since 3.6.1
         *
         * @param string $file_name Template file name
         * @param array  $args     Necessary variables (Optional)
         * @param string $location Sub folder name inside template (Optional)
         *
         * @return void
         */
        public static function get_template($file_name, $args = [], $location = '')
        {
        }
        /**
         * Includes module template for Admin
         *
         * @since 3.6.1
         *
         * @param string $file_name Template file name
         * @param array  $args      Necessary variables (Optional)
         *
         * @return void
         */
        public static function get_admin_template($file_name, $args = [])
        {
        }
        /**
         * Writes error log messages.
         *
         * @since 3.6.1
         *
         * @param string $message
         * @param string $level
         *
         * @return void
         */
        public static function log($message, $category = '', $level = 'debug')
        {
        }
        /**
         * Get the transient key for storing redirect url after stripe express authorization or de-authorization.
         *
         * @param integer $vendor_id
         * @return string
         */
        public static function get_stripe_onboarding_intended_url_transient_key(int $vendor_id): string
        {
        }
    }
    /**
     * Order meta data handler class for Stripe gateway.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Support
     */
    class OrderMeta
    {
        /**
         * Saves the order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return WC_Order
         */
        public static function save(\WC_Order $order)
        {
        }
        /**
         * Retrieves meta key for charge captured flag.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function charge_captured_key()
        {
        }
        /**
         * Updates the status of charge captured.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param string   $is_captured
         *
         * @return void
         */
        public static function update_charge_captured(\WC_Order $order, $is_captured = 'yes')
        {
        }
        /**
         * Checks whether stripe charge is captured or not.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return boolean
         */
        public static function is_charge_captured(\WC_Order $order)
        {
        }
        /**
         * Retrieves transaction id key.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function transaction_id_key()
        {
        }
        /**
         * Updates the transaction id of an order
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param string   $trn_id
         *
         * @return void
         */
        public static function update_transaction_id(\WC_Order $order, $trn_id)
        {
        }
        /**
         * Retrieves transaction id of an order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return boolean
         */
        public static function get_transaction_id(\WC_Order $order)
        {
        }
        /**
         * Retrieves transfer id key.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function transfer_id_key()
        {
        }
        /**
         * Updates the transfer id of an order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param string   $trn_id
         *
         * @return void
         */
        public static function update_transfer_id(\WC_Order $order, $trn_id)
        {
        }
        /**
         * Retrieves transfer id of an order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return boolean
         */
        public static function get_transfer_id(\WC_Order $order)
        {
        }
        /**
         * Retrieves payment/setup intent id key.
         *
         * @since 3.6.1
         *
         * @param boolean $is_setup
         *
         * @return string
         */
        public static function intent_id_key($is_setup = false)
        {
        }
        /**
         * Updates intent id of an order.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         * @param string   $intent_id
         * @param boolean  $is_setup
         *
         * @return void
         */
        public static function update_intent(\WC_Order $order, $intent_id, $is_setup = false)
        {
        }
        /**
         * Adds payment intent id and order note to order if payment intent is not already saved.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param string   $payment_intent_id
         *
         * @return void
         */
        public static function add_payment_intent(\WC_Order $order, $payment_intent_id)
        {
        }
        /**
         * Retrieves payment intent id.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return mixed
         */
        public static function get_payment_intent(\WC_Order $order)
        {
        }
        /**
         * Deletes intent id of an order.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return void
         */
        public static function delete_payment_intent(\WC_Order $order)
        {
        }
        /**
         * Adds setup intent to order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param string $intent_id
         *
         * @return void
         */
        public static function add_setup_intent(\WC_Order $order, $intent_id)
        {
        }
        /**
         * Retrieves setup intent id.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return string
         */
        public static function get_setup_intent(\WC_Order $order)
        {
        }
        /**
         * Retrieves payment/setup intent debug id key.
         *
         * @since 3.7.8
         *
         * @param boolean $is_setup
         *
         * @return string
         */
        public static function debug_intent_id_key($is_setup = false)
        {
        }
        /**
         * Updates debug payment intent to order.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         * @param string   $intent_id
         *
         * @return void
         */
        public static function update_debug_payment_intent(\WC_Order $order, $intent_id)
        {
        }
        /**
         * Retrieves setup intent id.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return string
         */
        public static function get_debug_payment_intent(\WC_Order $order)
        {
        }
        /**
         * Updates debug setup intent to order.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         * @param string   $intent_id
         *
         * @return void
         */
        public static function update_debug_setup_intent(\WC_Order $order, $intent_id)
        {
        }
        /**
         * Retrieves debug setup intent id.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return string
         */
        public static function get_debug_setup_intent(\WC_Order $order)
        {
        }
        /**
         * Retrieves source id key.
         *
         * @since 3.6.1
         *
         * @deprecated 3.7.8
         *
         * @return string
         */
        public static function source_id_key()
        {
        }
        /**
         * Retrieves payment method id key.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function payment_method_id_key()
        {
        }
        /**
         * Retrieves stripe payment method id.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return mixed
         */
        public static function get_payment_method_id(\WC_Order $order)
        {
        }
        /**
         * Updates stripe payment method id.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         * @param string   $payment_method_id
         *
         * @return void
         */
        public static function update_payment_method_id(\WC_Order $order, $payment_method_id)
        {
        }
        /**
         * Deletes payment method id of an order.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return void
         */
        public static function delete_payment_method_id(\WC_Order $order)
        {
        }
        /**
         * Retrieves meta key for customer id.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function customer_id_key()
        {
        }
        /**
         * Retrieves stripe customer id.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function get_customer_id(\WC_Order $order)
        {
        }
        /**
         * Updates stripe customer id.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function update_customer_id(\WC_Order $order, $customer_id)
        {
        }
        /**
         * Deletes stripe customer id.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return mixed
         */
        public static function delete_customer_id(\WC_Order $order)
        {
        }
        /**
         * Retrieves meta key for payment type
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function payment_type_key()
        {
        }
        /**
         * Retrieves stripe payment type
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return mixed
         */
        public static function get_payment_type(\WC_Order $order)
        {
        }
        /**
         * Updates stripe payment type.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param string   $payment_type
         *
         * @return void
         */
        public static function update_payment_type(\WC_Order $order, $payment_type)
        {
        }
        /**
         * Retrieves meta key for redirect processed flag.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function redirect_processed_key()
        {
        }
        /**
         * Check whether order redirect is processed.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return boolean
         */
        public static function is_redirect_processed(\WC_Order $order)
        {
        }
        /**
         * Updates the flag if order redirect is processed.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param string   $is_processed
         *
         * @return void
         */
        public static function update_redirect_processed(\WC_Order $order, $is_processed = 'yes')
        {
        }
        /**
         * Retrieves disbursement mode key.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function disburse_mode_key()
        {
        }
        /**
         * Updates the disbursement mode of an order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param string   $disburse_mode
         *
         * @return void
         */
        public static function update_disburse_mode(\WC_Order $order, $disburse_mode)
        {
        }
        /**
         * Retrieves the disbursement mode of an order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return void
         */
        public static function get_disburse_mode(\WC_Order $order)
        {
        }
        /**
         * Retrieves meta key for stripe fee.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function stripe_fee_key()
        {
        }
        /**
         * Gets the Stripe fee for order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return float
         */
        public static function get_stripe_fee(\WC_Order $order)
        {
        }
        /**
         * Updates the Stripe fee for order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param float    $amount
         *
         * @return void
         */
        public static function update_stripe_fee(\WC_Order $order, $amount = 0.0)
        {
        }
        /**
         * Deletes Stripe gateway fee.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return void
         */
        public static function delete_stripe_fee(\WC_Order $order)
        {
        }
        /**
         * Retrives meta key for withdraw data.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function withdraw_data_key()
        {
        }
        /**
         * Retrieves withdraw data for a parent order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return array
         */
        public static function get_withdraw_data(\WC_Order $order)
        {
        }
        /**
         * Updates withdraw data for a parent order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order The parent order.
         * @param mixed   $withdraw_data The withdraw data.
         *
         * @return void
         */
        public static function update_withdraw_data(\WC_Order $order, $withdraw_data)
        {
        }
        /**
         * Retrives meta key for withdraw balance added flag.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function withdraw_balance_added_key()
        {
        }
        /**
         * Checks if withdraw balance added for an order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return boolean
         */
        public static function is_withdraw_balance_added(\WC_Order $order)
        {
        }
        /**
         * Updates withdraw balance added flag.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param string   $is_added
         *
         * @return void
         */
        public static function update_if_withdraw_balance_added($order, $is_added = 'yes')
        {
        }
        /**
         * Retrives meta key for refund id.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function refund_id_key()
        {
        }
        /**
         * Retrieves refund ids for an order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return array
         */
        public static function get_refund_ids(\WC_Order $order)
        {
        }
        /**
         * Updates refund ids for an order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param string   $refund_id
         *
         * @return void
         */
        public static function update_refund_id(\WC_Order $order, $refund_id)
        {
        }
        /**
         * Retrives meta key for last refund id.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function last_refund_id_key()
        {
        }
        /**
         * Retrieves last refund id for an order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return array
         */
        public static function get_last_refund_id(\WC_Order $order)
        {
        }
        /**
         * Updates last refund id for an order.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param string   $refund_id
         *
         * @return void
         */
        public static function update_last_refund_id(\WC_Order $order, $refund_id)
        {
        }
        /**
         * Retrieves meta key for payment capture id.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function payment_capture_id_key()
        {
        }
        /**
         * Retrievs payment capture id.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return string|false
         */
        public static function get_payment_capture_id(\WC_Order $order)
        {
        }
        /**
         * Updates payment capture id.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         * @param string   $payment_capture_id
         *
         * @return void
         */
        public static function update_payment_capture_id(\WC_Order $order, $payment_capture_id)
        {
        }
        /**
         * Retrives meta key for status final flag.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function status_final_key()
        {
        }
        /**
         * Updates status final.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return void
         */
        public static function make_status_final(\WC_Order $order)
        {
        }
        /**
         * Retrieves status final.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return string|false
         */
        public static function get_status_final(\WC_Order $order)
        {
        }
        /**
         * Deletes status final.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return void
         */
        public static function undo_status_final(\WC_Order $order)
        {
        }
        /**
         * Retrives meta key for status before hold.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function status_before_hold_key()
        {
        }
        /**
         * Updates status before hold.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param string   $status
         *
         * @return void
         */
        public static function update_status_before_hold(\WC_Order $order, $status)
        {
        }
        /**
         * Retrieves status before hold.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return string|false
         */
        public static function get_status_before_hold(\WC_Order $order)
        {
        }
        /**
         * Retrieves meta key for vendor subscription order.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function vendor_subscription_order_key()
        {
        }
        /**
         * Checks if order is a vendor subscription order.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return boolean
         */
        public static function is_vendor_subscription(\WC_Order $order)
        {
        }
        /**
         * Updates flag for vendor subscription order.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         * @param string   $status
         *
         * @return void
         */
        public static function update_vendor_subscription_order(\WC_Order $order, $status = 'yes')
        {
        }
        /**
         * Retrives meta key for Stripe subscription id.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function stripe_subscription_id_key()
        {
        }
        /**
         * Retrives Stripe subscription id.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return string|false
         */
        public static function get_stripe_subscription_id(\WC_Order $order)
        {
        }
        /**
         * Updates Stripe subscription id.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         * @param string   $subscription_id
         *
         * @return void
         */
        public static function update_stripe_subscription_id(\WC_Order $order, $subscription_id)
        {
        }
        /**
         * Retrieves meta key for subscription charge id.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function subscription_charge_id_key()
        {
        }
        /**
         * Retrieves subscription charge id.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return string|false
         */
        public static function get_subscription_charge_id(\WC_Order $order)
        {
        }
        /**
         * Updates charge id for a subscription.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         * @param string   $charge_id
         *
         * @return void
         */
        public static function update_subscription_charge_id(\WC_Order $order, $charge_id)
        {
        }
        /**
         * Retrieves meta key for coupon id.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function coupon_id_key()
        {
        }
        /**
         * Retrieves coupon id for Stripe.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return string|false
         */
        public static function get_stripe_coupon_id(\WC_Order $order)
        {
        }
        /**
         * Updates Stripe coupon id for order.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         * @param string   $coupon_id
         *
         * @return void
         */
        public static function update_stripe_coupon_id(\WC_Order $order, $coupon_id)
        {
        }
        /**
         * Retrieves meta key for awaiting disbursement flag.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function awaiting_disbursement_key()
        {
        }
        /**
         * Retrieves meta data of awaiting disbursement flag.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return string|false
         */
        public static function has_awaiting_disbursement(\WC_Order $order)
        {
        }
        /**
         * Updates meta data of awaiting disbursement flag.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         * @param string   $is_awaiting
         *
         * @return void
         */
        public static function update_awaiting_disbursement(\WC_Order $order, $is_awaiting = 'yes')
        {
        }
        /**
         * Deletes awaiting disbursement flag.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return void
         */
        public static function delete_awaiting_disbursement(\WC_Order $order)
        {
        }
        /**
         * Retrieves meta key for save payment method flag.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function save_payment_method_key()
        {
        }
        /**
         * Indicates whether or not payment method should be saved.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return boolean
         */
        public static function should_save_payment_method(\WC_Order $order)
        {
        }
        /**
         * Updates flag of whether or not payment method should be saved.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         *
         * @return void
         */
        public static function update_save_payment_method(\WC_Order $order, $save = 'yes')
        {
        }
        //** Default Dokan meta keys are below. No need to add prefix for these. **//
        /**
         * Updates gateway fee for dokan.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param float|string $fee
         *
         * @return void
         */
        public static function update_dokan_gateway_fee(\WC_Order $order, $fee)
        {
        }
        /**
         * Updates gateway fee for dokan.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return string|false
         */
        public static function get_dokan_gateway_fee(\WC_Order $order)
        {
        }
        /**
         * Updates who paid the gateway fee for dokan.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         * @param string   $paid_by 'seller' or 'admin'
         *
         * @return void
         */
        public static function update_gateway_fee_paid_by(\WC_Order $order, $paid_by = 'seller')
        {
        }
        /**
         * Retrieves who paid the gateway fee for dokan.
         *
         * @since 3.6.1
         *
         * @param WC_Order $order
         *
         * @return string|false
         */
        public static function get_gateway_fee_paid_by(\WC_Order $order)
        {
        }
        /**
         * Updates meta data of tax fee recipient.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         * @param string   $recipient
         *
         * @return void
         */
        public static function update_tax_fee_recipient(\WC_Order $order, $recipient = 'admin')
        {
        }
        /**
         * Updates meta data of shipping fee recipient.
         *
         * @since 3.7.8
         *
         * @param WC_Order $order
         * @param string   $recipient
         *
         * @return void
         */
        public static function update_shipping_fee_recipient(\WC_Order $order, $recipient = 'admin')
        {
        }
    }
    /**
     * Product meta data handler class for Stripe express gateway.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Support
     */
    class ProductMeta
    {
        /**
         * Sets the product object.
         *
         * @since 3.7.8
         *
         * @param int|WC_Product $product
         *
         * @return static
         */
        public static function set($product)
        {
        }
        /**
         * Saves the product data.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function save()
        {
        }
        /**
         * Retrieves the Stripe sproduct id for a product.
         *
         * @since 3.7.8
         *
         * @return string|false
         */
        public function get_stripe_product_id()
        {
        }
        /**
         * Updates the Stripe product id for a product.
         *
         * @since 3.7.8
         *
         * @param string $stripe_product_id
         *
         * @return self
         */
        public function update_stripe_product_id($stripe_product_id)
        {
        }
        /**
         * Retrieves the Stripe price id for a product.
         *
         * @since 3.7.8
         *
         * @return string|false
         */
        public function get_stripe_price_id()
        {
        }
        /**
         * Updates the Stripe product id for a product.
         *
         * @since 3.7.8
         *
         * @param string $stripe_price_id
         *
         * @return self
         */
        public function update_stripe_price_id($stripe_price_id)
        {
        }
        /**
         * Returns meta key for no of product key.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function no_of_product_key()
        {
        }
        /**
         * Retrieves no of product.
         *
         * @since 3.7.8
         *
         * @return string|false
         */
        public function get_no_of_product()
        {
        }
        /**
         * Updates the number of product.
         *
         * @since 3.7.8
         *
         * @param int|string $no_of_product
         *
         * @return self
         */
        public function update_no_of_product($no_of_product)
        {
        }
        /**
         * Deletes metadata of no of product.
         *
         * @since 3.7.8
         *
         * @return self
         */
        public function delete_no_of_product()
        {
        }
    }
    /**
     * Class for handling all settings of Stripe Express
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Support
     */
    class Settings
    {
        /**
         * Retrieves option key for settings.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function key()
        {
        }
        /**
         * Retrieves all stripe settings
         *
         * @since 3.6.1
         *
         * @param string $key
         *
         * @return mixed
         */
        public static function get($key = '_all')
        {
        }
        /**
         * Updates stripe settings.
         *
         * @since 3.6.1
         *
         * @param array $settings
         *
         * @return boolean
         */
        public static function update($settings)
        {
        }
        /**
         * Checks if test mode is enabled
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public static function is_test_mode()
        {
        }
        /**
         * Checks if debugging is enabled.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public static function is_debug_mode()
        {
        }
        /**
         * Retrieves Stripe publishable key.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_publishable_key()
        {
        }
        /**
         * Retrieves Stripe secret key.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_secret_key()
        {
        }
        /**
         * Retrieves webhook key
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_webhook_secret()
        {
        }
        /**
         * Retrieves enabled payment methods.
         *
         * @since 3.6.1
         *
         * @return string[]
         */
        public static function get_enabled_payment_methods()
        {
        }
        /**
         * Checks if saved card is enabled
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public static function is_saved_cards_enabled()
        {
        }
        /**
         * Checks if gateway is enabled
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public static function is_gateway_enabled()
        {
        }
        /**
         * Retrieves gateway title for Stripe Express
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_gateway_title()
        {
        }
        /**
         * Retrieves gateway description
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_gateway_description()
        {
        }
        /**
         * Retrieves default platform country.
         *
         * @since 3.7.17
         *
         * @return string[] A list of two-letter ISO codes of restricted countries.
         */
        public static function get_restricted_countries()
        {
        }
        /**
         * Checks if cross border transfer is enabled
         *
         * @since 3.7.17
         *
         * @return boolean
         */
        public static function is_cross_border_transfer_enabled()
        {
        }
        /**
         * Checks if sellers pay processing fees
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public static function sellers_pay_processing_fees()
        {
        }
        /**
         * Retrieves payment disbursement mode
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_disbursement_mode()
        {
        }
        /**
         * Retrieves payment disbursement delay period
         *
         * @since 3.6.1
         *
         * @return int
         */
        public static function get_disbursement_delay_period()
        {
        }
        /**
         * Checks if display notice on vendor dashboard for
         * non-connected sellers is enabled.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public static function is_display_notice_on_vendor_dashboard_enabled()
        {
        }
        /**
         * Checks if send announcement to non-connected sellers is enabled
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public static function is_send_announcement_to_sellers_enabled()
        {
        }
        /**
         * Get interval period for sending announcement
         *
         * @since 3.6.1
         *
         * @return int
         */
        public static function get_announcement_interval()
        {
        }
        /**
         * Checks if capture is enabled on checkout.
         *
         * @since 3.6.1
         *
         * @return boolean
         */
        public static function is_manual_capture_enabled()
        {
        }
        /**
         * Retrieves statement descriptor for customer bank statement.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function get_statement_descriptor()
        {
        }
        /**
         * Checks if Disconnect Restricted Vendors is enabled
         *
         * @since DOKAN_PRO_VERSION
         *
         * @return boolean
         */
        public static function is_disconnect_vendors_enabled()
        {
        }
        /**
         * Checks if Disconnect Cross Border Vendors is enabled
         *
         * @since DOKAN_PRO_VERSION
         *
         * @return boolean
         */
        public static function is_disconnect_connected_vendors_enabled()
        {
        }
    }
    // Exit if called directly
    /**
     * User meta data handler class for Stripe gateway.
     *
     * @since   3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Support
     */
    class UserMeta
    {
        /**
         * Generates meta key for stripe account id.
         *
         * @since      3.6.1
         *
         * @deprecated 3.9.7
         *
         * @return string
         */
        public static function stripe_account_id_key()
        {
        }
        /**
         * Retrieves stripe account ID of a user.
         *
         * @since 3.6.1
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_stripe_account_id($user_id)
        {
        }
        /**
         * Updates a stripe account id for a user.
         *
         * @since 3.6.1
         *
         * @param int|string $user_id
         * @param string     $account_id
         *
         * @return int|boolean
         */
        public static function update_stripe_account_id($user_id, $account_id)
        {
        }
        /**
         * Generates meta key for stripe account information.
         *
         * @since 3.9.7
         *
         * @return string
         */
        public static function get_stripe_account_info_key()
        {
        }
        /**
         * Retrieves stripe account info of a user.
         *
         * @since 3.9.7
         *
         * @param int|string $user_id
         *
         * @return array|false
         */
        public static function get_stripe_account_info($user_id)
        {
        }
        /**
         * Updates stripe account info for a user.
         *
         * @since 3.6.1
         *
         * @param int|string      $user_id
         * @param \Stripe\Account $account
         *
         * @return int|boolean
         */
        public static function update_stripe_account_info($user_id, \Stripe\Account $account)
        {
        }
        /**
         * Deletes stripe account id of a user
         *
         * @since 3.6.1
         *
         * @param int|string $user_id ID of the user
         * @param boolean    $force   Default `false` and store the current id in trash, If `true`, no trash will be maintained
         *
         * @return boolean
         */
        public static function delete_stripe_account_id($user_id, $force = false)
        {
        }
        /**
         * Retrieves stripe account id that was previously trashed.
         *
         * @since 3.6.1
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_trashed_stripe_account_id($user_id)
        {
        }
        /**
         * Retrieves user id by stripe account id.
         *
         * @since 3.9.7
         *
         * @param string $account_id
         *
         * @return int|false
         */
        public static function get_user_id_by_stripe_account_id(string $account_id)
        {
        }
        /**
         * Retrieves stripe customer id meta key.
         *
         * @since 3.6.1
         *
         * @return string
         */
        public static function stripe_customer_id_key()
        {
        }
        /**
         * Retrieves stripe customer id.
         *
         * @since 3.6.1
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_stripe_customer_id($user_id)
        {
        }
        /**
         * Updates stripe customer id.
         *
         * @since 3.6.1
         *
         * @param int|string $user_id
         * @param string     $stripe_id
         *
         * @return string|boolean
         */
        public static function update_stripe_customer_id($user_id, $stripe_id)
        {
        }
        /**
         * Deletes stripe cutomer id.
         *
         * @since 3.6.1
         *
         * @param int|string $user_id
         *
         * @return boolean
         */
        public static function delete_stripe_customer_id($user_id)
        {
        }
        /**
         * Retrieves meta key for stripe subscription id.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function stripe_subscription_id_key()
        {
        }
        /**
         * Retrieves stripe subscription id.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_stripe_subscription_id($user_id)
        {
        }
        /**
         * Updates stripe subscription id.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         * @param string     $subscription_id
         *
         * @return string|boolean
         */
        public static function update_stripe_subscription_id($user_id, $subscription_id)
        {
        }
        /**
         * Deletes stripe subscription id.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return boolean
         */
        public static function delete_stripe_subscription_id($user_id)
        {
        }
        /**
         * Retrieve meta key for temporary stripe subscription id for vendor subscription checkout.
         *
         * @since 3.8.3
         *
         * @return string
         */
        public static function stripe_temp_subscription_id_key()
        {
        }
        /**
         * Retrieves temporary stripe subscription id for vendor subscription checkout.
         *
         * @since 3.8.3
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_stripe_temp_subscription_id($user_id)
        {
        }
        /**
         * Updates stripe temporary subscription id.
         *
         * @since 3.8.3
         *
         * @param int|string $user_id
         * @param string     $subscription_id
         *
         * @return int|bool
         */
        public static function update_stripe_temp_subscription_id($user_id, $subscription_id)
        {
        }
        /**
         * Deletes stripe temporary subscription id.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return bool
         */
        public static function delete_stripe_temp_subscription_id($user_id)
        {
        }
        /**
         * Retrieves meta key for stripe subscription id for debugging.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function stripe_debug_subscription_id_key()
        {
        }
        /**
         * Retrieves stripe debug subscription id.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_stripe_debug_subscription_id($user_id)
        {
        }
        /**
         * Updates stripe debug subscription id.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         * @param string     $subscription_id
         *
         * @return string|boolean
         */
        public static function update_stripe_debug_subscription_id($user_id, $subscription_id)
        {
        }
        /**
         * Deletes stripe debug subscription id.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return boolean
         */
        public static function delete_stripe_debug_subscription_id($user_id)
        {
        }
        /**
         * Retrieves meta key for customer recurring subscription.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function customer_recurring_subscription_key()
        {
        }
        /**
         * Checks if a user has active recurring subscription.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return boolean
         */
        public static function has_customer_recurring_subscription($user_id)
        {
        }
        /**
         * Updates the status of customer recurring subscription.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         * @param string     $status
         *
         * @return string|boolean
         */
        public static function update_customer_recurring_subscription($user_id, $status = 'active')
        {
        }
        /**
         * Retrieves meta key for product order id.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function product_order_id_key()
        {
        }
        /**
         * Retrieves product order id of a user.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_product_order_id($user_id)
        {
        }
        /**
         * Updates product order id meta value.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         * @param string     $order_id
         *
         * @return int|boolean
         */
        public static function update_product_order_id($user_id, $order_id)
        {
        }
        /**
         * Retrieves meta key for product order id.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function product_pack_id_key()
        {
        }
        /**
         * Retrieves subscribed product pack id of a user.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return integer|false
         */
        public static function get_product_pack_id($user_id)
        {
        }
        /**
         * Updates product pack id meta value.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         * @param string     $product_pack_id
         *
         * @return int|boolean
         */
        public static function update_product_pack_id($user_id, $product_pack_id)
        {
        }
        /**
         * Deletes product pack id meta value.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return boolean
         */
        public static function delete_product_pack_id($user_id)
        {
        }
        /**
         * Retrieves meta key for initial product package id.
         *
         * Although there is already a meta key to store this.
         * This one will work as a supporting meta key to avoid
         * any inconsistency at any point where the original meta
         * key might be unavailable for asynchronous process.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function initial_product_pack_id_key()
        {
        }
        /**
         * Retrieves initial product pack id of a user.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return integer|false
         */
        public static function get_initial_product_pack_id($user_id)
        {
        }
        /**
         * Updates meta data of initial product pack id.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         * @param string     $product_pack_id
         *
         * @return boolean
         */
        public static function update_initial_product_pack($user_id, $product_pack_id)
        {
        }
        /**
         * Deletes initial product pack id meta value.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return boolean
         */
        public static function delete_initial_product_pack_id($user_id)
        {
        }
        /**
         * Returns meta key for product no with pack key.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function product_no_with_pack_key()
        {
        }
        /**
         * Retrieves product no with pack of a user.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_product_no_with_pack($user_id)
        {
        }
        /**
         * Updates the product no with pack.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         * @param int|string $product_no
         *
         * @return int|boolean
         */
        public static function update_product_no_with_pack($user_id, $product_no)
        {
        }
        /**
         * Deletes meta data of no of product with pack of a vendor.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return boolean
         */
        public static function delete_product_no_with_pack($user_id)
        {
        }
        /**
         * Retrieves active cancelled subscription meta key.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function active_cancelled_subscription_key()
        {
        }
        /**
         * Checks if a user has active cancelled subscription.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return boolean
         */
        public static function has_active_cancelled_subscrption($user_id)
        {
        }
        /**
         * Updates flag for active cancelled subscription.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         * @param boolean    $status
         *
         * @return boolean|string
         */
        public static function update_active_cancelled_subscription($user_id, $status = true)
        {
        }
        /**
         * Retrieves product pack end date meta key.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function product_pack_end_key()
        {
        }
        /**
         * Retrieves product pack end date of a user.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_product_pack_end_date($user_id)
        {
        }
        /**
         * Updates product pack end date of a user.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         * @param string     $end_date
         *
         * @return int|boolean
         */
        public static function update_product_pack_end_date($user_id, $end_date)
        {
        }
        /**
         * Retrieves product pack start date meta key.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function product_pack_start_key()
        {
        }
        /**
         * Retrieves product pack end date of a user.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function get_product_pack_start_date($user_id)
        {
        }
        /**
         * Updates product pack start date of a user.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         * @param string     $end_date
         *
         * @return int|boolean
         */
        public static function update_product_pack_start_date($user_id, $start_date)
        {
        }
        /**
         * Retrieves has pending subscription meta key.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function has_pending_subscription_key()
        {
        }
        /**
         * Retrieves if a user has pending subscription.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return string|false
         */
        public static function has_pending_subscription($user_id)
        {
        }
        /**
         * Update flag for pending subscription.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         * @param boolean    $status
         *
         * @return int|boolean
         */
        public static function update_pending_subscription($user_id, $status = true)
        {
        }
        /**
         * Retrieves can post product meta key.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function can_post_product_key()
        {
        }
        /**
         * Checks if a user is allowed to post product.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         *
         * @return boolean
         */
        public static function can_post_product($user_id)
        {
        }
        /**
         * Update the can post product status.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         * @param int|string $status
         *
         * @return boolean
         */
        public static function update_post_product($user_id, $status = '1')
        {
        }
        /**
         * Retrieves seller enabled meta key.
         *
         * @since 3.7.8
         *
         * @return string
         */
        public static function seller_enabled_key()
        {
        }
        /**
         * Update whether seller is enabled.
         *
         * @since 3.7.8
         *
         * @param int|string $user_id
         * @param int|string $status
         *
         * @return boolean
         */
        public static function update_seller_enabled($user_id, $status = 'yes')
        {
        }
        /**
         * Retrieves the meta key for storing the onboarding country of a user.
         *
         * This meta key is used to store the country code that a user selects or is detected during the Stripe Express onboarding process.
         * Storing the onboarding country is crucial for ensuring that the Stripe Express setup is compliant with the country-specific regulations
         * and for customizing the onboarding experience based on the user's location.
         *
         * @since 3.11.2
         *
         * @return string The meta key used for storing the onboarding country.
         */
        public static function onboarding_country_meta_key()
        {
        }
        /**
         * Get whether country is onboarded.
         *
         * Retrieves the onboarding country metadata for a user. If the metadata does not exist, it returns false.
         *
         * @since 3.11.2
         *
         * @param int|string $user_id ID of the user
         *
         * @return string|false The onboarding country code if set, otherwise false.
         */
        public static function get_onboarding_country($user_id)
        {
        }
        /**
         * Update whether country is onboarded.
         *
         * @since 3.11.2
         *
         * @param int|string $user_id ID of the user
         * @param string     $country Country code
         *
         * @return boolean
         */
        public static function update_onboarding_country($user_id, $country)
        {
        }
        /**
         * Delete whether country is onboarded.
         *
         * @since 3.11.2
         *
         * @param int|string $user_id ID of the user
         *
         * @return boolean
         */
        public static function delete_onboarding_country($user_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits {
    /**
     * Trait to manage webhook utilities.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits
     */
    trait WebhookUtils
    {
        /**
         * Extracts order object from a Stripe object (Either `review` or `dispute`).
         *
         * @since 3.7.8
         *
         * @param \Stripe\Review|\Stripe\Dispute $object
         *
         * @return \WC_Order|false
         */
        public function get_order_from_stripe_object($object)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts {
    /**
     * Class WebhookEvent
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts
     */
    abstract class WebhookEvent
    {
        use \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Traits\WebhookUtils;
        /**
         * Handles the event.
         *
         * @since 3.6.1
         * @since 3.7.8 Removed `$payload` parameter.
         *
         * @return void
         */
        abstract protected function handle();
        /**
         * Class constructor.
         *
         * @since 3.7.8
         *
         * @param \Stripe\Event $event Stripe event object.
         */
        public function __construct($event)
        {
        }
        /**
         * Sets the event.
         *
         * @since 3.6.1
         *
         * @param \Stripe\Event $event
         *
         * @return void
         */
        protected function set($event)
        {
        }
        /**
         * Retrieves the event.
         *
         * @since 3.6.1
         *
         * @return \Stripe\Event
         */
        protected function get()
        {
        }
        /**
         * Retrives the payload of the event.
         *
         * @since 3.7.8
         *
         * @return \Stripe\StripeObject
         */
        protected function get_payload()
        {
        }
        /**
         * Logs debugging data.
         *
         * @since 3.7.8
         *
         * @param string $message The message to be logged.
         * @param string $level   (Optional) The log level. Default `debug`.
         *
         * @return void
         */
        protected function log($message, $level = 'debug')
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Utilities\BackgroundProcesses {
    /**
     * Class for handling awaiting or postponed disbursements.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Utilities\BackgroundProcesses
     */
    class AwaitingDisbursement extends \WC_Background_Process
    {
        /**
         * Class constructor
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Dispatches updater.
         *
         * Updater will still run via cron job
         * if this fails for any reason.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function dispatch()
        {
        }
        /**
         * Handles cron healthcheck
         *
         * Restart the background process if not
         * already running and data exists in the queue.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function handle_cron_healthcheck()
        {
        }
        /**
         * Schedule fallback event.
         *
         * @since 3.7.8
         *
         * @return void
         */
        protected function schedule_event()
        {
        }
        /**
         * Handles the task.
         *
         * @since 3.7.8
         *
         * @param object $args
         *
         * @return string|bool
         */
        protected function task($args)
        {
        }
        /**
         * Completes the task.
         *
         * @since 3.7.8
         *
         * @return void
         */
        protected function complete()
        {
        }
    }
    /**
     * Class for handling delayed disbursement.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Utilities\BackgroundProcesses
     */
    class DelayedDisbursement extends \WC_Background_Process
    {
        /**
         * Class constructor
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Dispatches updater.
         *
         * Updater will still run via cron job
         * if this fails for any reason.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function dispatch()
        {
        }
        /**
         * Handles cron healthcheck
         *
         * Restart the background process if not
         * already running and data exists in the queue.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function handle_cron_healthcheck()
        {
        }
        /**
         * Schedule fallback event.
         *
         * @since 3.6.1
         *
         * @return void
         */
        protected function schedule_event()
        {
        }
        /**
         * Handles the task.
         *
         * @since 3.6.1
         *
         * @param object $args
         *
         * @return string|bool
         */
        protected function task($args)
        {
        }
        /**
         * Completes the task.
         *
         * @since 3.6.1
         *
         * @return void
         */
        protected function complete()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\Utilities\Factories {
    /**
     * Class WebhookEvents.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\Utilities\Factories
     */
    class WebhookEvents
    {
        /**
         * Calss the defined static methods.
         *
         * @since 3.6.1
         *
         * @param string $method
         * @param array  $args
         *
         * @return mixed
         * @throws BadMethodCallException
         */
        public static function __callStatic($method, $args)
        {
        }
        /**
         * Constructs required event class instance.
         *
         * @since 3.6.1
         *
         * @param \Stripe\Event $event
         *
         * @return WebhookEvent|void
         * @throws DokanException
         */
        public static function construct_handler($event)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents {
    /**
     * Class to handle `account.updated` webhook.
     *
     * @since 3.9.7
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class AccountUpdated extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.9.7
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `balance.available` webhook.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class BalanceAvailable extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function handle()
        {
        }
        /**
         * Adds metadata param for
         * orders with awaiting disbursements.
         *
         * @param $query
         * @param $query_vars
         *
         * @since 3.7.8
         *
         * @return mixed
         */
        public function add_order_query_vars_for_awaiting_disbursement($query, $query_vars)
        {
        }
    }
    /**
     * Class to handle `charge.captured` webhook.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class ChargeCaptured extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function handle()
        {
        }
        /**
         * Calculates the partial amount to charge.
         *
         * @since 3.6.1
         *
         * @param \Stripe\Charge $charge
         *
         * @return float
         */
        public function get_partial_amount_to_charge($charge)
        {
        }
    }
    /**
     * Class to handle `charge.dispute.closed` webhook.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class ChargeDisputeClosed extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `charge.dispute.created` webhook.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class ChargeDisputeCreated extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `charge.failed` webhook.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class ChargeFailed extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `charge.suceeded` webhook.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class ChargeSucceeded extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `invoice.payment_action_required` webhook.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class InvoicePaymentActionRequired extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `invoice.payment_failed` webhook.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class InvoicePaymentFailed extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `invoice.payment_succeeded` webhook.
     *
     * @since   3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class InvoicePaymentSucceeded extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function handle()
        {
        }
        /**
         * Modifies query params according to need.
         *
         * @since 3.7.8
         *
         * @param array $query
         * @param array $query_vars
         *
         * @return array
         */
        public function handle_custom_query_var($query, $query_vars)
        {
        }
    }
    /**
     * Class to handle `payment_intent.amount_capturable_updated` webhook.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class PaymentIntentAmountCapturableUpdated extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `payment_intent.requires_action` webhook.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class PaymentIntentRequiresAction extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `payment_intent.succeeded` webhook.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class PaymentIntentSucceeded extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `review.closed` webhook.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class ReviewClosed extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `review.opened` webhook.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class ReviewOpened extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `setup_intent.setup_failed` webhook.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class SetupIntentSetupFailed extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `setup_intent.succeeded` webhook.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class SetupIntentSucceeded extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `customer.subscription.created` webhook.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class SubscriptionCreated extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `customer.subscription.updated` webhook.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class SubscriptionDeleted extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `customer.subscription.trial_will_end` webhook.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class SubscriptionTrialWillEnd extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * Class to handle `customer.subscription.updated` webhook.
     *
     * @since 3.7.8
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WebhookEvents
     */
    class SubscriptionUpdated extends \WeDevs\DokanPro\Modules\StripeExpress\Utilities\Abstracts\WebhookEvent
    {
        /**
         * Handles the event.
         *
         * @since 3.7.8
         *
         * @return void
         */
        public function handle()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress\WithdrawMethod {
    /**
     * Class to handle AJAX actions
     * for Stripe Express withdraw method.
     *
     * @since 3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress\WithdrawMethod
     */
    class Ajax
    {
        /**
         * Class constructor
         *
         * @since 3.6.1
         */
        public function __construct()
        {
        }
        /**
         * Signs a vendor up.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function sign_up()
        {
        }
        /**
         * Generates login url for stripe express dashboard.
         *
         * @since 3.6.1
         *
         * @return mixed
         */
        public function get_login_url()
        {
        }
        /**
         * Disconnects a vendor from stripe express.
         *
         * @since 3.6.1
         *
         * @return mixed
         */
        public function disconnect_vendor()
        {
        }
        /**
         * Cancel ongoing vendor onboarding process.
         *
         * @since 3.7.21
         *
         * @return mixed
         */
        public function cancel_onboarding()
        {
        }
    }
    /**
     * Class to handle all hooks for Stripe Express as withdraw method
     *
     * @since 3.6.1
     */
    class Manager
    {
        /**
         * Class constructor
         *
         * @since   3.6.1
         *
         * @package WeDevs\DokanPro\Modules\StripeExpress\WithdrawMethod
         */
        public function __construct()
        {
        }
        /**
         * Register Stripe Express as withdraw method
         *
         * @since 3.6.1
         *
         * @param array $methods
         *
         * @return array
         */
        public function register_withdraw_method($methods)
        {
        }
        /**
         * Get the Withdrawal method icon
         *
         * @since 3.6.1
         *
         * @param string $method_icon
         * @param string $method_key
         *
         * @return string
         */
        public function get_icon($method_icon, $method_key)
        {
        }
        /**
         * Get the heading for this payment's settings page
         *
         * @since 3.6.1
         *
         * @param string $heading
         * @param string $slug
         *
         * @return string
         */
        public function get_heading($heading, $slug)
        {
        }
        /**
         * Checks if seller is connected to Stripe Express.
         *
         * @since 3.6.1
         *
         * @param boolean    $is_connected
         * @param string     $method_key
         * @param int|string $seller_id
         *
         * @return boolean
         */
        public function check_if_seller_connected($is_connected, $method_key, $seller_id)
        {
        }
        /**
         * Renders Stripe Express form for registration as withdraw method
         *
         * @since 3.6.1
         *
         * @param array $store_settings
         *
         * @return void
         */
        public function vendor_gateway_settings($store_settings)
        {
        }
        /**
         * Processes Stripe Express payment settings for vendors
         *
         * @since 3.6.1
         *
         * @param array $settings
         *
         * @return array
         */
        public function process_vendor_settings($settings)
        {
        }
        /**
         * Sends announcement to vendors if their account is not connected with Stripe Express.
         * Applies when Stripe Express is set as both payment method and withdraw method and
         * send announcement settings is enabled.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function send_announcement_to_non_connected_vendor()
        {
        }
        /**
         * Display notice to vendors if their account is not connected with Stripe Express.
         * Applies when Stripe Express is set as both payment method and withdraw method and
         * display notice settings is enabled.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function display_notice_on_vendor_dashboard()
        {
        }
        /**
         * Enqueues necessary scripts.
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function enqueue_scripts_for_seller_setup_page()
        {
        }
        /**
         * Register scripts.
         *
         * @since 3.7.4
         *
         * @return void
         */
        public function register_scripts()
        {
        }
        /**
         * Calculate Dokan profile completeness value
         *
         * @since 3.7.1
         *
         * @param array $progress_track_value
         *
         * @return array
         */
        public function calculate_profile_progress($progress_track_value)
        {
        }
        /**
         * Update profile progress
         *
         * @since 3.7.1
         *
         * @return void
         */
        public function update_profile_progress_on_connect()
        {
        }
        /**
         * Update profile progress
         *
         * @since 3.7.1
         *
         * @param int $seller_id
         */
        public function update_profile_progress_on_disconnect($seller_id)
        {
        }
        /**
         * Redirect the user to intended url from where he tried to connect stripe.
         *
         * @since 3.11.2
         *
         * @param int $seller_id
         *
         * @return void
         */
        protected function redirect_seller_to_intended_url($seller_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\StripeExpress {
    /**
     * Main class for Stripe Express module
     *
     * @since   3.6.1
     *
     * @package WeDevs\DokanPro\Modules\StripeExpress
     */
    class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Class constructor
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Performs actions upon module activation
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function activate($instance)
        {
        }
        /**
         * Performs actions upon module deactivation
         *
         * @since 3.6.1
         *
         * @return void
         */
        public function deactivate($instance)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Stripe\Abstracts {
    abstract class StripePaymentGateway extends \WC_Payment_Gateway_CC
    {
        /**
         * Check if this gateway is enabled and available in the user's country
         *
         * @since 3.0.3
         *
         * @return bool
         */
        public function is_available()
        {
        }
        /**
         * Get payment source. This can be a new token/source or existing WC token.
         * If user is logged in and/or has WC account, create an account on Stripe.
         * This way we can attribute the payment to the user to better fight fraud.
         *
         * @param int $user_id
         * @param bool $force_save_source Should we force save payment source.
         * @param int|null $existing_customer_id
         * @return object
         * @throws DokanException
         * @since 3.0.3
         */
        public function prepare_source($user_id, $force_save_source = false, $existing_customer_id = null)
        {
        }
        /**
         * Get source object by source id.
         *
         * @param string $source_id The source ID to get source object for.
         * @return string|Source
         * @throws DokanException
         * @since 3.0.3
         */
        public function get_source_object($source_id = '')
        {
        }
        /**
         * Checks if payment is via saved payment source.
         *
         * @since 3.0.3
         *
         * @return bool
         */
        public function is_using_saved_payment_method()
        {
        }
        /**
         * Checks whether a source exists.
         *
         * @param object $prepared_source The source that should be verified.
         * @throws DokanException
         * @since 3.0.3
         */
        public function validate_source($prepared_source)
        {
        }
        /**
         * Save source to order.
         *
         * @since 3.0.3
         *
         * @param WC_Order $order For to which the source applies.
         * @param stdClass $source Source information.
         *
         * @return void
         */
        public function save_source_to_order($order, $source)
        {
        }
        /**
         * Validates that the order meets the minimum order amount
         * set by Stripe.
         *
         * @param WC_Order $order
         *
         * @return void
         * @throws DokanException
         * @since 3.0.3
         */
        public function validate_minimum_order_amount($order)
        {
        }
        /**
         * Checks Stripe minimum order value authorized per currency
         *
         * @since 3.0.3
         *
         * @return int
         */
        public function get_minimum_amount()
        {
        }
        /**
         * Locks an order for payment intent processing for 5 minutes.
         *
         * @since 3.0.3
         *
         * @param WC_Order $order  The order that is being paid.
         * @param stdClass $intent The intent that is being processed.
         *
         * @return bool            A flag that indicates whether the order is already locked.
         */
        public function lock_order_payment($order, $intent = null)
        {
        }
        /**
         * Unlocks an order for processing by payment intents.
         *
         * @since 3.0.3
         *
         * @param WC_Order $order The order that is being unlocked.
         *
         * @return void
         */
        public function unlock_order_payment($order)
        {
        }
        /**
         * Store extra meta data for an order from a Stripe Response.
         *
         * @since 3.0.3
         */
        public function process_response($response, $order)
        {
        }
        /**
         * Retrieves the payment intent, associated with an order.
         *
         * @since 3.0.3
         *
         * @param WC_Order $order The order to retrieve an intent for.
         *
         * @return object|bool     Either the intent object or `false`.
         */
        public function get_intent_from_order($order)
        {
        }
        /**
         * Get charge id from from an order
         *
         * @since 3.0.3
         *
         * @param WC_Order $order
         *
         * @return string|false on failure
         */
        public function get_charge_id_from_order($order)
        {
        }
        /**
         * Checks to see if request is invalid and that
         * they are worth retrying.
         *
         * @param object $error
         * @return bool
         * @since 3.0.3
         */
        public function is_retryable_error($error)
        {
        }
        /**
         * Checks to see if error is of same idempotency key
         * error due to retries with different parameters.
         *
         * @param array $error
         * @return bool
         * @since 3.0.3
         */
        public function is_same_idempotency_error($error)
        {
        }
        /**
         * Checks to see if error is of invalid request
         * error and it is no such customer.
         *
         * @param array $error
         * @return bool
         * @since 3.0.3
         */
        public function is_no_such_customer_error($error)
        {
        }
        /**
         * Checks to see if error is of invalid request
         * error and it is no such token.
         *
         * @param array $error
         * @return bool
         * @since 3.0.3
         */
        public function is_no_such_token_error($error)
        {
        }
        /**
         * Checks to see if error is of invalid request
         * error and it is no such source.
         *
         * @param array $error
         * @return bool
         * @since 3.0.3
         */
        public function is_no_such_source_error($error)
        {
        }
        /**
         * Checks to see if error is of invalid request
         * error and it is no such source linked to customer.
         *
         * @param array $error
         * @return bool
         * @since 3.0.3
         */
        public function is_no_linked_source_error($error)
        {
        }
        /**
         * Given a response from Stripe, check if it's a card error where authentication is required
         * to complete the payment.
         *
         * @param object $response The response from Stripe.
         * @return boolean Whether or not it's a 'authentication_required' error
         */
        public function is_authentication_required_for_payment($response)
        {
        }
        /**
         * Check to see if we need to update the idempotency
         * key to be different from previous charge request.
         *
         * @since 4.1.0
         * @param object $source_object
         * @param object $error
         * @return bool
         */
        public function need_update_idempotency_key($source_object, $error)
        {
        }
        /**
         * Customer param wrong? The user may have been deleted on stripe's end. Remove customer_id. Can be retried without.
         *
         * @since 3.0.3
         *
         * @param object   $error The error that was returned from Stripe's API.
         * @param WC_Order $order The order those payment is being processed.
         * @return bool           A flag that indicates that the customer does not exist and should be removed.
         */
        public function maybe_remove_non_existent_customer($error, $order)
        {
        }
        /**
         * Insert withdraw data into vendor balance table
         *
         * @param $all_withdraws
         * @return void
         * @since 3.0.3
         */
        public function insert_into_vendor_balance($all_withdraws)
        {
        }
        /**
         * Automatically process withdrawal for sellers per order
         *
         * @since 3.0.3
         *
         * @param array $all_withdraws
         *
         * @return void
         */
        public function process_seller_withdraws($all_withdraws)
        {
        }
        /**
         * Get order details
         *
         * @since 3.0.3
         *
         * @param  int  $order_id
         * @param  int  $seller_id
         *
         * @return object
         */
        public function get_dokan_order($order_id, $seller_id)
        {
        }
        public function get_all_orders_to_be_processed($order)
        {
        }
        /**
         * Checks if source is of legacy type card.
         *
         * @since 3.0.3
         *
         * @param string $source_id
         *
         * @return bool
         */
        public function is_type_legacy_card($source_id)
        {
        }
        /**
         * Displays the save to account checkbox.
         *
         * @since 3.0.3
         */
        public function save_payment_method_checkbox()
        {
        }
        /**
         * Add payment method via account screen.
         *
         * @return array
         * @throws DokanException
         * @since 3.0.3
         */
        public function add_payment_method()
        {
        }
        /**
         * Checks if subscription has a Stripe customer ID and adds it if doesn't.
         *
         * Fix renewal for existing subscriptions affected by https://github.com/woocommerce/woocommerce-gateway-stripe/issues/1072.
         * @param int $order_id subscription renewal order id.
         */
        public function ensure_subscription_has_customer_id($order_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Stripe {
    class Auth extends \Stripe\OAuth
    {
        /**
         * Get vendor authorization URL
         *
         * @since 3.1.0
         *
         * @return string
         */
        public static function get_vendor_authorize_url()
        {
        }
        /**
         * Get vendor deauthorization URL
         *
         * @since 3.1.0
         *
         * @return string
         */
        public static function get_vendor_deauthorize_url()
        {
        }
        /**
         * Retrieve vendor token from Stripe API
         *
         * @since 3.1.0
         *
         * @param string $code
         *
         * @throws \Stripe\Exception\OAuth\OAuthErrorException if the request fails
         *
         * @return StripeObject Object containing the response from the API.
         */
        public static function get_vendor_token($code)
        {
        }
    }
    /**
     * StripeCustomer class.
     *
     * Represents a Stripe Customer.
     */
    class Customer
    {
        /**
         * Constructor
         * @param int $user_id The WP user ID
         */
        public function __construct($user_id = 0)
        {
        }
        /**
         * Get Stripe customer ID.
         * @return string
         */
        public function get_id()
        {
        }
        /**
         * Set Stripe customer ID.
         * @param [type] $id [description]
         */
        public function set_id($id)
        {
        }
        /**
         * User ID in WordPress.
         * @return int
         */
        public function get_user_id()
        {
        }
        /**
         * Set User ID used by WordPress.
         * @param int $user_id
         */
        public function set_user_id($user_id)
        {
        }
        /**
         * Get user object.
         * @return WP_User
         */
        protected function get_user()
        {
        }
        /**
         * Store data from the Stripe API about this customer
         */
        public function set_customer_data($data)
        {
        }
        /**
         * Generates the customer request, used for both creating and updating customers.
         *
         * @param  array $args Additional arguments (optional).
         * @return array
         */
        protected function generate_customer_request()
        {
        }
        /**
         * Create a customer via API.
         * @param array $args
         * @return WP_Error|int
         * @throws DokanException
         */
        public function create_customer($args = [])
        {
        }
        /**
         * Updates the Stripe customer through the API.
         *
         * @param array $args Additional arguments for the request (optional).
         * @throws DokanException
         */
        public function update_customer($args = [])
        {
        }
        /**
         * Deletes caches for this users cards.
         */
        public function clear_cache()
        {
        }
        /**
         * Retrieves the Stripe Customer ID from the user meta.
         *
         * @param  int $user_id The ID of the WordPress user.
         * @return string|bool  Either the Stripe ID or false.
         */
        public function get_id_from_meta($user_id)
        {
        }
        /**
         * Updates the current user with the right Stripe ID in the meta table.
         *
         * @param string $id The Stripe customer ID.
         */
        public function update_id_in_meta($id)
        {
        }
        /**
         * Deletes the user ID from the meta table with the right key.
         */
        public function delete_id_from_meta()
        {
        }
        /**
         * Checks to see if error is of invalid request
         * error and it is no such customer.
         *
         * @param array $error
         * @return false|int
         * @since 3.2.2
         */
        public function is_no_such_customer_error($error)
        {
        }
        /**
         * Checks to see if error is of invalid request
         * error and it is no such customer.
         *
         * @since 3.2.2
         * @param array $error
         * @return bool
         */
        public function is_source_already_attached_error($error)
        {
        }
        /**
         * Add a source for this stripe customer.
         * @param string $source_id
         * @return WP_Error|int
         * @throws DokanException
         */
        public function add_source($source_id)
        {
        }
        /**
         * Add a source for this stripe customer.
         *
         * @param string $source_id
         *
         * @since 3.3.6
         *
         * @return WP_Error|int
         *
         * @throws DokanException
         */
        public function add_source_only($source_id)
        {
        }
        /**
         * Delete a source from stripe.
         * @param string $source_id
         * @return bool|void
         */
        public function delete_source($source_id)
        {
        }
        /**
         * Delete a source from stripe.
         * @param string $source_id
         * @return bool|void
         */
        public function set_default_source($source_id)
        {
        }
        /**
         * Get sources from a customer object
         *
         * @since 3.0.3
         *
         * @return array
         */
        public function get_sources()
        {
        }
    }
    class DokanStripe
    {
        /**
         * Call the defined static methods
         *
         * @since 3.0.3
         *
         * @param string $name
         * @param array $args
         *
         * @return mix
         */
        public static function __callStatic($name, $args)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Stripe\Factories {
    class EventFactory
    {
        /**
         * Create required event class instance
         *
         * @since 3.0.3
         *
         * @param \Stripe\Event $event
         *
         * @return \WebhooksEvents instance
         */
        public function get($event)
        {
        }
    }
    class StripeFactory
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @param \WC_Order
         *
         * @return Void
         */
        public function __construct($order)
        {
        }
        /**
         * With method
         *
         * @since 3.0.3
         *
         * @param string $with
         *
         * @return \PaymentMethods instance
         */
        public function with($with)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Stripe\Gateways {
    class RegisterGateways
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Register payment gateway
         *
         * @since 3.0.3
         *
         * @param array $gateways
         *
         * @return array
         */
        public function register_gateway($gateways)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Stripe {
    /**
     * Stripe Helper class
     *
     * @since 3.0.3
     */
    class Helper
    {
        public static function get_settings()
        {
        }
        /**
         * Check wheter the 3d secure is enabled or not
         *
         * @since 3.0.3
         *
         * @return bool
         */
        public static function is_3d_secure_enabled()
        {
        }
        /**
         * Check wheter we are paying with 3ds or non_3ds payment method
         *
         * @since 3.0.3
         *
         * @return string
         */
        public static function payment_method()
        {
        }
        /**
         * Check wheter the gateway in test mode or not
         *
         * @since 3.0.3
         *
         * @return bool
         */
        public static function is_test_mode()
        {
        }
        /**
         * Check if this gateway is enabled and ready to use
         *
         * @since 3.0.3
         *
         * @return bool
         */
        public static function is_ready()
        {
        }
        /**
         * Check if secret key and publishable keys are valid
         *
         * @since 3.2.2
         *
         * @return bool
         */
        public static function are_keys_set()
        {
        }
        /**
         * Check wheter it's enabled or not
         *
         * @since 3.0.3
         *
         * @return bool
         */
        public static function is_enabled()
        {
        }
        /**
         * Get secret key
         *
         * @since 3.0.3
         *
         * @return string
         */
        public static function get_secret_key()
        {
        }
        /**
         * Get secret key
         *
         * @since 3.0.3
         *
         * @return string
         */
        public static function get_publishable_key()
        {
        }
        /**
         * Get client id
         *
         * @since 3.0.3
         *
         * @return string
         */
        public static function get_client_id()
        {
        }
        /**
         * Check whether non-connected sellers can sell product or not
         *
         * @since 3.0.3
         *
         * @return bool
         */
        public static function allow_non_connected_sellers()
        {
        }
        /**
         * Check if non-connected sellers gets notice to connect their stripe account
         *
         * @since 3.2.2
         *
         * @return bool
         */
        public static function display_notice_to_non_connected_sellers()
        {
        }
        /**
         * Check if non-connected sellers gets notice to connect their stripe account
         *
         * @since 3.2.2
         *
         * @return int
         */
        public static function non_connected_sellers_display_notice_intervals()
        {
        }
        /**
         * Get gateway title
         *
         * @since 3.0.3
         *
         * @return string
         */
        public static function get_gateway_title()
        {
        }
        public static function save_cards()
        {
        }
        /**
         * Does seller pay the Stripe processing fee
         *
         * @since 3.1.0
         *
         * @return bool
         */
        public static function seller_pays_the_processing_fee()
        {
        }
        /**
         * Check wheter subscription module is enabled or not
         *
         * @since 3.0.3
         *
         * @return bool
         */
        public static function has_subscription_module()
        {
        }
        /**
         * Set stripe app info
         *
         * @since 3.0.3
         *
         * @return void
         */
        public static function set_app_info()
        {
        }
        /**
         * Set stripe API version
         *
         * @since 3.0.3
         *
         * @return void
         */
        public static function set_api_version()
        {
        }
        /**
         * Check if the order is a subscription order
         *
         * @since 1.3.3
         *
         * @return bool
         **/
        public static function is_subscription_order($order)
        {
        }
        /**
         * Is $order_id a subscription?
         * @param  int  $order_id
         * @return boolean
         */
        public static function has_subscription($order_id)
        {
        }
        /**
         * Checks if page is pay for order and change subs payment page.
         *
         * @since 3.2.2
         * @return bool
         */
        public static function is_subs_change_payment()
        {
        }
        /**
         * Get subscription product from an order
         *
         * @param \WC_Order $order
         *
         * @return \WC_Order|null
         */
        public static function get_subscription_product_by_order($order)
        {
        }
        /**
         * Bootstrap stripe
         *
         * @since 3.0.3
         *
         * @return void
         */
        public static function bootstrap_stripe()
        {
        }
        /**
         * Get gateway id
         *
         * @since 3.0.3
         *
         * @return string
         */
        public static function get_gateway_id()
        {
        }
        /**
         * Calculate the processing fee for a single vendor for an order
         *
         * @since 3.1.0
         *
         * @param float $order_processing_fee
         * @param \WC_ORDER $suborder
         * @param \WC_ORDER $order
         *
         * @return float
         */
        public static function calculate_processing_fee_for_suborder($order_processing_fee, $suborder, $order)
        {
        }
        /**
         * Get vendor id by subscriptoin id
         *
         * @since 3.0.3
         *
         * @param string $subscription_id
         *
         * @return int
         */
        public static function get_vendor_id_by_subscription($subscription_id)
        {
        }
        /**
         * Get list of supported webhook events
         *
         * @since 3.0.3
         *
         * @return array
         */
        public static function get_supported_webhook_events()
        {
        }
        /**
         * Get Stripe amount to pay
         *
         * @since 3.0.3
         *
         * @return float
         */
        public static function get_stripe_amount($total)
        {
        }
        /**
         * Format gateway balance fee
         *
         * @param $balance_transaction
         * @return string|void
         */
        public static function format_gateway_balance_fee($balance_transaction)
        {
        }
        /**
         * Get Stripe Invoice Gateway Fee From Charge ID.
         *
         * @since 3.4.3
         *
         * @param string  $charge_id
         * @param boolean $is_formatted
         *
         * @return int|float|string
         */
        public static function get_gateway_fee_from_charge_id($charge_id, $is_formatted = false)
        {
        }
        /**
         * Get no decimal currencies
         *
         * @return array
         */
        public static function no_decimal_currencies()
        {
        }
        /**
         * Checks to see if error is no such subscription error.
         *
         * @param string $error_message
         * @return false|int
         * @since 3.0.3
         */
        public static function is_no_such_subscription_error($error_message)
        {
        }
        /**
         * Checks to see if error is no such subscription error.
         *
         * @param string $error_message
         * @return false|int
         * @since 3.2.2
         */
        public static function is_customer_without_source_error($error_message)
        {
        }
        /**
         * Checks to see if error is of invalid request
         * error and it is no such token.
         *
         * @param array $error_message
         * @return false|int
         * @since 3.2.2
         */
        public static function is_no_such_token_error($error_message)
        {
        }
        /**
         * Include module template
         *
         * @since 3.1.0
         *
         * @param string $name
         * @param array  $args
         *
         * @return void
         */
        public static function get_template($name, $args = [])
        {
        }
        /**
         * Localize Stripe messages based on code
         *
         * @since 3.1.4
         * @return array
         */
        public static function get_localized_messages()
        {
        }
        /**
         * Generates a localized message for an error from a response.
         *
         * @since 3.1.4
         *
         * @param stdClass $response The response from the Stripe API.
         *
         * @return string The localized error message.
         */
        public static function get_localized_error_message_from_response($response)
        {
        }
        /**
         * Generate extra information for orders to send with stripe.
         *
         * @since 3.2.2
         * @param  WC_Order $order
         * @param  WC_Order $sub_order
         * @param  array $extra_metadata
         * @return array
         */
        public static function generate_payment_info($order, $sub_order = null, $extra_metadata = [])
        {
        }
        /**
         * Checks whether a source exists.
         *
         * @since 3.2.2
         * @param  object $prepared_source The source that should be verified.
         * @throws DokanException     An exception if the source ID is missing.
         */
        public static function check_source($prepared_source)
        {
        }
        /**
         * Check whether subscription module is enabled or not.
         *
         * @since 3.4.3
         *
         * @return bool
         */
        public static function has_vendor_subscription_module()
        {
        }
        /**
         * Check if a seller is connected
         *
         * @since 3.6.1
         *
         * @param int $seller_id
         *
         * @return bool
         */
        public static function is_seller_connected($seller_id)
        {
        }
    }
    class IntentController extends \WeDevs\DokanPro\Modules\Stripe\Abstracts\StripePaymentGateway
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         */
        public function __construct()
        {
        }
        /**
         * Hooks
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Loads the order from the current request.
         *
         * @return \WC_Order
         * @throws DokanException An exception if there is no order key or the order does not exist.
         *
         * @since 3.0.3
         */
        protected function get_order_from_request()
        {
        }
        /**
         * Handles successful PaymentIntent authentications.
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function verify_intent()
        {
        }
        /**
         * Handles exceptions during intent verification.
         *
         * @since 3.0.3
         *
         * @param DokanException $e
         * @param string $redirect_url An URL to use if a redirect is needed.
         */
        protected function handle_error($message, $e, $redirect_url)
        {
        }
        /**
         * Executed between the "Checkout" and "Thank you" pages, this
         * method updates orders based on the status of associated PaymentIntents.
         *
         * @since 3.0.3
         *
         * @param \WC_Order $order The order which is in a transitional state
         *
         * @return void
         */
        public function verify_intent_after_checkout($order)
        {
        }
        /**
         * Called after an intent verification succeeds, this allows
         * specific APNs or children of this class to modify its behavior.
         *
         * @param WC_Order $order The order whose verification succeeded.
         * @param stdClass $intent The Payment Intent object.
         * @throws DokanException
         * @since 3.0.3
         */
        protected function handle_intent_verification_success($order, $intent)
        {
        }
        /**
         * Called after an intent verification fails, this allows
         * specific APNs or children of this class to modify its behavior.
         *
         * @param WC_Order $order The order whose verification failed.
         * @param stdClass $intent The Payment Intent object.
         */
        protected function handle_intent_verification_failure($order, $intent)
        {
        }
        /**
         * Checks if the payment intent associated with an order failed and records the event.
         *
         * @since 3.0.3
         * @param \WC_Order $order  The order which should be checked.
         * @param object   $intent The intent, associated with the order.
         *
         * @return void
         */
        public function failed_sca_auth($order, $intent)
        {
        }
        /**
         * Process vendor payment
         *
         * @param \WC_Order $order
         *
         * @return void
         * @throws DokanException
         * @since 3.0.3
         */
        public function process_vendor_payment($order, $intent)
        {
        }
        /**
         * Creates a Setup Intent through AJAX while adding cards.
         * @since 3.2.2
         */
        public function create_setup_intent()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Stripe\Interfaces {
    interface Payable
    {
        /**
         * Make the payment
         *
         * @since 3.0.3
         *
         * @return array
         */
        public function pay();
    }
    interface WebhookHandleable
    {
        /**
         * Handle the event
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function handle();
    }
}
namespace WeDevs\DokanPro\Modules\Stripe {
    class StripeConnect extends \WeDevs\DokanPro\Modules\Stripe\Abstracts\StripePaymentGateway
    {
        /**
         * The delay between retries.
         *
         * @var int
         */
        public $retry_interval;
        /**
         * Stripe test mode.
         *
         * @var bool
         */
        public $testmode;
        /**
         * @var string $secret_key
         */
        public $secret_key;
        /**
         * @var string $publishable_key
         */
        public $publishable_key;
        /**
         * @var bool $saved_cards
         */
        public $saved_cards;
        /**
         * @var string $currency
         */
        public $currency;
        /**
         * @var string $stripe_meta_key
         */
        public $stripe_meta_key;
        /**
         * Constructor method
         *
         * @since 3.0.3
         */
        public function __construct()
        {
        }
        /**
         * Initialise Gateway Settings Form Fields
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
        /**
         * Init all the hooks
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Process the payment method change for subscriptions.
         *
         * @param int $order_id
         * @return array
         * @since 4.0.4
         * @since 4.1.11 Remove 3DS check as it is not needed.
         */
        public function change_subs_payment_method($order_id)
        {
        }
        /**
         * Schedule subscription payment
         *
         * @since 3.1.0
         *
         * @param float $amount_to_charge
         * @param Object $renewal_order
         *
         * @return Success|Exceptions
         */
        public function scheduled_subscription_payment($amount_to_charge, $renewal_order)
        {
        }
        /**
         * Scheduled_subscription_payment function.
         *
         * @param float $amount
         * @param $renewal_order \WC_Order A WC_Order object created to record the renewal payment.
         * @param bool $retry
         * @param bool $previous_error
         * @return void
         */
        public function process_subscription_payment($amount = 0.0, $renewal_order = null, $retry = true, $previous_error = false)
        {
        }
        /**
         * Include the payment meta data required to process automatic recurring payments so that store managers can
         * manually set up automatic recurring payments for a customer via the Edit Subscriptions screen in 2.0+.
         *
         * @since 3.1.0
         *
         * @param array $payment_meta associative array of meta data required for automatic payments
         * @param WC_Subscription $subscription An instance of a subscription object
         *
         * @return array
         */
        public function add_subscription_payment_meta($payment_meta, $subscription)
        {
        }
        /**
         * Update subscription payment meta when order created
         *
         * @since 3.1.0
         *
         * @return void
         */
        public function update_payment_meta_for_subscription($order, $intent)
        {
        }
        /**
         * Validate the payment meta data required to process automatic recurring payments so that store managers can
         * manually set up automatic recurring payments for a customer via the Edit Subscriptions screen in 2.0+.
         *
         * @param string $payment_method_id The ID of the payment method to validate
         * @param array $payment_meta associative array of meta data required for automatic payments
         * @return void
         * @throws Exception
         */
        public function validate_subscription_payment_meta($payment_method_id, $payment_meta)
        {
        }
        /**
         * Calculate next payment date
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function calculate_next_payment_date($stored_next_payment, $old_status, $subscription)
        {
        }
        /**
         * Update the customer_id for a subscription after using Stripe to complete a payment to make up for
         * an automatic renewal payment which previously failed.
         *
         * @since DOKAN_PRO_VERSION
         *
         * @param WC_Subscription $subscription The subscription for which the failing payment method relates.
         * @param WC_Order $renewal_order The order which recorded the successful payment (to make up for the failed automatic payment).
         *
         * @return void
         */
        public function update_failing_payment_method($subscription, $renewal_order)
        {
        }
        /**
         * Displays a checkbox to allow users to update all subs payments with new
         * payment.
         *
         * @since 3.1.0
         *
         * @return HTML
         */
        public function display_update_subs_payment_checkout()
        {
        }
        /**
         * Updates all active subscriptions payment method.
         *
         * @since 3.1.0
         *
         * @param string $source_id
         * @param object $source_object
         *
         * @return Void
         */
        public function handle_add_payment_method_success($source_id, $source_object)
        {
        }
        /**
         * Render the payment method used for a subscription in the "My Subscriptions" table
         *
         * @since 1.7.5
         * @param string $payment_method_to_display the default payment method text to display
         * @param WC_Subscription $subscription the subscription details
         * @return string the subscription payment method
         */
        public function maybe_render_subscription_payment_method($payment_method_to_display, $subscription)
        {
        }
        /**
         * Create a new PaymentIntent
         *
         * @param \WC_Order $order
         * @param object $prepared_source The source that is used for the payment
         *
         * @return object
         * @throws DokanException
         * @since 3.0.3
         */
        public function create_intent_for_renewal_order($order, $prepared_source, $amount = null)
        {
        }
        /**
         * Don't transfer Stripe customer/token meta to resubscribe orders.
         * @param \WC_Order $resubscribe_order The order created for the customer to resubscribe to the old expired/cancelled subscription
         */
        public function delete_resubscribe_meta($resubscribe_order)
        {
        }
        /**
         * Don't transfer Stripe fee/ID meta to renewal orders.
         * @param \WC_Order $renewal_order
         * @return \WC_Order
         */
        public function delete_renewal_meta($renewal_order)
        {
        }
        /**
         * Hijacks `wp_redirect` in order to generate a JS-friendly object with the URL.
         *
         * @param string $url The URL that Subscriptions attempts a redirect to.
         * @return void
         */
        public function redirect_after_early_renewal($url)
        {
        }
        /**
         * Handle transfer payment
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function handle_transfer_payment($response, $order)
        {
        }
        /**
         * Get payment source from an order. This could be used in the future for
         * a subscription as an example, therefore using the current user ID would
         * not work - the customer won't be logged in :)
         *
         * Not using 2.6 tokens for this part since we need a customer AND a card
         * token, and not just one.
         *
         * @param object $order
         * @return object
         * @throws DokanException
         * @since 3.2.2
         */
        public function prepare_order_source($order = null)
        {
        }
        /**
         * Checks if a renewal already failed because a manual authentication is required.
         *
         * @param WC_Order $renewal_order The renewal order.
         * @return boolean
         */
        public function has_authentication_already_failed($renewal_order)
        {
        }
        /**
         * Retrieves intent from Stripe API by intent id.
         *
         * @param string $intent_type   Either 'payment_intents' or 'setup_intents'.
         * @param string $intent_id     Intent id.
         * @return object|bool          Either the intent object or `false`.
         * @throws Exception            Throws exception for unknown $intent_type.
         */
        public function get_intent($intent_type, $intent_id)
        {
        }
        /**
         * Checks to see if we need to hide the save checkbox field.
         * Because when cart contains a subs product, it will save regardless.
         *
         * @since 4.0.0
         * @version 4.0.0
         */
        public function maybe_hide_save_checkbox($display_tokenization)
        {
        }
        /**
         * Checks if gateway should be available to use
         *
         * @since 3.0.3
         *
         * @return bool
         */
        public function is_available()
        {
        }
        /**
         * Adds a notice for customer when they update their billing address.
         *
         * @since 3.0.3
         *
         * @param int    $user_id      The ID of the current user.
         * @param string $load_address The address to load.
         *
         * @return void
         */
        public function show_update_card_notice($user_id, $load_address)
        {
        }
        /**
         * Setup subcription data
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function set_subscription_data()
        {
        }
        /**
         * Enqueue assets
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function payment_scripts()
        {
        }
        /**
         * Admin options in WC payments settings
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function admin_options()
        {
        }
        /**
         * Payment form on checkout page
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function payment_fields()
        {
        }
        /**
         * Renders the Stripe elements form
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function elements_form()
        {
        }
        /**
         * Process payment for the order
         *
         * @since 3.0.3
         *
         * @param int $oder_id
         * @throws DokanException
         * @return array
         */
        public function process_payment($order_id)
        {
        }
        /**
         * Attached to `woocommerce_payment_successful_result` with a late priority,
         * this method will combine the "naturally" generated redirect URL from
         * WooCommerce and a payment/setup intent secret into a hash, which contains both
         * the secret, and a proper URL, which will confirm whether the intent succeeded.
         *
         * @since 3.0.3
         *
         * @param array $result   The result from `process_payment`.
         * @param int   $order_id The ID of the order which is being paid for.
         *
         * @return array
         */
        public function modify_successful_payment_result($result, $order_id)
        {
        }
        /**
         * Preserves the "dokan-stripe-confirmation" URL parameter so the user can complete the SCA authentication after logging in.
         *
         * @since 3.2.2
         * @param string $pay_url Current computed checkout URL for the given order.
         * @param WC_Order $order Order object.
         *
         * @return string Checkout URL for the given order.
         */
        public function get_checkout_payment_url($pay_url, $order)
        {
        }
        /**
         * Adds the necessary hooks to modify the "Pay for order" page in order to clean
         * it up and prepare it for the Stripe PaymentIntents modal to confirm a payment.
         *
         * @param WC_Payment_Gateway[] $gateways A list of all available gateways.
         * @return WC_Payment_Gateway[]          Either the same list or an empty one in the right conditions.
         * @since 3.2.2
         */
        public function prepare_order_pay_page($gateways)
        {
        }
        /**
         * Changes the text of the "No available methods" message to one that indicates
         * the need for a PaymentIntent to be confirmed.
         *
         * @since 3.2.2
         * @return string the new message.
         */
        public function change_no_available_methods_message()
        {
        }
        /**
         * Renders hidden inputs on the "Pay for Order" page in order to let Stripe handle PaymentIntents.
         *
         * @param WC_Order|null $order Order object, or null to get the order from the "order-pay" URL parameter
         *
         * @throws DokanException
         * @since 3.2.2
         */
        public function render_payment_intent_inputs($order = null)
        {
        }
        /**
         * Prepares the Payment Intent for it to be completed in the "Pay for Order" page.
         *
         * @param WC_Order|null $order Order object, or null to get the order from the "order-pay" URL parameter
         *
         * @throws DokanException
         * @since 3.2.2
         */
        public function prepare_intent_for_order_pay_page($order = null)
        {
        }
        /**
         * If this is the "Pass the SCA challenge" flow, remove a variable that is checked by WC Subscriptions
         * so WC Subscriptions doesn't redirect to the checkout
         */
        public function remove_order_pay_var()
        {
        }
        /**
         * Restore the variable that was removed in remove_order_pay_var()
         */
        public function restore_order_pay_var()
        {
        }
        /**
         * Create webhook url on stripe end via api.
         *
         * @since 3.2.2
         * @return void
         */
        public function process_admin_options()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Stripe\PaymentMethods {
    class Stripe3DSPayment extends \WeDevs\DokanPro\Modules\Stripe\StripeConnect implements \WeDevs\DokanPro\Modules\Stripe\Interfaces\Payable
    {
        /**
         * Hold the order order object
         *
         * @var \WC_Order
         */
        protected $order = null;
        /**
         * @var bool|null
         */
        protected $force_save_source = null;
        /**
         * @var bool
         */
        protected $use_order_source = false;
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @param \WC_Order
         * @param $force_save_source bool|null
         * @param $use_order_source bool
         *
         * @return void
         */
        public function __construct($order, $force_save_source = null, $use_order_source = false)
        {
        }
        /**
         * Pay for the order
         *
         * @since 3.0.3
         *
         * @return array
         */
        public function pay()
        {
        }
        /**
         * Process intent status
         *
         * @since 3.0.3
         *
         * @param \PaymentIntent $intent
         * @param string $prepared_source
         * @param \WC_Order $order
         *
         * @return array
         */
        public function process_intent_status($intent, $prepared_source, $order)
        {
        }
        /**
         * Create a new PaymentIntent
         *
         * @param \WC_Order $order
         * @param object $prepared_source The source that is used for the payment
         *
         * @param null $amount
         * @return object
         * @throws DokanException
         * @since 3.0.3
         */
        public function create_intent($order, $prepared_source, $amount = null)
        {
        }
        /**
         * Saves intent to order.
         *
         * @since 3.0.3
         *
         * @param \WC_Order $order For to which the source applies.
         * @param \Stripe\Paymentintent $intent Payment intent information.
         *
         * @return void
         */
        public function save_intent_to_order($order, $intent)
        {
        }
        /**
         * Updates an existing intent with updated amount, source, and customer.
         *
         * @since 3.0.3
         *
         * @param object   $intent          The existing intent object.
         * @param WC_Order $order           The order.
         * @param object   $prepared_source Currently selected source.
         *
         * @return object                   An updated intent.
         */
        public function update_existing_intent($intent, $order, $prepared_source)
        {
        }
        /**
         * Confirms an intent if it is the `requires_confirmation` state.
         *
         * @param object $intent The intent to confirm.
         * @param object $prepared_source The source that is being charged.
         *
         * @return \Stripe\Paymentintent
         * @throws DokanException
         * @since 3.0.3
         */
        public function confirm_intent($intent, $prepared_source)
        {
        }
    }
    class StripeNon3DSPayment extends \WeDevs\DokanPro\Modules\Stripe\StripeConnect implements \WeDevs\DokanPro\Modules\Stripe\Interfaces\Payable
    {
        /**
         * Hold all the data of order object.
         *
         * @var \WC_Order
         */
        protected $order = null;
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @param \WC_Order
         *
         * @return void
         */
        public function __construct($order)
        {
        }
        /**
         * Pay for the order
         *
         * @return array
         * @since 3.0.3
         */
        public function pay()
        {
        }
        /**
         * Process Seller payment
         *
         * @return void
         * @throws \Stripe\Exception\ApiErrorException
         * @throws \WeDevs\Dokan\Exceptions\DokanException
         * @since 1.3.3
         */
        public function process_seller_payment($order, $prepared_source)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Stripe {
    /**
     * Handles and process WC payment tokens API.
     * Seen in checkout page and my account->add payment method page.
     *
     * @since 3.0.3
     */
    class PaymentTokens
    {
        /**
         * Gateway id holder
         *
         * @var string
         */
        public $gateway_id = '';
        public function __construct()
        {
        }
        /**
         * Checks if customer has saved payment methods.
         *
         * @since 3.0.3
         *
         * @param int $customer_id
         *
         * @return bool
         */
        public static function customer_has_saved_methods($customer_id)
        {
        }
        /**
         * Gets saved tokens from API if they don't already exist in WooCommerce.
         *
         * @since 3.0.3
         *
         * @param array $tokens
         * @param int $customer_id
         * @param int $gateway_id
         *
         * @return array
         */
        public function get_customer_payment_tokens($tokens, $customer_id, $gateway_id)
        {
        }
        /**
         * Delete token from Stripe.
         *
         * @since 3.0.3
         *
         * @param string $token_id
         * @param string $token
         *
         * @return void
         */
        public function payment_token_deleted($token_id, $token)
        {
        }
        /**
         * Set as default in Stripe.
         *
         * @since 3.0.3
         *
         * @param string $token_id
         *
         * @return void
         */
        public function payment_token_set_default($token_id)
        {
        }
    }
    class Refund
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Process refund request
         *
         * @param  int $refund_id
         * @param  array $data
         *
         * @return void
         */
        public function process_refund($refund)
        {
        }
        /**
         * Set vendor refund amount for 3ds mode
         *
         * @param float $vendor_refund
         * @param array $args
         * @param \WeDevs\DokanPro\Refund\Refund $refund
         *
         * @return float
         * @throws \Stripe\Exception\ApiErrorException
         * @since 3.3.2
         */
        public function vendor_refund_amount_non_3ds($vendor_refund, $args, $refund)
        {
        }
        /**
         * Withdraw entry for automatic refund as debit
         *
         * @param $refund \WeDevs\DokanPro\Refund\Refund
         * @param $args array
         * @param $vendor_refund float
         *
         * @since 3.3.2
         *
         * @return void
         */
        public function add_vendor_withdraw_entry_non_3ds($refund, $args, $vendor_refund)
        {
        }
        /**
         * This method will refund payments collected with stripe 3ds
         *
         * @param \WeDevs\DokanPro\Refund\Refund $refund
         * @throws Exception
         * @since 3.2.2
         */
        public function process_3ds_refund($refund)
        {
        }
        /**
         * Set vendor refund amount for 3ds mode
         *
         * @param float $vendor_refund
         * @param array $args
         * @param \WeDevs\DokanPro\Refund\Refund $refund
         *
         * @return float
         * @since 3.3.2
         */
        public function vendor_refund_amount_3ds($vendor_refund, $args, $refund)
        {
        }
        /**
         * Withdraw entry for automatic refund as debit
         *
         * @param $refund \WeDevs\DokanPro\Refund\Refund
         * @param $args array
         * @param $vendor_refund float
         *
         * @since 3.3.0
         *
         * @return void
         */
        public function add_vendor_withdraw_entry_3ds($refund, $args, $vendor_refund)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Stripe\Settings {
    class RetrieveSettings
    {
        use \WeDevs\Dokan\Traits\Singleton;
        /**
         * Settings array holder
         *
         * @var array
         */
        public $settings;
        /**
         * Boot method
         *
         * @since 3.0.3
         *
         * @param string $gateway
         *
         * @return array
         */
        public function boot($gateway = 'dokan-stripe-connect')
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Stripe {
    class StoreProgress
    {
        /**
         * Constructor method
         *
         * @since DOKAN_POR_SINCE
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Save stripe progress settings data
         *
         * @since 2.8
         *
         * @return void
         **/
        public function save_stripe_progress($store_id, $dokan_settings)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Stripe\Subscriptions {
    class InvoiceEmail extends \WC_Email
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Get email subject
         *
         * @since 3.0.3
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading
         *
         * @since 3.0.3
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the this email.
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function trigger($vendor_id, $invoice)
        {
        }
        /**
         * Get recipient email
         *
         * @since 3.0.3
         *
         * @return string
         */
        public function get_recipient()
        {
        }
        /**
         * Get content html
         *
         * @since 3.0.3
         *
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Initialize settings form fields
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * Dokan Stripe Subscriptoin Class
     *
     * @since 2.9.13
     */
    class ProductSubscription extends \WeDevs\DokanPro\Modules\Stripe\Abstracts\StripePaymentGateway
    {
        /**
         * Source id holder
         *
         * @var string
         */
        protected $source_id;
        /**
         * Stripe product id holder
         *
         * @var string
         */
        protected $stripe_product_id;
        /**
         * Product id holder
         *
         * @var int
         */
        protected $product_id;
        /**
         * Order object holder
         *
         * @var object
         */
        protected $order;
        /**
         * Stripe Customer id holder
         *
         * @var string
         */
        protected $stripe_customer;
        /**
         * Constructor method
         *
         * @since 2.9.13
         */
        public function __construct()
        {
        }
        /**
         * All the hooks
         *
         * @since 2.9.13
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Process recurring subscription paid with stripe 3ds
         *
         * @return void
         */
        public function process_recurring_subscription()
        {
        }
        /**
         * Setup subscription data
         *
         * @return Subscriptoin|WP_Error|void
         * @since 3.0.3
         */
        public function setup_subscription()
        {
        }
        /**
         * Process recurring, non-recurring and (stripe 3ds non-recurring subscriptions)
         *
         * @since 3.0.3
         *
         * @param \WC_Order $order
         * @param \Stripe\Intent $intent
         * @param bool $is_recurring
         *
         * @return void
         */
        public function process_subscription($order, $intent, $is_recurring = false)
        {
        }
        /**
         * Maybe create subscription
         *
         * @since 3.1.2
         */
        protected function maybe_create_subscription($subscription_args)
        {
        }
        /**
         * Create subscription
         *
         * @return \Stripe\Subscription|WP_Error
         * @since 2.9.13
         */
        protected function create_subscription($subscription_args)
        {
        }
        /**
         * Get coupon id for a subscription
         *
         * @return Stripe\Coupon::id |null on failure
         * @since  2.9.14
         */
        protected function get_coupon()
        {
        }
        /**
         * Cancel stripe subscription
         *
         * @since 3.0.3
         *
         * @param int $order_id
         * @param int $vendor_id
         * @param bool $immediately Force subscription to be cancelled immediately. [since 3.0.3]
         *
         * @return void
         **/
        public function cancel_subscription($order_id, $vendor_id, $cancel_immediately)
        {
        }
        /**
         * Cancel stripe subscription
         *
         * @since 3.0.3
         *
         * @return void
         **/
        public function activate_subscription($order_id, $vendor_id)
        {
        }
        /**
         * Cancel the subscription immediately
         *
         * @since 3.0.3
         *
         * @param string $subscription_id
         * @param Object $vendor_subscription
         * @param int    $order_id
         *
         * @return void
         */
        protected function cancel_now($subscription_id, $vendor_subscription, $order_id = 0)
        {
        }
        /**
         * Load email class
         *
         * @since 3.0.3
         *
         * @param array $emails
         *
         * @return array
         */
        public function load_emails($emails)
        {
        }
        /**
         * Load email actions
         *
         * @since 3.0.3
         *
         * @param array $actions
         *
         * @return array
         */
        public function load_actions($actions)
        {
        }
        /**
         * Remove subscription forcefully. In case webhook is disabled or didn't work for some reason
         * Cancel the subscription in vendor's end. subscription is already removed in stripe's end.
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function remove_subscription($vendor_subscription, $subscription_id)
        {
        }
        /**
         * Load recurring subscription cancellation email.
         *
         * @since 3.11.3
         *
         * @param int $order_id
         * @param int $vendor_id
         *
         * @return void
         */
        public function load_subscription_cancellation_email($order_id, $vendor_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Stripe {
    /**
     * The transaction class helps transfer fund from admin to vendor's account
     *
     * @since 2.9.13
     */
    class Transaction
    {
        /**
         * Charge id holder
         *
         * @var string
         */
        protected $admin;
        /**
         * Amount holder
         *
         * @var float
         */
        protected $amount;
        /**
         * Connected vendor id holder
         *
         * @var string
         */
        protected $vendor;
        /**
         * Currecny holder
         *
         * @var string
         */
        protected $currency;
        /**
         * @since 3.2.2
         * @var array
         */
        protected $metadata = [];
        /**
         * @since 3.2.2
         * @var string
         */
        protected $transfer_group;
        /**
         * @since 3.2.2
         * @var string
         */
        protected $description;
        /**
         * @since 3.2.2
         * @var string charge id of the actual payment
         */
        protected $source_transaction;
        /**
         * Amount to transfer
         *
         * @since 2.9.13
         *
         * @param float $amount
         *
         * @return this
         */
        public function amount($amount, $currency = null)
        {
        }
        /**
         * The transfer will be made from which account
         *
         * @since 2.9.13
         *
         * @param string $admin
         *
         * @return this
         */
        public function from($admin)
        {
        }
        /**
         * The transfer will be made to which account
         *
         * @since 2.9.13
         *
         * @param string $vendor
         *
         * @return bool
         */
        public function to($vendor)
        {
        }
        /**
         * @since 3.2.2
         * @param $description
         * @return $this
         */
        public function description($description)
        {
        }
        /**
         * @since 3.2.2
         * @param $transfer_group
         * @return $this
         */
        public function group($transfer_group)
        {
        }
        /**
         * @since 3.2.2
         * @param $metadata
         * @return $this
         */
        public function meta($metadata)
        {
        }
        /**
         * @since 3.2.2
         * @param $charge_id
         * @return $this
         */
        public function transaction($charge_id)
        {
        }
        /**
         * Transer the fund to vendor
         *
         * @since 2.9.13
         *
         * @return void
         */
        public function send()
        {
        }
    }
    class Validation
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Cart validation with multiple subscription products
         *
         * @param boolean $valid True if the item passed validation.
         * @param integer $product_id Product ID being validated.
         *
         * @see WC_Subscriptions_Cart_Validator::validate_cart_contents_for_mixed_checkout()
         * @see WC_Subscriptions_Cart_Validator::maybe_empty_cart()
         *
         * @return mixed
         */
        public function cart_validation_with_multiple_products($valid, $product_id)
        {
        }
        /**
         * Validate checkout if vendor has configured stripe account
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function check_vendor_configure_stripe($data, $errors)
        {
        }
    }
    class VendorProfile
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Init hooks
         *
         * @since 3.0.3
         *
         * @return void
         */
        protected function hooks()
        {
        }
        /**
         * Add stripe menu in vendor profile
         *
         * @since 3.0.3
         *
         * @param \WP_User $user
         *
         * @return void
         */
        public function stripe_menu($user)
        {
        }
        /**
         * Update vendor profile
         *
         * @since 3.0.3
         *
         * @param  int $vendor_id
         *
         * @return int
         */
        public function update_profile($vendor_id)
        {
        }
        /**
         * Attach whether vendor has stripe or not to payment object
         *
         * @since 3.0.3
         *
         * @param $array $data
         *
         * @return array
         */
        public function attach_stripe($data)
        {
        }
    }
    class WebhookHandler
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Init all the hooks
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Register webhook and remove old webhook endpoints from stripe
         *
         * @since 3.0.3
         * @since 3.2.0 updated register webhook logic
         *
         * @return void
         */
        public function register_webhook()
        {
        }
        /**
         * Register webhook and remove old `webhook=dokan` endpoint from stripe
         *
         * @since 3.2.0
         *
         * @return void
         */
        public function deregister_webhook()
        {
        }
        /**
         * Get all the webhook events
         *
         * @since 3.0.3
         *
         * @return array
         */
        public function get_events()
        {
        }
        /**
         * Handle events which are comming from stripe
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function handle_events()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Stripe\WebhooksEvents {
    class ChargeDisputeClosed implements \WeDevs\DokanPro\Modules\Stripe\Interfaces\WebhookHandleable
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @param \Stripe\Event $event
         *
         * @return void
         */
        public function __construct($event)
        {
        }
        /**
         * Hanle the event
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    class ChargeDisputeCreated implements \WeDevs\DokanPro\Modules\Stripe\Interfaces\WebhookHandleable
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @param \Stripe\Event $event
         *
         * @return void
         */
        public function __construct($event)
        {
        }
        /**
         * Hanle the event
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    class InvoicePaymentActionRequired implements \WeDevs\DokanPro\Modules\Stripe\Interfaces\WebhookHandleable
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @param \Stripe\Event $event
         *
         * @return void
         */
        public function __construct($event)
        {
        }
        /**
         * Hanle the event
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    class InvoicePaymentFailed implements \WeDevs\DokanPro\Modules\Stripe\Interfaces\WebhookHandleable
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @param \Stripe\Event $event
         *
         * @return void
         */
        public function __construct($event)
        {
        }
        /**
         * Hanle the event
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    /**
     * It does happen on subscription plan switching
     *
     * @since 3.0.3
     */
    class InvoicePaymentSucceeded implements \WeDevs\DokanPro\Modules\Stripe\Interfaces\WebhookHandleable
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @param \Stripe\Event $event
         *
         * @return void
         */
        public function __construct($event)
        {
        }
        /**
         * Modify query params.
         *
         * @since 3.4.3
         *
         * @param array $query
         * @param array $query_vars
         *
         * @return array
         */
        public function handle_custom_query_var($query, $query_vars)
        {
        }
        /**
         * Handle the event.
         *
         * @since 3.0.3
         * @since 3.4.3 Added recurring payment system for subscription
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    class SubscriptionDeleted implements \WeDevs\DokanPro\Modules\Stripe\Interfaces\WebhookHandleable
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @param \Stripe\Event $event
         *
         * @return void
         */
        public function __construct($event)
        {
        }
        /**
         * Hanle the event
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    class SubscriptionTrialWillEnd implements \WeDevs\DokanPro\Modules\Stripe\Interfaces\WebhookHandleable
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @param \Stripe\Event $event
         *
         * @return void
         */
        public function __construct($event)
        {
        }
        /**
         * Hanle the event
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function handle()
        {
        }
    }
    class SubscriptionUpdated implements \WeDevs\DokanPro\Modules\Stripe\Interfaces\WebhookHandleable
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @param \Stripe\Event $event
         *
         * @return void
         */
        public function __construct($event)
        {
        }
        /**
         * Hanle the event
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function handle()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Stripe\WithdrawMethods {
    /**
     * @todo These methods should be refactored to put in different related classes
     */
    class RegisterWithdrawMethods
    {
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Show admin notices
         *
         * @since 3.0.4
         *
         * @param array $notices
         *
         * @return array
         */
        public function admin_notices($notices)
        {
        }
        /**
         * Register methods
         *
         * @since 3.0.3
         *
         * @param array $methods
         *
         * @return array
         */
        public function register_methods($methods)
        {
        }
        /**
         * This enables dokan vendors to connect their stripe account to the site stripe gateway account
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function stripe_authorize_button()
        {
        }
        /**
         * Authorize vendor
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function authorize_vendor()
        {
        }
        /**
         * Deauthorize vendor
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function deauthorize_vendor()
        {
        }
        /**
         * Order processing fee for Stripe
         *
         * @since 3.1.0
         *
         * @param float     $processing_fee
         * @param \WC_Order $order
         *
         * @return float
         */
        public function get_order_processing_fee($processing_fee, $order)
        {
        }
        /**
         * Calculate gateway fee for a suborder
         *
         * @since 3.1.0
         *
         * @param float     $gateway_fee
         * @param \WC_Order $suborder
         * @param \WC_Order $order
         *
         * @return float|int
         */
        public function get_processing_gateway_fee($gateway_fee, $suborder, $order)
        {
        }
        /**
         * Vendor net earning for a order
         *
         * @since 3.1.0
         *
         * @param float     $net_amount
         * @param float     $vendor_earning
         * @param float     $gateway_fee
         * @param \WC_Order $suborder
         * @param \WC_Order $order
         *
         * @return float
         */
        public function dokan_orders_vendor_net_amount($net_amount, $vendor_earning, $gateway_fee, $suborder, $order)
        {
        }
        /**
         * Get the Withdrawal method icon
         *
         * @since 3.5.6
         *
         * @param string $method_icon
         * @param string $method_key
         *
         * @return string
         */
        public function get_icon($method_icon, $method_key)
        {
        }
        /**
         * Get the heading for this payment's settings page
         *
         * @since 3.5.6
         *
         * @param string $heading
         * @param string $slug
         *
         * @return string
         */
        public function get_heading($heading, $slug)
        {
        }
        /**
         * Get if a seller is connected to this payment method
         *
         * @since 3.6.1
         *
         * @param bool $connected
         * @param string $payment_method_id
         * @param int $seller_id
         *
         * @return bool
         */
        public function is_seller_connected($connected, $payment_method_id, $seller_id)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Stripe {
    class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Constructor method
         *
         * @since 3.0.3
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         *
         * @since 3.2.0
         */
        public static function activate($instance)
        {
        }
        /**
         *
         * @since 3.2.0
         */
        public static function deactivate($instance)
        {
        }
        /**
         * This method will check if connected vendor access key is valid.
         *
         * @since 3.2.2
         */
        public function check_vendor_access_key_is_valid()
        {
        }
    }
}
namespace {
    /**
     * Subscription API controller
     *
     * @since 2.8.0
     *
     * @package dokan
     */
    class Dokan_REST_Subscription_Controller extends \WeDevs\Dokan\Abstracts\DokanRESTController
    {
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'subscription';
        /**
         * Register all routes related with coupons
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Check permission
         *
         * @since 2.9.3
         *
         * @return boolean
         */
        public function check_permission()
        {
        }
        /**
         * Get all subscription
         *
         * @since 2.9.3
         *
         * @return object
         */
        public function get_subscription($request)
        {
        }
        /**
         * Get subscription packages
         *
         * Give paginated results and search by subscription title
         *
         * @since 3.3.7
         *
         * @return object|WP_Error
         */
        public function get_subscription_packages($request)
        {
        }
        /**
         * Get nonrecurring subscription packages
         *
         * @since 3.3.1
         *
         * @return WP_REST_Response|WP_Error
         */
        public function get_nonrecurring_subscription_packages($request)
        {
        }
        /**
         * Get currently activated subscription for a vendor.
         *
         * @since 3.3.1
         *
         * @param WP_REST_Request $request
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function get_active_subscription_for_vendor($request)
        {
        }
        /**
         * Update subscription
         *
         * @param \WP_REST_Request $request
         *
         * @return \WP_REST_Response
         */
        public function update_subscription($request)
        {
        }
        /**
         * Batch update subscription
         *
         * @param \WP_REST_Request $request
         *
         * @return \WP_REST_Response
         */
        public function batch_update($request)
        {
        }
        /**
         * Prepare a single sinle subscription output for response.
         *
         * @param Object $user
         * @param WP_REST_Request $request Request object.
         *
         * @return WP_REST_Response $response Response data.
         */
        public function prepare_item_for_response($user, $request)
        {
        }
        /**
         * Save subscription commisison.
         *
         * @param \WP_REST_Request $request
         *
         * @return int
         */
        public function save_commission($request)
        {
        }
    }
}
namespace DokanPro\Modules\Subscription\Abstracts {
    /**
     * Dokan Abstract Vendor Subscription Class
     */
    abstract class VendorSubscription
    {
        /**
         * Hold vendor id
         *
         * @var integer
         */
        protected $vendor_id = 0;
        /**
         * Get vendor id
         *
         * @return integer
         */
        abstract public function get_vendor();
        /**
         * Get all the info of a vendor regarding subscription
         *
         * @return array
         */
        public function get_info()
        {
        }
        /**
         * Check if vendor has a subscription
         *
         * @return boolean
         */
        public function has_subscription()
        {
        }
        /**
         * Get pack end date
         *
         * @return string
         */
        public function get_pack_end_date()
        {
        }
        /**
         * Can post product
         *
         * @return boolean
         */
        public function can_post_product()
        {
        }
        /**
         * Get pack starting date
         *
         * @return string
         */
        public function get_pack_start_date()
        {
        }
        /**
         * Check if trial is running for current vendor
         *
         * @since 3.3.7
         *
         * @return bool
         */
        public function is_on_trial()
        {
        }
        /**
         * Get trial end date for a subscription
         *
         * @since 3.3.7
         *
         * @return false|string
         */
        public function get_trial_end_date()
        {
        }
        /**
         * Check package validity for seller
         *
         * @param int $pack_id
         *
         * @throws \Exception
         * @return boolean
         */
        public function check_pack_validity_for_vendor($pack_id)
        {
        }
        /**
         * Get number of product has publisedh by seller
         *
         * @param integer
         *
         * @return integer
         */
        public function get_published_product_count()
        {
        }
        /**
         * Get a vendor remaining product count against a subscription pack
         *
         * @return int
         */
        public function get_remaining_products()
        {
        }
        /**
         * Vendor has recurring subscription pack
         *
         * @return boolean
         */
        public function has_recurring_pack()
        {
        }
        /**
         * Check wheter vendor has any unpaid or pending subscription or not
         *
         * @since 2.9.13
         *
         * @return boolean
         */
        public function has_pending_subscription()
        {
        }
        /**
         * Check whter the vendor has active cancelled subscription or not
         *
         * @since 3.0.3
         *
         * @return bool
         */
        public function has_active_cancelled_subscrption()
        {
        }
        public function set_active_cancelled_subscription()
        {
        }
        public function reset_active_cancelled_subscription()
        {
        }
    }
}
namespace {
    /**
     * Admin related functions
     *
     * @package Dokan
     * @subpackage Subscription
     */
    class DPS_Admin
    {
        public function __construct()
        {
        }
        /**
         * Remove sub-order text from Order list items
         *
         * @param string $output
         * @param WC_Order $order
         *
         * @since 3.3.7
         *
         * @return string
         */
        public function remove_suborder_notes($output, $order)
        {
        }
        /**
         * Remove dokan css classes on admin shop order table
         *
         * @global WP_Post $post
         *
         * @param array $classes
         *
         * @since 3.3.7
         *
         * @return array
         */
        public function admin_shop_order_row_classes($classes)
        {
        }
        /**
         * Add a column to the WooCommerce -> Orders admin screen to indicate whether an order is a
         * parent of a subscription, a renewal order for a subscription, or a regular order.
         *
         * @param array $columns The current list of columns
         *
         * @since 3.3.7
         *
         * @return array
         */
        public function add_contains_subscription_column($columns)
        {
        }
        /**
         * Add column content to the WooCommerce -> Orders admin screen to indicate whether an
         * order is a parent of a subscription, a renewal order for a subscription, or a
         * regular order.
         *
         * This method will reuse column added by wcs, if wcs is enabled we are handling values provided by
         * wcs by our end, we are also deresitering hooks of wcs
         *
         * @param string $column The string of the current column
         *
         * @since 3.3.7
         *
         * @return void
         */
        public static function add_contains_subscription_column_content($column, $post_id)
        {
        }
        /**
         * Add WC Meta boxes
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function add_meta_boxes($post_type, $post)
        {
        }
        /**
         * Render Subscription Metabox Content
         *
         * @param $post
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function subscription_metabox_content($post)
        {
        }
        /**
         * Render Related Order Data
         *
         * @param $post
         *
         * @since 3.3.7
         *
         * @return void
         * @throws Exception
         */
        public function render_subscriptions_related_order($post)
        {
        }
        /**
         * Register Scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        public function admin_enqueue_scripts($hook)
        {
        }
        public function vue_admin_enqueue_scripts()
        {
        }
        /**
         * WooCommerce Orders admin table css for vendor subscription relation
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function load_admin_order_page_css()
        {
        }
        /**
         * Add woocommerce extra product type
         *
         * @param array $types
         * @param array $product_type
         *
         * @return array
         */
        public static function add_product_type($types)
        {
        }
        /**
         * Add extra custom field in woocommerce product type
         */
        public static function general_fields()
        {
        }
        /**
         * Manupulate custom filed meta data in post meta
         *
         * @param integer $post_id
         */
        public static function general_fields_save($post_id)
        {
        }
        /**
         * Add new Section in admin dokan settings
         *
         * @param array $sections
         *
         * @return array
         */
        public static function add_new_section_admin_panael($sections)
        {
        }
        /**
         * Get all Pages
         *
         * @param string  $post_type
         * @return array
         */
        public static function get_post_type($post_type)
        {
        }
        /**
         * Add new Settings field in admin dashboard for selection product
         * subscription page
         *
         * @param array   $settings_fields
         * @return array
         */
        public static function add_new_setting_field_admin_panael($settings_fields)
        {
        }
        /**
         * Add submenu page in dokan Dashboard
         */
        public static function add_submenu_in_dokan_dashboard($capability)
        {
        }
        /**
         * Add subscripton route
         *
         * @param  array $routes
         *
         * @return array
         */
        public static function vue_admin_routes($routes)
        {
        }
        /**
         * Add subscription packs in drowpdown to let admin select a pack for the seller
         */
        public static function add_subscription_packs_dropdown($user)
        {
        }
        /**
         * Save meta fields
         *
         * @param int $user_id
         *
         * @return void
         * @throws Exception
         */
        public static function save_meta_fields($user_id)
        {
        }
        public function add_commission_tab_in_product($tabs)
        {
        }
        public function product_pack_commission_html()
        {
        }
    }
}
namespace DokanPro\Modules\Subscription {
    /**
     * DPS Helper Class
     */
    class Helper
    {
        use \WeDevs\Dokan\Traits\Singleton;
        /**
         * Get a sellers remaining product count
         *
         * @param int $vendor_id
         *
         * @return int|bool integer number (could be zero), boolean true if module is deactivated or vendor can publish unlimited product
         */
        public static function get_vendor_remaining_products($vendor_id)
        {
        }
        /**
         * Check if its vendor subscribed pack
         *
         * @param integer $product_id
         *
         * @throws \Exception
         * @return boolean
         */
        public static function is_vendor_subscribed_pack($product_id)
        {
        }
        /**
         * Check package renew for seller
         *
         * @param integer $product_id
         *
         * @throws \Exception
         * @return boolean
         */
        public static function pack_renew_seller($product_id)
        {
        }
        /**
         * Returns a readable recurring period
         *
         * @param string $period
         *
         * @return string
         */
        public static function recurring_period($period, $length = 1)
        {
        }
        /**
         * Get a list of options of all the product types
         *
         * @return strings
         */
        public static function get_product_types_options()
        {
        }
        /**
         * Get a list of options for trail period
         *
         * @return string
         */
        public static function get_trial_period_options()
        {
        }
        /**
         * Get vendor subscription pack id
         *
         * @return int|null on failure
         */
        public static function get_subscription_pack_id()
        {
        }
        /**
         * Is gallary image upload restricted
         *
         * @return boolean
         */
        public static function is_gallery_image_upload_restricted()
        {
        }
        /**
         * Get allowed product types of a vendor
         *
         * @return array|empty array on failure
         */
        public static function get_vendor_allowed_product_types()
        {
        }
        /**
         * Get allowed product cateogories of a vendor
         *
         * @return array|empty array on failure
         */
        public static function get_vendor_allowed_product_categories()
        {
        }
        /**
         * Get subscription recurring interval strings
         *
         * @return string
         */
        public static function get_subscription_period_interval_strings($interval = '')
        {
        }
        /**
         * Takes a number and returns the number with its relevant suffix appended, eg. for 2, the function returns 2nd
         *
         * @since 1.0
         */
        public static function append_numeral_suffix($number)
        {
        }
        /**
         * Returns an array of subscription lengths.
         *
         * PayPal Standard Allowable Ranges
         * D – for days; allowable range is 1 to 90
         * W – for weeks; allowable range is 1 to 52
         * M – for months; allowable range is 1 to 24
         * Y – for years; allowable range is 1 to 5
         *
         * @since 3.2.0
         */
        public static function get_non_cached_subscription_ranges()
        {
        }
        /**
         * Return an i18n'ified associative array of all possible subscription periods.
         *
         * @since 2.0
         *
         * @param string (optional) One of day, week, month or year. If empty, all subscription ranges are returned.
         * @param int (optional) An interval in the range 1-6
         *
         * @return string|array
         */
        public static function get_subscription_period_strings($number = 1, $period = '')
        {
        }
        /**
         * Retaining the API, it makes use of the transient functionality.
         *
         * @param string $period
         *
         * @return bool|mixed
         */
        public static function get_subscription_ranges($subscription_period = '')
        {
        }
        /**
         * Is subscription module is enabled
         *
         * @return boolean
         */
        public static function is_subscription_module_enabled()
        {
        }
        /**
         * Is vendor subscription is enabled
         *
         * @since 3.11.3
         *
         * @return bool
         */
        public static function is_vendor_subscription_enabled()
        {
        }
        /**
         * Is subscription is enalbed on registration
         *
         * @return boolean
         */
        public static function is_subscription_enabled_on_registration()
        {
        }
        /**
         * Check wheter the pack is recurring or not
         *
         * @since 2.9.13
         *
         * @param int $pack_id
         *
         * @return boolean
         */
        public static function is_recurring_pack($pack_id)
        {
        }
        /**
         * Check is product is subscription or not
         *
         * @param integer $product_id
         *
         * @return boolean
         */
        public static function is_subscription_product($product_id)
        {
        }
        /**
         * Check is product is a recurring subscription product or not
         *
         * @since 3.3.7
         *
         * @param integer $product_id
         *
         * @return boolean
         */
        public static function is_recurring_subscription_product($product_id)
        {
        }
        /**
         * Checks the cart to see if it contains a subscription product
         *
         * @return bool
         */
        public static function cart_contains_subscription()
        {
        }
        /**
         * Check if Cart contains recurring subscription product
         *
         * @since 3.3.7
         *
         * @return int 0 if no recurring subscription product found, else recurring subscription product id
         */
        public static function cart_contains_recurring_subscription_product()
        {
        }
        /**
         * Get subscription product from an order
         *
         * @since 3.3.7
         *
         * @param \WC_Order $order
         *
         * @return \WC_Product|bool|null
         */
        public static function get_vendor_subscription_product_by_order($order)
        {
        }
        /**
         * Check if the order is a subscription order
         *
         * @since 3.3.7
         *
         * @param \WC_Order|int $order
         *
         * @return bool
         **/
        public static function is_vendor_subscription_order($order)
        {
        }
        /**
         * Removes all subscription products from the shopping cart.
         *
         * @return void
         */
        public static function remove_subscriptions_from_cart()
        {
        }
        /**
         * Helper function for loggin
         *
         * @param string $message
         */
        public static function log($message)
        {
        }
        /**
         * Delete Subscription pack
         *
         * @param integer $customer_id
         *
         * @return void
         */
        public static function delete_subscription_pack($customer_id, $order_id)
        {
        }
        /**
         * Check if a vendor has existing product
         *
         * @param int $user_id
         *
         * @return boolean
         */
        public static function check_vendor_has_existing_product($user_id)
        {
        }
        /**
         * Make product status publish
         *
         * @since 3.7.21 added background process support
         *
         * @param int $vendor_id
         *
         * @return void
         */
        public static function make_product_publish($vendor_id)
        {
        }
        /**
         * Upadate Product Status
         *
         * @since 3.7.21 added background process support
         *
         * @param int $vendor_id
         *
         * @return void
         */
        public static function make_product_draft($vendor_id)
        {
        }
        /**
         * Alert before 2 days end of subscription
         *
         * @return boolean
         */
        public static function alert_before_two_days($user_id)
        {
        }
        /**
         * Get pack end date
         *
         * @return string
         */
        public static function get_pack_end_date($vendor_id)
        {
        }
        /**
         * Update can_post_product flag on subscripton expire
         *
         * @return boolean
         */
        public static function maybe_cancel_subscription($vendor_id)
        {
        }
        /**
         * Determine if the user has used a free pack before
         *
         * @param int $user_id
         *
         * @return boolean
         */
        public static function has_used_trial_pack($user_id)
        {
        }
        /**
         * Add used trial pack
         *
         * @param int $user_id
         * @param int $pack_id
         *
         * @return void
         */
        public static function add_used_trial_pack($user_id, $pack_id)
        {
        }
        /**
         * Check wheter vendor is subscribed or not
         *
         * @since 2.9.13
         *
         * @param int $vendor_id
         *
         * @return boolean
         */
        public static function vendor_has_subscription($vendor_id)
        {
        }
        /**
         * Check wheter vendor can publish unlimited products or not
         *
         * @since 2.9.13
         *
         * @param int $vendor_id
         *
         * @return boolean
         */
        public static function vendor_can_publish_unlimited_products($vendor_id)
        {
        }
        /**
         * Create New Order From Parent Order
         *
         * @since 3.3.7
         *
         * @param null|float $order_total
         *
         * @param \WC_Order  $parent_order
         *
         * @return \WC_Order|\WP_Error
         */
        public static function create_renewal_order($parent_order, $order_total = null)
        {
        }
        /**
         * Inserts a new key/value after the key in the array.
         *
         * @param array  $needle    The array key to insert the element after
         * @param array  $haystack  An array to insert the element into
         * @param string $new_key   The key to insert
         * @param string $new_value An value to insert
         *
         * @return array new array if the $needle key exists, otherwise an unmodified $haystack
         */
        public static function array_insert_after($needle, $haystack, $new_key, $new_value)
        {
        }
        /**
         * Generates post edit link
         *
         * @since 3.4.3
         *
         * @param integer $post_id
         *
         * @return string
         */
        public static function get_edit_post_link($post_id = null)
        {
        }
        /**
         * Handle Subscription Activation on trial.
         *
         * Before calling this function, must confirms that the subscription is on trial.
         *
         * @since 3.4.3
         *
         * @param \WC_Order        $order
         * @param SubscriptionPack $subscription
         * @param string           $subscription_id
         *
         * @return void
         */
        public static function activate_trial_subscription(\WC_Order $order, \DokanPro\Modules\Subscription\SubscriptionPack $subscription, $subscription_id)
        {
        }
        /**
         * Delete Trial Meta data for vendor.
         *
         * @since 3.4.3
         *
         * @param int $vendor_id
         *
         * @return void
         */
        public static function delete_trial_meta_data($vendor_id)
        {
        }
        /**
         * Get subscription order by user_id
         *
         * @param $user_id
         *
         * @return false|\WC_Order|\WC_Order_Refund
         */
        public static function get_subscription_order($user_id)
        {
        }
        /**
         * Check if subscription packs are available
         *
         * @since 3.5.4
         *
         * @return bool
         */
        public static function is_subscription_pack_available()
        {
        }
        /**
         * Filter arguments for product list filtering.
         *
         * @since 3.7.13
         *
         * @param array  $args
         * @param string $filter
         *
         * @return array
         */
        public static function filter_products_by_filter_by_other_helper($args, $filter)
        {
        }
        /**
         * Set default tax query
         *
         * @since 2.9.13
         *
         * @param array $args
         *
         * @return array
         */
        public static function set_default_tax_query($args)
        {
        }
        /**
         * Get subscription product status changer background process class
         *
         * @since 3.3.0
         *
         * @return HelperChangerProductStatus|null
         */
        public static function get_product_status_changer_bg_class()
        {
        }
        /**
         * Get Subscription Orders by Vendor ID.
         *
         * @since 3.13.0
         *
         * @return array Paginated subscription orders.
         */
        public static function get_paginated_subscription_orders_by_vendor_id($vendor_id, $page = 1, $per_page = 20)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Subscription {
    /**
     * Product status changer class
     *
     * @since 3.7.21
     */
    class HelperChangerProductStatus extends \WeDevs\Dokan\Abstracts\ProductStatusChanger
    {
        /**
         * Get products to process
         *
         * @since DOKAN_SINCE
         *
         * @return int[]
         */
        public function get_products()
        {
        }
    }
}
namespace DokanPro\Modules\Subscription {
    class ProductStatusChanger
    {
        use \WeDevs\Dokan\Traits\Singleton;
        /**
         * Boot method
         *
         * @since 2.9.13
         */
        protected function boot()
        {
        }
        /**
         * Init hooks
         *
         * @since 2.9.13
         */
        protected function hooks()
        {
        }
        /**
         * Add product status filter
         *
         * @since 2.9.13
         *
         * @param array $statuses
         *
         * @return array
         */
        public function product_statuses($statuses)
        {
        }
        /**
         * Publish products
         *
         * @since 2.9.13
         *
         * @param string $action
         * @param array  $product_ids
         *
         * @return void
         */
        public function publish_products($action, $product_ids)
        {
        }
        /**
         * Product filtering form
         *
         * @since 2.9.13
         *
         * @param array $get_data
         *
         * @return void
         */
        public function product_filter_form($get_data = [])
        {
        }
        /**
         * Filter best selling products
         *
         * @since 2.9.13
         *
         * @param array $args
         * @param array $get_data
         *
         * @return array
         */
        public function filter_products($args, $get_data = [])
        {
        }
        /**
         * Prepares filter_by_other data to filter products for Product V2 api.
         *
         * @since 3.7.13
         *
         * @param array           $args
         * @param WP_REST_Request $request
         *
         * @return array $args
         */
        public function filter_products_for_api($args, $request)
        {
        }
        /**
         * Maybe hide the form fields when vendor has reached the product uploading limit
         *
         * @since 2.9.13
         *
         * @return boolean
         */
        public function maybe_hide_the_form()
        {
        }
        /**
         * Change product status on subscription purchased
         *
         * @since 2.9.13
         *
         * @param int $vendor_id
         *
         * @return void
         */
        public function change_product_status($vendor_id)
        {
        }
        /**
         * Instantiate subscription product status changer background class
         *
         * @since 3.7.21
         *
         * @param array $bg_classes
         *
         * @return array
         */
        public function init_change_product_status_bg_class($bg_classes)
        {
        }
    }
    /**
    * Description of Pack_On_Registration
    *
    * Show dropdown of Subscription packs on Registration form
    *
    * @author WeDevs
    *
    * @since 1.0.2
    */
    class Registration
    {
        use \WeDevs\Dokan\Traits\Singleton;
        /**
         * Boot method
         *
         * @return void
         */
        public function boot()
        {
        }
        /**
         * Init hooks and filters
         *
         * @return void
         */
        function init_hooks()
        {
        }
        /**
         * Generate select options and details for created subscription packs
         *
         * @since 1.0.2
         *
         */
        public function generate_form_fields()
        {
        }
        /**
         * Redirect users to checkout directly with selected
         * subscription added in cart
         *
         * @since 1.0.2
         * @param string redirect_url
         *
         * @return string redirect_url
         */
        public function redirect_to_checkout($redirect_url)
        {
        }
        /**
         * Check if subscriptin pack is selected
         * @since 1.1.5
         * @param array $fields
         * @return array $fields
         */
        public function add_subscription_to_dokan_customer_migration_required_fields($fields)
        {
        }
        /**
         * Redirect after migration
         * @since 1.1.5
         * @param string $url
         * @return string
         */
        public function redirect_after_migration($url)
        {
        }
        /**
         * Get subscription pack id
         *
         * @return string
         */
        public function redirect_to_seller_setup_wizard_after_checkout($order_id)
        {
        }
        /**
         * Vendor has seen setup wizard
         *
         * @since  DOKAN_PLUGIN_SINCE
         *
         * @return void
         */
        public function make_vendor_has_seen_setup_wizard($store)
        {
        }
        /**
         * Check whether vendor has seen setup wizard or not
         *
         * @since  DOKAN_PLUGIN_SINCE
         *
         * @param int $vendor_id
         *
         * @return boolean
         */
        public function vendor_has_seen_setup_wizard($vendor_id = null)
        {
        }
    }
    /**
     * DPS Shortcode Class
     */
    class Shortcode
    {
        use \WeDevs\Dokan\Traits\Singleton;
        /**
         * Boot method
         */
        public function boot()
        {
        }
        /**
         * Create subscription package shortcode
         *
         * @return void
         */
        public static function create_subscription_package_shortcode()
        {
        }
        /**
         * Insert subscription shortcode into specefied page
         *
         * @param  string $option
         * @param  array $value
         *
         * @return void
         */
        public static function insert_shortcode_into_page($option, $value)
        {
        }
        /**
         * Add product subscription shortocde to Dokan shortcode menu
         *
         * @since 3.9.0
         *
         * @param array $shortcodes
         *
         * @return array
         */
        public function add_to_dokan_shortcode_menu($shortcodes)
        {
        }
    }
    /**
     * Dokan Subscription Invoice Class.
     *
     * @since 3.13.0
     */
    class SubscriptionInvoice
    {
        /**
         * Class Constructor.
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Init Hooks.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Get Marketplace Name.
         *
         * @since 3.13.0
         *
         * @param string $store_name Store Name
         * @param object $document   Invoice Document
         *
         * @return string
         */
        public function get_marketplace_name(string $store_name, object $document): string
        {
        }
        /**
         * Get Vat Number Label
         *
         * @since 3.13.0
         *
         * @return string
         */
        public function get_vat_number_label(): string
        {
        }
        /**
         * Get Bank IBAN Label
         *
         * @since 3.13.0
         *
         * @return string
         */
        public function get_bank_iban_label(): string
        {
        }
        /**
         * Print Subscription Product Validity Content.
         *
         * @since 3.13.0
         *
         * @param string   $document_type Document Type
         * @param array    $order_item    Order Item
         * @param WC_Order $order         Order Object
         *
         * @return void
         */
        public function print_subscription_product_validity_content(string $document_type, array $order_item, \WC_Order $order)
        {
        }
        /**
         * Print Invoice Footnote Content.
         *
         * @since 3.13.0
         *
         * @param string $document_type Document Type
         *
         * @return void
         */
        public function print_invoice_footnote_content(string $document_type)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Subscription {
    /**
     * Dokan Subscription Renewal Meta Builder.
     *
     * @since 3.13.0
     */
    class SubscriptionOrderMetaBuilder
    {
        /**
         * Class Constructor.
         *
         * @param WC_Order $order          Order Object
         * @param string   $payment_method Payment Method
         *
         * @return void
         */
        public function __construct($order, $payment_method = '')
        {
        }
        /**
         * Set Capture ID.
         *
         * @since 3.13.0
         *
         * @param string $capture_id Capture ID
         *
         * @return $this
         */
        public function set_capture_id($capture_id)
        {
        }
        /**
         * Set Gateway Order ID.
         *
         * @since 3.13.0
         *
         * @param int $gateway_order_id Gateway Order ID
         *
         * @return $this
         */
        public function set_gateway_order_id($gateway_order_id)
        {
        }
        /**
         * Set Create Order Debug ID.
         *
         * @since 3.13.0
         *
         * @param int $debug_id Debug ID
         *
         * @return $this
         */
        public function set_create_order_debug_id($debug_id)
        {
        }
        /**
         * Set Gateway Charge ID.
         *
         * @since 3.13.0
         *
         * @param string $charge_id Charge ID
         *
         * @return $this
         */
        public function set_gateway_charge_id($charge_id)
        {
        }
        /**
         * Set Gateway Vendor Subscription ID.
         *
         * @since 3.13.0
         *
         * @param int $subscription_id Subscription ID
         *
         * @return $this
         */
        public function set_gateway_vendor_subscription_id($subscription_id)
        {
        }
        /**
         * Set Redirect URL.
         *
         * @since 3.13.0
         *
         * @param string $url Redirect URL
         *
         * @return $this
         */
        public function set_redirect_url($url)
        {
        }
        /**
         * Set Processing Fee.
         *
         * @since 3.13.0
         *
         * @param float $fee Processing Fee
         *
         * @return $this
         */
        public function set_processing_fee($fee)
        {
        }
        /**
         * Set Processing Currency.
         *
         * @since 3.13.0
         *
         * @param string $currency Processing Currency
         *
         * @return $this
         */
        public function set_processing_currency($currency)
        {
        }
        /**
         * Set Gateway Fee.
         *
         * @since 3.13.0
         *
         * @param float $fee Gateway Fee
         *
         * @return $this
         */
        public function set_gateway_fee($fee)
        {
        }
        /**
         * Set Gateway Fee Paid By.
         *
         * @since 3.13.0
         *
         * @param string $paid_by Gateway Fee Paid By
         *
         * @return $this
         */
        public function set_gateway_fee_paid_by($paid_by)
        {
        }
        /**
         * Set Shipping Fee Recipient.
         *
         * @since 3.13.0
         *
         * @param string $receipent Shipping Fee Recipient
         *
         * @return $this
         */
        public function set_shipping_fee_recipient($recipient)
        {
        }
        /**
         * Set Tax Fee Recipient.
         *
         * @since 3.13.0
         *
         * @param string $receipent Tax Fee Recipient
         *
         * @return $this
         */
        public function set_tax_fee_recipient($recipient)
        {
        }
        /**
         * Set Vendor Subscription Order.
         *
         * @since 3.13.0
         *
         * @param string $is_subscription_order Is Subscription Order
         *
         * @return $this
         */
        public function set_is_vendor_subscription_order($is_subscription_order)
        {
        }
        /**
         * Set Pack Validity Start Date.
         *
         * @since 3.13.0
         *
         * @param string $start_date Validity Start Date
         *
         * @return $this
         */
        public function set_pack_validity_start_date($start_date)
        {
        }
        /**
         * Set Pack Validity End Date.
         *
         * @since 3.13.0
         *
         * @param string $end_date Validity End Data
         *
         * @return $this
         */
        public function set_pack_validity_end_date($end_date)
        {
        }
        /**
         * Set Pack Renewal Interval Count.
         *
         * @since 3.13.0
         *
         * @param string $interval_count Renewal Interval Count
         *
         * @return $this
         */
        public function set_pack_renewal_interval_count($interval_count)
        {
        }
        /**
         * Set Pack Renewal Interval Period.
         *
         * @since 3.13.0
         *
         * @param string $interval_period Renewal Interval Period
         *
         * @return $this
         */
        public function set_pack_renewal_interval_period($interval_period)
        {
        }
        /**
         * Set Number of Allowed Products.
         *
         * @since 3.13.0
         *
         * @param int $number Number of Products
         *
         * @return $this
         */
        public function set_no_of_allowed_products($number)
        {
        }
        /**
         * Set Subscription Product Admin Commission Type.
         *
         * @since 3.13.0
         *
         * @param string $commission_type Commission Type
         *
         * @return $this
         */
        public function set_subscription_product_admin_commission_type($commission_type)
        {
        }
        /**
         * Set Subscription Product Category Admin Commission.
         *
         * @since 3.14.0
         *
         * @param mixed $commission Commission
         *
         * @return $this
         */
        public function set_subscription_product_admin_category_based_commission($commission)
        {
        }
        /**
         * Set Subscription Product Admin Commission.
         *
         * @since 3.13.0
         *
         * @param float $commission Commission
         *
         * @return $this
         */
        public function set_subscription_product_admin_commission($commission)
        {
        }
        /**
         * Set Subscription Product Admin Additional Fee.
         *
         * @since 3.13.0
         *
         * @param float $fee Fee
         *
         * @return $this
         */
        public function set_subscription_product_admin_additional_fee($fee)
        {
        }
        /**
         * Build Order Meta Data Updater.
         *
         * @since 3.13.0
         *
         * @return $this
         */
        public function build()
        {
        }
        /**
         * Save The Order.
         *
         * @since 3.13.0
         *
         * @return void
         */
        public function save()
        {
        }
    }
}
namespace DokanPro\Modules\Subscription {
    /**
     * Dokan Subscription Pack Class
     */
    class SubscriptionPack extends \DokanPro\Modules\Subscription\Abstracts\VendorSubscription
    {
        /**
         * Hold Pack ID
         *
         * @var integer
         */
        public $pack_id = 0;
        /**
         * Constructor method
         *
         * @param int $id
         * @param int $vendor_id
         *
         * @return void
         */
        public function __construct($id = null, $vendor_id = null)
        {
        }
        /**
         * Get vendor id
         *
         * @return int
         */
        public function get_vendor()
        {
        }
        /**
         * Get the all the subscription packages
         *
         * @param array $args
         *
         * @return object
         */
        public function all($args = [])
        {
        }
        /**
         * Get all subscription packages
         *
         * @param array $args
         *
         * @return object
         */
        public function get_packages($args = [])
        {
        }
        /**
         * Get individiual pack id (ei: dokan->subscription->get( $pack_id )->pack_details())
         *
         * @param $pack_id
         *
         * @return $this instance
         */
        public function get($pack_id)
        {
        }
        /**
         * Get object ID
         *
         * @return int $pack_id
         */
        public function get_id()
        {
        }
        /**
         * Get allowed product types against a subscription pack
         *
         * @return array|empty array on failure
         */
        public function get_allowed_product_types()
        {
        }
        /**
         * Get allowed categories against a subscription pack
         *
         * @return array|empty array on failure
         */
        public function get_allowed_product_categories()
        {
        }
        /**
         * Is gallary image upload restricted against a subscription pack
         *
         * @return boolean
         */
        public function is_gallery_image_upload_restricted()
        {
        }
        /**
         * Gallary image upload count
         *
         * @return int
         */
        public function gallery_image_upload_count()
        {
        }
        /**
         * Is trial
         *
         * @return boolean
         */
        public function is_trial()
        {
        }
        /**
         * Get trial subscription range (ei: how many days or weeks)
         *
         * @return int
         */
        public function get_trial_range()
        {
        }
        /**
         * Get trial subscription period typs (ei; dyas, weeks, months)
         *
         * @return string
         */
        public function get_trial_period_types()
        {
        }
        /**
         * Get trial period length (ei: number of days)
         *
         * @return int
         */
        public function get_trial_period_length()
        {
        }
        /**
         * Get trial end time (ei: required for paypal)
         *
         * @return int
         */
        public function get_trial_end_time()
        {
        }
        /**
         * @return string
         */
        public function get_product_pack_end_date()
        {
        }
        /**
         * Get number of products against a subscripton pack
         *
         * @return int
         */
        public function get_number_of_products()
        {
        }
        /**
         * Get subscription product instance
         *
         * @return \WC_Product|null|false
         */
        public function get_product()
        {
        }
        /**
         * Get subscirption pack title
         *
         * @return string
         */
        public function get_package_title()
        {
        }
        /**
         * Get valid days of a subscription pack
         *
         * @return int
         */
        public function get_pack_valid_days()
        {
        }
        /**
         * Check if is recurring pack
         *
         * @return boolean
         */
        public function is_recurring()
        {
        }
        /**
         * Get subscription pack recurring interval
         *
         * @return int
         */
        public function get_recurring_interval()
        {
        }
        /**
         * Get subscription pack period type (ei: day, month, year)
         *
         * @return string
         */
        public function get_period_type()
        {
        }
        /**
         * Get subscription pack period lenght
         *
         * @return int
         */
        public function get_period_length()
        {
        }
        /**
         * Get subscription pack price
         *
         * @return float
         */
        public function get_price()
        {
        }
        /**
         * Get All Non recurring packages.
         *
         * @since 3.3.1
         *
         * @param array $args
         *
         * @return \WP_Post[]
         */
        public function get_nonrecurring_packages($args = [])
        {
        }
        /**
         * Activate the subscription after purchase
         *
         * This method doesn't check if user is currently on a subscription, so remember this while using this method.
         *
         * @param \WC_Order $order
         *
         * @since 3.3.7
         *
         * @return void
         *
         * @throws \Exception
         */
        public function activate_subscription(\WC_Order $order)
        {
        }
        /**
         * Setup admin commissions
         *
         * @param $user_id
         *
         * @since 3.3.7
         *
         * @return void
         */
        public function setup_commissions($user_id)
        {
        }
        /**
         * Temporary suspend a subscription till provided date
         *
         * @param string $enddate Time string formatted as Y-m-d H:i:s
         *
         * @since 3.3.7
         *
         * @return bool
         */
        public function suspend_subscription($enddate)
        {
        }
        /**
         * Reactivate suspended subscription
         *
         * @since 3.3.7
         *
         * @return bool
         */
        public function reactivate_subscription()
        {
        }
    }
}
namespace {
    /**
     * PayPal Standard Subscription Class.
     *
     * Filters necessary functions in the WC_Paypal class to allow for subscriptions.
     *
     * @package     Dokan Product Subscription
     * @subpackage  WC_PayPal_Standard_Subscriptions
     * @category    Class
     * @author      Sabbir Ahmed
     * @since       1.0
     */
    class DPS_PayPal_Standard_Subscriptions
    {
        protected static $log;
        protected static $debug;
        protected static $paypal_settings;
        protected static $api_username;
        protected static $api_password;
        protected static $api_signature;
        protected static $api_endpoint;
        /**
         * Bootstraps the class and hooks required actions & filters.
         *
         * @since 1.0
         */
        public static function init()
        {
        }
        /**
         * Returns a payment gateway object by gateway's ID, or false if it could not find the gateway.
         */
        public static function get_payment_gateway($gateway_id)
        {
        }
        /**
         * Adds extra PayPal credential fields required to manage subscriptions.
         */
        public static function paypal_settings_args($form_fields)
        {
        }
        /**
         * In WC 2.0, settings are saved on a new instance of the PayPalpayment gateway, not
         * the global instance, so our admin fields are not set (nor saved). As a result, we
         * need to run the save routine @see WC_Settings_API::process_admin_options() again
         * to save our fields.
         */
        public static function save_subscription_form_fields()
        {
        }
        /**
         * Overwrite paypal arguments
         * @param  array $paypal_args
         * @return [type]              [description]
         */
        public static function paypal_standard_subscription_args($paypal_args)
        {
        }
        /**
         * Handle payapl IPN response
         * @param  array $transaction_details [description]
         * @return [type]                      [description]
         */
        public static function process_paypal_ipn_request($transaction_details)
        {
        }
        /**
         * Handles custom query variables
         *
         * @since 3.4.3
         *
         * @param array $query
         * @param array $query_vars
         *
         * @return array
         */
        public static function handle_custom_query_var($query, $query_vars)
        {
        }
        /**
         * When a store manager or user cancels a subscription in the store, also cancel the subscription with PayPal.
         */
        public static function cancel_subscription_with_paypal($order_id, $user_id)
        {
        }
        /**
         * Performs an Express Checkout NVP API operation as passed in $api_method.
         *
         * Although the PayPal Standard API provides no facility for cancelling a subscription, the PayPal
         * Express Checkout  NVP API can be used.
         */
        public static function change_subscription_status($profile_id, $new_status)
        {
        }
        /**
         * Check for paypal information and save logs
         *
         * @since  [1.1.4]
         * @return set $debug,$log and $endpoint variables
         */
        public static function subscription_paypal_credential_verify()
        {
        }
        /**
         * Check whether vendor has subscriptoin or not
         *
         * @since 2.9.13
         *
         * @return boolean
         */
        public static function has_subscription()
        {
        }
    }
    // Exit if accessed directly
    /**
     * Productpack Product Class
     *
     * The default product type kinda product.
     *
     * @class       WC_Product_Productpack
     * @version     2.0.0
     * @package     Dokan
     * @subpackage  Subscription
     */
    class WC_Product_Product_pack extends \WC_Product
    {
        /**
         * @var string
         */
        protected $product_type;
        /**
         * __construct function.
         *
         * @access public
         * @param mixed $product
         */
        public function __construct($product)
        {
        }
        public function managing_stock()
        {
        }
        /**
         * Get the add to url used mainly in loops.
         *
         * @access public
         * @return string
         */
        public function add_to_cart_url()
        {
        }
    }
    /**
     * New Product Published Email to vendor.
     *
     * An email sent to the vendor when a pending Product is published by admin.
     *
     * @class       Dokan_Subscription_Cancelled
     * @version     2.9.4
     * @author      weDevs
     * @extends     WC_Email
     */
    class Dokan_Subscription_Cancelled extends \WC_Email
    {
        /**
         * Subscription Object
         *
         * @var null
         */
        public $subscription = \null;
        /**
         * Constructor Method
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @param int $product_id The product ID.
         * @param array $postdata.
         */
        public function trigger($customer_id, $product_id)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\ProductSubscription {
    class Module
    {
        /**
         * Class constructor
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @uses register_activation_hook()
         * @uses register_deactivation_hook()
         * @uses is_admin()
         * @uses add_action()
         */
        public function __construct()
        {
        }
        /**
         * Init hooks
         *
         * @return void
         */
        public function init_hooks()
        {
        }
        /**
         * Load email classes
         *
         * @return void
         */
        public static function load_emails()
        {
        }
        /**
         * Placeholder for activation function
         *
         * Nothing being called here yet.
         */
        public function activate()
        {
        }
        /**
         * Updates the subscription list page status to published if it's in draft.
         *
         * This method ensures the subscription list page is available to users by changing
         * its status from auto-draft to publish. This is important for new installations or
         * when the page was created but not published.
         *
         * @note: the Rank Math SEO and Yoast SEO plugins have similar methods to ensure
         *       their pages are published.
         *
         * @since 3.14.2
         *
         * @return void
         */
        public function update_subscriptions_list_page_status()
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        /**
         * Placeholder for deactivation function
         */
        public function deactivate()
        {
        }
        /**
         * Check is Dokan is plugin or nor
         * @return boolean true|false
         */
        public static function is_dokan_plugin()
        {
        }
        /**
         * Define constants
         *
         * @return void
         */
        function define_constants()
        {
        }
        /**
         * Includes required files
         *
         * @return void
         */
        function file_includes()
        {
        }
        /**
         * Register Scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue admin scripts
         *
         * Allows plugin assets to be loaded.
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Show_custom_subscription_info in Listing products
         */
        public function show_custom_subscription_info()
        {
        }
        /**
         * Add Subscription endpoint to the end of Dashboard
         * @param array $query_var
         * @return array
         */
        public function add_subscription_endpoint($query_var)
        {
        }
        /**
         * Get plugin path
         *
         * @since 2.8
         *
         * @return void
         **/
        public function plugin_path()
        {
        }
        /**
         * Load Dokan subscription templates
         *
         * @since 2.8
         *
         * @return void
         **/
        public function load_subscription_templates($template_path, $template, $args)
        {
        }
        /**
         * Load template for the dashboard
         *
         * @param  array $query_vars
         *
         * @return void
         */
        function load_template_from_plugin($query_vars)
        {
        }
        /**
         * Add new menu in seller dashboard
         *
         * @param array   $urls
         * @return array
         */
        public static function add_new_page($urls)
        {
        }
        /**
         * Restriction for adding product for seller
         *
         * @param array   $errors
         * @return string
         */
        public function seller_add_products($errors)
        {
        }
        /**
         * Vendor can duplicate product
         *
         * @return boolean
         */
        public function vendor_can_duplicate_product()
        {
        }
        /**
         * Make product status draft when vendor's remaining product is zero
         *
         * @param array $data
         *
         *  @return array
         */
        public function make_product_draft($data)
        {
        }
        /**
         * Set product edit status
         *
         * @since 3.8.3
         *
         * @param array $all_statuses
         * @param int $product_id
         *
         * @return array
         */
        public function set_product_status($all_statuses, $product_id)
        {
        }
        /**
         * Get number of product by seller
         *
         * @param integer $user_id
         * @return integer
         */
        function get_number_of_product_by_seller($user_id)
        {
        }
        /**
         * Check if have pack availability
         *
         * @since 1.2.1
         *
         * @return void
         */
        public static function can_create_product($errors, $data)
        {
        }
        /**
         * Display Product Pack
         */
        function display_product_pack()
        {
        }
        /**
         * Check is Seller has any subscription
         *
         * @return boolean
         */
        public static function can_post_product()
        {
        }
        /**
         * Filter vendor category according to subscription
         *
         * @since 1.1.5
         *
         * @return void
         **/
        public static function filter_category($args)
        {
        }
        /**
         * Filter product types for a vendor
         *
         * @param  array $types
         *
         * @return array
         */
        public static function filter_product_types($types)
        {
        }
        /**
         * Filter capability for vendor
         *
         * @param  array $caps
         * @param  string $cap
         *
         * @return array
         */
        public static function filter_capability($caps, $cap)
        {
        }
        /**
         * Schedule task daily update this functions
         */
        public function schedule_task()
        {
        }
        /**
         * Adds order metadata for subscription product.
         *
         * @since 3.7.10
         *
         * @param int $order_id
         *
         * @return void
         */
        public function process_subscription_ordermeta($order_id)
        {
        }
        /**
         * Process order for specific package
         *
         * @param integer $order_id
         * @param string  $old_status
         * @param string  $new_status
         *
         * @return void
         */
        public function process_order_pack_product($order_id, $old_status, $new_status)
        {
        }
        /**
         * Validates billing email before checkout.
         *
         * This applies for vendor subscription when the user
         * is not logged in. As the user will be created using
         * the billing email after a successful checkout, we
         * need to make sure the billing email does not belong
         * to any existing user.
         *
         * @since 3.7.10
         *
         * @param array $data
         * @param object $errors
         *
         * @return void
         */
        public function validate_billing_email($data, $errors)
        {
        }
        /**
         * Filters available payment gateways as needed.
         * For example, COD should not be available for recurring subscription.
         *
         * @since 3.7.10
         *
         * @param array $available_gateways
         *
         * @return array
         */
        public function filter_payment_gateways($available_gateways)
        {
        }
        /**
         * Redirect after add product into cart
         *
         * @param string $url url
         * @return string $url
         */
        public static function add_to_cart_redirect($url)
        {
        }
        /**
         * When a subscription is added to the cart, remove other products/subscriptions to
         * work with PayPal Standard, which only accept one subscription per checkout.
         */
        public static function maybe_empty_cart($valid, $product_id, $quantity)
        {
        }
        /**
         * Remove addon required validation for dokan subscription product
         *
         * @param bool $valid
         * @param int $product_id
         * @param int $quantity
         * @return bool
         */
        public static function remove_addons_validation($valid, $product_id, $quantity)
        {
        }
        /**
         * Tell WC that we don't need any processing
         *
         * @param  bool $needs_processing
         * @param  array $product
         * @return bool
         */
        function order_needs_processing($needs_processing, $product)
        {
        }
        public function maybe_cancel_or_activate_subscription()
        {
        }
        /**
         * Cancel recurrring subscription via paypal
         *
         * @since 1.2.1
         *
         * @return void
         **/
        public function cancel_recurring_subscription($order_id, $user_id)
        {
        }
        /**
         * Cancel non recurring subscription
         *
         * @since 3.0.3
         *
         * @param int $order_id
         * @param int $vendor_id
         *
         * @return void
         */
        public function cancel_non_recurring_subscription($order_id, $vendor_id, $cancel_immediately)
        {
        }
        /**
         * Disable creating new product from backend
         *
         * @param  array $args
         *
         * @return array
         */
        public static function disable_creating_new_product($args)
        {
        }
        /**
         * Exclude subscription product from product listing page
         *
         * @param  array $terms
         *
         * @return array
         */
        public function exclude_subscription_product($terms)
        {
        }
        /**
         * Exclude subscription product from total product count
         *
         * @param  string $query
         *
         * @return string
         */
        public function exclude_subscription_product_count($query, $post_type, $user_id)
        {
        }
        /**
         * Import number of allowed products
         *
         * @param object $object
         * @throws \ReflectionException
         * @return object
         */
        public static function import_products($object)
        {
        }
        /**
         * Include subscription api class
         *
         * @param  array $classes
         *
         * @return array
         */
        public static function rest_api_class_map($classes)
        {
        }
        /**
         * Register email class
         *
         * @param  array $wc_emails
         *
         * @return array
         */
        public static function register_email_class($wc_emails)
        {
        }
        /**
         * Register email action
         *
         * @param array $actions
         *
         * @return array
         */
        public static function register_email_action($actions)
        {
        }
        /**
         * Load subscription class
         *
         * @param array $classes
         *
         * @return array
         */
        public static function load_subscription_class($classes)
        {
        }
        /**
         * Add vendor subscriptionn class
         *
         * @param object $vendor
         *
         * @return void
         */
        public static function add_vendor_subscription($vendor)
        {
        }
        /**
         * Exclude subscription products from the best selling products
         *
         * @since 2.9.10
         *
         * @param array $args
         *
         * @return array
         */
        public function exclude_subscription_product_query($args)
        {
        }
        /**
         * Restricts the number of gallery images based on the vendor's subscription.
         *
         * This method checks the vendor's image limit, calculates the current number of images,
         * generates a warning message if necessary, and renders the JavaScript to enforce the limit.
         *
         * @return void
         */
        public function restrict_gallery_image_count()
        {
        }
        /**
         * Restrict already added gallery image using woocommerce_before_single_product
         *
         * @return void
         */
        public function restrict_added_image_display()
        {
        }
        /**
         * Restricted gallery image count for vendor subscription
         *
         * @return int
         */
        public function get_restricted_image_count($vendor_id = null)
        {
        }
        /**
         * Restrict gallery image  when creating product
         *
         * @param string $errors
         * @param array $data
         *
         * @return \WP_Error|string
         */
        public function restrict_gallery_image_on_product_create($errors, $data)
        {
        }
        /**
         * Restrict gallery image when editing product
         *
         * @param $postdata
         *
         * @return array
         */
        public function restrict_gallery_image_on_product_edit($postdata)
        {
        }
        /**
         * Count filter
         *
         * @param array $arr
         * @param int $count
         *
         * @return array
         */
        public function count_filter($arr, $count)
        {
        }
        /**
         * Restrict category if selected category found
         *
         * * @since 3.1.0
         *
         * @param $post
         *
         * @return null|\WP_Post $post
         */
        public function restrict_category_on_xml_import($post)
        {
        }
        /**
         * Restric product import on csv if category restriction enable
         *
         * @param $data
         * @since 3.1.0
         * @throws \Exception
         */
        public function restrict_category_on_csv_import($data)
        {
        }
        /**
         * Get subscription allowed categories if exist
         *
         * @since 3.1.0
         *
         * @return array
         */
        protected function get_vendor_allowed_categories()
        {
        }
        /**
         * This method will disable email verification if vendor subscription module is on
         * and if subscription is enabled on registration form
         *
         * @since 3.2.0
         * @param bool $ret
         * @return bool
         */
        public function disable_email_verification($ret)
        {
        }
        /**
         * Redirect to currently created product edit screen
         *
         * @since 3.3.1
         *
         * @param string $redirect_to Redirect url.
         * @param int $product_id Created product ID.
         *
         * @return string
         */
        public function redirect_to_product_edit_screen($redirect_to, $product_id)
        {
        }
        /**
         * @since 3.2.0
         *
         * Checking the ability to duplicate product based on subscription
         *
         * @param $can_duplicate
         *
         * @return bool|mixed|null
         */
        public function dokan_can_duplicate_product_on_subscription($can_duplicate)
        {
        }
        /**
         * Add non_recurring_subscription_packs to dokan admin script
         *
         * @since 3.3.1
         *
         * @param array $localize_script
         *
         * @return array
         */
        public function add_subscription_packs_to_localize_script($localize_script)
        {
        }
        /**
         * Remove min max rules for subscription pack.
         *
         * @since 3.10.3
         *
         * @param bool $apply_min_max
         * @param int  $product_id
         *
         * @return bool
         */
        public function remove_min_max_for_subscription_packs($apply_min_max, $product_id)
        {
        }
        /**
         * Add Current subscription info to vendor info.
         *
         * @since 3.3.1
         *
         * @param array $shop_data
         * @param Vendor $vendor
         *
         * @return array
         */
        public function add_currently_subscribed_pack_info_to_shop_data($shop_data, $vendor)
        {
        }
        /**
         * Store Vendor Subscribed subscription package information.
         *
         * @since 3.3.1
         *
         * @param int $vendor_id
         * @param array $data
         *
         * @return void
         */
        public function update_vendor_subscription_data($vendor_id, $data)
        {
        }
        /**
         * Filter multi step vendor category according to subscription
         *
         * @since 3.7.4
         *
         * @param array $categories
         *
         * @return array
         **/
        public function filter_multistep_category($categories)
        {
        }
        /**
         * Skips cart validation for Mangopay while purchasing subscription pack.
         * Currently, it applies for non-recurring subscriptions only.
         *
         * @todo Add support for recurring subscriptions.
         *
         * @since 3.7.18
         *
         * @param bool $needs_validation Indicates if validation is needed.
         *
         * @return bool
         */
        public function skip_cart_validation_for_mangopay($needs_validation)
        {
        }
        /**
         * Skips payment disbursement process for Mangopay while purchasing subscription pack.
         *
         * @since 3.7.18
         *
         * @param bool $disburse Indicates if disbursement is needed.
         * @param \WC_Order $order The order being processed.
         *
         * @return bool
         */
        public function skip_payment_disbursement_for_mangopay($disburse, $order)
        {
        }
        /**
         * Modifies payin data for Mangopay while purchasing subscription pack.
         *
         * @since 3.7.18
         *
         * @param array $payin_data
         *
         * @return bool
         */
        public function modify_mangopay_payin_data($payin_data)
        {
        }
        /**
         * Remove catalog mode restriction.
         *
         * @since 3.8.3
         *
         * @param string      $enable Catalogue mode restriction enabled. Default `yes`
         * @param \WC_Product $product Current Product.
         * @param bool        $purchasable Whether the product is available to purchase.
         *
         * @return string
         */
        public function remove_catalogue_mode_restriction_on_dokan_subscription_product(string $enable, $product, bool $purchasable): string
        {
        }
        /**
         * Remove unsupported payment gateways.
         *
         * @since 3.9.1
         *
         * @param array $gateways All payment gateways.
         *
         * @return array
         */
        public function remove_unsupported_payment_gateways_on_dokan_subscription_product(array $gateways): array
        {
        }
        /**
         * Add Params to Store Collection.
         *
         * @since 3.11.3
         *
         * @param array $args
         *
         * @return array
         */
        public function add_params_to_store_collection($args)
        {
        }
        /**
         * Get Stores Args.
         *
         * @since 3.11.3
         *
         * @param array $args
         * @param \WP_REST_Request $request
         *
         * @return array
         */
        public function rest_get_stores_args($args, $request)
        {
        }
        /**
         * Remove Request Warranty Button.
         *
         * @since 3.13.0
         *
         * @param array     $actions Order Actions
         * @param \WC_Order $order   WC Order
         *
         * @return array $actins
         */
        public function remove_request_warranty_button(array $actions, \WC_Order $order): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\TableRate {
    class DistanceRateMethod extends \WC_Shipping_Method
    {
        /**
         * Google Distance Matric API object.
         *
         * @var Object
         */
        public $api;
        /**
         * Table Rates from Database
         *
         * @since 3.4.2
         */
        public $options_save_name;
        /**
         * Table Rates from Database
         *
         * @since 3.4.2
         */
        public $default_option;
        /**
         * Rates table name
         *
         * @since 3.4.2
         *
         * @var string
         */
        public $rates_table;
        /**
         * Method has settings.
         *
         * @since 3.4.2
         *
         * @var bool
         */
        public $has_settings = false;
        /**
         * Default option.
         *
         * @since 3.4.2
         *
         * @var string
         */
        public $default;
        /**
         * Cloning is forbidden. Will deactivate prior 'instances' users are running
         *
         * @since 3.4.2
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 3.4.2
         */
        public function __wakeup()
        {
        }
        /**
         * __construct function.
         *
         * @since  3.4.2
         *
         * @access public
         * @return void
         */
        public function __construct($instance_id = 0)
        {
        }
        /**
         * Init function.
         * initialize variables to be used
         *
         * @since  3.4.2
         *
         * @access public
         *
         * @return void
         */
        public function init()
        {
        }
        /**
         * Calculate_shipping function.
         *
         * @since  3.4.2
         *
         * @access public
         *
         * @param array $package (default: array())
         *
         * @return void
         */
        public function calculate_shipping($package = [])
        {
        }
        /**
         * Query rules function.
         *
         * @since 3.4.2
         *
         * @param int $instance_id
         *
         * @return array
         */
        public function query_rules($instance_id)
        {
        }
        /**
         * Get method settings option.
         *
         * @since 3.4.2
         *
         * @param array  $method
         * @param string $key
         * @param bool   $is_int
         *
         * @return mix
         */
        public function get_method_option($method, $key, $is_int = false)
        {
        }
        /**
         * Return the API object.
         *
         * @since 3.4.2
         *
         * @return object WC_Google_Distance_Matrix_API
         */
        public function get_api()
        {
        }
        /**
         * Get rates function.
         *
         * @since 3.4.2
         *
         * @param obj   $package
         * @param array $method
         *
         * @return bool|array
         */
        public function get_rates($package, $method)
        {
        }
        /**
         * Unique function for overriding the prices including tax setting.
         *
         * @since 3.4.2
         *
         * @return bool
         */
        public function override_prices_include_tax_setting()
        {
        }
        /**
         * Is available in specific zone locations
         *
         * @since 3.4.2
         *
         * @param array $package
         *
         * @return bool
         */
        public function is_available($package)
        {
        }
        /**
         * Split state code from country:state string
         *
         * @since 3.4.2
         *
         * @param string $value [like: BD:DHA]
         *
         * @return string [like: DHA ]
         */
        public function split_state_code($value)
        {
        }
        /**
         * Alter the default rate if one is chosen in settings.
         *
         * @since  3.4.2
         *
         * @access public
         *
         * @param mixed $chosen_method
         * @param array $_available_methods
         *
         * @return mixed
         */
        public function select_default_rate($chosen_method, $available_methods)
        {
        }
        /**
         * Shows notices when shipping is not available.
         *
         * @since 3.4.2
         *
         * @param string $notice        Notice message.
         * @param bool   $cart_checkout Determine if we need to show in both cart and checkout pages.
         */
        public function show_notice($notice = '', $cart_checkout = true)
        {
        }
        /**
         * Gets the currently set notice.
         *
         * @since 3.4.2
         *
         * @return string Notice.
         */
        public function get_notice()
        {
        }
        /**
         * Calculate shipping based on distance.
         *
         * @since 3.4.2
         *
         * @param array  $rule     Rule.
         * @param int    $distance Distance.
         * @param object $package  Package to ship.
         *
         * @return int
         */
        public function distance_shipping($rule, $distance, $package)
        {
        }
        /**
         * Calculate shipping based on total travel time.
         *
         * @since 3.4.2
         *
         * @param array  $rule                Rule.
         * @param int    $travel_time_minutes Travel time in minutes.
         * @param object $package             Package to ship.
         *
         * @return int
         */
        public function time_shipping($rule, $travel_time_minutes, $package)
        {
        }
        /**
         * Calculate shipping based on weight.
         *
         * @since 3.4.2
         *
         * @param array  $rule     Rule.
         * @param int    $distance Distance.
         * @param object $package  Package to ship.
         *
         * @return int
         */
        public function weight_shipping($rule, $distance, $package)
        {
        }
        /**
         * Calculate shipping based on order total.
         *
         * @since 3.4.2
         *
         * @param array  $rule     Rule.
         * @param int    $distance Distance.
         * @param object $package  Package to ship.
         *
         * @return int
         */
        public function order_total_shipping($rule, $distance, $package)
        {
        }
        /**
         * Calculate shipping based on quantity.
         *
         * @since 3.4.2
         *
         * @param array  $rule     Rule.
         * @param int    $distance Distance.
         * @param object $package  Package to ship.
         *
         * @return int
         */
        public function quantity_shipping($rule, $distance, $package)
        {
        }
        /**
         * Build customer address string from package.
         *
         * @since 3.4.2
         *
         * @param array $package              Package to ship.
         * @param bool  $convert_country_code Use full country name or just the country code ( France vs. FR )
         *
         * @return string
         */
        public function get_customer_address_string($package, $convert_country_code = true)
        {
        }
        /**
         * Get the shipping from address as string.
         *
         * @since 3.4.2
         *
         * @param array $settings
         * @param int   $instance_id
         *
         * @return string
         */
        public function get_shipping_address_string($settings, $instance_id)
        {
        }
        /**
         * Delete Distance Rate shipping methods, created by Vendor, if Admin delete 'Vendor Distance Rate' in WC > Settings > Shipping > Zone
         *
         * @since 3.7.0
         *
         * @param int    $instance_id
         * @param string $method_id
         * @param int    $zone_id
         */
        public function delete_distance_rate_shipping_methods($instance_id, $method_id, $zone_id)
        {
        }
    }
    /**
     * Table Rate Shipping Template Class
     */
    class DistanceTemplateHooks
    {
        /**
         * Constructor for the Table Rate
         * Shipping Template class
         *
         * @since 3.4.2
         */
        public function __construct()
        {
        }
        /**
         * Load Settings Content
         *
         * @since 3.4.2
         *
         * @param  array $query_vars
         *
         * @return void
         */
        public function load_settings_content($query_vars)
        {
        }
        /**
         * Load Settings Content
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function load_settings_form_header()
        {
        }
        /**
         * Render Update Message
         *
         * @return void
         */
        public function get_messages()
        {
        }
        /**
         * Load Settings Content
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function load_settings_form_general()
        {
        }
        /**
         * Get the shipping from address as string.
         *
         * @since 3.4.2
         *
         * @param array $settings
         * @param int   $instance_id
         *
         * @return string
         */
        public function get_shipping_address_string($settings, $instance_id)
        {
        }
        /**
         * Load Settings Content
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function load_settings_table_rate()
        {
        }
    }
    /**
     * API class for Google Distance Matrix API.
     *
     * Google Distance Matrix API class, handles all API calls to Google Distance
     * Matrix API
     *
     * @since 3.4.2
     */
    class DokanGoogleDistanceMatrixAPI
    {
        /**
         * API URL
         *
         * @since 3.4.2
         */
        const API_URL = 'https://maps.googleapis.com/maps/api/distancematrix/json';
        /**
         * API Key.
         *
         * @since 3.4.2
         *
         * @var String
         */
        public $api_key;
        /**
         * Debug mode.
         *
         * @since 3.4.2
         *
         * @var string
         */
        public $debug;
        /**
         * Constructor.
         *
         * Set properties.
         *
         * @since 3.4.2
         *
         * @param string $api_key API key.
         * @param bool   $debug   Whether debug is enabled or not.
         *
         * @return void
         */
        public function __construct($api_key, $debug)
        {
        }
        /**
         * Get the distance based on origin and destination address.
         *
         * @since 3.4.2
         *
         * @param  string $origin      Origin.
         * @param  string $destination Destination.
         * @param  string $sensor      Sensor.
         * @param  string $mode        Mode.
         * @param  string $avoid       Avoid.
         * @param  string $units       Units.
         * @param  mixed  $region      Region.
         * @return array
         */
        public function get_distance($origin, $destination, $sensor = 'false', $mode = 'driving', $avoid = '', $units = 'metric', $region = false)
        {
        }
    }
    /**
     * Table Rate Shipping Template Class
     */
    class Hooks
    {
        /**
         * Constructor for the Table Rate
         * Shipping Template class
         *
         * @since 3.4.0
         */
        public function __construct()
        {
        }
        /**
         * Get all avilable shipping methods
         *
         * @param array  $available_methods
         * @param object $zone
         *
         * @return array
         */
        public function add_table_rate_method($available_methods, $zone)
        {
        }
        /**
         * Load Settings Content
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function save_table_rate_settings()
        {
        }
        /**
         * Load Settings Content
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function save_distance_rate_settings()
        {
        }
        /**
         * Get distance rate general data
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function get_distance_general_data()
        {
        }
        /**
         * Get general data
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function get_general_data()
        {
        }
        /**
         * Delete table rates when main shipping zone deleted by admin
         *
         * @since 3.4.0
         *
         * @param id $zone_id
         *
         * @return void
         */
        public function delete_table_rates_by_zone($zone_id)
        {
        }
        /**
         * Delete table rates when main shipping method deleted by vendor
         *
         * @since 3.4.0
         *
         * @param id $zone_id
         * @param id $instance_id
         *
         * @return void
         */
        public function delete_table_rates_by_method($zone_id, $instance_id)
        {
        }
        /**
         * Save/update table rate rows
         *
         * @since 3.4.0
         *
         * @param int $instance_id
         *
         * @return void
         */
        public function save_table_rate_rows($zone_id, $instance_id)
        {
        }
        /**
         * Save/update distance rate rows
         *
         * @since 3.4.2
         *
         * @param int $instance_id
         *
         * @return void
         */
        public function save_distance_rate_rows($zone_id, $instance_id)
        {
        }
    }
    class Method extends \WC_Shipping_Method
    {
        /**
         * Table Rates from Database
         *
         * @since 3.4.0
         */
        public $options_save_name;
        /**
         * Table Rates from Database
         *
         * @since 3.4.0
         */
        public $default_option;
        /**
         * Rates table name
         *
         * @since 3.4.0
         *
         * @var string
         */
        public $rates_table;
        /**
         * Method has settings.
         *
         * @since 3.4.0
         *
         * @var bool
         */
        public $has_settings = false;
        /**
         * Default option.
         *
         * @since 3.4.0
         *
         * @var string
         */
        public $default;
        /**
         * Cloning is forbidden. Will deactivate prior 'instances' users are running
         *
         * @since 3.4.0
         */
        public function __clone()
        {
        }
        /**
         * Unserializing instances of this class is forbidden.
         *
         * @since 3.4.0
         */
        public function __wakeup()
        {
        }
        /**
         * __construct function.
         *
         * @since 3.4.0
         *
         * @access public
         * @return void
         */
        public function __construct($instance_id = 0)
        {
        }
        /**
         * Init function.
         * initialize variables to be used
         *
         * @since 3.4.0
         *
         * @access public
         *
         * @return void
         */
        public function init()
        {
        }
        /**
         * Calculate_shipping function.
         *
         * @since 3.4.0
         *
         * @access public
         *
         * @param array $package (default: array())
         *
         * @return void
         */
        public function calculate_shipping($package = array())
        {
        }
        /**
         * Query rates function.
         *
         * @since 3.4.0
         *
         * @param array $args
         * @param int   $instance_id
         *
         * @return array
         */
        public function query_rates($args, $instance_id)
        {
        }
        /**
         * Get method settings option.
         *
         * @since 3.4.0
         *
         * @param array  $method
         * @param string $key
         * @param bool   $is_int
         *
         * @return mix
         */
        public function get_method_option($method, $key, $is_int = false)
        {
        }
        /**
         * Get rates function.
         *
         * @since 3.4.0
         *
         * @param obj   $package
         * @param array $method
         *
         * @return bool
         */
        public function get_rates($package, $method)
        {
        }
        /**
         * Unique function for overriding the prices including tax setting.
         *
         * @since 3.4.0
         *
         * @return bool
         */
        public function override_prices_include_tax_setting()
        {
        }
        /**
         * Get cart shipping class id by package and instance.
         *
         * @since 3.4.0
         *
         * @param array $package
         * @param ing   $instance_id
         *
         * @return int
         */
        public function get_cart_shipping_class_id($package, $instance_id)
        {
        }
        /**
         * Count items in class
         *
         * @since 3.4.0
         *
         * @param array $package
         * @param ing   $class_id
         *
         * @return int
         */
        public function count_items_in_class($package, $class_id)
        {
        }
        /**
         * Retrieve the product price from a line item.
         *
         * @since 3.4.0
         *
         * @param object $_product Product object.
         * @param int    $qty      Line item quantity.
         * @param array  $item     Array of line item data.
         *
         * @return float
         */
        public function get_product_price($_product, $qty = 1, $item = array())
        {
        }
        /**
         * Is available in specific zone locations
         *
         * @since 3.4.0
         *
         * @param array $package
         *
         * @return void
         */
        public function is_available($package)
        {
        }
        /**
         * Split state code from country:state string
         *
         * @since 3.4.0
         *
         * @param string $value [like: BD:DHA]
         *
         * @return string [like: DHA ]
         */
        public function split_state_code($value)
        {
        }
        /**
         * Alter the default rate if one is chosen in settings.
         *
         * @since 3.4.0
         *
         * @access public
         *
         * @param mixed $chosen_method
         * @param array $_available_methods
         *
         * @return bool
         */
        public function select_default_rate($chosen_method, $available_methods)
        {
        }
        /**
         * Delete Table Rate shipping methods, created by Vendor, if Admin delete 'Vendor Table Rate' in WC > Settings > Shipping > Zone
         *
         * @since 3.7.0
         *
         * @param int $instance_id
         * @param string $method_id
         * @param int $zone_id
         */
        public function delete_table_rate_shipping_methods($instance_id, $method_id, $zone_id)
        {
        }
    }
    /**
     * Admin notices class
     *
     * @since 3.7.21
     */
    class Notices
    {
        /**
         * Class constructor
         *
         * @since 3.7.21
         */
        public function __construct()
        {
        }
        /**
         * Display API key error message
         *
         * @since 3.7.21
         *
         * @param array $notices
         *
         * @return array
         */
        public function maybe_display_api_key_error_message($notices)
        {
        }
        /**
         * Admin Notice ajax action
         *
         * @since 3.7.21
         *
         * @return void
         */
        public function close_api_key_error_notice_ajax()
        {
        }
        /**
         * Show admin notices
         *
         * @since 3.4.2
         * @since 3.7.21 moved this method from table-rate-shipping/module.php file
         *
         * @return void
         */
        public function admin_notices($notices)
        {
        }
        /**
         * Clear notice cache
         *
         * @since 3.7.21
         *
         * @param string $option_name
         * @param array $option_value
         * @param array $old_options
         *
         * @return void
         */
        public function clear_notice_cache($option_name, $option_value, $old_options)
        {
        }
    }
    /**
     * Table Rate Shipping Template Class
     */
    class TemplateHooks
    {
        /**
         * Constructor for the Table Rate
         * Shipping Template class
         *
         * @since 3.4.0
         */
        public function __construct()
        {
        }
        /**
         * Load Settings Content
         *
         * @since 3.4.0
         *
         * @param  array $query_vars
         *
         * @return void
         */
        public function load_settings_content($query_vars)
        {
        }
        /**
         * Finlter nva active for table rate shipping
         *
         * @since 3.4.0
         *
         * @param string $active_menu
         *
         * @return string $active_menu
         */
        public function filter_nav_active($active_menu)
        {
        }
        /**
         * Load Settings page helper
         *
         * @since 3.4.0
         *
         * @param  string $help_text
         * @param  array $query_vars
         *
         * @return string
         */
        public function load_settings_helper_text($help_text, $query_vars)
        {
        }
        /**
         * Load Settings Header
         *
         * @since 3.4.0
         *
         * @param string $header
         * @param array $query_vars
         *
         * @return string
         */
        public function load_settings_header($header, $query_vars)
        {
        }
        /**
         * Load Settings Content
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function load_settings_form_header()
        {
        }
        /**
         * Render Update Message
         *
         * @return void
         */
        public function get_messages()
        {
        }
        /**
         * Load Settings Content
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function load_settings_form_general()
        {
        }
        /**
         * Load Settings Content
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function load_settings_table_rate()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\TableRateShipping {
    class Module
    {
        /**
         * Constructor for the Dokan Table Rate Shipping class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @uses is_admin()
         * @uses add_action()
         */
        public function __construct()
        {
        }
        /**
         * Init the modules
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function init()
        {
        }
        /**
         * Defined
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function define()
        {
        }
        /**
         * Initiate all classes
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function initiate()
        {
        }
        /**
         * Init all hooks
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Get plugin path
         *
         * @since 3.4.0
         *
         * @return void
         **/
        public function plugin_path()
        {
        }
        /**
         * Register shipping method
         *
         * @since 3.4.0
         *
         * @param array $methods
         *
         * @return array $methods
         */
        public function register_shipping($methods)
        {
        }
        /**
         * Load global scripts
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function load_scripts()
        {
        }
        /**
         * Enqueue scripts
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Load table rate shipping templates
         *
         * @since 3.4.0
         *
         * @return void
         **/
        public function load_product_trs_templates($template_path, $template, $args)
        {
        }
        /**
         * Activates the module
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function activate()
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        /**
         * Get table rate shipping info
         *
         * @since 3.4.0
         *
         * @param int $id
         * @param int $seller_id
         *
         * @param array $info
         */
        public function get_table_rate_info($id = 0, $seller_id = 0)
        {
        }
        /**
         * Get distance rate shipping info
         *
         * @since 3.4.2
         *
         * @param int $id
         * @param int $seller_id
         *
         * @return array $results
         */
        public function get_distance_rate_info($id = 0, $seller_id = 0)
        {
        }
        /**
         * Get Shipping Method for a method
         *
         * @since 3.4.0
         *
         * @param int $instance_id
         *
         * @return void
         */
        public function get_shipping_method($instance_id)
        {
        }
        /**
         * Get Shipping Method for a method
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function get_normalized_shipping_rates()
        {
        }
        /**
         * Get raw shipping rates from the DB.
         *
         * Optional filter helper for integration with other plugins.
         *
         * @param string $output Output format.
         * @return mixed
         */
        public function get_shipping_rates($output = OBJECT, $instance_id = null)
        {
        }
        /**
         * Get Shipping Method for a method
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function get_normalized_shipping_distance_rates()
        {
        }
        /**
         * Get raw shipping distance rates from the DB.
         *
         * Optional filter helper for integration with other plugins.
         *
         * @param string $output Output format.
         * @return mixed
         */
        public function get_shipping_distance_rates($output = OBJECT, $instance_id = null)
        {
        }
        /**
         * Delete table rate
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function table_rate_delete()
        {
        }
        /**
         * Delete distance rate
         *
         * @since 3.4.2
         *
         * @return void
         */
        public function distance_rate_delete()
        {
        }
        /**
         * Validated zone data
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function get_zone()
        {
        }
        /**
         * Validated instance data
         *
         * @since 3.4.0
         *
         * @return void
         */
        public function get_instance()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\VendorAnalytics {
    class AdminSettings
    {
        /**
         * Class constructor
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Save token got from api authentication
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function save_token()
        {
        }
        /**
         * Add admin settings section
         *
         * @since 1.0.0
         *
         * @param array $sections
         *
         * @return array
         */
        public function add_settings_section($sections)
        {
        }
        /**
         * Add admin settings fields
         *
         * @since 1.0.0
         *
         * @param array $settings_fields
         *
         * @return array
         */
        public function add_settings_fields($settings_fields)
        {
        }
        /**
         * Refresh profiles in admin settings
         *
         * @since 3.0.5
         *
         * @return array
         */
        public function refresh_admin_settings_option_profile()
        {
        }
        /**
         * Add Google tracking code inside head tag
         *
         * @since 3.0.5
         *
         * @return void
         */
        public function add_tracking_code()
        {
        }
        /**
         * Disconnect google analytics profile
         *
         * @since 3.1.4
         *
         * @return void
         */
        public function disconnect_google_analytics_profile()
        {
        }
    }
    /**
     * Analytics output formatter.
     *
     * @since 3.7.23
     */
    class Formatter
    {
        /**
         * Format as percentage.
         *
         * @since 3.7.23
         *
         * @param mixed $value Value to be formatted.
         *
         * @return string
         */
        public function percentage($value): string
        {
        }
        /**
         * Format as round.
         *
         * @since 3.7.23
         *
         * @param mixed $value Value to be formatted.
         *
         * @return string
         */
        public function round($value): string
        {
        }
    }
    /**
     * Reports class
     *
     * @since 1.0.0
     * @since 3.7.23 Renamed the class and added namespace.
     */
    class Reports
    {
        /**
         * Handle product for staff uploading and editing
         *
         * @since 1.0.0
         * @since 3.7.23 Return type changed to array.
         *
         * @return array
         */
        public function filter_page_path(array $filter): array
        {
        }
        /**
         * Handle load analytics connection
         *
         * @since 1.0.0
         *
         * @return array
         */
        protected function load_dokan_vendor_analytics(): ?array
        {
        }
        /**
         * Get dokan vendor analytics
         *
         * @since 1.0.0
         *
         * @param string $end_date
         * @param string $metrics
         * @param bool $dimensions
         * @param bool $sort
         * @param array $filter
         * @param bool $limit
         *
         * @param string $start_date
         *
         * @return RunReportResponse|WP_Error|null
         */
        public function dokan_get_vendor_analytics($start_date = '30daysAgo', $end_date = 'today', $metrics = 'activeUsers', $dimensions = 'date', $sort = false, $filter = [], $limit = false)
        {
        }
        /**
         * analytics content
         *
         * @since 1.0.0
         */
        public function get_analytics_content($metrics, $dimensions, $sort, $headers, $formatters = ['dimension' => [], 'metric' => []])
        {
        }
    }
    class Token implements \Google\Auth\FetchAuthTokenInterface
    {
        /**
         * @var \Dokan_Client
         */
        protected $auth;
        public function __construct($auth = null)
        {
        }
        /**
         * @inheritDoc
         */
        public function fetchAuthToken(callable $httpHandler = null)
        {
        }
        /**
         * @inheritDoc
         */
        public function getCacheKey()
        {
        }
        /**
         * @inheritDoc
         */
        public function getLastReceivedToken()
        {
        }
    }
    class Module
    {
        /**
         * Constructor for the Dokan_Vendor_Analytics class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @uses is_admin()
         * @uses add_action()
         */
        public function __construct()
        {
        }
        /**
         * Define all constant
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function define_constant()
        {
        }
        /**
         * Includes all files
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function includes()
        {
        }
        /**
         * Inistantiate all class
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function initiate()
        {
        }
        /**
         * Add staffs endpoint to the end of Dashboard
         *
         * @param array $query_var
         */
        public function add_endpoint($query_var)
        {
        }
        /**
         * Get plugin path
         *
         * @since 2.8
         *
         * @return void
         **/
        public function plugin_path()
        {
        }
        /**
         * Render Analytics Header Template
         *
         * @since 2.4
         *
         * @return void
         */
        public function analytics_header_render()
        {
        }
        /**
         * Render Analytics Content
         *
         * @return void
         */
        public function render_analytics_content()
        {
        }
        /**
         * Load vendor analytics views templates
         *
         * @since 3.4.2
         *
         * @return string
         */
        public function load_view_templates($template_path, $template, $args)
        {
        }
        /**
         * Load Dokan vendor analytics templates
         *
         * @since 2.8
         *
         * @return string
         */
        public function load_vendor_analytics_templates($template_path, $template, $args)
        {
        }
        /**
         * Load tools template
         *
         * @since  1.0
         *
         * @param  array $query_vars
         *
         * @return string
         */
        public function load_analytics_template($query_vars)
        {
        }
        /**
         * Add staffs page in seller dashboard
         *
         * @param array $urls
         *
         * @return array $urls
         */
        public function add_analytics_page($urls)
        {
        }
        /**
         * This method will load during module activation
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function activate()
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        /**
         * Enqueue styles and scripts
         *
         * @since 3.5.3
         *
         * @retun void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Register Scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
    }
}
namespace {
    /**
     * Abstract class for the Authentication in the API client
     * @author Chris Chabot <chabotc@google.com>
     *
     */
    abstract class Dokan_Auth_Abstract
    {
        /**
         * An utility function that first calls $this->auth->sign($request) and then
         * executes makeRequest() on that signed request. Used for when a request
         * should be authenticated
         * @param Dokan_Http_Request $request
         * @return Dokan_Http_Request $request
         */
        abstract public function authenticatedRequest(\Dokan_Http_Request $request);
        abstract public function sign(\Dokan_Http_Request $request);
    }
    /**
     * Authentication via the Google App Engine App Identity service.
     */
    class Dokan_Auth_AppIdentity extends \Dokan_Auth_Abstract
    {
        const CACHE_PREFIX = "Dokan_Auth_AppIdentity::";
        public function __construct(\Dokan_Client $client, $config = \null)
        {
        }
        /**
         * Retrieve an access token for the scopes supplied.
         */
        public function authenticateForScope($scopes)
        {
        }
        /**
         * Perform an authenticated / signed apiHttpRequest.
         * This function takes the apiHttpRequest, calls apiAuth->sign on it
         * (which can modify the request in what ever way fits the auth mechanism)
         * and then calls apiCurlIO::makeRequest on the signed request
         *
         * @param Dokan_Http_Request $request
         * @return Dokan_Http_Request The resulting HTTP response including the
         * responseHttpCode, responseHeaders and responseBody.
         */
        public function authenticatedRequest(\Dokan_Http_Request $request)
        {
        }
        public function sign(\Dokan_Http_Request $request)
        {
        }
    }
    /**
     * Credentials object used for OAuth 2.0 Signed JWT assertion grants.
     */
    class Dokan_Auth_AssertionCredentials
    {
        const MAX_TOKEN_LIFETIME_SECS = 3600;
        public $serviceAccountName;
        public $scopes;
        public $privateKey;
        public $privateKeyPassword;
        public $assertionType;
        public $sub;
        /**
         * @deprecated
         * @link http://tools.ietf.org/html/draft-ietf-oauth-json-web-token-06
         */
        public $prn;
        /**
         * @param $serviceAccountName
         * @param $scopes array List of scopes
         * @param $privateKey
         * @param string $privateKeyPassword
         * @param string $assertionType
         * @param bool|string $sub The email address of the user for which the
         *              application is requesting delegated access.
         * @param bool useCache Whether to generate a cache key and allow
         *              automatic caching of the generated token.
         */
        public function __construct($serviceAccountName, $scopes, $privateKey, $privateKeyPassword = 'notasecret', $assertionType = 'http://oauth.net/grant_type/jwt/1.0/bearer', $sub = \false, $useCache = \true)
        {
        }
        /**
         * Generate a unique key to represent this credential.
         * @return string
         */
        public function getCacheKey()
        {
        }
        public function generateAssertion()
        {
        }
    }
    /**
     * Authentication via built-in Compute Engine service accounts.
     * The instance must be pre-configured with a service account
     * and the appropriate scopes.
     * @author Jonathan Parrott <jon.wayne.parrott@gmail.com>
     */
    class Dokan_Auth_ComputeEngine extends \Dokan_Auth_Abstract
    {
        const METADATA_AUTH_URL = 'http://metadata/computeMetadata/v1/instance/service-accounts/default/token';
        public function __construct(\Dokan_Client $client, $config = \null)
        {
        }
        /**
         * Perform an authenticated / signed apiHttpRequest.
         * This function takes the apiHttpRequest, calls apiAuth->sign on it
         * (which can modify the request in what ever way fits the auth mechanism)
         * and then calls apiCurlIO::makeRequest on the signed request
         *
         * @param Dokan_Http_Request $request
         * @return Dokan_Http_Request The resulting HTTP response including the
         * responseHttpCode, responseHeaders and responseBody.
         */
        public function authenticatedRequest(\Dokan_Http_Request $request)
        {
        }
        /**
         * @param string $token
         * @throws Dokan_Auth_Exception
         */
        public function setAccessToken($token)
        {
        }
        public function getAccessToken()
        {
        }
        /**
         * Acquires a new access token from the compute engine metadata server.
         * @throws Dokan_Auth_Exception
         */
        public function acquireAccessToken()
        {
        }
        /**
         * Include an accessToken in a given apiHttpRequest.
         * @param Dokan_Http_Request $request
         * @return Dokan_Http_Request
         * @throws Dokan_Auth_Exception
         */
        public function sign(\Dokan_Http_Request $request)
        {
        }
        /**
         * Returns if the access_token is expired.
         * @return bool Returns True if the access_token is expired.
         */
        public function isAccessTokenExpired()
        {
        }
    }
    /*
     * Copyright 2018 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Dokan_Exception extends \Exception
    {
    }
    class Dokan_Auth_Exception extends \Dokan_Exception
    {
    }
    /**
     * Class to hold information about an authenticated login.
     *
     * @author Brian Eaton <beaton@google.com>
     */
    class Dokan_Auth_LoginTicket
    {
        const USER_ATTR = "sub";
        /**
         * Creates a user based on the supplied token.
         *
         * @param string $envelope Header from a verified authentication token.
         * @param string $payload Information from a verified authentication token.
         */
        public function __construct($envelope, $payload)
        {
        }
        /**
         * Returns the numeric identifier for the user.
         * @throws Dokan_Auth_Exception
         * @return
         */
        public function getUserId()
        {
        }
        /**
         * Returns attributes from the login ticket.  This can contain
         * various information about the user session.
         * @return array
         */
        public function getAttributes()
        {
        }
    }
    /**
     * Authentication class that deals with the OAuth 2 web-server authentication flow
     *
     */
    class Dokan_Auth_OAuth2 extends \Dokan_Auth_Abstract
    {
        const OAUTH2_REVOKE_URI = 'https://accounts.google.com/o/oauth2/revoke';
        const OAUTH2_TOKEN_URI = 'https://accounts.google.com/o/oauth2/token';
        const OAUTH2_AUTH_URL = 'https://accounts.google.com/o/oauth2/auth';
        const CLOCK_SKEW_SECS = 300;
        // five minutes in seconds
        const AUTH_TOKEN_LIFETIME_SECS = 300;
        // five minutes in seconds
        const MAX_TOKEN_LIFETIME_SECS = 86400;
        // one day in seconds
        const OAUTH2_ISSUER = 'accounts.google.com';
        const OAUTH2_ISSUER_HTTPS = 'https://accounts.google.com';
        /**
         * Instantiates the class, but does not initiate the login flow, leaving it
         * to the discretion of the caller.
         */
        public function __construct(\Dokan_Client $client)
        {
        }
        /**
         * Perform an authenticated / signed apiHttpRequest.
         * This function takes the apiHttpRequest, calls apiAuth->sign on it
         * (which can modify the request in what ever way fits the auth mechanism)
         * and then calls apiCurlIO::makeRequest on the signed request
         *
         * @param Dokan_Http_Request $request
         * @return Dokan_Http_Request The resulting HTTP response including the
         * responseHttpCode, responseHeaders and responseBody.
         */
        public function authenticatedRequest(\Dokan_Http_Request $request)
        {
        }
        /**
         * @param string $code
         * @param boolean $crossClient
         * @throws Dokan_Auth_Exception
         * @return string
         */
        public function authenticate($code, $crossClient = \false)
        {
        }
        /**
         * Create a URL to obtain user authorization.
         * The authorization endpoint allows the user to first
         * authenticate, and then grant/deny the access request.
         * @param string $scope The scope is expressed as a list of space-delimited strings.
         * @return string
         */
        public function createAuthUrl($scope)
        {
        }
        /**
         * @param string $token
         * @throws Dokan_Auth_Exception
         */
        public function setAccessToken($token)
        {
        }
        public function getAccessToken()
        {
        }
        public function getRefreshToken()
        {
        }
        public function setState($state)
        {
        }
        public function setAssertionCredentials(\Dokan_Auth_AssertionCredentials $creds)
        {
        }
        /**
         * Include an accessToken in a given apiHttpRequest.
         * @param Dokan_Http_Request $request
         * @return Dokan_Http_Request
         * @throws Dokan_Auth_Exception
         */
        public function sign(\Dokan_Http_Request $request)
        {
        }
        /**
         * Fetches a fresh access token with the given refresh token.
         * @param string $refreshToken
         * @return void
         */
        public function refreshToken($refreshToken)
        {
        }
        /**
         * Fetches a fresh access token with a given assertion token.
         * @param Dokan_Auth_AssertionCredentials $assertionCredentials optional.
         * @return void
         */
        public function refreshTokenWithAssertion($assertionCredentials = \null)
        {
        }
        /**
         * Revoke an OAuth2 access token or refresh token. This method will revoke the current access
         * token, if a token isn't provided.
         * @throws Dokan_Auth_Exception
         * @param string|null $token The token (access token or a refresh token) that should be revoked.
         * @return boolean Returns True if the revocation was successful, otherwise False.
         */
        public function revokeToken($token = \null)
        {
        }
        /**
         * Returns if the access_token is expired.
         * @return bool Returns True if the access_token is expired.
         */
        public function isAccessTokenExpired()
        {
        }
        /**
         * Retrieve and cache a certificates file.
         *
         * @param $url string location
         * @throws Dokan_Auth_Exception
         * @return array certificates
         */
        public function retrieveCertsFromLocation($url)
        {
        }
        /**
         * Verifies an id token and returns the authenticated apiLoginTicket.
         * Throws an exception if the id token is not valid.
         * The audience parameter can be used to control which id tokens are
         * accepted.  By default, the id token must have been issued to this OAuth2 client.
         *
         * @param $id_token
         * @param $audience
         * @return Dokan_Auth_LoginTicket
         */
        public function verifyIdToken($id_token = \null, $audience = \null)
        {
        }
        /**
         * Verifies the id token, returns the verified token contents.
         *
         * @param $jwt string the token
         * @param $certs array of certificates
         * @param $required_audience string the expected consumer of the token
         * @param [$issuer] the expected issues, defaults to Google
         * @param [$max_expiry] the max lifetime of a token, defaults to MAX_TOKEN_LIFETIME_SECS
         * @throws Dokan_Auth_Exception
         * @return mixed token information if valid, false if not
         */
        public function verifySignedJwtWithCerts($jwt, $certs, $required_audience, $issuer = \null, $max_expiry = \null)
        {
        }
    }
    /**
     * Simple API access implementation. Can either be used to make requests
     * completely unauthenticated, or by using a Simple API Access developer
     * key.
     */
    class Dokan_Auth_Simple extends \Dokan_Auth_Abstract
    {
        public function __construct(\Dokan_Client $client, $config = \null)
        {
        }
        /**
         * Perform an authenticated / signed apiHttpRequest.
         * This function takes the apiHttpRequest, calls apiAuth->sign on it
         * (which can modify the request in what ever way fits the auth mechanism)
         * and then calls apiCurlIO::makeRequest on the signed request
         *
         * @param Dokan_Http_Request $request
         * @return Dokan_Http_Request The resulting HTTP response including the
         * responseHttpCode, responseHeaders and responseBody.
         */
        public function authenticatedRequest(\Dokan_Http_Request $request)
        {
        }
        public function sign(\Dokan_Http_Request $request)
        {
        }
    }
    /*
     * Copyright 2008 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Abstract storage class
     *
     * @author Chris Chabot <chabotc@google.com>
     */
    abstract class Dokan_Cache_Abstract
    {
        abstract public function __construct(\Dokan_Client $client);
        /**
         * Retrieves the data for the given key, or false if they
         * key is unknown or expired
         *
         * @param String $key The key who's data to retrieve
         * @param boolean|int $expiration Expiration time in seconds
         *
         */
        abstract public function get($key, $expiration = \false);
        /**
         * Store the key => $value set. The $value is serialized
         * by this function so can be of any type
         *
         * @param string $key Key of the data
         * @param string $value data
         */
        abstract public function set($key, $value);
        /**
         * Removes the key/data pair for the given $key
         *
         * @param String $key
         */
        abstract public function delete($key);
    }
    /**
     * A persistent storage class based on the APC cache, which is not
     * really very persistent, as soon as you restart your web server
     * the storage will be wiped, however for debugging and/or speed
     * it can be useful, and cache is a lot cheaper then storage.
     *
     * @author Chris Chabot <chabotc@google.com>
     */
    class Dokan_Cache_Apc extends \Dokan_Cache_Abstract
    {
        public function __construct(\Dokan_Client $client)
        {
        }
        /**
         * @inheritDoc
         */
        public function get($key, $expiration = \false)
        {
        }
        /**
         * @inheritDoc
         */
        public function set($key, $value)
        {
        }
        /**
         * @inheritDoc
         * @param String $key
         */
        public function delete($key)
        {
        }
    }
    class Dokan_Cache_Exception extends \Dokan_Exception
    {
    }
    /*
     * This class implements a basic on disk storage. While that does
     * work quite well it's not the most elegant and scalable solution.
     * It will also get you into a heap of trouble when you try to run
     * this in a clustered environment.
     *
     * @author Chris Chabot <chabotc@google.com>
     */
    class Dokan_Cache_File extends \Dokan_Cache_Abstract
    {
        const MAX_LOCK_RETRIES = 10;
        public function __construct(\Dokan_Client $client)
        {
        }
        public function get($key, $expiration = \false)
        {
        }
        public function set($key, $value)
        {
        }
        public function delete($key)
        {
        }
        public function unlock($storageFile)
        {
        }
    }
    /**
     * A persistent storage class based on the memcache, which is not
     * really very persistent, as soon as you restart your memcache daemon
     * the storage will be wiped.
     *
     * Will use either the memcache or memcached extensions, preferring
     * memcached.
     *
     * @author Chris Chabot <chabotc@google.com>
     */
    class Dokan_Cache_Memcache extends \Dokan_Cache_Abstract
    {
        public function __construct(\Dokan_Client $client)
        {
        }
        /**
         * @inheritDoc
         */
        public function get($key, $expiration = \false)
        {
        }
        /**
         * @inheritDoc
         * @param string $key
         * @param string $value
         * @throws Dokan_Cache_Exception
         */
        public function set($key, $value)
        {
        }
        /**
         * @inheritDoc
         * @param String $key
         */
        public function delete($key)
        {
        }
    }
    /**
     * A blank storage class, for cases where caching is not
     * required.
     */
    class Dokan_Cache_Null extends \Dokan_Cache_Abstract
    {
        public function __construct(\Dokan_Client $client)
        {
        }
        /**
         * @inheritDoc
         */
        public function get($key, $expiration = \false)
        {
        }
        /**
         * @inheritDoc
         */
        public function set($key, $value)
        {
        }
        /**
         * @inheritDoc
         * @param String $key
         */
        public function delete($key)
        {
        }
    }
    /**
     * The Google API Client
     * https://github.com/google/google-api-php-client
     */
    class Dokan_Client
    {
        const LIBVER = "1.1.5";
        const USER_AGENT_SUFFIX = "google-api-php-client/";
        /** @var array $scopes */
        // Scopes requested by the client
        protected $requestedScopes = array();
        // definitions of services that are discovered.
        protected $services = array();
        /**
         * Construct the Google Client.
         *
         * @param $config Dokan_Config or string for the ini file to load
         */
        public function __construct($config = \null)
        {
        }
        /**
         * Get a string containing the version of the library.
         *
         * @return string
         */
        public function getLibraryVersion()
        {
        }
        /**
         * Attempt to exchange a code for an valid authentication token.
         * If $crossClient is set to true, the request body will not include
         * the request_uri argument
         * Helper wrapped around the OAuth 2.0 implementation.
         *
         * @param $code string code from accounts.google.com
         * @param $crossClient boolean, whether this is a cross-client authentication
         * @return string token
         */
        public function authenticate($code, $crossClient = \false)
        {
        }
        /**
         * Loads a service account key and parameters from a JSON
         * file from the Google Developer Console. Uses that and the
         * given array of scopes to return an assertion credential for
         * use with refreshTokenWithAssertionCredential.
         *
         * @param string $jsonLocation File location of the project-key.json.
         * @param array $scopes The scopes to assert.
         * @return Dokan_Auth_AssertionCredentials.
         * @
         */
        public function loadServiceAccountJson($jsonLocation, $scopes)
        {
        }
        /**
         * Set the auth config from the JSON string provided.
         * This structure should match the file downloaded from
         * the "Download JSON" button on in the Google Developer
         * Console.
         * @param string $json the configuration json
         * @throws Dokan_Exception
         */
        public function setAuthConfig($json)
        {
        }
        /**
         * Set the auth config from the JSON file in the path
         * provided. This should match the file downloaded from
         * the "Download JSON" button on in the Google Developer
         * Console.
         * @param string $file the file location of the client json
         */
        public function setAuthConfigFile($file)
        {
        }
        /**
         * @throws Dokan_Auth_Exception
         * @return array
         * @visible For Testing
         */
        public function prepareScopes()
        {
        }
        /**
         * Set the OAuth 2.0 access token using the string that resulted from calling createAuthUrl()
         * or Dokan_Client#getAccessToken().
         * @param string $accessToken JSON encoded string containing in the following format:
         * {"access_token":"TOKEN", "refresh_token":"TOKEN", "token_type":"Bearer",
         *  "expires_in":3600, "id_token":"TOKEN", "created":1320790426}
         */
        public function setAccessToken($accessToken)
        {
        }
        /**
         * Set the authenticator object
         * @param Dokan_Auth_Abstract $auth
         */
        public function setAuth(\Dokan_Auth_Abstract $auth)
        {
        }
        /**
         * Set the IO object
         * @param Dokan_IO_Abstract $io
         */
        public function setIo(\Dokan_IO_Abstract $io)
        {
        }
        /**
         * Set the Cache object
         * @param Dokan_Cache_Abstract $cache
         */
        public function setCache(\Dokan_Cache_Abstract $cache)
        {
        }
        /**
         * Set the Logger object
         * @param Dokan_Logger_Abstract $logger
         */
        public function setLogger(\Dokan_Logger_Abstract $logger)
        {
        }
        /**
         * Construct the OAuth 2.0 authorization request URI.
         * @return string
         */
        public function createAuthUrl()
        {
        }
        /**
         * Get the OAuth 2.0 access token.
         * @return string $accessToken JSON encoded string in the following format:
         * {"access_token":"TOKEN", "refresh_token":"TOKEN", "token_type":"Bearer",
         *  "expires_in":3600,"id_token":"TOKEN", "created":1320790426}
         */
        public function getAccessToken()
        {
        }
        /**
         * Get the OAuth 2.0 refresh token.
         * @return string $refreshToken refresh token or null if not available
         */
        public function getRefreshToken()
        {
        }
        /**
         * Returns if the access_token is expired.
         * @return bool Returns True if the access_token is expired.
         */
        public function isAccessTokenExpired()
        {
        }
        /**
         * Set OAuth 2.0 "state" parameter to achieve per-request customization.
         * @see http://tools.ietf.org/html/draft-ietf-oauth-v2-22#section-3.1.2.2
         * @param string $state
         */
        public function setState($state)
        {
        }
        /**
         * @param string $accessType Possible values for access_type include:
         *  {@code "offline"} to request offline access from the user.
         *  {@code "online"} to request online access from the user.
         */
        public function setAccessType($accessType)
        {
        }
        /**
         * @param string $approvalPrompt Possible values for approval_prompt include:
         *  {@code "force"} to force the approval UI to appear. (This is the default value)
         *  {@code "auto"} to request auto-approval when possible.
         */
        public function setApprovalPrompt($approvalPrompt)
        {
        }
        /**
         * Set the login hint, email address or sub id.
         * @param string $loginHint
         */
        public function setLoginHint($loginHint)
        {
        }
        /**
         * Set the application name, this is included in the User-Agent HTTP header.
         * @param string $applicationName
         */
        public function setApplicationName($applicationName)
        {
        }
        /**
         * Set the OAuth 2.0 Client ID.
         * @param string $clientId
         */
        public function setClientId($clientId)
        {
        }
        /**
         * Set the OAuth 2.0 Client Secret.
         * @param string $clientSecret
         */
        public function setClientSecret($clientSecret)
        {
        }
        /**
         * Set the OAuth 2.0 Redirect URI.
         * @param string $redirectUri
         */
        public function setRedirectUri($redirectUri)
        {
        }
        /**
         * If 'plus.login' is included in the list of requested scopes, you can use
         * this method to define types of app activities that your app will write.
         * You can find a list of available types here:
         * @link https://developers.google.com/+/api/moment-types
         *
         * @param array $requestVisibleActions Array of app activity types
         */
        public function setRequestVisibleActions($requestVisibleActions)
        {
        }
        /**
         * Set the developer key to use, these are obtained through the API Console.
         * @see http://code.google.com/apis/console-help/#generatingdevkeys
         * @param string $developerKey
         */
        public function setDeveloperKey($developerKey)
        {
        }
        /**
         * Set the hd (hosted domain) parameter streamlines the login process for
         * Google Apps hosted accounts. By including the domain of the user, you
         * restrict sign-in to accounts at that domain.
         * @param $hd string - the domain to use.
         */
        public function setHostedDomain($hd)
        {
        }
        /**
         * Set the prompt hint. Valid values are none, consent and select_account.
         * If no value is specified and the user has not previously authorized
         * access, then the user is shown a consent screen.
         * @param $prompt string
         */
        public function setPrompt($prompt)
        {
        }
        /**
         * openid.realm is a parameter from the OpenID 2.0 protocol, not from OAuth
         * 2.0. It is used in OpenID 2.0 requests to signify the URL-space for which
         * an authentication request is valid.
         * @param $realm string - the URL-space to use.
         */
        public function setOpenidRealm($realm)
        {
        }
        /**
         * If this is provided with the value true, and the authorization request is
         * granted, the authorization will include any previous authorizations
         * granted to this user/application combination for other scopes.
         * @param $include boolean - the URL-space to use.
         */
        public function setIncludeGrantedScopes($include)
        {
        }
        /**
         * Fetches a fresh OAuth 2.0 access token with the given refresh token.
         * @param string $refreshToken
         */
        public function refreshToken($refreshToken)
        {
        }
        /**
         * Revoke an OAuth2 access token or refresh token. This method will revoke the current access
         * token, if a token isn't provided.
         * @throws Dokan_Auth_Exception
         * @param string|null $token The token (access token or a refresh token) that should be revoked.
         * @return boolean Returns True if the revocation was successful, otherwise False.
         */
        public function revokeToken($token = \null)
        {
        }
        /**
         * Verify an id_token. This method will verify the current id_token, if one
         * isn't provided.
         * @throws Dokan_Auth_Exception
         * @param string|null $token The token (id_token) that should be verified.
         * @return Dokan_Auth_LoginTicket Returns an apiLoginTicket if the verification was
         * successful.
         */
        public function verifyIdToken($token = \null)
        {
        }
        /**
         * Verify a JWT that was signed with your own certificates.
         *
         * @param $id_token string The JWT token
         * @param $cert_location array of certificates
         * @param $audience string the expected consumer of the token
         * @param $issuer string the expected issuer, defaults to Google
         * @param [$max_expiry] the max lifetime of a token, defaults to MAX_TOKEN_LIFETIME_SECS
         * @return mixed token information if valid, false if not
         */
        public function verifySignedJwt($id_token, $cert_location, $audience, $issuer, $max_expiry = \null)
        {
        }
        /**
         * @param $creds Dokan_Auth_AssertionCredentials
         */
        public function setAssertionCredentials(\Dokan_Auth_AssertionCredentials $creds)
        {
        }
        /**
         * Set the scopes to be requested. Must be called before createAuthUrl().
         * Will remove any previously configured scopes.
         * @param array $scopes, ie: array('https://www.googleapis.com/auth/plus.login',
         * 'https://www.googleapis.com/auth/moderator')
         */
        public function setScopes($scopes)
        {
        }
        /**
         * This functions adds a scope to be requested as part of the OAuth2.0 flow.
         * Will append any scopes not previously requested to the scope parameter.
         * A single string will be treated as a scope to request. An array of strings
         * will each be appended.
         * @param $scope_or_scopes string|array e.g. "profile"
         */
        public function addScope($scope_or_scopes)
        {
        }
        /**
         * Returns the list of scopes requested by the client
         * @return array the list of scopes
         *
         */
        public function getScopes()
        {
        }
        /**
         * Declare whether batch calls should be used. This may increase throughput
         * by making multiple requests in one connection.
         *
         * @param boolean $useBatch True if the batch support should
         * be enabled. Defaults to False.
         */
        public function setUseBatch($useBatch)
        {
        }
        /**
         * Declare whether making API calls should make the call immediately, or
         * return a request which can be called with ->execute();
         *
         * @param boolean $defer True if calls should not be executed right away.
         */
        public function setDefer($defer)
        {
        }
        /**
         * Helper method to execute deferred HTTP requests.
         *
         * @param $request Dokan_Http_Request|Dokan_Http_Batch
         * @throws Dokan_Exception
         * @return object of the type of the expected class or array.
         */
        public function execute($request)
        {
        }
        /**
         * Whether or not to return raw requests
         * @return boolean
         */
        public function shouldDefer()
        {
        }
        /**
         * @return Dokan_Auth_Abstract Authentication implementation
         */
        public function getAuth()
        {
        }
        /**
         * @return Dokan_IO_Abstract IO implementation
         */
        public function getIo()
        {
        }
        /**
         * @return Dokan_Cache_Abstract Cache implementation
         */
        public function getCache()
        {
        }
        /**
         * @return Dokan_Logger_Abstract Logger implementation
         */
        public function getLogger()
        {
        }
        /**
         * Retrieve custom configuration for a specific class.
         * @param $class string|object - class or instance of class to retrieve
         * @param $key string optional - key to retrieve
         * @return array
         */
        public function getClassConfig($class, $key = \null)
        {
        }
        /**
         * Set configuration specific to a given class.
         * $config->setClassConfig('Dokan_Cache_File',
         *   array('directory' => '/tmp/cache'));
         * @param $class string|object - The class name for the configuration
         * @param $config string key or an array of configuration values
         * @param $value string optional - if $config is a key, the value
         *
         */
        public function setClassConfig($class, $config, $value = \null)
        {
        }
        /**
         * @return string the base URL to use for calls to the APIs
         */
        public function getBasePath()
        {
        }
        /**
         * @return string the name of the application
         */
        public function getApplicationName()
        {
        }
        /**
         * Are we running in Google AppEngine?
         * return bool
         */
        public function isAppEngine()
        {
        }
    }
    /*
     * Copyright 2011 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * This class defines attributes, valid values, and usage which is generated
     * from a given json schema.
     * http://tools.ietf.org/html/draft-zyp-json-schema-03#section-5
     *
     */
    class Dokan_Model implements \ArrayAccess
    {
        /**
         * If you need to specify a NULL JSON value, use Dokan_Model::NULL_VALUE
         * instead - it will be replaced when converting to JSON with a real null.
         */
        const NULL_VALUE = "{}gapi-php-null";
        protected $internal_gapi_mappings = array();
        protected $modelData = array();
        protected $processed = array();
        /**
         * Polymorphic - accepts a variable number of arguments dependent
         * on the type of the model subclass.
         */
        final public function __construct()
        {
        }
        /**
         * Getter that handles passthrough access to the data array, and lazy object creation.
         * @param string $key Property name.
         * @return mixed The value if any, or null.
         */
        public function __get($key)
        {
        }
        /**
         * Initialize this object's properties from an array.
         *
         * @param array $array Used to seed this object's properties.
         * @return void
         */
        protected function mapTypes($array)
        {
        }
        /**
         * Blank initialiser to be used in subclasses to do  post-construction initialisation - this
         * avoids the need for subclasses to have to implement the variadics handling in their
         * constructors.
         */
        protected function gapiInit()
        {
        }
        /**
         * Create a simplified object suitable for straightforward
         * conversion to JSON. This is relatively expensive
         * due to the usage of reflection, but shouldn't be called
         * a whole lot, and is the most straightforward way to filter.
         */
        public function toSimpleObject()
        {
        }
        /**
         * Returns true only if the array is associative.
         * @param array $array
         * @return bool True if the array is associative.
         */
        protected function isAssociativeArray($array)
        {
        }
        /**
         * Verify if $obj is an array.
         * @throws Dokan_Exception Thrown if $obj isn't an array.
         * @param array $obj Items that should be validated.
         * @param string $method Method expecting an array as an argument.
         */
        public function assertIsArray($obj, $method)
        {
        }
        public function offsetExists($offset)
        {
        }
        public function offsetGet($offset)
        {
        }
        public function offsetSet($offset, $value)
        {
        }
        public function offsetUnset($offset)
        {
        }
        protected function keyType($key)
        {
        }
        protected function dataType($key)
        {
        }
        public function __isset($key)
        {
        }
        public function __unset($key)
        {
        }
    }
    /**
     * Extension to the regular Dokan_Model that automatically
     * exposes the items array for iteration, so you can just
     * iterate over the object rather than a reference inside.
     */
    class Dokan_Collection extends \Dokan_Model implements \Iterator, \Countable
    {
        protected $collection_key = 'items';
        public function rewind()
        {
        }
        public function current()
        {
        }
        public function key()
        {
        }
        public function next()
        {
        }
        public function valid()
        {
        }
        public function count()
        {
        }
        public function offsetExists($offset)
        {
        }
        public function offsetGet($offset)
        {
        }
        public function offsetSet($offset, $value)
        {
        }
        public function offsetUnset($offset)
        {
        }
    }
    /*
     * Copyright 2010 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * A class to contain the library configuration for the Google API client.
     */
    class Dokan_Config
    {
        const GZIP_DISABLED = \true;
        const GZIP_ENABLED = \false;
        const GZIP_UPLOADS_ENABLED = \true;
        const GZIP_UPLOADS_DISABLED = \false;
        const USE_AUTO_IO_SELECTION = "auto";
        const TASK_RETRY_NEVER = 0;
        const TASK_RETRY_ONCE = 1;
        const TASK_RETRY_ALWAYS = -1;
        protected $configuration;
        /**
         * Create a new Dokan_Config. Can accept an ini file location with the
         * local configuration. For example:
         *     application_name="My App"
         *
         * @param [$ini_file_location] - optional - The location of the ini file to load
         */
        public function __construct($ini_file_location = \null)
        {
        }
        /**
         * Set configuration specific to a given class.
         * $config->setClassConfig('Dokan_Cache_File',
         *   array('directory' => '/tmp/cache'));
         * @param $class string The class name for the configuration
         * @param $config string key or an array of configuration values
         * @param $value string optional - if $config is a key, the value
         */
        public function setClassConfig($class, $config, $value = \null)
        {
        }
        public function getClassConfig($class, $key = \null)
        {
        }
        /**
         * Return the configured cache class.
         * @return string
         */
        public function getCacheClass()
        {
        }
        /**
         * Return the configured logger class.
         * @return string
         */
        public function getLoggerClass()
        {
        }
        /**
         * Return the configured Auth class.
         * @return string
         */
        public function getAuthClass()
        {
        }
        /**
         * Set the auth class.
         *
         * @param $class string the class name to set
         */
        public function setAuthClass($class)
        {
        }
        /**
         * Set the IO class.
         *
         * @param $class string the class name to set
         */
        public function setIoClass($class)
        {
        }
        /**
         * Set the cache class.
         *
         * @param $class string the class name to set
         */
        public function setCacheClass($class)
        {
        }
        /**
         * Set the logger class.
         *
         * @param $class string the class name to set
         */
        public function setLoggerClass($class)
        {
        }
        /**
         * Return the configured IO class.
         *
         * @return string
         */
        public function getIoClass()
        {
        }
        /**
         * Set the application name, this is included in the User-Agent HTTP header.
         * @param string $name
         */
        public function setApplicationName($name)
        {
        }
        /**
         * @return string the name of the application
         */
        public function getApplicationName()
        {
        }
        /**
         * Set the client ID for the auth class.
         * @param $clientId string - the API console client ID
         */
        public function setClientId($clientId)
        {
        }
        /**
         * Set the client secret for the auth class.
         * @param $secret string - the API console client secret
         */
        public function setClientSecret($secret)
        {
        }
        /**
         * Set the redirect uri for the auth class. Note that if using the
         * Javascript based sign in flow, this should be the string 'postmessage'.
         *
         * @param $uri string - the URI that users should be redirected to
         */
        public function setRedirectUri($uri)
        {
        }
        /**
         * Set the app activities for the auth class.
         * @param $rva string a space separated list of app activity types
         */
        public function setRequestVisibleActions($rva)
        {
        }
        /**
         * Set the the access type requested (offline or online.)
         * @param $access string - the access type
         */
        public function setAccessType($access)
        {
        }
        /**
         * Set when to show the approval prompt (auto or force)
         * @param $approval string - the approval request
         */
        public function setApprovalPrompt($approval)
        {
        }
        /**
         * Set the login hint (email address or sub identifier)
         * @param $hint string
         */
        public function setLoginHint($hint)
        {
        }
        /**
         * Set the developer key for the auth class. Note that this is separate value
         * from the client ID - if it looks like a URL, its a client ID!
         * @param $key string - the API console developer key
         */
        public function setDeveloperKey($key)
        {
        }
        /**
         * Set the hd (hosted domain) parameter streamlines the login process for
         * Google Apps hosted accounts. By including the domain of the user, you
         * restrict sign-in to accounts at that domain.
         *
         * This should not be used to ensure security on your application - check
         * the hd values within an id token (@see Dokan_Auth_LoginTicket) after sign
         * in to ensure that the user is from the domain you were expecting.
         *
         * @param $hd string - the domain to use.
         */
        public function setHostedDomain($hd)
        {
        }
        /**
         * Set the prompt hint. Valid values are none, consent and select_account.
         * If no value is specified and the user has not previously authorized
         * access, then the user is shown a consent screen.
         * @param $prompt string
         */
        public function setPrompt($prompt)
        {
        }
        /**
         * openid.realm is a parameter from the OpenID 2.0 protocol, not from OAuth
         * 2.0. It is used in OpenID 2.0 requests to signify the URL-space for which
         * an authentication request is valid.
         * @param $realm string - the URL-space to use.
         */
        public function setOpenidRealm($realm)
        {
        }
        /**
         * If this is provided with the value true, and the authorization request is
         * granted, the authorization will include any previous authorizations
         * granted to this user/application combination for other scopes.
         * @param $include boolean - the URL-space to use.
         */
        public function setIncludeGrantedScopes($include)
        {
        }
        /**
         * @return string the base URL to use for API calls
         */
        public function getBasePath()
        {
        }
    }
    /**
     * Class to handle batched requests to the Google API service.
     */
    class Dokan_Http_Batch
    {
        public function __construct(\Dokan_Client $client, $boundary = \false, $rootUrl = '', $batchPath = '')
        {
        }
        public function add(\Dokan_Http_Request $request, $key = \false)
        {
        }
        public function execute()
        {
        }
        public function parseResponse(\Dokan_Http_Request $response)
        {
        }
    }
    /**
     * Implement the caching directives specified in rfc2616. This
     * implementation is guided by the guidance offered in rfc2616-sec13.
     */
    class Dokan_Http_CacheParser
    {
        public static $CACHEABLE_HTTP_METHODS = array('GET', 'HEAD');
        public static $CACHEABLE_STATUS_CODES = array('200', '203', '300', '301');
        /**
         * Check if an HTTP request can be cached by a private local cache.
         *
         * @static
         * @param Dokan_Http_Request $resp
         * @return bool True if the request is cacheable.
         * False if the request is uncacheable.
         */
        public static function isRequestCacheable(\Dokan_Http_Request $resp)
        {
        }
        /**
         * Check if an HTTP response can be cached by a private local cache.
         *
         * @static
         * @param Dokan_Http_Request $resp
         * @return bool True if the response is cacheable.
         * False if the response is un-cacheable.
         */
        public static function isResponseCacheable(\Dokan_Http_Request $resp)
        {
        }
        /**
         * @static
         * @param Dokan_Http_Request $resp
         * @return bool True if the HTTP response is considered to be expired.
         * False if it is considered to be fresh.
         */
        public static function isExpired(\Dokan_Http_Request $resp)
        {
        }
        /**
         * Determine if a cache entry should be revalidated with by the origin.
         *
         * @param Dokan_Http_Request $response
         * @return bool True if the entry is expired, else return false.
         */
        public static function mustRevalidate(\Dokan_Http_Request $response)
        {
        }
    }
    /**
     * Manage large file uploads, which may be media but can be any type
     * of sizable data.
     */
    class Dokan_Http_MediaFileUpload
    {
        const UPLOAD_MEDIA_TYPE = 'media';
        const UPLOAD_MULTIPART_TYPE = 'multipart';
        const UPLOAD_RESUMABLE_TYPE = 'resumable';
        /**
         * @param $mimeType string
         * @param $data string The bytes you want to upload.
         * @param $resumable bool
         * @param bool $chunkSize File will be uploaded in chunks of this many bytes.
         * only used if resumable=True
         */
        public function __construct(\Dokan_Client $client, \Dokan_Http_Request $request, $mimeType, $data, $resumable = \false, $chunkSize = \false, $boundary = \false)
        {
        }
        /**
         * Set the size of the file that is being uploaded.
         * @param $size - int file size in bytes
         */
        public function setFileSize($size)
        {
        }
        /**
         * Return the progress on the upload
         * @return int progress in bytes uploaded.
         */
        public function getProgress()
        {
        }
        /**
         * Return the HTTP result code from the last call made.
         * @return int code
         */
        public function getHttpResultCode()
        {
        }
        /**
         * Send the next part of the file to upload.
         * @param [$chunk] the next set of bytes to send. If false will used $data passed
         * at construct time.
         */
        public function nextChunk($chunk = \false)
        {
        }
        /**
         * Resume a previously unfinished upload
         * @param $resumeUri the resume-URI of the unfinished, resumable upload.
         */
        public function resume($resumeUri)
        {
        }
        /**
         * Valid upload types:
         * - resumable (UPLOAD_RESUMABLE_TYPE)
         * - media (UPLOAD_MEDIA_TYPE)
         * - multipart (UPLOAD_MULTIPART_TYPE)
         * @param $meta
         * @return string
         * @visible for testing
         */
        public function getUploadType($meta)
        {
        }
        public function getResumeUri()
        {
        }
        public function setChunkSize($chunkSize)
        {
        }
    }
    /**
     * This class implements the RESTful transport of apiServiceRequest()'s
     */
    class Dokan_Http_REST
    {
        /**
         * Executes a Dokan_Http_Request and (if applicable) automatically retries
         * when errors occur.
         *
         * @param Dokan_Client $client
         * @param Dokan_Http_Request $req
         * @return array decoded result
         * @throws Dokan_Service_Exception on server side error (ie: not authenticated,
         *  invalid or malformed post body, invalid url)
         */
        public static function execute(\Dokan_Client $client, \Dokan_Http_Request $req)
        {
        }
        /**
         * Executes a Dokan_Http_Request
         *
         * @param Dokan_Client $client
         * @param Dokan_Http_Request $req
         * @return array decoded result
         * @throws Dokan_Service_Exception on server side error (ie: not authenticated,
         *  invalid or malformed post body, invalid url)
         */
        public static function doExecute(\Dokan_Client $client, \Dokan_Http_Request $req)
        {
        }
        /**
         * Decode an HTTP Response.
         * @static
         * @throws Dokan_Service_Exception
         * @param Dokan_Http_Request $response The http response to be decoded.
         * @param Dokan_Client $client
         * @return mixed|null
         */
        public static function decodeHttpResponse($response, \Dokan_Client $client = \null)
        {
        }
        /**
         * Parse/expand request parameters and create a fully qualified
         * request uri.
         * @static
         * @param string $servicePath
         * @param string $restPath
         * @param array $params
         * @return string $requestUrl
         */
        public static function createRequestUri($servicePath, $restPath, $params)
        {
        }
    }
    /**
     * HTTP Request to be executed by IO classes. Upon execution, the
     * responseHttpCode, responseHeaders and responseBody will be filled in.
     *
     * @author Chris Chabot <chabotc@google.com>
     * @author Chirag Shah <chirags@google.com>
     *
     */
    class Dokan_Http_Request
    {
        const GZIP_UA = " (gzip)";
        protected $queryParams;
        protected $requestMethod;
        protected $requestHeaders;
        protected $baseComponent = \null;
        protected $path;
        protected $postBody;
        protected $userAgent;
        protected $canGzip = \null;
        protected $responseHttpCode;
        protected $responseHeaders;
        protected $responseBody;
        protected $expectedClass;
        protected $expectedRaw = \false;
        public $accessKey;
        public function __construct($url, $method = 'GET', $headers = array(), $postBody = \null)
        {
        }
        /**
         * Misc function that returns the base url component of the $url
         * used by the OAuth signing class to calculate the base string
         * @return string The base url component of the $url.
         */
        public function getBaseComponent()
        {
        }
        /**
         * Set the base URL that path and query parameters will be added to.
         * @param $baseComponent string
         */
        public function setBaseComponent($baseComponent)
        {
        }
        /**
         * Enable support for gzipped responses with this request.
         */
        public function enableGzip()
        {
        }
        /**
         * Disable support for gzip responses with this request.
         */
        public function disableGzip()
        {
        }
        /**
         * Can this request accept a gzip response?
         * @return bool
         */
        public function canGzip()
        {
        }
        /**
         * Misc function that returns an array of the query parameters of the current
         * url used by the OAuth signing class to calculate the signature
         * @return array Query parameters in the query string.
         */
        public function getQueryParams()
        {
        }
        /**
         * Set a new query parameter.
         * @param $key - string to set, does not need to be URL encoded
         * @param $value - string to set, does not need to be URL encoded
         */
        public function setQueryParam($key, $value)
        {
        }
        /**
         * @return string HTTP Response Code.
         */
        public function getResponseHttpCode()
        {
        }
        /**
         * @param int $responseHttpCode HTTP Response Code.
         */
        public function setResponseHttpCode($responseHttpCode)
        {
        }
        /**
         * @return $responseHeaders (array) HTTP Response Headers.
         */
        public function getResponseHeaders()
        {
        }
        /**
         * @return string HTTP Response Body
         */
        public function getResponseBody()
        {
        }
        /**
         * Set the class the response to this request should expect.
         *
         * @param $class string the class name
         */
        public function setExpectedClass($class)
        {
        }
        /**
         * Retrieve the expected class the response should expect.
         * @return string class name
         */
        public function getExpectedClass()
        {
        }
        /**
         * Enable expected raw response
         */
        public function enableExpectedRaw()
        {
        }
        /**
         * Disable expected raw response
         */
        public function disableExpectedRaw()
        {
        }
        /**
         * Expected raw response or not.
         * @return boolean expected raw response
         */
        public function getExpectedRaw()
        {
        }
        /**
         * @param array $headers The HTTP response headers
         * to be normalized.
         */
        public function setResponseHeaders($headers)
        {
        }
        /**
         * @param string $key
         * @return array|boolean Returns the requested HTTP header or
         * false if unavailable.
         */
        public function getResponseHeader($key)
        {
        }
        /**
         * @param string $responseBody The HTTP response body.
         */
        public function setResponseBody($responseBody)
        {
        }
        /**
         * @return string $url The request URL.
         */
        public function getUrl()
        {
        }
        /**
         * @return string $method HTTP Request Method.
         */
        public function getRequestMethod()
        {
        }
        /**
         * @return array $headers HTTP Request Headers.
         */
        public function getRequestHeaders()
        {
        }
        /**
         * @param string $key
         * @return array|boolean Returns the requested HTTP header or
         * false if unavailable.
         */
        public function getRequestHeader($key)
        {
        }
        /**
         * @return string $postBody HTTP Request Body.
         */
        public function getPostBody()
        {
        }
        /**
         * @param string $url the url to set
         */
        public function setUrl($url)
        {
        }
        /**
         * @param string $method Set he HTTP Method and normalize
         * it to upper-case, as required by HTTP.
         *
         */
        public function setRequestMethod($method)
        {
        }
        /**
         * @param array $headers The HTTP request headers
         * to be set and normalized.
         */
        public function setRequestHeaders($headers)
        {
        }
        /**
         * @param string $postBody the postBody to set
         */
        public function setPostBody($postBody)
        {
        }
        /**
         * Set the User-Agent Header.
         * @param string $userAgent The User-Agent.
         */
        public function setUserAgent($userAgent)
        {
        }
        /**
         * @return string The User-Agent.
         */
        public function getUserAgent()
        {
        }
        /**
         * Returns a cache key depending on if this was an OAuth signed request
         * in which case it will use the non-signed url and access key to make this
         * cache key unique per authenticated user, else use the plain request url
         * @return string The md5 hash of the request cache key.
         */
        public function getCacheKey()
        {
        }
        public function getParsedCacheControl()
        {
        }
        /**
         * @param string $id
         * @return string A string representation of the HTTP Request.
         */
        public function toBatchString($id)
        {
        }
        /**
         * If we're POSTing and have no body to send, we can send the query
         * parameters in there, which avoids length issues with longer query
         * params.
         */
        public function maybeMoveParametersToBody()
        {
        }
    }
    abstract class Dokan_IO_Abstract
    {
        const UNKNOWN_CODE = 0;
        const FORM_URLENCODED = 'application/x-www-form-urlencoded';
        /** @var Dokan_Client */
        protected $client;
        public function __construct(\Dokan_Client $client)
        {
        }
        /**
         * Executes a Dokan_Http_Request
         * @param Dokan_Http_Request $request the http request to be executed
         * @return array containing response headers, body, and http code
         * @throws Dokan_IO_Exception on curl or IO error
         */
        abstract public function executeRequest(\Dokan_Http_Request $request);
        /**
         * Set options that update the transport implementation's behavior.
         * @param $options
         */
        abstract public function setOptions($options);
        /**
         * Set the maximum request time in seconds.
         * @param $timeout in seconds
         */
        abstract public function setTimeout($timeout);
        /**
         * Get the maximum request time in seconds.
         * @return timeout in seconds
         */
        abstract public function getTimeout();
        /**
         * Test for the presence of a cURL header processing bug
         *
         * The cURL bug was present in versions prior to 7.30.0 and caused the header
         * length to be miscalculated when a "Connection established" header added by
         * some proxies was present.
         *
         * @return boolean
         */
        abstract protected function needsQuirk();
        /**
         * @visible for testing.
         * Cache the response to an HTTP request if it is cacheable.
         * @param Dokan_Http_Request $request
         * @return bool Returns true if the insertion was successful.
         * Otherwise, return false.
         */
        public function setCachedRequest(\Dokan_Http_Request $request)
        {
        }
        /**
         * Execute an HTTP Request
         *
         * @param Dokan_Http_Request $request the http request to be executed
         * @return Dokan_Http_Request http request with the response http code,
         * response headers and response body filled in
         * @throws Dokan_IO_Exception on curl or IO error
         */
        public function makeRequest(\Dokan_Http_Request $request)
        {
        }
        /**
         * @visible for testing.
         * @param Dokan_Http_Request $request
         * @return Dokan_Http_Request|bool Returns the cached object or
         * false if the operation was unsuccessful.
         */
        public function getCachedRequest(\Dokan_Http_Request $request)
        {
        }
        /**
         * @visible for testing
         * Process an http request that contains an enclosed entity.
         * @param Dokan_Http_Request $request
         * @return Dokan_Http_Request Processed request with the enclosed entity.
         */
        public function processEntityRequest(\Dokan_Http_Request $request)
        {
        }
        /**
         * Check if an already cached request must be revalidated, and if so update
         * the request with the correct ETag headers.
         * @param Dokan_Http_Request $cached A previously cached response.
         * @param Dokan_Http_Request $request The outbound request.
         * return bool If the cached object needs to be revalidated, false if it is
         * still current and can be re-used.
         */
        protected function checkMustRevalidateCachedRequest($cached, $request)
        {
        }
        /**
         * Update a cached request, using the headers from the last response.
         * @param Dokan_Http_Request $cached A previously cached response.
         * @param mixed Associative array of response headers from the last request.
         */
        protected function updateCachedRequest($cached, $responseHeaders)
        {
        }
        /**
         * Used by the IO lib and also the batch processing.
         *
         * @param $respData
         * @param $headerSize
         * @return array
         */
        public function parseHttpResponse($respData, $headerSize)
        {
        }
        /**
         * Parse out headers from raw headers
         * @param rawHeaders array or string
         * @return array
         */
        public function getHttpResponseHeaders($rawHeaders)
        {
        }
    }
    class Dokan_IO_Curl extends \Dokan_IO_Abstract
    {
        // cURL hex representation of version 7.30.0
        const NO_QUIRK_VERSION = 0x71e00;
        public function __construct(\Dokan_Client $client)
        {
        }
        /**
         * Execute an HTTP Request
         *
         * @param Dokan_Http_Request $request the http request to be executed
         * @return array containing response headers, body, and http code
         * @throws Dokan_IO_Exception on curl or IO error
         */
        public function executeRequest(\Dokan_Http_Request $request)
        {
        }
        /**
         * Set options that update the transport implementation's behavior.
         * @param $options
         */
        public function setOptions($options)
        {
        }
        /**
         * Set the maximum request time in seconds.
         * @param $timeout in seconds
         */
        public function setTimeout($timeout)
        {
        }
        /**
         * Get the maximum request time in seconds.
         * @return timeout in seconds
         */
        public function getTimeout()
        {
        }
        /**
         * Test for the presence of a cURL header processing bug
         *
         * {@inheritDoc}
         *
         * @return boolean
         */
        protected function needsQuirk()
        {
        }
    }
    /**
     * Interface for checking how many times a given task can be retried following
     * a failure.
     */
    interface Dokan_Task_Retryable
    {
        /**
         * Gets the number of times the associated task can be retried.
         *
         * NOTE: -1 is returned if the task can be retried indefinitely
         *
         * @return integer
         */
        public function allowedRetries();
    }
    class Dokan_IO_Exception extends \Dokan_Exception implements \Dokan_Task_Retryable
    {
        /**
         * Creates a new IO exception with an optional retry map.
         *
         * @param string $message
         * @param int $code
         * @param Exception|null $previous
         * @param array|null $retryMap Map of errors with retry counts.
         */
        public function __construct($message, $code = 0, \Exception $previous = \null, array $retryMap = \null)
        {
        }
        /**
         * Gets the number of times the associated task can be retried.
         *
         * NOTE: -1 is returned if the task can be retried indefinitely
         *
         * @return integer
         */
        public function allowedRetries()
        {
        }
    }
    class Dokan_IO_Stream extends \Dokan_IO_Abstract
    {
        const TIMEOUT = "timeout";
        const ZLIB = "compress.zlib://";
        public function __construct(\Dokan_Client $client)
        {
        }
        /**
         * Execute an HTTP Request
         *
         * @param Dokan_Http_Request $request the http request to be executed
         * @return array containing response headers, body, and http code
         * @throws Dokan_IO_Exception on curl or IO error
         */
        public function executeRequest(\Dokan_Http_Request $request)
        {
        }
        /**
         * Set options that update the transport implementation's behavior.
         * @param $options
         */
        public function setOptions($options)
        {
        }
        /**
         * Method to handle errors, used for error handling around
         * stream connection methods.
         */
        public function trapError($errno, $errstr)
        {
        }
        /**
         * Set the maximum request time in seconds.
         * @param $timeout in seconds
         */
        public function setTimeout($timeout)
        {
        }
        /**
         * Get the maximum request time in seconds.
         * @return timeout in seconds
         */
        public function getTimeout()
        {
        }
        /**
         * Test for the presence of a cURL header processing bug
         *
         * {@inheritDoc}
         *
         * @return boolean
         */
        protected function needsQuirk()
        {
        }
        protected function getHttpResponseCode($response_headers)
        {
        }
    }
    /**
     * Abstract logging class based on the PSR-3 standard.
     *
     * NOTE: We don't implement `Psr\Log\LoggerInterface` because we need to
     * maintain PHP 5.2 support.
     *
     * @see https://github.com/php-fig/fig-standards/blob/master/accepted/PSR-3-logger-interface.md
     */
    abstract class Dokan_Logger_Abstract
    {
        /**
         * Default log format
         */
        const DEFAULT_LOG_FORMAT = "[%datetime%] %level%: %message% %context%\n";
        /**
         * Default date format
         *
         * Example: 16/Nov/2014:03:26:16 -0500
         */
        const DEFAULT_DATE_FORMAT = 'd/M/Y:H:i:s O';
        /**
         * System is unusable
         */
        const EMERGENCY = 'emergency';
        /**
         * Action must be taken immediately
         *
         * Example: Entire website down, database unavailable, etc. This should
         * trigger the SMS alerts and wake you up.
         */
        const ALERT = 'alert';
        /**
         * Critical conditions
         *
         * Example: Application component unavailable, unexpected exception.
         */
        const CRITICAL = 'critical';
        /**
         * Runtime errors that do not require immediate action but should typically
         * be logged and monitored.
         */
        const ERROR = 'error';
        /**
         * Exceptional occurrences that are not errors.
         *
         * Example: Use of deprecated APIs, poor use of an API, undesirable things
         * that are not necessarily wrong.
         */
        const WARNING = 'warning';
        /**
         * Normal but significant events.
         */
        const NOTICE = 'notice';
        /**
         * Interesting events.
         *
         * Example: User logs in, SQL logs.
         */
        const INFO = 'info';
        /**
         * Detailed debug information.
         */
        const DEBUG = 'debug';
        /**
         * @var array $levels Logging levels
         */
        protected static $levels = array(self::EMERGENCY => 600, self::ALERT => 550, self::CRITICAL => 500, self::ERROR => 400, self::WARNING => 300, self::NOTICE => 250, self::INFO => 200, self::DEBUG => 100);
        /**
         * @var integer $level The minimum logging level
         */
        protected $level = self::DEBUG;
        /**
         * @var string $logFormat The current log format
         */
        protected $logFormat = self::DEFAULT_LOG_FORMAT;
        /**
         * @var string $dateFormat The current date format
         */
        protected $dateFormat = self::DEFAULT_DATE_FORMAT;
        /**
         * @var boolean $allowNewLines If newlines are allowed
         */
        protected $allowNewLines = \false;
        /**
         * @param Dokan_Client $client  The current Google client
         */
        public function __construct(\Dokan_Client $client)
        {
        }
        /**
         * Sets the minimum logging level that this logger handles.
         *
         * @param integer $level
         */
        public function setLevel($level)
        {
        }
        /**
         * Checks if the logger should handle messages at the provided level.
         *
         * @param  integer $level
         * @return boolean
         */
        public function shouldHandle($level)
        {
        }
        /**
         * System is unusable.
         *
         * @param string $message The log message
         * @param array $context  The log context
         */
        public function emergency($message, array $context = array())
        {
        }
        /**
         * Action must be taken immediately.
         *
         * Example: Entire website down, database unavailable, etc. This should
         * trigger the SMS alerts and wake you up.
         *
         * @param string $message The log message
         * @param array $context  The log context
         */
        public function alert($message, array $context = array())
        {
        }
        /**
         * Critical conditions.
         *
         * Example: Application component unavailable, unexpected exception.
         *
         * @param string $message The log message
         * @param array $context  The log context
         */
        public function critical($message, array $context = array())
        {
        }
        /**
         * Runtime errors that do not require immediate action but should typically
         * be logged and monitored.
         *
         * @param string $message The log message
         * @param array $context  The log context
         */
        public function error($message, array $context = array())
        {
        }
        /**
         * Exceptional occurrences that are not errors.
         *
         * Example: Use of deprecated APIs, poor use of an API, undesirable things
         * that are not necessarily wrong.
         *
         * @param string $message The log message
         * @param array $context  The log context
         */
        public function warning($message, array $context = array())
        {
        }
        /**
         * Normal but significant events.
         *
         * @param string $message The log message
         * @param array $context  The log context
         */
        public function notice($message, array $context = array())
        {
        }
        /**
         * Interesting events.
         *
         * Example: User logs in, SQL logs.
         *
         * @param string $message The log message
         * @param array $context  The log context
         */
        public function info($message, array $context = array())
        {
        }
        /**
         * Detailed debug information.
         *
         * @param string $message The log message
         * @param array $context  The log context
         */
        public function debug($message, array $context = array())
        {
        }
        /**
         * Logs with an arbitrary level.
         *
         * @param mixed $level    The log level
         * @param string $message The log message
         * @param array $context  The log context
         */
        public function log($level, $message, array $context = array())
        {
        }
        /**
         * Interpolates log variables into the defined log format.
         *
         * @param  array $variables The log variables.
         * @return string
         */
        protected function interpolate(array $variables = array())
        {
        }
        /**
         * Reverses JSON encoded PHP arrays and objects so that they log better.
         *
         * @param array $context The log context
         */
        protected function reverseJsonInContext(array &$context)
        {
        }
        /**
         * Exports a PHP value for logging to a string.
         *
         * @param mixed $value The value to
         */
        protected function export($value)
        {
        }
        /**
         * Converts a given log level to the integer form.
         *
         * @param  mixed $level   The logging level
         * @return integer $level The normalized level
         * @throws Dokan_Logger_Exception If $level is invalid
         */
        protected function normalizeLevel($level)
        {
        }
        /**
         * Writes a message to the current log implementation.
         *
         * @param string $message The message
         */
        abstract protected function write($message);
    }
    class Dokan_Logger_Exception extends \Dokan_Exception
    {
    }
    /**
     * File logging class based on the PSR-3 standard.
     *
     * This logger writes to a PHP stream resource.
     */
    class Dokan_Logger_File extends \Dokan_Logger_Abstract
    {
        /**
         * {@inheritdoc}
         */
        public function __construct(\Dokan_Client $client)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function write($message)
        {
        }
        public function __destruct()
        {
        }
    }
    /**
     * Null logger based on the PSR-3 standard.
     *
     * This logger simply discards all messages.
     */
    class Dokan_Logger_Null extends \Dokan_Logger_Abstract
    {
        /**
         * {@inheritdoc}
         */
        public function shouldHandle($level)
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function write($message, array $context = array())
        {
        }
    }
    /**
     * Psr logging class based on the PSR-3 standard.
     *
     * This logger will delegate all logging to a PSR-3 compatible logger specified
     * with the `Dokan_Logger_Psr::setLogger()` method.
     */
    class Dokan_Logger_Psr extends \Dokan_Logger_Abstract
    {
        /**
         * @param Dokan_Client $client           The current Google client
         * @param Psr\Log\LoggerInterface $logger PSR-3 logger where logging will be delegated.
         */
        public function __construct(
            \Dokan_Client $client,
            /*Psr\Log\LoggerInterface*/
            $logger = \null
        )
        {
        }
        /**
         * Sets the PSR-3 logger where logging will be delegated.
         *
         * NOTE: The `$logger` should technically implement
         * `Psr\Log\LoggerInterface`, but we don't explicitly require this so that
         * we can be compatible with PHP 5.2.
         *
         * @param Psr\Log\LoggerInterface $logger The PSR-3 logger
         */
        public function setLogger(
            /*Psr\Log\LoggerInterface*/
            $logger
        )
        {
        }
        /**
         * {@inheritdoc}
         */
        public function shouldHandle($level)
        {
        }
        /**
         * {@inheritdoc}
         */
        public function log($level, $message, array $context = array())
        {
        }
        /**
         * {@inheritdoc}
         */
        protected function write($message, array $context = array())
        {
        }
    }
    /*
     * Copyright 2010 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    class Dokan_Service
    {
        public $batchPath;
        public $rootUrl;
        public $version;
        public $servicePath;
        public $availableScopes;
        public $resource;
        public function __construct(\Dokan_Client $client)
        {
        }
        /**
         * Return the associated Dokan_Client class.
         * @return Dokan_Client
         */
        public function getClient()
        {
        }
        /**
         * Create a new HTTP Batch handler for this service
         *
         * @return Dokan_Http_Batch
         */
        public function createBatch()
        {
        }
    }
    /*
     * Licensed under the Apache License, Version 2.0 (the "License"); you may not
     * use this file except in compliance with the License. You may obtain a copy of
     * the License at
     *
     * http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
     * WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
     * License for the specific language governing permissions and limitations under
     * the License.
     */
    /**
     * Service definition for Analytics (v3).
     *
     * <p>
     * View and manage your Google Analytics data</p>
     *
     * <p>
     * For more information about this service, see the API
     * <a href="https://developers.google.com/analytics/" target="_blank">Documentation</a>
     * </p>
     *
     * @author Google, Inc.
     */
    class Dokan_Service_Analytics extends \Dokan_Service
    {
        /** View and manage your Google Analytics data. */
        const ANALYTICS = "https://www.googleapis.com/auth/analytics";
        /** Edit Google Analytics management entities. */
        const ANALYTICS_EDIT = "https://www.googleapis.com/auth/analytics.edit";
        /** Manage Google Analytics Account users by email address. */
        const ANALYTICS_MANAGE_USERS = "https://www.googleapis.com/auth/analytics.manage.users";
        /** View Google Analytics user permissions. */
        const ANALYTICS_MANAGE_USERS_READONLY = "https://www.googleapis.com/auth/analytics.manage.users.readonly";
        /** Create a new Google Analytics account along with its default property and view. */
        const ANALYTICS_PROVISION = "https://www.googleapis.com/auth/analytics.provision";
        /** View your Google Analytics data. */
        const ANALYTICS_READONLY = "https://www.googleapis.com/auth/analytics.readonly";
        public $data_ga;
        public $data_mcf;
        public $data_realtime;
        public $management_accountSummaries;
        public $management_accountUserLinks;
        public $management_accounts;
        public $management_customDataSources;
        public $management_customDimensions;
        public $management_customMetrics;
        public $management_experiments;
        public $management_filters;
        public $management_goals;
        public $management_profileFilterLinks;
        public $management_profileUserLinks;
        public $management_profiles;
        public $management_segments;
        public $management_unsampledReports;
        public $management_uploads;
        public $management_webPropertyAdWordsLinks;
        public $management_webproperties;
        public $management_webpropertyUserLinks;
        public $metadata_columns;
        public $provisioning;
        /**
         * Constructs the internal representation of the Analytics service.
         *
         * @param Dokan_Client $client
         */
        public function __construct(\Dokan_Client $client)
        {
        }
    }
    /**
     * Implements the actual methods/resources of the discovered Google API using magic function
     * calling overloading (__call()), which on call will see if the method name (plus.activities.list)
     * is available in this service, and if so construct an apiHttpRequest representing it.
     *
     */
    class Dokan_Service_Resource
    {
        public function __construct($service, $serviceName, $resourceName, $resource)
        {
        }
        /**
         * TODO: This function needs simplifying.
         * @param $name
         * @param $arguments
         * @param $expected_class - optional, the expected class name
         * @return Dokan_Http_Request|expected_class
         * @throws Dokan_Exception
         */
        public function call($name, $arguments, $expected_class = \null)
        {
        }
        protected function convertToArrayAndStripNulls($o)
        {
        }
    }
    /**
     * The "data" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $data = $analyticsService->data;
     *  </code>
     */
    class Dokan_Service_Analytics_Data_Resource extends \Dokan_Service_Resource
    {
    }
    /**
     * The "ga" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $ga = $analyticsService->ga;
     *  </code>
     */
    class Dokan_Service_Analytics_DataGa_Resource extends \Dokan_Service_Resource
    {
        /**
         * Returns Analytics data for a view (profile). (ga.get)
         *
         * @param string $ids Unique table ID for retrieving Analytics data. Table ID is
         * of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.
         * @param string $startDate Start date for fetching Analytics data. Requests can
         * specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g.,
         * today, yesterday, or 7daysAgo). The default value is 7daysAgo.
         * @param string $endDate End date for fetching Analytics data. Request can
         * should specify an end date formatted as YYYY-MM-DD, or as a relative date
         * (e.g., today, yesterday, or 7daysAgo). The default value is yesterday.
         * @param string $metrics A comma-separated list of Analytics metrics. E.g.,
         * 'ga:sessions,ga:pageviews'. At least one metric must be specified.
         * @param array $optParams Optional parameters.
         *
         * @opt_param string dimensions A comma-separated list of Analytics dimensions.
         * E.g., 'ga:browser,ga:city'.
         * @opt_param string filters A comma-separated list of dimension or metric
         * filters to be applied to Analytics data.
         * @opt_param bool include-empty-rows The response will include empty rows if
         * this parameter is set to true, the default is true
         * @opt_param int max-results The maximum number of entries to include in this
         * feed.
         * @opt_param string output The selected format for the response. Default format
         * is JSON.
         * @opt_param string samplingLevel The desired sampling level.
         * @opt_param string segment An Analytics segment to be applied to data.
         * @opt_param string sort A comma-separated list of dimensions or metrics that
         * determine the sort order for Analytics data.
         * @opt_param int start-index An index of the first entity to retrieve. Use this
         * parameter as a pagination mechanism along with the max-results parameter.
         * @return Dokan_Service_Analytics_GaData
         */
        public function get($ids, $startDate, $endDate, $metrics, $optParams = array())
        {
        }
    }
    /**
     * The "mcf" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $mcf = $analyticsService->mcf;
     *  </code>
     */
    class Dokan_Service_Analytics_DataMcf_Resource extends \Dokan_Service_Resource
    {
        /**
         * Returns Analytics Multi-Channel Funnels data for a view (profile). (mcf.get)
         *
         * @param string $ids Unique table ID for retrieving Analytics data. Table ID is
         * of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.
         * @param string $startDate Start date for fetching Analytics data. Requests can
         * specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g.,
         * today, yesterday, or 7daysAgo). The default value is 7daysAgo.
         * @param string $endDate End date for fetching Analytics data. Requests can
         * specify a start date formatted as YYYY-MM-DD, or as a relative date (e.g.,
         * today, yesterday, or 7daysAgo). The default value is 7daysAgo.
         * @param string $metrics A comma-separated list of Multi-Channel Funnels
         * metrics. E.g., 'mcf:totalConversions,mcf:totalConversionValue'. At least one
         * metric must be specified.
         * @param array $optParams Optional parameters.
         *
         * @opt_param string dimensions A comma-separated list of Multi-Channel Funnels
         * dimensions. E.g., 'mcf:source,mcf:medium'.
         * @opt_param string filters A comma-separated list of dimension or metric
         * filters to be applied to the Analytics data.
         * @opt_param int max-results The maximum number of entries to include in this
         * feed.
         * @opt_param string samplingLevel The desired sampling level.
         * @opt_param string sort A comma-separated list of dimensions or metrics that
         * determine the sort order for the Analytics data.
         * @opt_param int start-index An index of the first entity to retrieve. Use this
         * parameter as a pagination mechanism along with the max-results parameter.
         * @return Dokan_Service_Analytics_McfData
         */
        public function get($ids, $startDate, $endDate, $metrics, $optParams = array())
        {
        }
    }
    /**
     * The "realtime" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $realtime = $analyticsService->realtime;
     *  </code>
     */
    class Dokan_Service_Analytics_DataRealtime_Resource extends \Dokan_Service_Resource
    {
        /**
         * Returns real time data for a view (profile). (realtime.get)
         *
         * @param string $ids Unique table ID for retrieving real time data. Table ID is
         * of the form ga:XXXX, where XXXX is the Analytics view (profile) ID.
         * @param string $metrics A comma-separated list of real time metrics. E.g.,
         * 'rt:activeUsers'. At least one metric must be specified.
         * @param array $optParams Optional parameters.
         *
         * @opt_param string dimensions A comma-separated list of real time dimensions.
         * E.g., 'rt:medium,rt:city'.
         * @opt_param string filters A comma-separated list of dimension or metric
         * filters to be applied to real time data.
         * @opt_param int max-results The maximum number of entries to include in this
         * feed.
         * @opt_param string sort A comma-separated list of dimensions or metrics that
         * determine the sort order for real time data.
         * @return Dokan_Service_Analytics_RealtimeData
         */
        public function get($ids, $metrics, $optParams = array())
        {
        }
    }
    /**
     * The "management" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $management = $analyticsService->management;
     *  </code>
     */
    class Dokan_Service_Analytics_Management_Resource extends \Dokan_Service_Resource
    {
    }
    /**
     * The "accountSummaries" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $accountSummaries = $analyticsService->accountSummaries;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementAccountSummaries_Resource extends \Dokan_Service_Resource
    {
        /**
         * Lists account summaries (lightweight tree comprised of
         * accounts/properties/profiles) to which the user has access.
         * (accountSummaries.listManagementAccountSummaries)
         *
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of account summaries to include
         * in this response, where the largest acceptable value is 1000.
         * @opt_param int start-index An index of the first entity to retrieve. Use this
         * parameter as a pagination mechanism along with the max-results parameter.
         * @return Dokan_Service_Analytics_AccountSummaries
         */
        public function listManagementAccountSummaries($optParams = array())
        {
        }
    }
    /**
     * The "accountUserLinks" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $accountUserLinks = $analyticsService->accountUserLinks;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementAccountUserLinks_Resource extends \Dokan_Service_Resource
    {
        /**
         * Removes a user from the given account. (accountUserLinks.delete)
         *
         * @param string $accountId Account ID to delete the user link for.
         * @param string $linkId Link ID to delete the user link for.
         * @param array $optParams Optional parameters.
         */
        public function delete($accountId, $linkId, $optParams = array())
        {
        }
        /**
         * Adds a new user to the given account. (accountUserLinks.insert)
         *
         * @param string $accountId Account ID to create the user link for.
         * @param Dokan_EntityUserLink $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_EntityUserLink
         */
        public function insert($accountId, \Dokan_Service_Analytics_EntityUserLink $postBody, $optParams = array())
        {
        }
        /**
         * Lists account-user links for a given account.
         * (accountUserLinks.listManagementAccountUserLinks)
         *
         * @param string $accountId Account ID to retrieve the user links for.
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of account-user links to
         * include in this response.
         * @opt_param int start-index An index of the first account-user link to
         * retrieve. Use this parameter as a pagination mechanism along with the max-
         * results parameter.
         * @return Dokan_Service_Analytics_EntityUserLinks
         */
        public function listManagementAccountUserLinks($accountId, $optParams = array())
        {
        }
        /**
         * Updates permissions for an existing user on the given account.
         * (accountUserLinks.update)
         *
         * @param string $accountId Account ID to update the account-user link for.
         * @param string $linkId Link ID to update the account-user link for.
         * @param Dokan_EntityUserLink $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_EntityUserLink
         */
        public function update($accountId, $linkId, \Dokan_Service_Analytics_EntityUserLink $postBody, $optParams = array())
        {
        }
    }
    /**
     * The "accounts" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $accounts = $analyticsService->accounts;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementAccounts_Resource extends \Dokan_Service_Resource
    {
        /**
         * Lists all accounts to which the user has access.
         * (accounts.listManagementAccounts)
         *
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of accounts to include in this
         * response.
         * @opt_param int start-index An index of the first account to retrieve. Use
         * this parameter as a pagination mechanism along with the max-results
         * parameter.
         * @return Dokan_Service_Analytics_Accounts
         */
        public function listManagementAccounts($optParams = array())
        {
        }
    }
    /**
     * The "customDataSources" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $customDataSources = $analyticsService->customDataSources;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementCustomDataSources_Resource extends \Dokan_Service_Resource
    {
        /**
         * List custom data sources to which the user has access.
         * (customDataSources.listManagementCustomDataSources)
         *
         * @param string $accountId Account Id for the custom data sources to retrieve.
         * @param string $webPropertyId Web property Id for the custom data sources to
         * retrieve.
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of custom data sources to
         * include in this response.
         * @opt_param int start-index A 1-based index of the first custom data source to
         * retrieve. Use this parameter as a pagination mechanism along with the max-
         * results parameter.
         * @return Dokan_Service_Analytics_CustomDataSources
         */
        public function listManagementCustomDataSources($accountId, $webPropertyId, $optParams = array())
        {
        }
    }
    /**
     * The "customDimensions" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $customDimensions = $analyticsService->customDimensions;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementCustomDimensions_Resource extends \Dokan_Service_Resource
    {
        /**
         * Get a custom dimension to which the user has access. (customDimensions.get)
         *
         * @param string $accountId Account ID for the custom dimension to retrieve.
         * @param string $webPropertyId Web property ID for the custom dimension to
         * retrieve.
         * @param string $customDimensionId The ID of the custom dimension to retrieve.
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_CustomDimension
         */
        public function get($accountId, $webPropertyId, $customDimensionId, $optParams = array())
        {
        }
        /**
         * Create a new custom dimension. (customDimensions.insert)
         *
         * @param string $accountId Account ID for the custom dimension to create.
         * @param string $webPropertyId Web property ID for the custom dimension to
         * create.
         * @param Dokan_CustomDimension $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_CustomDimension
         */
        public function insert($accountId, $webPropertyId, \Dokan_Service_Analytics_CustomDimension $postBody, $optParams = array())
        {
        }
        /**
         * Lists custom dimensions to which the user has access.
         * (customDimensions.listManagementCustomDimensions)
         *
         * @param string $accountId Account ID for the custom dimensions to retrieve.
         * @param string $webPropertyId Web property ID for the custom dimensions to
         * retrieve.
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of custom dimensions to include
         * in this response.
         * @opt_param int start-index An index of the first entity to retrieve. Use this
         * parameter as a pagination mechanism along with the max-results parameter.
         * @return Dokan_Service_Analytics_CustomDimensions
         */
        public function listManagementCustomDimensions($accountId, $webPropertyId, $optParams = array())
        {
        }
        /**
         * Updates an existing custom dimension. This method supports patch semantics.
         * (customDimensions.patch)
         *
         * @param string $accountId Account ID for the custom dimension to update.
         * @param string $webPropertyId Web property ID for the custom dimension to
         * update.
         * @param string $customDimensionId Custom dimension ID for the custom dimension
         * to update.
         * @param Dokan_CustomDimension $postBody
         * @param array $optParams Optional parameters.
         *
         * @opt_param bool ignoreCustomDataSourceLinks Force the update and ignore any
         * warnings related to the custom dimension being linked to a custom data source
         * / data set.
         * @return Dokan_Service_Analytics_CustomDimension
         */
        public function patch($accountId, $webPropertyId, $customDimensionId, \Dokan_Service_Analytics_CustomDimension $postBody, $optParams = array())
        {
        }
        /**
         * Updates an existing custom dimension. (customDimensions.update)
         *
         * @param string $accountId Account ID for the custom dimension to update.
         * @param string $webPropertyId Web property ID for the custom dimension to
         * update.
         * @param string $customDimensionId Custom dimension ID for the custom dimension
         * to update.
         * @param Dokan_CustomDimension $postBody
         * @param array $optParams Optional parameters.
         *
         * @opt_param bool ignoreCustomDataSourceLinks Force the update and ignore any
         * warnings related to the custom dimension being linked to a custom data source
         * / data set.
         * @return Dokan_Service_Analytics_CustomDimension
         */
        public function update($accountId, $webPropertyId, $customDimensionId, \Dokan_Service_Analytics_CustomDimension $postBody, $optParams = array())
        {
        }
    }
    /**
     * The "customMetrics" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $customMetrics = $analyticsService->customMetrics;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementCustomMetrics_Resource extends \Dokan_Service_Resource
    {
        /**
         * Get a custom metric to which the user has access. (customMetrics.get)
         *
         * @param string $accountId Account ID for the custom metric to retrieve.
         * @param string $webPropertyId Web property ID for the custom metric to
         * retrieve.
         * @param string $customMetricId The ID of the custom metric to retrieve.
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_CustomMetric
         */
        public function get($accountId, $webPropertyId, $customMetricId, $optParams = array())
        {
        }
        /**
         * Create a new custom metric. (customMetrics.insert)
         *
         * @param string $accountId Account ID for the custom metric to create.
         * @param string $webPropertyId Web property ID for the custom dimension to
         * create.
         * @param Dokan_CustomMetric $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_CustomMetric
         */
        public function insert($accountId, $webPropertyId, \Dokan_Service_Analytics_CustomMetric $postBody, $optParams = array())
        {
        }
        /**
         * Lists custom metrics to which the user has access.
         * (customMetrics.listManagementCustomMetrics)
         *
         * @param string $accountId Account ID for the custom metrics to retrieve.
         * @param string $webPropertyId Web property ID for the custom metrics to
         * retrieve.
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of custom metrics to include in
         * this response.
         * @opt_param int start-index An index of the first entity to retrieve. Use this
         * parameter as a pagination mechanism along with the max-results parameter.
         * @return Dokan_Service_Analytics_CustomMetrics
         */
        public function listManagementCustomMetrics($accountId, $webPropertyId, $optParams = array())
        {
        }
        /**
         * Updates an existing custom metric. This method supports patch semantics.
         * (customMetrics.patch)
         *
         * @param string $accountId Account ID for the custom metric to update.
         * @param string $webPropertyId Web property ID for the custom metric to update.
         * @param string $customMetricId Custom metric ID for the custom metric to
         * update.
         * @param Dokan_CustomMetric $postBody
         * @param array $optParams Optional parameters.
         *
         * @opt_param bool ignoreCustomDataSourceLinks Force the update and ignore any
         * warnings related to the custom metric being linked to a custom data source /
         * data set.
         * @return Dokan_Service_Analytics_CustomMetric
         */
        public function patch($accountId, $webPropertyId, $customMetricId, \Dokan_Service_Analytics_CustomMetric $postBody, $optParams = array())
        {
        }
        /**
         * Updates an existing custom metric. (customMetrics.update)
         *
         * @param string $accountId Account ID for the custom metric to update.
         * @param string $webPropertyId Web property ID for the custom metric to update.
         * @param string $customMetricId Custom metric ID for the custom metric to
         * update.
         * @param Dokan_CustomMetric $postBody
         * @param array $optParams Optional parameters.
         *
         * @opt_param bool ignoreCustomDataSourceLinks Force the update and ignore any
         * warnings related to the custom metric being linked to a custom data source /
         * data set.
         * @return Dokan_Service_Analytics_CustomMetric
         */
        public function update($accountId, $webPropertyId, $customMetricId, \Dokan_Service_Analytics_CustomMetric $postBody, $optParams = array())
        {
        }
    }
    /**
     * The "experiments" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $experiments = $analyticsService->experiments;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementExperiments_Resource extends \Dokan_Service_Resource
    {
        /**
         * Delete an experiment. (experiments.delete)
         *
         * @param string $accountId Account ID to which the experiment belongs
         * @param string $webPropertyId Web property ID to which the experiment belongs
         * @param string $profileId View (Profile) ID to which the experiment belongs
         * @param string $experimentId ID of the experiment to delete
         * @param array $optParams Optional parameters.
         */
        public function delete($accountId, $webPropertyId, $profileId, $experimentId, $optParams = array())
        {
        }
        /**
         * Returns an experiment to which the user has access. (experiments.get)
         *
         * @param string $accountId Account ID to retrieve the experiment for.
         * @param string $webPropertyId Web property ID to retrieve the experiment for.
         * @param string $profileId View (Profile) ID to retrieve the experiment for.
         * @param string $experimentId Experiment ID to retrieve the experiment for.
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Experiment
         */
        public function get($accountId, $webPropertyId, $profileId, $experimentId, $optParams = array())
        {
        }
        /**
         * Create a new experiment. (experiments.insert)
         *
         * @param string $accountId Account ID to create the experiment for.
         * @param string $webPropertyId Web property ID to create the experiment for.
         * @param string $profileId View (Profile) ID to create the experiment for.
         * @param Dokan_Experiment $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Experiment
         */
        public function insert($accountId, $webPropertyId, $profileId, \Dokan_Service_Analytics_Experiment $postBody, $optParams = array())
        {
        }
        /**
         * Lists experiments to which the user has access.
         * (experiments.listManagementExperiments)
         *
         * @param string $accountId Account ID to retrieve experiments for.
         * @param string $webPropertyId Web property ID to retrieve experiments for.
         * @param string $profileId View (Profile) ID to retrieve experiments for.
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of experiments to include in
         * this response.
         * @opt_param int start-index An index of the first experiment to retrieve. Use
         * this parameter as a pagination mechanism along with the max-results
         * parameter.
         * @return Dokan_Service_Analytics_Experiments
         */
        public function listManagementExperiments($accountId, $webPropertyId, $profileId, $optParams = array())
        {
        }
        /**
         * Update an existing experiment. This method supports patch semantics.
         * (experiments.patch)
         *
         * @param string $accountId Account ID of the experiment to update.
         * @param string $webPropertyId Web property ID of the experiment to update.
         * @param string $profileId View (Profile) ID of the experiment to update.
         * @param string $experimentId Experiment ID of the experiment to update.
         * @param Dokan_Experiment $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Experiment
         */
        public function patch($accountId, $webPropertyId, $profileId, $experimentId, \Dokan_Service_Analytics_Experiment $postBody, $optParams = array())
        {
        }
        /**
         * Update an existing experiment. (experiments.update)
         *
         * @param string $accountId Account ID of the experiment to update.
         * @param string $webPropertyId Web property ID of the experiment to update.
         * @param string $profileId View (Profile) ID of the experiment to update.
         * @param string $experimentId Experiment ID of the experiment to update.
         * @param Dokan_Experiment $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Experiment
         */
        public function update($accountId, $webPropertyId, $profileId, $experimentId, \Dokan_Service_Analytics_Experiment $postBody, $optParams = array())
        {
        }
    }
    /**
     * The "filters" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $filters = $analyticsService->filters;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementFilters_Resource extends \Dokan_Service_Resource
    {
        /**
         * Delete a filter. (filters.delete)
         *
         * @param string $accountId Account ID to delete the filter for.
         * @param string $filterId ID of the filter to be deleted.
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Filter
         */
        public function delete($accountId, $filterId, $optParams = array())
        {
        }
        /**
         * Returns a filters to which the user has access. (filters.get)
         *
         * @param string $accountId Account ID to retrieve filters for.
         * @param string $filterId Filter ID to retrieve filters for.
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Filter
         */
        public function get($accountId, $filterId, $optParams = array())
        {
        }
        /**
         * Create a new filter. (filters.insert)
         *
         * @param string $accountId Account ID to create filter for.
         * @param Dokan_Filter $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Filter
         */
        public function insert($accountId, \Dokan_Service_Analytics_Filter $postBody, $optParams = array())
        {
        }
        /**
         * Lists all filters for an account (filters.listManagementFilters)
         *
         * @param string $accountId Account ID to retrieve filters for.
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of filters to include in this
         * response.
         * @opt_param int start-index An index of the first entity to retrieve. Use this
         * parameter as a pagination mechanism along with the max-results parameter.
         * @return Dokan_Service_Analytics_Filters
         */
        public function listManagementFilters($accountId, $optParams = array())
        {
        }
        /**
         * Updates an existing filter. This method supports patch semantics.
         * (filters.patch)
         *
         * @param string $accountId Account ID to which the filter belongs.
         * @param string $filterId ID of the filter to be updated.
         * @param Dokan_Filter $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Filter
         */
        public function patch($accountId, $filterId, \Dokan_Service_Analytics_Filter $postBody, $optParams = array())
        {
        }
        /**
         * Updates an existing filter. (filters.update)
         *
         * @param string $accountId Account ID to which the filter belongs.
         * @param string $filterId ID of the filter to be updated.
         * @param Dokan_Filter $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Filter
         */
        public function update($accountId, $filterId, \Dokan_Service_Analytics_Filter $postBody, $optParams = array())
        {
        }
    }
    /**
     * The "goals" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $goals = $analyticsService->goals;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementGoals_Resource extends \Dokan_Service_Resource
    {
        /**
         * Gets a goal to which the user has access. (goals.get)
         *
         * @param string $accountId Account ID to retrieve the goal for.
         * @param string $webPropertyId Web property ID to retrieve the goal for.
         * @param string $profileId View (Profile) ID to retrieve the goal for.
         * @param string $goalId Goal ID to retrieve the goal for.
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Goal
         */
        public function get($accountId, $webPropertyId, $profileId, $goalId, $optParams = array())
        {
        }
        /**
         * Create a new goal. (goals.insert)
         *
         * @param string $accountId Account ID to create the goal for.
         * @param string $webPropertyId Web property ID to create the goal for.
         * @param string $profileId View (Profile) ID to create the goal for.
         * @param Dokan_Goal $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Goal
         */
        public function insert($accountId, $webPropertyId, $profileId, \Dokan_Service_Analytics_Goal $postBody, $optParams = array())
        {
        }
        /**
         * Lists goals to which the user has access. (goals.listManagementGoals)
         *
         * @param string $accountId Account ID to retrieve goals for. Can either be a
         * specific account ID or '~all', which refers to all the accounts that user has
         * access to.
         * @param string $webPropertyId Web property ID to retrieve goals for. Can
         * either be a specific web property ID or '~all', which refers to all the web
         * properties that user has access to.
         * @param string $profileId View (Profile) ID to retrieve goals for. Can either
         * be a specific view (profile) ID or '~all', which refers to all the views
         * (profiles) that user has access to.
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of goals to include in this
         * response.
         * @opt_param int start-index An index of the first goal to retrieve. Use this
         * parameter as a pagination mechanism along with the max-results parameter.
         * @return Dokan_Service_Analytics_Goals
         */
        public function listManagementGoals($accountId, $webPropertyId, $profileId, $optParams = array())
        {
        }
        /**
         * Updates an existing view (profile). This method supports patch semantics.
         * (goals.patch)
         *
         * @param string $accountId Account ID to update the goal.
         * @param string $webPropertyId Web property ID to update the goal.
         * @param string $profileId View (Profile) ID to update the goal.
         * @param string $goalId Index of the goal to be updated.
         * @param Dokan_Goal $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Goal
         */
        public function patch($accountId, $webPropertyId, $profileId, $goalId, \Dokan_Service_Analytics_Goal $postBody, $optParams = array())
        {
        }
        /**
         * Updates an existing view (profile). (goals.update)
         *
         * @param string $accountId Account ID to update the goal.
         * @param string $webPropertyId Web property ID to update the goal.
         * @param string $profileId View (Profile) ID to update the goal.
         * @param string $goalId Index of the goal to be updated.
         * @param Dokan_Goal $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Goal
         */
        public function update($accountId, $webPropertyId, $profileId, $goalId, \Dokan_Service_Analytics_Goal $postBody, $optParams = array())
        {
        }
    }
    /**
     * The "profileFilterLinks" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $profileFilterLinks = $analyticsService->profileFilterLinks;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementProfileFilterLinks_Resource extends \Dokan_Service_Resource
    {
        /**
         * Delete a profile filter link. (profileFilterLinks.delete)
         *
         * @param string $accountId Account ID to which the profile filter link belongs.
         * @param string $webPropertyId Web property Id to which the profile filter link
         * belongs.
         * @param string $profileId Profile ID to which the filter link belongs.
         * @param string $linkId ID of the profile filter link to delete.
         * @param array $optParams Optional parameters.
         */
        public function delete($accountId, $webPropertyId, $profileId, $linkId, $optParams = array())
        {
        }
        /**
         * Returns a single profile filter link. (profileFilterLinks.get)
         *
         * @param string $accountId Account ID to retrieve profile filter link for.
         * @param string $webPropertyId Web property Id to retrieve profile filter link
         * for.
         * @param string $profileId Profile ID to retrieve filter link for.
         * @param string $linkId ID of the profile filter link.
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_ProfileFilterLink
         */
        public function get($accountId, $webPropertyId, $profileId, $linkId, $optParams = array())
        {
        }
        /**
         * Create a new profile filter link. (profileFilterLinks.insert)
         *
         * @param string $accountId Account ID to create profile filter link for.
         * @param string $webPropertyId Web property Id to create profile filter link
         * for.
         * @param string $profileId Profile ID to create filter link for.
         * @param Dokan_ProfileFilterLink $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_ProfileFilterLink
         */
        public function insert($accountId, $webPropertyId, $profileId, \Dokan_Service_Analytics_ProfileFilterLink $postBody, $optParams = array())
        {
        }
        /**
         * Lists all profile filter links for a profile.
         * (profileFilterLinks.listManagementProfileFilterLinks)
         *
         * @param string $accountId Account ID to retrieve profile filter links for.
         * @param string $webPropertyId Web property Id for profile filter links for.
         * Can either be a specific web property ID or '~all', which refers to all the
         * web properties that user has access to.
         * @param string $profileId Profile ID to retrieve filter links for. Can either
         * be a specific profile ID or '~all', which refers to all the profiles that
         * user has access to.
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of profile filter links to
         * include in this response.
         * @opt_param int start-index An index of the first entity to retrieve. Use this
         * parameter as a pagination mechanism along with the max-results parameter.
         * @return Dokan_Service_Analytics_ProfileFilterLinks
         */
        public function listManagementProfileFilterLinks($accountId, $webPropertyId, $profileId, $optParams = array())
        {
        }
        /**
         * Update an existing profile filter link. This method supports patch semantics.
         * (profileFilterLinks.patch)
         *
         * @param string $accountId Account ID to which profile filter link belongs.
         * @param string $webPropertyId Web property Id to which profile filter link
         * belongs
         * @param string $profileId Profile ID to which filter link belongs
         * @param string $linkId ID of the profile filter link to be updated.
         * @param Dokan_ProfileFilterLink $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_ProfileFilterLink
         */
        public function patch($accountId, $webPropertyId, $profileId, $linkId, \Dokan_Service_Analytics_ProfileFilterLink $postBody, $optParams = array())
        {
        }
        /**
         * Update an existing profile filter link. (profileFilterLinks.update)
         *
         * @param string $accountId Account ID to which profile filter link belongs.
         * @param string $webPropertyId Web property Id to which profile filter link
         * belongs
         * @param string $profileId Profile ID to which filter link belongs
         * @param string $linkId ID of the profile filter link to be updated.
         * @param Dokan_ProfileFilterLink $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_ProfileFilterLink
         */
        public function update($accountId, $webPropertyId, $profileId, $linkId, \Dokan_Service_Analytics_ProfileFilterLink $postBody, $optParams = array())
        {
        }
    }
    /**
     * The "profileUserLinks" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $profileUserLinks = $analyticsService->profileUserLinks;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementProfileUserLinks_Resource extends \Dokan_Service_Resource
    {
        /**
         * Removes a user from the given view (profile). (profileUserLinks.delete)
         *
         * @param string $accountId Account ID to delete the user link for.
         * @param string $webPropertyId Web Property ID to delete the user link for.
         * @param string $profileId View (Profile) ID to delete the user link for.
         * @param string $linkId Link ID to delete the user link for.
         * @param array $optParams Optional parameters.
         */
        public function delete($accountId, $webPropertyId, $profileId, $linkId, $optParams = array())
        {
        }
        /**
         * Adds a new user to the given view (profile). (profileUserLinks.insert)
         *
         * @param string $accountId Account ID to create the user link for.
         * @param string $webPropertyId Web Property ID to create the user link for.
         * @param string $profileId View (Profile) ID to create the user link for.
         * @param Dokan_EntityUserLink $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_EntityUserLink
         */
        public function insert($accountId, $webPropertyId, $profileId, \Dokan_Service_Analytics_EntityUserLink $postBody, $optParams = array())
        {
        }
        /**
         * Lists profile-user links for a given view (profile).
         * (profileUserLinks.listManagementProfileUserLinks)
         *
         * @param string $accountId Account ID which the given view (profile) belongs
         * to.
         * @param string $webPropertyId Web Property ID which the given view (profile)
         * belongs to. Can either be a specific web property ID or '~all', which refers
         * to all the web properties that user has access to.
         * @param string $profileId View (Profile) ID to retrieve the profile-user links
         * for. Can either be a specific profile ID or '~all', which refers to all the
         * profiles that user has access to.
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of profile-user links to
         * include in this response.
         * @opt_param int start-index An index of the first profile-user link to
         * retrieve. Use this parameter as a pagination mechanism along with the max-
         * results parameter.
         * @return Dokan_Service_Analytics_EntityUserLinks
         */
        public function listManagementProfileUserLinks($accountId, $webPropertyId, $profileId, $optParams = array())
        {
        }
        /**
         * Updates permissions for an existing user on the given view (profile).
         * (profileUserLinks.update)
         *
         * @param string $accountId Account ID to update the user link for.
         * @param string $webPropertyId Web Property ID to update the user link for.
         * @param string $profileId View (Profile ID) to update the user link for.
         * @param string $linkId Link ID to update the user link for.
         * @param Dokan_EntityUserLink $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_EntityUserLink
         */
        public function update($accountId, $webPropertyId, $profileId, $linkId, \Dokan_Service_Analytics_EntityUserLink $postBody, $optParams = array())
        {
        }
    }
    /**
     * The "profiles" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $profiles = $analyticsService->profiles;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementProfiles_Resource extends \Dokan_Service_Resource
    {
        /**
         * Deletes a view (profile). (profiles.delete)
         *
         * @param string $accountId Account ID to delete the view (profile) for.
         * @param string $webPropertyId Web property ID to delete the view (profile)
         * for.
         * @param string $profileId ID of the view (profile) to be deleted.
         * @param array $optParams Optional parameters.
         */
        public function delete($accountId, $webPropertyId, $profileId, $optParams = array())
        {
        }
        /**
         * Gets a view (profile) to which the user has access. (profiles.get)
         *
         * @param string $accountId Account ID to retrieve the goal for.
         * @param string $webPropertyId Web property ID to retrieve the goal for.
         * @param string $profileId View (Profile) ID to retrieve the goal for.
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Profile
         */
        public function get($accountId, $webPropertyId, $profileId, $optParams = array())
        {
        }
        /**
         * Create a new view (profile). (profiles.insert)
         *
         * @param string $accountId Account ID to create the view (profile) for.
         * @param string $webPropertyId Web property ID to create the view (profile)
         * for.
         * @param Dokan_Profile $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Profile
         */
        public function insert($accountId, $webPropertyId, \Dokan_Service_Analytics_Profile $postBody, $optParams = array())
        {
        }
        /**
         * Lists views (profiles) to which the user has access.
         * (profiles.listManagementProfiles)
         *
         * @param string $accountId Account ID for the view (profiles) to retrieve. Can
         * either be a specific account ID or '~all', which refers to all the accounts
         * to which the user has access.
         * @param string $webPropertyId Web property ID for the views (profiles) to
         * retrieve. Can either be a specific web property ID or '~all', which refers to
         * all the web properties to which the user has access.
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of views (profiles) to include
         * in this response.
         * @opt_param int start-index An index of the first entity to retrieve. Use this
         * parameter as a pagination mechanism along with the max-results parameter.
         * @return Dokan_Service_Analytics_Profiles
         */
        public function listManagementProfiles($accountId, $webPropertyId, $optParams = array())
        {
        }
        /**
         * Updates an existing view (profile). This method supports patch semantics.
         * (profiles.patch)
         *
         * @param string $accountId Account ID to which the view (profile) belongs
         * @param string $webPropertyId Web property ID to which the view (profile)
         * belongs
         * @param string $profileId ID of the view (profile) to be updated.
         * @param Dokan_Profile $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Profile
         */
        public function patch($accountId, $webPropertyId, $profileId, \Dokan_Service_Analytics_Profile $postBody, $optParams = array())
        {
        }
        /**
         * Updates an existing view (profile). (profiles.update)
         *
         * @param string $accountId Account ID to which the view (profile) belongs
         * @param string $webPropertyId Web property ID to which the view (profile)
         * belongs
         * @param string $profileId ID of the view (profile) to be updated.
         * @param Dokan_Profile $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Profile
         */
        public function update($accountId, $webPropertyId, $profileId, \Dokan_Service_Analytics_Profile $postBody, $optParams = array())
        {
        }
    }
    /**
     * The "segments" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $segments = $analyticsService->segments;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementSegments_Resource extends \Dokan_Service_Resource
    {
        /**
         * Lists segments to which the user has access.
         * (segments.listManagementSegments)
         *
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of segments to include in this
         * response.
         * @opt_param int start-index An index of the first segment to retrieve. Use
         * this parameter as a pagination mechanism along with the max-results
         * parameter.
         * @return Dokan_Service_Analytics_Segments
         */
        public function listManagementSegments($optParams = array())
        {
        }
    }
    /**
     * The "unsampledReports" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $unsampledReports = $analyticsService->unsampledReports;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementUnsampledReports_Resource extends \Dokan_Service_Resource
    {
        /**
         * Deletes an unsampled report. (unsampledReports.delete)
         *
         * @param string $accountId Account ID to delete the unsampled report for.
         * @param string $webPropertyId Web property ID to delete the unsampled reports
         * for.
         * @param string $profileId View (Profile) ID to delete the unsampled report
         * for.
         * @param string $unsampledReportId ID of the unsampled report to be deleted.
         * @param array $optParams Optional parameters.
         */
        public function delete($accountId, $webPropertyId, $profileId, $unsampledReportId, $optParams = array())
        {
        }
        /**
         * Returns a single unsampled report. (unsampledReports.get)
         *
         * @param string $accountId Account ID to retrieve unsampled report for.
         * @param string $webPropertyId Web property ID to retrieve unsampled reports
         * for.
         * @param string $profileId View (Profile) ID to retrieve unsampled report for.
         * @param string $unsampledReportId ID of the unsampled report to retrieve.
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_UnsampledReport
         */
        public function get($accountId, $webPropertyId, $profileId, $unsampledReportId, $optParams = array())
        {
        }
        /**
         * Create a new unsampled report. (unsampledReports.insert)
         *
         * @param string $accountId Account ID to create the unsampled report for.
         * @param string $webPropertyId Web property ID to create the unsampled report
         * for.
         * @param string $profileId View (Profile) ID to create the unsampled report
         * for.
         * @param Dokan_UnsampledReport $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_UnsampledReport
         */
        public function insert($accountId, $webPropertyId, $profileId, \Dokan_Service_Analytics_UnsampledReport $postBody, $optParams = array())
        {
        }
        /**
         * Lists unsampled reports to which the user has access.
         * (unsampledReports.listManagementUnsampledReports)
         *
         * @param string $accountId Account ID to retrieve unsampled reports for. Must
         * be a specific account ID, ~all is not supported.
         * @param string $webPropertyId Web property ID to retrieve unsampled reports
         * for. Must be a specific web property ID, ~all is not supported.
         * @param string $profileId View (Profile) ID to retrieve unsampled reports for.
         * Must be a specific view (profile) ID, ~all is not supported.
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of unsampled reports to include
         * in this response.
         * @opt_param int start-index An index of the first unsampled report to
         * retrieve. Use this parameter as a pagination mechanism along with the max-
         * results parameter.
         * @return Dokan_Service_Analytics_UnsampledReports
         */
        public function listManagementUnsampledReports($accountId, $webPropertyId, $profileId, $optParams = array())
        {
        }
    }
    /**
     * The "uploads" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $uploads = $analyticsService->uploads;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementUploads_Resource extends \Dokan_Service_Resource
    {
        /**
         * Delete data associated with a previous upload. (uploads.deleteUploadData)
         *
         * @param string $accountId Account Id for the uploads to be deleted.
         * @param string $webPropertyId Web property Id for the uploads to be deleted.
         * @param string $customDataSourceId Custom data source Id for the uploads to be
         * deleted.
         * @param Dokan_AnalyticsDataimportDeleteUploadDataRequest $postBody
         * @param array $optParams Optional parameters.
         */
        public function deleteUploadData($accountId, $webPropertyId, $customDataSourceId, \Dokan_Service_Analytics_AnalyticsDataimportDeleteUploadDataRequest $postBody, $optParams = array())
        {
        }
        /**
         * List uploads to which the user has access. (uploads.get)
         *
         * @param string $accountId Account Id for the upload to retrieve.
         * @param string $webPropertyId Web property Id for the upload to retrieve.
         * @param string $customDataSourceId Custom data source Id for upload to
         * retrieve.
         * @param string $uploadId Upload Id to retrieve.
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Upload
         */
        public function get($accountId, $webPropertyId, $customDataSourceId, $uploadId, $optParams = array())
        {
        }
        /**
         * List uploads to which the user has access. (uploads.listManagementUploads)
         *
         * @param string $accountId Account Id for the uploads to retrieve.
         * @param string $webPropertyId Web property Id for the uploads to retrieve.
         * @param string $customDataSourceId Custom data source Id for uploads to
         * retrieve.
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of uploads to include in this
         * response.
         * @opt_param int start-index A 1-based index of the first upload to retrieve.
         * Use this parameter as a pagination mechanism along with the max-results
         * parameter.
         * @return Dokan_Service_Analytics_Uploads
         */
        public function listManagementUploads($accountId, $webPropertyId, $customDataSourceId, $optParams = array())
        {
        }
        /**
         * Upload data for a custom data source. (uploads.uploadData)
         *
         * @param string $accountId Account Id associated with the upload.
         * @param string $webPropertyId Web property UA-string associated with the
         * upload.
         * @param string $customDataSourceId Custom data source Id to which the data
         * being uploaded belongs.
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Upload
         */
        public function uploadData($accountId, $webPropertyId, $customDataSourceId, $optParams = array())
        {
        }
    }
    /**
     * The "webPropertyAdWordsLinks" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $webPropertyAdWordsLinks = $analyticsService->webPropertyAdWordsLinks;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementWebPropertyAdWordsLinks_Resource extends \Dokan_Service_Resource
    {
        /**
         * Deletes a web property-AdWords link. (webPropertyAdWordsLinks.delete)
         *
         * @param string $accountId ID of the account which the given web property
         * belongs to.
         * @param string $webPropertyId Web property ID to delete the AdWords link for.
         * @param string $webPropertyAdWordsLinkId Web property AdWords link ID.
         * @param array $optParams Optional parameters.
         */
        public function delete($accountId, $webPropertyId, $webPropertyAdWordsLinkId, $optParams = array())
        {
        }
        /**
         * Returns a web property-AdWords link to which the user has access.
         * (webPropertyAdWordsLinks.get)
         *
         * @param string $accountId ID of the account which the given web property
         * belongs to.
         * @param string $webPropertyId Web property ID to retrieve the AdWords link
         * for.
         * @param string $webPropertyAdWordsLinkId Web property-AdWords link ID.
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_EntityAdWordsLink
         */
        public function get($accountId, $webPropertyId, $webPropertyAdWordsLinkId, $optParams = array())
        {
        }
        /**
         * Creates a webProperty-AdWords link. (webPropertyAdWordsLinks.insert)
         *
         * @param string $accountId ID of the Google Analytics account to create the
         * link for.
         * @param string $webPropertyId Web property ID to create the link for.
         * @param Dokan_EntityAdWordsLink $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_EntityAdWordsLink
         */
        public function insert($accountId, $webPropertyId, \Dokan_Service_Analytics_EntityAdWordsLink $postBody, $optParams = array())
        {
        }
        /**
         * Lists webProperty-AdWords links for a given web property.
         * (webPropertyAdWordsLinks.listManagementWebPropertyAdWordsLinks)
         *
         * @param string $accountId ID of the account which the given web property
         * belongs to.
         * @param string $webPropertyId Web property ID to retrieve the AdWords links
         * for.
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of webProperty-AdWords links to
         * include in this response.
         * @opt_param int start-index An index of the first webProperty-AdWords link to
         * retrieve. Use this parameter as a pagination mechanism along with the max-
         * results parameter.
         * @return Dokan_Service_Analytics_EntityAdWordsLinks
         */
        public function listManagementWebPropertyAdWordsLinks($accountId, $webPropertyId, $optParams = array())
        {
        }
        /**
         * Updates an existing webProperty-AdWords link. This method supports patch
         * semantics. (webPropertyAdWordsLinks.patch)
         *
         * @param string $accountId ID of the account which the given web property
         * belongs to.
         * @param string $webPropertyId Web property ID to retrieve the AdWords link
         * for.
         * @param string $webPropertyAdWordsLinkId Web property-AdWords link ID.
         * @param Dokan_EntityAdWordsLink $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_EntityAdWordsLink
         */
        public function patch($accountId, $webPropertyId, $webPropertyAdWordsLinkId, \Dokan_Service_Analytics_EntityAdWordsLink $postBody, $optParams = array())
        {
        }
        /**
         * Updates an existing webProperty-AdWords link.
         * (webPropertyAdWordsLinks.update)
         *
         * @param string $accountId ID of the account which the given web property
         * belongs to.
         * @param string $webPropertyId Web property ID to retrieve the AdWords link
         * for.
         * @param string $webPropertyAdWordsLinkId Web property-AdWords link ID.
         * @param Dokan_EntityAdWordsLink $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_EntityAdWordsLink
         */
        public function update($accountId, $webPropertyId, $webPropertyAdWordsLinkId, \Dokan_Service_Analytics_EntityAdWordsLink $postBody, $optParams = array())
        {
        }
    }
    /**
     * The "webproperties" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $webproperties = $analyticsService->webproperties;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementWebproperties_Resource extends \Dokan_Service_Resource
    {
        /**
         * Gets a web property to which the user has access. (webproperties.get)
         *
         * @param string $accountId Account ID to retrieve the web property for.
         * @param string $webPropertyId ID to retrieve the web property for.
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Webproperty
         */
        public function get($accountId, $webPropertyId, $optParams = array())
        {
        }
        /**
         * Create a new property if the account has fewer than 20 properties. Web
         * properties are visible in the Google Analytics interface only if they have at
         * least one profile. (webproperties.insert)
         *
         * @param string $accountId Account ID to create the web property for.
         * @param Dokan_Webproperty $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Webproperty
         */
        public function insert($accountId, \Dokan_Service_Analytics_Webproperty $postBody, $optParams = array())
        {
        }
        /**
         * Lists web properties to which the user has access.
         * (webproperties.listManagementWebproperties)
         *
         * @param string $accountId Account ID to retrieve web properties for. Can
         * either be a specific account ID or '~all', which refers to all the accounts
         * that user has access to.
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of web properties to include in
         * this response.
         * @opt_param int start-index An index of the first entity to retrieve. Use this
         * parameter as a pagination mechanism along with the max-results parameter.
         * @return Dokan_Service_Analytics_Webproperties
         */
        public function listManagementWebproperties($accountId, $optParams = array())
        {
        }
        /**
         * Updates an existing web property. This method supports patch semantics.
         * (webproperties.patch)
         *
         * @param string $accountId Account ID to which the web property belongs
         * @param string $webPropertyId Web property ID
         * @param Dokan_Webproperty $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Webproperty
         */
        public function patch($accountId, $webPropertyId, \Dokan_Service_Analytics_Webproperty $postBody, $optParams = array())
        {
        }
        /**
         * Updates an existing web property. (webproperties.update)
         *
         * @param string $accountId Account ID to which the web property belongs
         * @param string $webPropertyId Web property ID
         * @param Dokan_Webproperty $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Webproperty
         */
        public function update($accountId, $webPropertyId, \Dokan_Service_Analytics_Webproperty $postBody, $optParams = array())
        {
        }
    }
    /**
     * The "webpropertyUserLinks" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $webpropertyUserLinks = $analyticsService->webpropertyUserLinks;
     *  </code>
     */
    class Dokan_Service_Analytics_ManagementWebpropertyUserLinks_Resource extends \Dokan_Service_Resource
    {
        /**
         * Removes a user from the given web property. (webpropertyUserLinks.delete)
         *
         * @param string $accountId Account ID to delete the user link for.
         * @param string $webPropertyId Web Property ID to delete the user link for.
         * @param string $linkId Link ID to delete the user link for.
         * @param array $optParams Optional parameters.
         */
        public function delete($accountId, $webPropertyId, $linkId, $optParams = array())
        {
        }
        /**
         * Adds a new user to the given web property. (webpropertyUserLinks.insert)
         *
         * @param string $accountId Account ID to create the user link for.
         * @param string $webPropertyId Web Property ID to create the user link for.
         * @param Dokan_EntityUserLink $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_EntityUserLink
         */
        public function insert($accountId, $webPropertyId, \Dokan_Service_Analytics_EntityUserLink $postBody, $optParams = array())
        {
        }
        /**
         * Lists webProperty-user links for a given web property.
         * (webpropertyUserLinks.listManagementWebpropertyUserLinks)
         *
         * @param string $accountId Account ID which the given web property belongs to.
         * @param string $webPropertyId Web Property ID for the webProperty-user links
         * to retrieve. Can either be a specific web property ID or '~all', which refers
         * to all the web properties that user has access to.
         * @param array $optParams Optional parameters.
         *
         * @opt_param int max-results The maximum number of webProperty-user Links to
         * include in this response.
         * @opt_param int start-index An index of the first webProperty-user link to
         * retrieve. Use this parameter as a pagination mechanism along with the max-
         * results parameter.
         * @return Dokan_Service_Analytics_EntityUserLinks
         */
        public function listManagementWebpropertyUserLinks($accountId, $webPropertyId, $optParams = array())
        {
        }
        /**
         * Updates permissions for an existing user on the given web property.
         * (webpropertyUserLinks.update)
         *
         * @param string $accountId Account ID to update the account-user link for.
         * @param string $webPropertyId Web property ID to update the account-user link
         * for.
         * @param string $linkId Link ID to update the account-user link for.
         * @param Dokan_EntityUserLink $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_EntityUserLink
         */
        public function update($accountId, $webPropertyId, $linkId, \Dokan_Service_Analytics_EntityUserLink $postBody, $optParams = array())
        {
        }
    }
    /**
     * The "metadata" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $metadata = $analyticsService->metadata;
     *  </code>
     */
    class Dokan_Service_Analytics_Metadata_Resource extends \Dokan_Service_Resource
    {
    }
    /**
     * The "columns" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $columns = $analyticsService->columns;
     *  </code>
     */
    class Dokan_Service_Analytics_MetadataColumns_Resource extends \Dokan_Service_Resource
    {
        /**
         * Lists all columns for a report type (columns.listMetadataColumns)
         *
         * @param string $reportType Report type. Allowed Values: 'ga'. Where 'ga'
         * corresponds to the Core Reporting API
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_Columns
         */
        public function listMetadataColumns($reportType, $optParams = array())
        {
        }
    }
    /**
     * The "provisioning" collection of methods.
     * Typical usage is:
     *  <code>
     *   $analyticsService = new Dokan_Service_Analytics(...);
     *   $provisioning = $analyticsService->provisioning;
     *  </code>
     */
    class Dokan_Service_Analytics_Provisioning_Resource extends \Dokan_Service_Resource
    {
        /**
         * Creates an account ticket. (provisioning.createAccountTicket)
         *
         * @param Dokan_AccountTicket $postBody
         * @param array $optParams Optional parameters.
         * @return Dokan_Service_Analytics_AccountTicket
         */
        public function createAccountTicket(\Dokan_Service_Analytics_AccountTicket $postBody, $optParams = array())
        {
        }
    }
    class Dokan_Service_Analytics_Account extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        protected $childLinkType = 'Dokan_Service_Analytics_AccountChildLink';
        protected $childLinkDataType = '';
        public $created;
        public $id;
        public $kind;
        public $name;
        protected $permissionsType = 'Dokan_Service_Analytics_AccountPermissions';
        protected $permissionsDataType = '';
        public $selfLink;
        public $updated;
        public function setChildLink(\Dokan_Service_Analytics_AccountChildLink $childLink)
        {
        }
        public function getChildLink()
        {
        }
        public function setCreated($created)
        {
        }
        public function getCreated()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setPermissions(\Dokan_Service_Analytics_AccountPermissions $permissions)
        {
        }
        public function getPermissions()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
        public function setUpdated($updated)
        {
        }
        public function getUpdated()
        {
        }
    }
    class Dokan_Service_Analytics_AccountChildLink extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $href;
        public $type;
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
    }
    class Dokan_Service_Analytics_AccountPermissions extends \Dokan_Collection
    {
        protected $collection_key = 'effective';
        protected $internal_gapi_mappings = array();
        public $effective;
        public function setEffective($effective)
        {
        }
        public function getEffective()
        {
        }
    }
    class Dokan_Service_Analytics_AccountRef extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $href;
        public $id;
        public $kind;
        public $name;
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
    }
    class Dokan_Service_Analytics_AccountSummaries extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_AccountSummary';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public $username;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setUsername($username)
        {
        }
        public function getUsername()
        {
        }
    }
    class Dokan_Service_Analytics_AccountSummary extends \Dokan_Collection
    {
        protected $collection_key = 'webProperties';
        protected $internal_gapi_mappings = array();
        public $id;
        public $kind;
        public $name;
        protected $webPropertiesType = 'Dokan_Service_Analytics_WebPropertySummary';
        protected $webPropertiesDataType = 'array';
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setWebProperties($webProperties)
        {
        }
        public function getWebProperties()
        {
        }
    }
    class Dokan_Service_Analytics_AccountTicket extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        protected $accountType = 'Dokan_Service_Analytics_Account';
        protected $accountDataType = '';
        public $id;
        public $kind;
        protected $profileType = 'Dokan_Service_Analytics_Profile';
        protected $profileDataType = '';
        public $redirectUri;
        protected $webpropertyType = 'Dokan_Service_Analytics_Webproperty';
        protected $webpropertyDataType = '';
        public function setAccount(\Dokan_Service_Analytics_Account $account)
        {
        }
        public function getAccount()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setProfile(\Dokan_Service_Analytics_Profile $profile)
        {
        }
        public function getProfile()
        {
        }
        public function setRedirectUri($redirectUri)
        {
        }
        public function getRedirectUri()
        {
        }
        public function setWebproperty(\Dokan_Service_Analytics_Webproperty $webproperty)
        {
        }
        public function getWebproperty()
        {
        }
    }
    class Dokan_Service_Analytics_Accounts extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_Account';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public $username;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setUsername($username)
        {
        }
        public function getUsername()
        {
        }
    }
    class Dokan_Service_Analytics_AdWordsAccount extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $autoTaggingEnabled;
        public $customerId;
        public $kind;
        public function setAutoTaggingEnabled($autoTaggingEnabled)
        {
        }
        public function getAutoTaggingEnabled()
        {
        }
        public function setCustomerId($customerId)
        {
        }
        public function getCustomerId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
    }
    class Dokan_Service_Analytics_AnalyticsDataimportDeleteUploadDataRequest extends \Dokan_Collection
    {
        protected $collection_key = 'customDataImportUids';
        protected $internal_gapi_mappings = array();
        public $customDataImportUids;
        public function setCustomDataImportUids($customDataImportUids)
        {
        }
        public function getCustomDataImportUids()
        {
        }
    }
    class Dokan_Service_Analytics_Column extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $attributes;
        public $id;
        public $kind;
        public function setAttributes($attributes)
        {
        }
        public function getAttributes()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
    }
    class Dokan_Service_Analytics_Columns extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        public $attributeNames;
        public $etag;
        protected $itemsType = 'Dokan_Service_Analytics_Column';
        protected $itemsDataType = 'array';
        public $kind;
        public $totalResults;
        public function setAttributeNames($attributeNames)
        {
        }
        public function getAttributeNames()
        {
        }
        public function setEtag($etag)
        {
        }
        public function getEtag()
        {
        }
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
    }
    class Dokan_Service_Analytics_CustomDataSource extends \Dokan_Collection
    {
        protected $collection_key = 'profilesLinked';
        protected $internal_gapi_mappings = array();
        public $accountId;
        protected $childLinkType = 'Dokan_Service_Analytics_CustomDataSourceChildLink';
        protected $childLinkDataType = '';
        public $created;
        public $description;
        public $id;
        public $importBehavior;
        public $kind;
        public $name;
        protected $parentLinkType = 'Dokan_Service_Analytics_CustomDataSourceParentLink';
        protected $parentLinkDataType = '';
        public $profilesLinked;
        public $selfLink;
        public $type;
        public $updated;
        public $uploadType;
        public $webPropertyId;
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setChildLink(\Dokan_Service_Analytics_CustomDataSourceChildLink $childLink)
        {
        }
        public function getChildLink()
        {
        }
        public function setCreated($created)
        {
        }
        public function getCreated()
        {
        }
        public function setDescription($description)
        {
        }
        public function getDescription()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setImportBehavior($importBehavior)
        {
        }
        public function getImportBehavior()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setParentLink(\Dokan_Service_Analytics_CustomDataSourceParentLink $parentLink)
        {
        }
        public function getParentLink()
        {
        }
        public function setProfilesLinked($profilesLinked)
        {
        }
        public function getProfilesLinked()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
        public function setUpdated($updated)
        {
        }
        public function getUpdated()
        {
        }
        public function setUploadType($uploadType)
        {
        }
        public function getUploadType()
        {
        }
        public function setWebPropertyId($webPropertyId)
        {
        }
        public function getWebPropertyId()
        {
        }
    }
    class Dokan_Service_Analytics_CustomDataSourceChildLink extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $href;
        public $type;
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
    }
    class Dokan_Service_Analytics_CustomDataSourceParentLink extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $href;
        public $type;
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
    }
    class Dokan_Service_Analytics_CustomDataSources extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_CustomDataSource';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public $username;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setUsername($username)
        {
        }
        public function getUsername()
        {
        }
    }
    class Dokan_Service_Analytics_CustomDimension extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $accountId;
        public $active;
        public $created;
        public $id;
        public $index;
        public $kind;
        public $name;
        protected $parentLinkType = 'Dokan_Service_Analytics_CustomDimensionParentLink';
        protected $parentLinkDataType = '';
        public $scope;
        public $selfLink;
        public $updated;
        public $webPropertyId;
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setActive($active)
        {
        }
        public function getActive()
        {
        }
        public function setCreated($created)
        {
        }
        public function getCreated()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setIndex($index)
        {
        }
        public function getIndex()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setParentLink(\Dokan_Service_Analytics_CustomDimensionParentLink $parentLink)
        {
        }
        public function getParentLink()
        {
        }
        public function setScope($scope)
        {
        }
        public function getScope()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
        public function setUpdated($updated)
        {
        }
        public function getUpdated()
        {
        }
        public function setWebPropertyId($webPropertyId)
        {
        }
        public function getWebPropertyId()
        {
        }
    }
    class Dokan_Service_Analytics_CustomDimensionParentLink extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $href;
        public $type;
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
    }
    class Dokan_Service_Analytics_CustomDimensions extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_CustomDimension';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public $username;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setUsername($username)
        {
        }
        public function getUsername()
        {
        }
    }
    class Dokan_Service_Analytics_CustomMetric extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array("maxValue" => "max_value", "minValue" => "min_value");
        public $accountId;
        public $active;
        public $created;
        public $id;
        public $index;
        public $kind;
        public $maxValue;
        public $minValue;
        public $name;
        protected $parentLinkType = 'Dokan_Service_Analytics_CustomMetricParentLink';
        protected $parentLinkDataType = '';
        public $scope;
        public $selfLink;
        public $type;
        public $updated;
        public $webPropertyId;
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setActive($active)
        {
        }
        public function getActive()
        {
        }
        public function setCreated($created)
        {
        }
        public function getCreated()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setIndex($index)
        {
        }
        public function getIndex()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setMaxValue($maxValue)
        {
        }
        public function getMaxValue()
        {
        }
        public function setMinValue($minValue)
        {
        }
        public function getMinValue()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setParentLink(\Dokan_Service_Analytics_CustomMetricParentLink $parentLink)
        {
        }
        public function getParentLink()
        {
        }
        public function setScope($scope)
        {
        }
        public function getScope()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
        public function setUpdated($updated)
        {
        }
        public function getUpdated()
        {
        }
        public function setWebPropertyId($webPropertyId)
        {
        }
        public function getWebPropertyId()
        {
        }
    }
    class Dokan_Service_Analytics_CustomMetricParentLink extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $href;
        public $type;
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
    }
    class Dokan_Service_Analytics_CustomMetrics extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_CustomMetric';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public $username;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setUsername($username)
        {
        }
        public function getUsername()
        {
        }
    }
    class Dokan_Service_Analytics_EntityAdWordsLink extends \Dokan_Collection
    {
        protected $collection_key = 'profileIds';
        protected $internal_gapi_mappings = array();
        protected $adWordsAccountsType = 'Dokan_Service_Analytics_AdWordsAccount';
        protected $adWordsAccountsDataType = 'array';
        protected $entityType = 'Dokan_Service_Analytics_EntityAdWordsLinkEntity';
        protected $entityDataType = '';
        public $id;
        public $kind;
        public $name;
        public $profileIds;
        public $selfLink;
        public function setAdWordsAccounts($adWordsAccounts)
        {
        }
        public function getAdWordsAccounts()
        {
        }
        public function setEntity(\Dokan_Service_Analytics_EntityAdWordsLinkEntity $entity)
        {
        }
        public function getEntity()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setProfileIds($profileIds)
        {
        }
        public function getProfileIds()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
    }
    class Dokan_Service_Analytics_EntityAdWordsLinkEntity extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        protected $webPropertyRefType = 'Dokan_Service_Analytics_WebPropertyRef';
        protected $webPropertyRefDataType = '';
        public function setWebPropertyRef(\Dokan_Service_Analytics_WebPropertyRef $webPropertyRef)
        {
        }
        public function getWebPropertyRef()
        {
        }
    }
    class Dokan_Service_Analytics_EntityAdWordsLinks extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_EntityAdWordsLink';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
    }
    class Dokan_Service_Analytics_EntityUserLink extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        protected $entityType = 'Dokan_Service_Analytics_EntityUserLinkEntity';
        protected $entityDataType = '';
        public $id;
        public $kind;
        protected $permissionsType = 'Dokan_Service_Analytics_EntityUserLinkPermissions';
        protected $permissionsDataType = '';
        public $selfLink;
        protected $userRefType = 'Dokan_Service_Analytics_UserRef';
        protected $userRefDataType = '';
        public function setEntity(\Dokan_Service_Analytics_EntityUserLinkEntity $entity)
        {
        }
        public function getEntity()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setPermissions(\Dokan_Service_Analytics_EntityUserLinkPermissions $permissions)
        {
        }
        public function getPermissions()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
        public function setUserRef(\Dokan_Service_Analytics_UserRef $userRef)
        {
        }
        public function getUserRef()
        {
        }
    }
    class Dokan_Service_Analytics_EntityUserLinkEntity extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        protected $accountRefType = 'Dokan_Service_Analytics_AccountRef';
        protected $accountRefDataType = '';
        protected $profileRefType = 'Dokan_Service_Analytics_ProfileRef';
        protected $profileRefDataType = '';
        protected $webPropertyRefType = 'Dokan_Service_Analytics_WebPropertyRef';
        protected $webPropertyRefDataType = '';
        public function setAccountRef(\Dokan_Service_Analytics_AccountRef $accountRef)
        {
        }
        public function getAccountRef()
        {
        }
        public function setProfileRef(\Dokan_Service_Analytics_ProfileRef $profileRef)
        {
        }
        public function getProfileRef()
        {
        }
        public function setWebPropertyRef(\Dokan_Service_Analytics_WebPropertyRef $webPropertyRef)
        {
        }
        public function getWebPropertyRef()
        {
        }
    }
    class Dokan_Service_Analytics_EntityUserLinkPermissions extends \Dokan_Collection
    {
        protected $collection_key = 'local';
        protected $internal_gapi_mappings = array();
        public $effective;
        public $local;
        public function setEffective($effective)
        {
        }
        public function getEffective()
        {
        }
        public function setLocal($local)
        {
        }
        public function getLocal()
        {
        }
    }
    class Dokan_Service_Analytics_EntityUserLinks extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_EntityUserLink';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
    }
    class Dokan_Service_Analytics_Experiment extends \Dokan_Collection
    {
        protected $collection_key = 'variations';
        protected $internal_gapi_mappings = array();
        public $accountId;
        public $created;
        public $description;
        public $editableInGaUi;
        public $endTime;
        public $equalWeighting;
        public $id;
        public $internalWebPropertyId;
        public $kind;
        public $minimumExperimentLengthInDays;
        public $name;
        public $objectiveMetric;
        public $optimizationType;
        protected $parentLinkType = 'Dokan_Service_Analytics_ExperimentParentLink';
        protected $parentLinkDataType = '';
        public $profileId;
        public $reasonExperimentEnded;
        public $rewriteVariationUrlsAsOriginal;
        public $selfLink;
        public $servingFramework;
        public $snippet;
        public $startTime;
        public $status;
        public $trafficCoverage;
        public $updated;
        protected $variationsType = 'Dokan_Service_Analytics_ExperimentVariations';
        protected $variationsDataType = 'array';
        public $webPropertyId;
        public $winnerConfidenceLevel;
        public $winnerFound;
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setCreated($created)
        {
        }
        public function getCreated()
        {
        }
        public function setDescription($description)
        {
        }
        public function getDescription()
        {
        }
        public function setEditableInGaUi($editableInGaUi)
        {
        }
        public function getEditableInGaUi()
        {
        }
        public function setEndTime($endTime)
        {
        }
        public function getEndTime()
        {
        }
        public function setEqualWeighting($equalWeighting)
        {
        }
        public function getEqualWeighting()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setInternalWebPropertyId($internalWebPropertyId)
        {
        }
        public function getInternalWebPropertyId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setMinimumExperimentLengthInDays($minimumExperimentLengthInDays)
        {
        }
        public function getMinimumExperimentLengthInDays()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setObjectiveMetric($objectiveMetric)
        {
        }
        public function getObjectiveMetric()
        {
        }
        public function setOptimizationType($optimizationType)
        {
        }
        public function getOptimizationType()
        {
        }
        public function setParentLink(\Dokan_Service_Analytics_ExperimentParentLink $parentLink)
        {
        }
        public function getParentLink()
        {
        }
        public function setProfileId($profileId)
        {
        }
        public function getProfileId()
        {
        }
        public function setReasonExperimentEnded($reasonExperimentEnded)
        {
        }
        public function getReasonExperimentEnded()
        {
        }
        public function setRewriteVariationUrlsAsOriginal($rewriteVariationUrlsAsOriginal)
        {
        }
        public function getRewriteVariationUrlsAsOriginal()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
        public function setServingFramework($servingFramework)
        {
        }
        public function getServingFramework()
        {
        }
        public function setSnippet($snippet)
        {
        }
        public function getSnippet()
        {
        }
        public function setStartTime($startTime)
        {
        }
        public function getStartTime()
        {
        }
        public function setStatus($status)
        {
        }
        public function getStatus()
        {
        }
        public function setTrafficCoverage($trafficCoverage)
        {
        }
        public function getTrafficCoverage()
        {
        }
        public function setUpdated($updated)
        {
        }
        public function getUpdated()
        {
        }
        public function setVariations($variations)
        {
        }
        public function getVariations()
        {
        }
        public function setWebPropertyId($webPropertyId)
        {
        }
        public function getWebPropertyId()
        {
        }
        public function setWinnerConfidenceLevel($winnerConfidenceLevel)
        {
        }
        public function getWinnerConfidenceLevel()
        {
        }
        public function setWinnerFound($winnerFound)
        {
        }
        public function getWinnerFound()
        {
        }
    }
    class Dokan_Service_Analytics_ExperimentParentLink extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $href;
        public $type;
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
    }
    class Dokan_Service_Analytics_ExperimentVariations extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $name;
        public $status;
        public $url;
        public $weight;
        public $won;
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setStatus($status)
        {
        }
        public function getStatus()
        {
        }
        public function setUrl($url)
        {
        }
        public function getUrl()
        {
        }
        public function setWeight($weight)
        {
        }
        public function getWeight()
        {
        }
        public function setWon($won)
        {
        }
        public function getWon()
        {
        }
    }
    class Dokan_Service_Analytics_Experiments extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_Experiment';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public $username;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setUsername($username)
        {
        }
        public function getUsername()
        {
        }
    }
    class Dokan_Service_Analytics_Filter extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $accountId;
        protected $advancedDetailsType = 'Dokan_Service_Analytics_FilterAdvancedDetails';
        protected $advancedDetailsDataType = '';
        public $created;
        protected $excludeDetailsType = 'Dokan_Service_Analytics_FilterExpression';
        protected $excludeDetailsDataType = '';
        public $id;
        protected $includeDetailsType = 'Dokan_Service_Analytics_FilterExpression';
        protected $includeDetailsDataType = '';
        public $kind;
        protected $lowercaseDetailsType = 'Dokan_Service_Analytics_FilterLowercaseDetails';
        protected $lowercaseDetailsDataType = '';
        public $name;
        protected $parentLinkType = 'Dokan_Service_Analytics_FilterParentLink';
        protected $parentLinkDataType = '';
        protected $searchAndReplaceDetailsType = 'Dokan_Service_Analytics_FilterSearchAndReplaceDetails';
        protected $searchAndReplaceDetailsDataType = '';
        public $selfLink;
        public $type;
        public $updated;
        protected $uppercaseDetailsType = 'Dokan_Service_Analytics_FilterUppercaseDetails';
        protected $uppercaseDetailsDataType = '';
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setAdvancedDetails(\Dokan_Service_Analytics_FilterAdvancedDetails $advancedDetails)
        {
        }
        public function getAdvancedDetails()
        {
        }
        public function setCreated($created)
        {
        }
        public function getCreated()
        {
        }
        public function setExcludeDetails(\Dokan_Service_Analytics_FilterExpression $excludeDetails)
        {
        }
        public function getExcludeDetails()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setIncludeDetails(\Dokan_Service_Analytics_FilterExpression $includeDetails)
        {
        }
        public function getIncludeDetails()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setLowercaseDetails(\Dokan_Service_Analytics_FilterLowercaseDetails $lowercaseDetails)
        {
        }
        public function getLowercaseDetails()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setParentLink(\Dokan_Service_Analytics_FilterParentLink $parentLink)
        {
        }
        public function getParentLink()
        {
        }
        public function setSearchAndReplaceDetails(\Dokan_Service_Analytics_FilterSearchAndReplaceDetails $searchAndReplaceDetails)
        {
        }
        public function getSearchAndReplaceDetails()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
        public function setUpdated($updated)
        {
        }
        public function getUpdated()
        {
        }
        public function setUppercaseDetails(\Dokan_Service_Analytics_FilterUppercaseDetails $uppercaseDetails)
        {
        }
        public function getUppercaseDetails()
        {
        }
    }
    class Dokan_Service_Analytics_FilterAdvancedDetails extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $caseSensitive;
        public $extractA;
        public $extractB;
        public $fieldA;
        public $fieldAIndex;
        public $fieldARequired;
        public $fieldB;
        public $fieldBIndex;
        public $fieldBRequired;
        public $outputConstructor;
        public $outputToField;
        public $outputToFieldIndex;
        public $overrideOutputField;
        public function setCaseSensitive($caseSensitive)
        {
        }
        public function getCaseSensitive()
        {
        }
        public function setExtractA($extractA)
        {
        }
        public function getExtractA()
        {
        }
        public function setExtractB($extractB)
        {
        }
        public function getExtractB()
        {
        }
        public function setFieldA($fieldA)
        {
        }
        public function getFieldA()
        {
        }
        public function setFieldAIndex($fieldAIndex)
        {
        }
        public function getFieldAIndex()
        {
        }
        public function setFieldARequired($fieldARequired)
        {
        }
        public function getFieldARequired()
        {
        }
        public function setFieldB($fieldB)
        {
        }
        public function getFieldB()
        {
        }
        public function setFieldBIndex($fieldBIndex)
        {
        }
        public function getFieldBIndex()
        {
        }
        public function setFieldBRequired($fieldBRequired)
        {
        }
        public function getFieldBRequired()
        {
        }
        public function setOutputConstructor($outputConstructor)
        {
        }
        public function getOutputConstructor()
        {
        }
        public function setOutputToField($outputToField)
        {
        }
        public function getOutputToField()
        {
        }
        public function setOutputToFieldIndex($outputToFieldIndex)
        {
        }
        public function getOutputToFieldIndex()
        {
        }
        public function setOverrideOutputField($overrideOutputField)
        {
        }
        public function getOverrideOutputField()
        {
        }
    }
    class Dokan_Service_Analytics_FilterExpression extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $caseSensitive;
        public $expressionValue;
        public $field;
        public $fieldIndex;
        public $kind;
        public $matchType;
        public function setCaseSensitive($caseSensitive)
        {
        }
        public function getCaseSensitive()
        {
        }
        public function setExpressionValue($expressionValue)
        {
        }
        public function getExpressionValue()
        {
        }
        public function setField($field)
        {
        }
        public function getField()
        {
        }
        public function setFieldIndex($fieldIndex)
        {
        }
        public function getFieldIndex()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setMatchType($matchType)
        {
        }
        public function getMatchType()
        {
        }
    }
    class Dokan_Service_Analytics_FilterLowercaseDetails extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $field;
        public $fieldIndex;
        public function setField($field)
        {
        }
        public function getField()
        {
        }
        public function setFieldIndex($fieldIndex)
        {
        }
        public function getFieldIndex()
        {
        }
    }
    class Dokan_Service_Analytics_FilterParentLink extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $href;
        public $type;
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
    }
    class Dokan_Service_Analytics_FilterRef extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $accountId;
        public $href;
        public $id;
        public $kind;
        public $name;
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
    }
    class Dokan_Service_Analytics_FilterSearchAndReplaceDetails extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $caseSensitive;
        public $field;
        public $fieldIndex;
        public $replaceString;
        public $searchString;
        public function setCaseSensitive($caseSensitive)
        {
        }
        public function getCaseSensitive()
        {
        }
        public function setField($field)
        {
        }
        public function getField()
        {
        }
        public function setFieldIndex($fieldIndex)
        {
        }
        public function getFieldIndex()
        {
        }
        public function setReplaceString($replaceString)
        {
        }
        public function getReplaceString()
        {
        }
        public function setSearchString($searchString)
        {
        }
        public function getSearchString()
        {
        }
    }
    class Dokan_Service_Analytics_FilterUppercaseDetails extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $field;
        public $fieldIndex;
        public function setField($field)
        {
        }
        public function getField()
        {
        }
        public function setFieldIndex($fieldIndex)
        {
        }
        public function getFieldIndex()
        {
        }
    }
    class Dokan_Service_Analytics_Filters extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_Filter';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public $username;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setUsername($username)
        {
        }
        public function getUsername()
        {
        }
    }
    class Dokan_Service_Analytics_GaData extends \Dokan_Collection
    {
        protected $collection_key = 'rows';
        protected $internal_gapi_mappings = array();
        protected $columnHeadersType = 'Dokan_Service_Analytics_GaDataColumnHeaders';
        protected $columnHeadersDataType = 'array';
        public $containsSampledData;
        protected $dataTableType = 'Dokan_Service_Analytics_GaDataDataTable';
        protected $dataTableDataType = '';
        public $id;
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        protected $profileInfoType = 'Dokan_Service_Analytics_GaDataProfileInfo';
        protected $profileInfoDataType = '';
        protected $queryType = 'Dokan_Service_Analytics_GaDataQuery';
        protected $queryDataType = '';
        public $rows;
        public $sampleSize;
        public $sampleSpace;
        public $selfLink;
        public $totalResults;
        public $totalsForAllResults;
        public function setColumnHeaders($columnHeaders)
        {
        }
        public function getColumnHeaders()
        {
        }
        public function setContainsSampledData($containsSampledData)
        {
        }
        public function getContainsSampledData()
        {
        }
        public function setDataTable(\Dokan_Service_Analytics_GaDataDataTable $dataTable)
        {
        }
        public function getDataTable()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setProfileInfo(\Dokan_Service_Analytics_GaDataProfileInfo $profileInfo)
        {
        }
        public function getProfileInfo()
        {
        }
        public function setQuery(\Dokan_Service_Analytics_GaDataQuery $query)
        {
        }
        public function getQuery()
        {
        }
        public function setRows($rows)
        {
        }
        public function getRows()
        {
        }
        public function setSampleSize($sampleSize)
        {
        }
        public function getSampleSize()
        {
        }
        public function setSampleSpace($sampleSpace)
        {
        }
        public function getSampleSpace()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setTotalsForAllResults($totalsForAllResults)
        {
        }
        public function getTotalsForAllResults()
        {
        }
    }
    class Dokan_Service_Analytics_GaDataColumnHeaders extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $columnType;
        public $dataType;
        public $name;
        public function setColumnType($columnType)
        {
        }
        public function getColumnType()
        {
        }
        public function setDataType($dataType)
        {
        }
        public function getDataType()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
    }
    class Dokan_Service_Analytics_GaDataDataTable extends \Dokan_Collection
    {
        protected $collection_key = 'rows';
        protected $internal_gapi_mappings = array();
        protected $colsType = 'Dokan_Service_Analytics_GaDataDataTableCols';
        protected $colsDataType = 'array';
        protected $rowsType = 'Dokan_Service_Analytics_GaDataDataTableRows';
        protected $rowsDataType = 'array';
        public function setCols($cols)
        {
        }
        public function getCols()
        {
        }
        public function setRows($rows)
        {
        }
        public function getRows()
        {
        }
    }
    class Dokan_Service_Analytics_GaDataDataTableCols extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $id;
        public $label;
        public $type;
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setLabel($label)
        {
        }
        public function getLabel()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
    }
    class Dokan_Service_Analytics_GaDataDataTableRows extends \Dokan_Collection
    {
        protected $collection_key = 'c';
        protected $internal_gapi_mappings = array();
        protected $cType = 'Dokan_Service_Analytics_GaDataDataTableRowsC';
        protected $cDataType = 'array';
        public function setC($c)
        {
        }
        public function getC()
        {
        }
    }
    class Dokan_Service_Analytics_GaDataDataTableRowsC extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $v;
        public function setV($v)
        {
        }
        public function getV()
        {
        }
    }
    class Dokan_Service_Analytics_GaDataProfileInfo extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $accountId;
        public $internalWebPropertyId;
        public $profileId;
        public $profileName;
        public $tableId;
        public $webPropertyId;
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setInternalWebPropertyId($internalWebPropertyId)
        {
        }
        public function getInternalWebPropertyId()
        {
        }
        public function setProfileId($profileId)
        {
        }
        public function getProfileId()
        {
        }
        public function setProfileName($profileName)
        {
        }
        public function getProfileName()
        {
        }
        public function setTableId($tableId)
        {
        }
        public function getTableId()
        {
        }
        public function setWebPropertyId($webPropertyId)
        {
        }
        public function getWebPropertyId()
        {
        }
    }
    class Dokan_Service_Analytics_GaDataQuery extends \Dokan_Collection
    {
        protected $collection_key = 'sort';
        protected $internal_gapi_mappings = array("endDate" => "end-date", "maxResults" => "max-results", "startDate" => "start-date", "startIndex" => "start-index");
        public $dimensions;
        public $endDate;
        public $filters;
        public $ids;
        public $maxResults;
        public $metrics;
        public $samplingLevel;
        public $segment;
        public $sort;
        public $startDate;
        public $startIndex;
        public function setDimensions($dimensions)
        {
        }
        public function getDimensions()
        {
        }
        public function setEndDate($endDate)
        {
        }
        public function getEndDate()
        {
        }
        public function setFilters($filters)
        {
        }
        public function getFilters()
        {
        }
        public function setIds($ids)
        {
        }
        public function getIds()
        {
        }
        public function setMaxResults($maxResults)
        {
        }
        public function getMaxResults()
        {
        }
        public function setMetrics($metrics)
        {
        }
        public function getMetrics()
        {
        }
        public function setSamplingLevel($samplingLevel)
        {
        }
        public function getSamplingLevel()
        {
        }
        public function setSegment($segment)
        {
        }
        public function getSegment()
        {
        }
        public function setSort($sort)
        {
        }
        public function getSort()
        {
        }
        public function setStartDate($startDate)
        {
        }
        public function getStartDate()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
    }
    class Dokan_Service_Analytics_Goal extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $accountId;
        public $active;
        public $created;
        protected $eventDetailsType = 'Dokan_Service_Analytics_GoalEventDetails';
        protected $eventDetailsDataType = '';
        public $id;
        public $internalWebPropertyId;
        public $kind;
        public $name;
        protected $parentLinkType = 'Dokan_Service_Analytics_GoalParentLink';
        protected $parentLinkDataType = '';
        public $profileId;
        public $selfLink;
        public $type;
        public $updated;
        protected $urlDestinationDetailsType = 'Dokan_Service_Analytics_GoalUrlDestinationDetails';
        protected $urlDestinationDetailsDataType = '';
        public $value;
        protected $visitNumPagesDetailsType = 'Dokan_Service_Analytics_GoalVisitNumPagesDetails';
        protected $visitNumPagesDetailsDataType = '';
        protected $visitTimeOnSiteDetailsType = 'Dokan_Service_Analytics_GoalVisitTimeOnSiteDetails';
        protected $visitTimeOnSiteDetailsDataType = '';
        public $webPropertyId;
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setActive($active)
        {
        }
        public function getActive()
        {
        }
        public function setCreated($created)
        {
        }
        public function getCreated()
        {
        }
        public function setEventDetails(\Dokan_Service_Analytics_GoalEventDetails $eventDetails)
        {
        }
        public function getEventDetails()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setInternalWebPropertyId($internalWebPropertyId)
        {
        }
        public function getInternalWebPropertyId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setParentLink(\Dokan_Service_Analytics_GoalParentLink $parentLink)
        {
        }
        public function getParentLink()
        {
        }
        public function setProfileId($profileId)
        {
        }
        public function getProfileId()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
        public function setUpdated($updated)
        {
        }
        public function getUpdated()
        {
        }
        public function setUrlDestinationDetails(\Dokan_Service_Analytics_GoalUrlDestinationDetails $urlDestinationDetails)
        {
        }
        public function getUrlDestinationDetails()
        {
        }
        public function setValue($value)
        {
        }
        public function getValue()
        {
        }
        public function setVisitNumPagesDetails(\Dokan_Service_Analytics_GoalVisitNumPagesDetails $visitNumPagesDetails)
        {
        }
        public function getVisitNumPagesDetails()
        {
        }
        public function setVisitTimeOnSiteDetails(\Dokan_Service_Analytics_GoalVisitTimeOnSiteDetails $visitTimeOnSiteDetails)
        {
        }
        public function getVisitTimeOnSiteDetails()
        {
        }
        public function setWebPropertyId($webPropertyId)
        {
        }
        public function getWebPropertyId()
        {
        }
    }
    class Dokan_Service_Analytics_GoalEventDetails extends \Dokan_Collection
    {
        protected $collection_key = 'eventConditions';
        protected $internal_gapi_mappings = array();
        protected $eventConditionsType = 'Dokan_Service_Analytics_GoalEventDetailsEventConditions';
        protected $eventConditionsDataType = 'array';
        public $useEventValue;
        public function setEventConditions($eventConditions)
        {
        }
        public function getEventConditions()
        {
        }
        public function setUseEventValue($useEventValue)
        {
        }
        public function getUseEventValue()
        {
        }
    }
    class Dokan_Service_Analytics_GoalEventDetailsEventConditions extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $comparisonType;
        public $comparisonValue;
        public $expression;
        public $matchType;
        public $type;
        public function setComparisonType($comparisonType)
        {
        }
        public function getComparisonType()
        {
        }
        public function setComparisonValue($comparisonValue)
        {
        }
        public function getComparisonValue()
        {
        }
        public function setExpression($expression)
        {
        }
        public function getExpression()
        {
        }
        public function setMatchType($matchType)
        {
        }
        public function getMatchType()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
    }
    class Dokan_Service_Analytics_GoalParentLink extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $href;
        public $type;
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
    }
    class Dokan_Service_Analytics_GoalUrlDestinationDetails extends \Dokan_Collection
    {
        protected $collection_key = 'steps';
        protected $internal_gapi_mappings = array();
        public $caseSensitive;
        public $firstStepRequired;
        public $matchType;
        protected $stepsType = 'Dokan_Service_Analytics_GoalUrlDestinationDetailsSteps';
        protected $stepsDataType = 'array';
        public $url;
        public function setCaseSensitive($caseSensitive)
        {
        }
        public function getCaseSensitive()
        {
        }
        public function setFirstStepRequired($firstStepRequired)
        {
        }
        public function getFirstStepRequired()
        {
        }
        public function setMatchType($matchType)
        {
        }
        public function getMatchType()
        {
        }
        public function setSteps($steps)
        {
        }
        public function getSteps()
        {
        }
        public function setUrl($url)
        {
        }
        public function getUrl()
        {
        }
    }
    class Dokan_Service_Analytics_GoalUrlDestinationDetailsSteps extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $name;
        public $number;
        public $url;
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setNumber($number)
        {
        }
        public function getNumber()
        {
        }
        public function setUrl($url)
        {
        }
        public function getUrl()
        {
        }
    }
    class Dokan_Service_Analytics_GoalVisitNumPagesDetails extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $comparisonType;
        public $comparisonValue;
        public function setComparisonType($comparisonType)
        {
        }
        public function getComparisonType()
        {
        }
        public function setComparisonValue($comparisonValue)
        {
        }
        public function getComparisonValue()
        {
        }
    }
    class Dokan_Service_Analytics_GoalVisitTimeOnSiteDetails extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $comparisonType;
        public $comparisonValue;
        public function setComparisonType($comparisonType)
        {
        }
        public function getComparisonType()
        {
        }
        public function setComparisonValue($comparisonValue)
        {
        }
        public function getComparisonValue()
        {
        }
    }
    class Dokan_Service_Analytics_Goals extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_Goal';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public $username;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setUsername($username)
        {
        }
        public function getUsername()
        {
        }
    }
    class Dokan_Service_Analytics_McfData extends \Dokan_Collection
    {
        protected $collection_key = 'rows';
        protected $internal_gapi_mappings = array();
        protected $columnHeadersType = 'Dokan_Service_Analytics_McfDataColumnHeaders';
        protected $columnHeadersDataType = 'array';
        public $containsSampledData;
        public $id;
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        protected $profileInfoType = 'Dokan_Service_Analytics_McfDataProfileInfo';
        protected $profileInfoDataType = '';
        protected $queryType = 'Dokan_Service_Analytics_McfDataQuery';
        protected $queryDataType = '';
        protected $rowsType = 'Dokan_Service_Analytics_McfDataRows';
        protected $rowsDataType = 'array';
        public $sampleSize;
        public $sampleSpace;
        public $selfLink;
        public $totalResults;
        public $totalsForAllResults;
        public function setColumnHeaders($columnHeaders)
        {
        }
        public function getColumnHeaders()
        {
        }
        public function setContainsSampledData($containsSampledData)
        {
        }
        public function getContainsSampledData()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setProfileInfo(\Dokan_Service_Analytics_McfDataProfileInfo $profileInfo)
        {
        }
        public function getProfileInfo()
        {
        }
        public function setQuery(\Dokan_Service_Analytics_McfDataQuery $query)
        {
        }
        public function getQuery()
        {
        }
        public function setRows($rows)
        {
        }
        public function getRows()
        {
        }
        public function setSampleSize($sampleSize)
        {
        }
        public function getSampleSize()
        {
        }
        public function setSampleSpace($sampleSpace)
        {
        }
        public function getSampleSpace()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setTotalsForAllResults($totalsForAllResults)
        {
        }
        public function getTotalsForAllResults()
        {
        }
    }
    class Dokan_Service_Analytics_McfDataColumnHeaders extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $columnType;
        public $dataType;
        public $name;
        public function setColumnType($columnType)
        {
        }
        public function getColumnType()
        {
        }
        public function setDataType($dataType)
        {
        }
        public function getDataType()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
    }
    class Dokan_Service_Analytics_McfDataProfileInfo extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $accountId;
        public $internalWebPropertyId;
        public $profileId;
        public $profileName;
        public $tableId;
        public $webPropertyId;
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setInternalWebPropertyId($internalWebPropertyId)
        {
        }
        public function getInternalWebPropertyId()
        {
        }
        public function setProfileId($profileId)
        {
        }
        public function getProfileId()
        {
        }
        public function setProfileName($profileName)
        {
        }
        public function getProfileName()
        {
        }
        public function setTableId($tableId)
        {
        }
        public function getTableId()
        {
        }
        public function setWebPropertyId($webPropertyId)
        {
        }
        public function getWebPropertyId()
        {
        }
    }
    class Dokan_Service_Analytics_McfDataQuery extends \Dokan_Collection
    {
        protected $collection_key = 'sort';
        protected $internal_gapi_mappings = array("endDate" => "end-date", "maxResults" => "max-results", "startDate" => "start-date", "startIndex" => "start-index");
        public $dimensions;
        public $endDate;
        public $filters;
        public $ids;
        public $maxResults;
        public $metrics;
        public $samplingLevel;
        public $segment;
        public $sort;
        public $startDate;
        public $startIndex;
        public function setDimensions($dimensions)
        {
        }
        public function getDimensions()
        {
        }
        public function setEndDate($endDate)
        {
        }
        public function getEndDate()
        {
        }
        public function setFilters($filters)
        {
        }
        public function getFilters()
        {
        }
        public function setIds($ids)
        {
        }
        public function getIds()
        {
        }
        public function setMaxResults($maxResults)
        {
        }
        public function getMaxResults()
        {
        }
        public function setMetrics($metrics)
        {
        }
        public function getMetrics()
        {
        }
        public function setSamplingLevel($samplingLevel)
        {
        }
        public function getSamplingLevel()
        {
        }
        public function setSegment($segment)
        {
        }
        public function getSegment()
        {
        }
        public function setSort($sort)
        {
        }
        public function getSort()
        {
        }
        public function setStartDate($startDate)
        {
        }
        public function getStartDate()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
    }
    class Dokan_Service_Analytics_McfDataRows extends \Dokan_Collection
    {
        protected $collection_key = 'conversionPathValue';
        protected $internal_gapi_mappings = array();
        protected $conversionPathValueType = 'Dokan_Service_Analytics_McfDataRowsConversionPathValue';
        protected $conversionPathValueDataType = 'array';
        public $primitiveValue;
        public function setConversionPathValue($conversionPathValue)
        {
        }
        public function getConversionPathValue()
        {
        }
        public function setPrimitiveValue($primitiveValue)
        {
        }
        public function getPrimitiveValue()
        {
        }
    }
    class Dokan_Service_Analytics_McfDataRowsConversionPathValue extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $interactionType;
        public $nodeValue;
        public function setInteractionType($interactionType)
        {
        }
        public function getInteractionType()
        {
        }
        public function setNodeValue($nodeValue)
        {
        }
        public function getNodeValue()
        {
        }
    }
    class Dokan_Service_Analytics_Profile extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $accountId;
        public $botFilteringEnabled;
        protected $childLinkType = 'Dokan_Service_Analytics_ProfileChildLink';
        protected $childLinkDataType = '';
        public $created;
        public $currency;
        public $defaultPage;
        public $eCommerceTracking;
        public $enhancedECommerceTracking;
        public $excludeQueryParameters;
        public $id;
        public $internalWebPropertyId;
        public $kind;
        public $name;
        protected $parentLinkType = 'Dokan_Service_Analytics_ProfileParentLink';
        protected $parentLinkDataType = '';
        protected $permissionsType = 'Dokan_Service_Analytics_ProfilePermissions';
        protected $permissionsDataType = '';
        public $selfLink;
        public $siteSearchCategoryParameters;
        public $siteSearchQueryParameters;
        public $stripSiteSearchCategoryParameters;
        public $stripSiteSearchQueryParameters;
        public $timezone;
        public $type;
        public $updated;
        public $webPropertyId;
        public $websiteUrl;
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setBotFilteringEnabled($botFilteringEnabled)
        {
        }
        public function getBotFilteringEnabled()
        {
        }
        public function setChildLink(\Dokan_Service_Analytics_ProfileChildLink $childLink)
        {
        }
        public function getChildLink()
        {
        }
        public function setCreated($created)
        {
        }
        public function getCreated()
        {
        }
        public function setCurrency($currency)
        {
        }
        public function getCurrency()
        {
        }
        public function setDefaultPage($defaultPage)
        {
        }
        public function getDefaultPage()
        {
        }
        public function setECommerceTracking($eCommerceTracking)
        {
        }
        public function getECommerceTracking()
        {
        }
        public function setEnhancedECommerceTracking($enhancedECommerceTracking)
        {
        }
        public function getEnhancedECommerceTracking()
        {
        }
        public function setExcludeQueryParameters($excludeQueryParameters)
        {
        }
        public function getExcludeQueryParameters()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setInternalWebPropertyId($internalWebPropertyId)
        {
        }
        public function getInternalWebPropertyId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setParentLink(\Dokan_Service_Analytics_ProfileParentLink $parentLink)
        {
        }
        public function getParentLink()
        {
        }
        public function setPermissions(\Dokan_Service_Analytics_ProfilePermissions $permissions)
        {
        }
        public function getPermissions()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
        public function setSiteSearchCategoryParameters($siteSearchCategoryParameters)
        {
        }
        public function getSiteSearchCategoryParameters()
        {
        }
        public function setSiteSearchQueryParameters($siteSearchQueryParameters)
        {
        }
        public function getSiteSearchQueryParameters()
        {
        }
        public function setStripSiteSearchCategoryParameters($stripSiteSearchCategoryParameters)
        {
        }
        public function getStripSiteSearchCategoryParameters()
        {
        }
        public function setStripSiteSearchQueryParameters($stripSiteSearchQueryParameters)
        {
        }
        public function getStripSiteSearchQueryParameters()
        {
        }
        public function setTimezone($timezone)
        {
        }
        public function getTimezone()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
        public function setUpdated($updated)
        {
        }
        public function getUpdated()
        {
        }
        public function setWebPropertyId($webPropertyId)
        {
        }
        public function getWebPropertyId()
        {
        }
        public function setWebsiteUrl($websiteUrl)
        {
        }
        public function getWebsiteUrl()
        {
        }
    }
    class Dokan_Service_Analytics_ProfileChildLink extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $href;
        public $type;
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
    }
    class Dokan_Service_Analytics_ProfileFilterLink extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        protected $filterRefType = 'Dokan_Service_Analytics_FilterRef';
        protected $filterRefDataType = '';
        public $id;
        public $kind;
        protected $profileRefType = 'Dokan_Service_Analytics_ProfileRef';
        protected $profileRefDataType = '';
        public $rank;
        public $selfLink;
        public function setFilterRef(\Dokan_Service_Analytics_FilterRef $filterRef)
        {
        }
        public function getFilterRef()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setProfileRef(\Dokan_Service_Analytics_ProfileRef $profileRef)
        {
        }
        public function getProfileRef()
        {
        }
        public function setRank($rank)
        {
        }
        public function getRank()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
    }
    class Dokan_Service_Analytics_ProfileFilterLinks extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_ProfileFilterLink';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public $username;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setUsername($username)
        {
        }
        public function getUsername()
        {
        }
    }
    class Dokan_Service_Analytics_ProfileParentLink extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $href;
        public $type;
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
    }
    class Dokan_Service_Analytics_ProfilePermissions extends \Dokan_Collection
    {
        protected $collection_key = 'effective';
        protected $internal_gapi_mappings = array();
        public $effective;
        public function setEffective($effective)
        {
        }
        public function getEffective()
        {
        }
    }
    class Dokan_Service_Analytics_ProfileRef extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $accountId;
        public $href;
        public $id;
        public $internalWebPropertyId;
        public $kind;
        public $name;
        public $webPropertyId;
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setInternalWebPropertyId($internalWebPropertyId)
        {
        }
        public function getInternalWebPropertyId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setWebPropertyId($webPropertyId)
        {
        }
        public function getWebPropertyId()
        {
        }
    }
    class Dokan_Service_Analytics_ProfileSummary extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $id;
        public $kind;
        public $name;
        public $type;
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
    }
    class Dokan_Service_Analytics_Profiles extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_Profile';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public $username;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setUsername($username)
        {
        }
        public function getUsername()
        {
        }
    }
    class Dokan_Service_Analytics_RealtimeData extends \Dokan_Collection
    {
        protected $collection_key = 'rows';
        protected $internal_gapi_mappings = array();
        protected $columnHeadersType = 'Dokan_Service_Analytics_RealtimeDataColumnHeaders';
        protected $columnHeadersDataType = 'array';
        public $id;
        public $kind;
        protected $profileInfoType = 'Dokan_Service_Analytics_RealtimeDataProfileInfo';
        protected $profileInfoDataType = '';
        protected $queryType = 'Dokan_Service_Analytics_RealtimeDataQuery';
        protected $queryDataType = '';
        public $rows;
        public $selfLink;
        public $totalResults;
        public $totalsForAllResults;
        public function setColumnHeaders($columnHeaders)
        {
        }
        public function getColumnHeaders()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setProfileInfo(\Dokan_Service_Analytics_RealtimeDataProfileInfo $profileInfo)
        {
        }
        public function getProfileInfo()
        {
        }
        public function setQuery(\Dokan_Service_Analytics_RealtimeDataQuery $query)
        {
        }
        public function getQuery()
        {
        }
        public function setRows($rows)
        {
        }
        public function getRows()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setTotalsForAllResults($totalsForAllResults)
        {
        }
        public function getTotalsForAllResults()
        {
        }
    }
    class Dokan_Service_Analytics_RealtimeDataColumnHeaders extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $columnType;
        public $dataType;
        public $name;
        public function setColumnType($columnType)
        {
        }
        public function getColumnType()
        {
        }
        public function setDataType($dataType)
        {
        }
        public function getDataType()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
    }
    class Dokan_Service_Analytics_RealtimeDataProfileInfo extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $accountId;
        public $internalWebPropertyId;
        public $profileId;
        public $profileName;
        public $tableId;
        public $webPropertyId;
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setInternalWebPropertyId($internalWebPropertyId)
        {
        }
        public function getInternalWebPropertyId()
        {
        }
        public function setProfileId($profileId)
        {
        }
        public function getProfileId()
        {
        }
        public function setProfileName($profileName)
        {
        }
        public function getProfileName()
        {
        }
        public function setTableId($tableId)
        {
        }
        public function getTableId()
        {
        }
        public function setWebPropertyId($webPropertyId)
        {
        }
        public function getWebPropertyId()
        {
        }
    }
    class Dokan_Service_Analytics_RealtimeDataQuery extends \Dokan_Collection
    {
        protected $collection_key = 'sort';
        protected $internal_gapi_mappings = array("maxResults" => "max-results");
        public $dimensions;
        public $filters;
        public $ids;
        public $maxResults;
        public $metrics;
        public $sort;
        public function setDimensions($dimensions)
        {
        }
        public function getDimensions()
        {
        }
        public function setFilters($filters)
        {
        }
        public function getFilters()
        {
        }
        public function setIds($ids)
        {
        }
        public function getIds()
        {
        }
        public function setMaxResults($maxResults)
        {
        }
        public function getMaxResults()
        {
        }
        public function setMetrics($metrics)
        {
        }
        public function getMetrics()
        {
        }
        public function setSort($sort)
        {
        }
        public function getSort()
        {
        }
    }
    class Dokan_Service_Analytics_Segment extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $created;
        public $definition;
        public $id;
        public $kind;
        public $name;
        public $segmentId;
        public $selfLink;
        public $type;
        public $updated;
        public function setCreated($created)
        {
        }
        public function getCreated()
        {
        }
        public function setDefinition($definition)
        {
        }
        public function getDefinition()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setSegmentId($segmentId)
        {
        }
        public function getSegmentId()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
        public function setUpdated($updated)
        {
        }
        public function getUpdated()
        {
        }
    }
    class Dokan_Service_Analytics_Segments extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_Segment';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public $username;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setUsername($username)
        {
        }
        public function getUsername()
        {
        }
    }
    class Dokan_Service_Analytics_UnsampledReport extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array("endDate" => "end-date", "startDate" => "start-date");
        public $accountId;
        protected $cloudStorageDownloadDetailsType = 'Dokan_Service_Analytics_UnsampledReportCloudStorageDownloadDetails';
        protected $cloudStorageDownloadDetailsDataType = '';
        public $created;
        public $dimensions;
        public $downloadType;
        protected $driveDownloadDetailsType = 'Dokan_Service_Analytics_UnsampledReportDriveDownloadDetails';
        protected $driveDownloadDetailsDataType = '';
        public $endDate;
        public $filters;
        public $id;
        public $kind;
        public $metrics;
        public $profileId;
        public $segment;
        public $selfLink;
        public $startDate;
        public $status;
        public $title;
        public $updated;
        public $webPropertyId;
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setCloudStorageDownloadDetails(\Dokan_Service_Analytics_UnsampledReportCloudStorageDownloadDetails $cloudStorageDownloadDetails)
        {
        }
        public function getCloudStorageDownloadDetails()
        {
        }
        public function setCreated($created)
        {
        }
        public function getCreated()
        {
        }
        public function setDimensions($dimensions)
        {
        }
        public function getDimensions()
        {
        }
        public function setDownloadType($downloadType)
        {
        }
        public function getDownloadType()
        {
        }
        public function setDriveDownloadDetails(\Dokan_Service_Analytics_UnsampledReportDriveDownloadDetails $driveDownloadDetails)
        {
        }
        public function getDriveDownloadDetails()
        {
        }
        public function setEndDate($endDate)
        {
        }
        public function getEndDate()
        {
        }
        public function setFilters($filters)
        {
        }
        public function getFilters()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setMetrics($metrics)
        {
        }
        public function getMetrics()
        {
        }
        public function setProfileId($profileId)
        {
        }
        public function getProfileId()
        {
        }
        public function setSegment($segment)
        {
        }
        public function getSegment()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
        public function setStartDate($startDate)
        {
        }
        public function getStartDate()
        {
        }
        public function setStatus($status)
        {
        }
        public function getStatus()
        {
        }
        public function setTitle($title)
        {
        }
        public function getTitle()
        {
        }
        public function setUpdated($updated)
        {
        }
        public function getUpdated()
        {
        }
        public function setWebPropertyId($webPropertyId)
        {
        }
        public function getWebPropertyId()
        {
        }
    }
    class Dokan_Service_Analytics_UnsampledReportCloudStorageDownloadDetails extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $bucketId;
        public $objectId;
        public function setBucketId($bucketId)
        {
        }
        public function getBucketId()
        {
        }
        public function setObjectId($objectId)
        {
        }
        public function getObjectId()
        {
        }
    }
    class Dokan_Service_Analytics_UnsampledReportDriveDownloadDetails extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $documentId;
        public function setDocumentId($documentId)
        {
        }
        public function getDocumentId()
        {
        }
    }
    class Dokan_Service_Analytics_UnsampledReports extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_UnsampledReport';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public $username;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setUsername($username)
        {
        }
        public function getUsername()
        {
        }
    }
    class Dokan_Service_Analytics_Upload extends \Dokan_Collection
    {
        protected $collection_key = 'errors';
        protected $internal_gapi_mappings = array();
        public $accountId;
        public $customDataSourceId;
        public $errors;
        public $id;
        public $kind;
        public $status;
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setCustomDataSourceId($customDataSourceId)
        {
        }
        public function getCustomDataSourceId()
        {
        }
        public function setErrors($errors)
        {
        }
        public function getErrors()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setStatus($status)
        {
        }
        public function getStatus()
        {
        }
    }
    class Dokan_Service_Analytics_Uploads extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_Upload';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
    }
    class Dokan_Service_Analytics_UserRef extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $email;
        public $id;
        public $kind;
        public function setEmail($email)
        {
        }
        public function getEmail()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
    }
    class Dokan_Service_Analytics_WebPropertyRef extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $accountId;
        public $href;
        public $id;
        public $internalWebPropertyId;
        public $kind;
        public $name;
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setInternalWebPropertyId($internalWebPropertyId)
        {
        }
        public function getInternalWebPropertyId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
    }
    class Dokan_Service_Analytics_WebPropertySummary extends \Dokan_Collection
    {
        protected $collection_key = 'profiles';
        protected $internal_gapi_mappings = array();
        public $id;
        public $internalWebPropertyId;
        public $kind;
        public $level;
        public $name;
        protected $profilesType = 'Dokan_Service_Analytics_ProfileSummary';
        protected $profilesDataType = 'array';
        public $websiteUrl;
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setInternalWebPropertyId($internalWebPropertyId)
        {
        }
        public function getInternalWebPropertyId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setLevel($level)
        {
        }
        public function getLevel()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setProfiles($profiles)
        {
        }
        public function getProfiles()
        {
        }
        public function setWebsiteUrl($websiteUrl)
        {
        }
        public function getWebsiteUrl()
        {
        }
    }
    class Dokan_Service_Analytics_Webproperties extends \Dokan_Collection
    {
        protected $collection_key = 'items';
        protected $internal_gapi_mappings = array();
        protected $itemsType = 'Dokan_Service_Analytics_Webproperty';
        protected $itemsDataType = 'array';
        public $itemsPerPage;
        public $kind;
        public $nextLink;
        public $previousLink;
        public $startIndex;
        public $totalResults;
        public $username;
        public function setItems($items)
        {
        }
        public function getItems()
        {
        }
        public function setItemsPerPage($itemsPerPage)
        {
        }
        public function getItemsPerPage()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setNextLink($nextLink)
        {
        }
        public function getNextLink()
        {
        }
        public function setPreviousLink($previousLink)
        {
        }
        public function getPreviousLink()
        {
        }
        public function setStartIndex($startIndex)
        {
        }
        public function getStartIndex()
        {
        }
        public function setTotalResults($totalResults)
        {
        }
        public function getTotalResults()
        {
        }
        public function setUsername($username)
        {
        }
        public function getUsername()
        {
        }
    }
    class Dokan_Service_Analytics_Webproperty extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $accountId;
        protected $childLinkType = 'Dokan_Service_Analytics_WebpropertyChildLink';
        protected $childLinkDataType = '';
        public $created;
        public $defaultProfileId;
        public $id;
        public $industryVertical;
        public $internalWebPropertyId;
        public $kind;
        public $level;
        public $name;
        protected $parentLinkType = 'Dokan_Service_Analytics_WebpropertyParentLink';
        protected $parentLinkDataType = '';
        protected $permissionsType = 'Dokan_Service_Analytics_WebpropertyPermissions';
        protected $permissionsDataType = '';
        public $profileCount;
        public $selfLink;
        public $updated;
        public $websiteUrl;
        public function setAccountId($accountId)
        {
        }
        public function getAccountId()
        {
        }
        public function setChildLink(\Dokan_Service_Analytics_WebpropertyChildLink $childLink)
        {
        }
        public function getChildLink()
        {
        }
        public function setCreated($created)
        {
        }
        public function getCreated()
        {
        }
        public function setDefaultProfileId($defaultProfileId)
        {
        }
        public function getDefaultProfileId()
        {
        }
        public function setId($id)
        {
        }
        public function getId()
        {
        }
        public function setIndustryVertical($industryVertical)
        {
        }
        public function getIndustryVertical()
        {
        }
        public function setInternalWebPropertyId($internalWebPropertyId)
        {
        }
        public function getInternalWebPropertyId()
        {
        }
        public function setKind($kind)
        {
        }
        public function getKind()
        {
        }
        public function setLevel($level)
        {
        }
        public function getLevel()
        {
        }
        public function setName($name)
        {
        }
        public function getName()
        {
        }
        public function setParentLink(\Dokan_Service_Analytics_WebpropertyParentLink $parentLink)
        {
        }
        public function getParentLink()
        {
        }
        public function setPermissions(\Dokan_Service_Analytics_WebpropertyPermissions $permissions)
        {
        }
        public function getPermissions()
        {
        }
        public function setProfileCount($profileCount)
        {
        }
        public function getProfileCount()
        {
        }
        public function setSelfLink($selfLink)
        {
        }
        public function getSelfLink()
        {
        }
        public function setUpdated($updated)
        {
        }
        public function getUpdated()
        {
        }
        public function setWebsiteUrl($websiteUrl)
        {
        }
        public function getWebsiteUrl()
        {
        }
    }
    class Dokan_Service_Analytics_WebpropertyChildLink extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $href;
        public $type;
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
    }
    class Dokan_Service_Analytics_WebpropertyParentLink extends \Dokan_Model
    {
        protected $internal_gapi_mappings = array();
        public $href;
        public $type;
        public function setHref($href)
        {
        }
        public function getHref()
        {
        }
        public function setType($type)
        {
        }
        public function getType()
        {
        }
    }
    class Dokan_Service_Analytics_WebpropertyPermissions extends \Dokan_Collection
    {
        protected $collection_key = 'effective';
        protected $internal_gapi_mappings = array();
        public $effective;
        public function setEffective($effective)
        {
        }
        public function getEffective()
        {
        }
    }
    class Dokan_Service_Exception extends \Dokan_Exception implements \Dokan_Task_Retryable
    {
        /**
         * Optional list of errors returned in a JSON body of an HTTP error response.
         */
        protected $errors = array();
        /**
         * Override default constructor to add the ability to set $errors and a retry
         * map.
         *
         * @param string $message
         * @param int $code
         * @param Exception|null $previous
         * @param [{string, string}] errors List of errors returned in an HTTP
         * response.  Defaults to [].
         * @param array|null $retryMap Map of errors with retry counts.
         */
        public function __construct($message, $code = 0, \Exception $previous = \null, $errors = array(), array $retryMap = \null)
        {
        }
        /**
         * An example of the possible errors returned.
         *
         * {
         *   "domain": "global",
         *   "reason": "authError",
         *   "message": "Invalid Credentials",
         *   "locationType": "header",
         *   "location": "Authorization",
         * }
         *
         * @return [{string, string}] List of errors return in an HTTP response or [].
         */
        public function getErrors()
        {
        }
        /**
         * Gets the number of times the associated task can be retried.
         *
         * NOTE: -1 is returned if the task can be retried indefinitely
         *
         * @return integer
         */
        public function allowedRetries()
        {
        }
    }
    /*
     * Copyright 2011 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Signs data.
     *
     * @author Brian Eaton <beaton@google.com>
     */
    abstract class Dokan_Signer_Abstract
    {
        /**
         * Signs data, returns the signature as binary data.
         */
        abstract public function sign($data);
    }
    /**
     * Signs data.
     *
     * Only used for testing.
     *
     * @author Brian Eaton <beaton@google.com>
     */
    class Dokan_Signer_P12 extends \Dokan_Signer_Abstract
    {
        // Creates a new signer from a .p12 file.
        public function __construct($p12, $password)
        {
        }
        public function __destruct()
        {
        }
        public function sign($data)
        {
        }
    }
    class Dokan_Task_Exception extends \Dokan_Exception
    {
    }
    /**
     * A task runner with exponential backoff support.
     *
     * @see https://developers.google.com/drive/web/handle-errors#implementing_exponential_backoff
     */
    class Dokan_Task_Runner
    {
        /**
         * Creates a new task runner with exponential backoff support.
         *
         * @param Dokan_Client $client The current API client
         * @param string $name The name of the current task (used for logging)
         * @param callable $action The task to run and possibly retry
         * @param array $arguments The task arguments
         * @throws Dokan_Task_Exception when misconfigured
         */
        public function __construct(\Dokan_Client $client, $name, $action, array $arguments = array())
        {
        }
        /**
         * Checks if a retry can be attempted.
         *
         * @return boolean
         */
        public function canAttmpt()
        {
        }
        /**
         * Runs the task and (if applicable) automatically retries when errors occur.
         *
         * @return mixed
         * @throws Dokan_Task_Retryable on failure when no retries are available.
         */
        public function run()
        {
        }
        /**
         * Runs a task once, if possible. This is useful for bypassing the `run()`
         * loop.
         *
         * NOTE: If this is not the first attempt, this function will sleep in
         * accordance to the backoff configurations before running the task.
         *
         * @return boolean
         */
        public function attempt()
        {
        }
    }
    /*
     * Copyright 2011 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Collection of static utility methods used for convenience across
     * the client library.
     */
    class Dokan_Utils
    {
        public static function urlSafeB64Encode($data)
        {
        }
        public static function urlSafeB64Decode($b64)
        {
        }
        /**
         * Misc function used to count the number of bytes in a post body, in the
         * world of multi-byte chars and the unpredictability of
         * strlen/mb_strlen/sizeof, this is the only way to do that in a sane
         * manner at the moment.
         *
         * This algorithm was originally developed for the
         * Solar Framework by Paul M. Jones
         *
         * @link   http://solarphp.com/
         * @link   http://svn.solarphp.com/core/trunk/Solar/Json.php
         * @link   http://framework.zend.com/svn/framework/standard/trunk/library/Zend/Json/Decoder.php
         * @param  string $str
         * @return int The number of bytes in a string.
         */
        public static function getStrLen($str)
        {
        }
        /**
         * Normalize all keys in an array to lower-case.
         * @param array $arr
         * @return array Normalized array.
         */
        public static function normalize($arr)
        {
        }
        /**
         * Convert a string to camelCase
         * @param  string $value
         * @return string
         */
        public static function camelCase($value)
        {
        }
    }
    /*
     * Copyright 2018 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Implementation of levels 1-3 of the URI Template spec.
     * @see http://tools.ietf.org/html/rfc6570
     */
    class Dokan_Utils_URITemplate
    {
        const TYPE_MAP = "1";
        const TYPE_LIST = "2";
        const TYPE_SCALAR = "4";
        public function parse($string, array $parameters)
        {
        }
        public function combine($key, $parameters, $sep, $combine, $reserved, $tag_empty, $combine_on_empty)
        {
        }
    }
    /*
     * Copyright 2011 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    /**
     * Verifies signatures.
     *
     * @author Brian Eaton <beaton@google.com>
     */
    abstract class Dokan_Verifier_Abstract
    {
        /**
         * Checks a signature, returns true if the signature is correct,
         * false otherwise.
         */
        abstract public function verify($data, $signature);
    }
    /**
     * Verifies signatures using PEM encoded certificates.
     *
     * @author Brian Eaton <beaton@google.com>
     */
    class Dokan_Verifier_Pem extends \Dokan_Verifier_Abstract
    {
        /**
         * Constructs a verifier from the supplied PEM-encoded certificate.
         *
         * $pem: a PEM encoded certificate (not a file).
         * @param $pem
         * @throws Dokan_Auth_Exception
         * @throws Dokan_Exception
         */
        public function __construct($pem)
        {
        }
        public function __destruct()
        {
        }
        /**
         * Verifies the signature on data.
         *
         * Returns true if the signature is valid, false otherwise.
         * @param $data
         * @param $signature
         * @throws Dokan_Auth_Exception
         * @return bool
         */
        public function verify($data, $signature)
        {
        }
    }
    class GADWP_Tools
    {
        public static function get_countrycodes()
        {
        }
        public static function guess_default_domain($profiles)
        {
        }
        public static function get_selected_profile($profiles, $profile)
        {
        }
        public static function get_root_domain()
        {
        }
        public static function strip_protocol($domain)
        {
        }
        public static function colourVariator($colour, $per)
        {
        }
        public static function variations($base)
        {
        }
        public static function check_roles($access_level, $tracking = \false)
        {
        }
        public static function unset_cookie($name)
        {
        }
        public static function set_cache($name, $value, $expiration = 0)
        {
        }
        public static function delete_cache($name)
        {
        }
        public static function get_cache($name)
        {
        }
        public static function clear_cache()
        {
        }
        public static function get_sites($args)
        {
        }
        /**
         * Loads a view file
         *
         * $data parameter will be available in the template file as $data['value']
         *
         * @param string $template - Template file to load
         * @param array $data - data to pass along to the template
         * @return boolean - If template file was found
         **/
        public static function load_view($path, $data = array())
        {
        }
        public static function doing_it_wrong($function, $message, $version)
        {
        }
        public static function get_dom_from_content($content)
        {
        }
        public static function get_content_from_dom($dom)
        {
        }
        public static function array_keys_rename($options, $keys)
        {
        }
        public static function set_error($e, $timeout)
        {
        }
        public static function anonymize_options($options)
        {
        }
        public static function system_info()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\VendorStaff\REST {
    /**
     * Vendor Staff API Controller.
     *
     * @since 3.9.0
     */
    class VendorStaff extends \WP_REST_Controller
    {
        /**
         * Version
         *
         * @var string
         */
        protected $version = 'v1';
        /**
         * Endpoint namespace.
         *
         * @var string
         */
        protected $namespace = 'dokan';
        /**
         * Route name
         *
         * @var string
         */
        protected $rest_base = 'vendor-staff';
        public function __construct()
        {
        }
        /**
         * Register vendor staff routes.
         *
         * @since 3.9.0
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get All The Staff
         *
         * @since 3.9.0
         *
         * @param WP_REST_Request $request Request object.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * Create a new Staff.
         *
         * @since 3.9.0
         *
         * @param WP_REST_Request $request Request
         *
         * @return int|WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function create_item($request)
        {
        }
        /**
         * Get a Single Staff.
         *
         * @since 3.9.0
         *
         * @param WP_REST_Request $request Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function get_item($request)
        {
        }
        /**
         * Update a Single Staff.
         *
         * @since 3.9.0
         *
         * @param WP_REST_Request $request Request.
         *
         * @return int|WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function update_item($request)
        {
        }
        /**
         * Delete a Staff.
         *
         * @param WP_REST_Request $request Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function delete_item($request)
        {
        }
        /**
         * Get capabilities.
         *
         * @since 3.9.0
         *
         * @param WP_REST_Request $request Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function get_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * Get all and default capabilities.
         *
         * @since 3.9.0
         *
         * @param WP_REST_Request $request Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function get_all_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * Update capabilities.
         *
         * @since 3.9.0
         *
         * @param WP_REST_Request $request Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function update_capabilities(\WP_REST_Request $request)
        {
        }
        /**
         * Get Items Permission check.
         *
         * @since 3.9.0
         *
         * @param WP_REST_Request $request Request.
         *
         * @return bool|WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Get Items Permission check.
         *
         * @since 3.9.0
         *
         * @param WP_REST_Request $request Request.
         *
         * @return bool|WP_Error
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Get Item Permission check.
         *
         * @since 3.9.0
         *
         * @param WP_REST_Request $request Request.
         *
         * @return bool|WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Update Item Permission check.
         *
         * @since 3.9.0
         *
         * @param WP_REST_Request $request Request.
         *
         * @return bool|WP_Error
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Delete Item Permission check.
         *
         * @since 3.9.0
         *
         * @param WP_REST_Request $request Request.
         *
         * @return bool|WP_Error
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Prepare Item For Response.
         *
         * @since 3.9.0
         *
         * @param \WP_User        $item Staff.
         * @param WP_REST_Request $request Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Get Staff schema.
         *
         * @since 3.9.0
         *
         * @return array The Staff schema.
         */
        public function get_item_schema()
        {
        }
        /**
         * Check a username for the REST API.
         *
         * Performs a couple of checks like edit_user() in wp-admin/includes/user.php.
         *
         * @since 3.9.0
         *
         * @param string          $value   The username submitted in the request.
         * @param WP_REST_Request $request Full details about the request.
         * @param string          $param   The parameter name.
         *
         * @return string|WP_Error The sanitized username, if valid, otherwise an error.
         */
        public function check_username(string $value, \WP_REST_Request $request, string $param)
        {
        }
        /**
         * Check a user password for the REST API.
         *
         * Performs a couple of checks like edit_user() in wp-admin/includes/user.php.
         *
         * @since 3.9.0
         *
         * @param string          $value   The password submitted in the request.
         * @param WP_REST_Request $request Full details about the request.
         * @param string          $param   The parameter name.
         *
         * @return string|WP_Error The sanitized password, if valid, otherwise an error.
         */
        public function check_user_password(string $value, \WP_REST_Request $request, string $param)
        {
        }
        /**
         * Get Capability Arguments.
         *
         * @since 3.9.0
         *
         * @return array[]
         */
        public function get_capabilities_args(): array
        {
        }
        /**
         * Format the capabilities.
         *
         * @since 3.9.0
         *
         * @param array $caps Capabilities.
         *
         * @return array
         */
        protected function format_capabilities(array $caps): array
        {
        }
        /**
         * Get either a Gravatar URL or complete image tag for a specified email address.
         *
         * @since 3.9.0
         *
         * @param string $email The email address
         * @param string $s Size in pixels, defaults to 80px [ 1 - 2048 ]
         * @param string $d Default imageset to use [ 404 | mp | identicon | monsterid | wavatar ]
         * @param string $r Maximum rating (inclusive) [ g | pg | r | x ]
         * @param bool $img True to return a complete IMG tag False for just the URL
         * @param array $atts Optional, additional key/value attributes to include in the IMG tag
         *
         * @return string containing either just a URL or a complete image tag
         * @source https://gravatar.com/site/implement/images/php/
         */
        protected function get_gravatar($email, $s = 80, $d = 'mp', $r = 'g', $img = false, $atts = array()): string
        {
        }
    }
}
namespace DokanPro\Modules\VendorStaff {
    /**
     * Vendor Staff Cache class.
     *
     * @since 3.4.2
     *
     * @see \WeDevs\Dokan\Cache
     */
    class VendorStaffCache
    {
        public function __construct()
        {
        }
        /**
         * Clear Vendor Staff Caches.
         *
         * @since 3.4.2
         *
         * @param int $vendor_id
         * @param int $staff_id
         *
         * @return void
         */
        public function clear_cache($vendor_id, $staff_id = null)
        {
        }
    }
}
namespace {
    /**
     * New Order Email.
     *
     * An email sent to the admin when a new order is received/paid for.
     *
     * @class       Dokan_Staff_New_Order
     * @version     2.0.0
     * @package     WooCommerce/Classes/Emails
     * @extends     WC_Email
     */
    class Dokan_Staff_New_Order extends \WC_Email
    {
        public $order_info;
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since  3.1.0
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @param int            $order_id The order ID.
         * @param WC_Order|false $order Order object.
         */
        public function trigger($order_id, $order = \false)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
}
namespace DokanPro\Modules\VendorStaff {
    /**
     * Staff password update Email.
     *
     * An email sent to the staff if Vendor updates the password of the staff
     *
     * @class       Dokan_Staff_Password_Update
     * @version     3.7.0
     * @package     WooCommerce/Classes/Emails
     * @extends     WC_Email
     */
    class Dokan_Staff_Password_Update extends \WC_Email
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since 3.7.0
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since 3.7.0
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Default content to show below main email content.
         *
         * @since 3.7.0
         *
         * @return string
         */
        public function get_default_additional_content()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @since 3.7.0
         *
         * @param int $staff_id The vendor staff ID.
         */
        public function trigger($staff_id)
        {
        }
        /**
         * Get content html.
         *
         * @since 3.7.0
         *
         * @access public
         *
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @since 3.7.0
         *
         * @access public
         *
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         *
         * @since 3.7.0
         */
        public function init_form_fields()
        {
        }
    }
}
namespace {
    /**
     * Vendor staff class
     */
    class Dokan_Staffs
    {
        /**
         * Load automatically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Display all errors
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function display_errors()
        {
        }
        /**
         * Add staff content
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function add_staff_content()
        {
        }
        /**
         * Hande vendor staff when new user
         * update from wp-admin area with vendor staff role
         *
         * @since 3.3.3
         *
         * @param int $user
         * @param WP_User $old_user_data
         * @param array $user_data
         *
         * @return void
         */
        public function handle_staff_user_register_update($user, $old_user_data)
        {
        }
        /**
         * Hande vendor staff when new user register
         * from wp-admin area with vendor staff role
         *
         * @since 3.3.3
         *
         * @param int $user
         *
         * @return void
         */
        public function handle_staff_user_register_add($user)
        {
        }
        /**
         * Hande vendor staff when new user register
         * or update from wp-admin area with vendor
         * staff role
         *
         * @since 3.3.3
         *
         * @param int $user
         *
         * @return void
         */
        public function handle_staff_user_capabilities($user)
        {
        }
        /**
         * Hande form submission
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function handle_staff()
        {
        }
        /**
         * Delete staff
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function delete_staff()
        {
        }
        /**
         * Handle staff permissions
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function handle_pemission()
        {
        }
        /**
         * Handle product for staff uploading and editing
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function filter_product($product_id, $post_data)
        {
        }
        /**
         * Update product data
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function update_product($post_id)
        {
        }
        /**
         * Update duplicate product data
         *
         * @since 3.1.2
         *
         * @return void
         */
        public function filter_duplicate_product($clone_product)
        {
        }
        /**
         * Listing product argument filter
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function listing_product($args)
        {
        }
        /**
         * Product author modified
         *
         * @since 3.1.2
         *
         * @param int $user_id
         * @param int $product_id
         *
         * @return int $vendor_id
         */
        public function dokan_is_product_author_modified($user_id, $product_id)
        {
        }
        /**
         * Activation link add on new staff notify email body
         *
         * @since 3.2.3
         *
         * @param array $notify_email
         * @param obj   $user
         *
         * @return array $notify_email
         */
        public function link_add_staff_notification_email($notify_email, $user)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\VendorStaff {
    class Module
    {
        /**
         * Class cosntructor
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @uses is_admin()
         * @uses add_action()
         */
        public function __construct()
        {
        }
        /**
         * Define all constant
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function define_constant()
        {
        }
        /**
         * Includes all files
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function includes()
        {
        }
        /**
         * Inistantiate all class
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function initiate()
        {
        }
        /**
         * Enqueue admin scripts
         *
         * Allows plugin assets to be loaded.
         *
         * @uses wp_enqueue_script()
         * @uses wp_localize_script()
         * @uses wp_enqueue_style
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Disable backend access of vendor_staff
         *
         * @since 2.7.6
         *
         * @return void
         */
        public function disable_backend_access()
        {
        }
        /**
         * Disable admin bar when the user role is vendor_staff
         * @since 2.7.6
         *
         * @return bool
         */
        public function disable_admin_bar($show_admin_bar)
        {
        }
        /**
         * Activate functions
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function activate()
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        /**
         * Deactivate functions
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function deactivate()
        {
        }
        /**
         * Add staffs endpoint to the end of Dashboard
         *
         * @param array $query_var
         */
        public function add_endpoint($query_var)
        {
        }
        /**
         * Get plugin path
         *
         * @since 2.8
         *
         * @return void
         */
        public function plugin_path()
        {
        }
        /**
         * Load Dokan vendor_staff templates
         *
         * @since 2.8
         *
         * @return void
         */
        public function load_vendor_staff_templates($template_path, $template, $args)
        {
        }
        /**
         * Load tools template
         *
         * @since  1.0
         *
         * @param  array $query_vars
         *
         * @return string
         */
        public function load_staff_template($query_vars)
        {
        }
        /**
         * Add staffs page in seller dashboard
         *
         * @param array $urls
         *
         * @return array $urls
         */
        public function add_staffs_page($urls)
        {
        }
        /**
         * Load staff email class
         *
         * @param  array $emails
         *
         * @return array
         */
        public function load_staff_emails($emails)
        {
        }
        /**
         * Set Proper template directory.
         *
         * @param array $template_array
         *
         * @return array
         */
        public function set_email_template_directory($template_array)
        {
        }
        /**
         * Rest api class map
         *
         * @param array $classes
         *
         * @since 3.9.0
         *
         * @return array
         */
        public function rest_api_class_map($classes)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\VSP {
    /**
     * Dependency Notice Handler Class
     *
     * @since 3.5.0
     */
    class DependencyNotice
    {
        /**
         * Whether the module is loadable or not.
         *
         * @var bool
         */
        protected $missing_dependency = false;
        /**
         * Class constructor
         *
         * @since 3.5.0
         */
        public function __construct()
        {
        }
        /**
         * Check has missing dependency
         *
         * @since 3.5.0
         *
         * @return bool
         */
        public function is_missing_dependency()
        {
        }
        /**
         * WooCommerce Subscription activation notice
         *
         * @since 3.5.0
         *
         * @param array $notices
         *
         * @return array
         */
        public function wc_subscription_activation_notice($notices)
        {
        }
        /**
         * Activate Woocommerce Subscription plugin
         *
         * @since 3.5.0
         *
         * @return void
         * */
        public function activate_wc_subscription()
        {
        }
    }
}
namespace {
    /**
    * User subscription for Vendor Dashboard
    */
    class Dokan_VSP_User_Subscription
    {
        /**
         * Load autometically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Load subscription query vars
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function load_subscription_query_var($query_vars)
        {
        }
        /**
         * Add subscription menu
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function add_subscription_menu($urls)
        {
        }
        /**
         * Load subscription content
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function load_subscription_content($query_vars)
        {
        }
        /**
         * Render related order content
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function render_related_order_content($subscription)
        {
        }
        /**
         * Handle subscription schedule
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function handle_subscription_schedule()
        {
        }
        /**
         * Change subscription status
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function change_subscription_status()
        {
        }
    }
    /**
    * Vendor Subscription Product
    *
    * @since 1.0.0
    *
    * @package dokan
    */
    class Dokan_VSP_Product
    {
        /**
         * Load autometically when class initiate
         *
         * @since 1.0.0
         */
        public function __construct()
        {
        }
        /**
         * Add a subscription product type
         *
         * @since 1.0.0
         *
         * @return array
         */
        public function add_subscription_product_type($types)
        {
        }
        /**
         * Load subscription fields
         *
         * @param object $post
         * @param integer $post_id
         *
         * @return void
         */
        function load_subscription_fields($post, $post_id)
        {
        }
        /**
         * Load subscription fields for variations
         *
         * @param $loop
         * @param $variation_data
         * @param $variation
         *
         * @return void
         * @since 1.0.0
         */
        public function load_variation_subscription_fields($loop, $variation_data, $variation)
        {
        }
        /**
         * Handle subscription metadata
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function handle_subscription_metadata($post_id)
        {
        }
        /**
         * Save variation subscription meta
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function save_variation_metadata($variation_id, $index)
        {
        }
        /**
         * Sync new order with dokan
         *
         * @param Integer $order_id
         *
         * @return void
         */
        public function sync_parent_order_with_dokan($order_id)
        {
        }
        /**
         * Sync new order with dokan
         *
         * @param WC_Order $new_order
         * @param WC_Subscription $subscription
         * @param String $type
         *
         * @return Object|void
         */
        public function sync_renewal_order_with_dokan($new_order, $subscription, $type)
        {
        }
        /**
         * Add coupon types
         *
         * @since 3.0.2
         *
         * @return array
         */
        public function add_coupon_types($discount_types)
        {
        }
        /**
         * Add subcription based coupon fields
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function add_subscription_coupon_field($post_id)
        {
        }
        /**
         * Save subcription coupon fields
         *
         * @since 3.0.2
         *
         * @return void
         */
        public function save_subscription_coupon_field($post_id)
        {
        }
        /**
         * Show coupon usages limit in listing
         *
         * @since 3.0.2
         *
         * @return void
         */
        public function show_active_usages($coupon)
        {
        }
        /**
         * Set subscription price from regular price.
         *
         * @param array $data Submitted product data in quick view.
         *
         * @since 3.2.1
         * @return array
         */
        public function product_quick_view_on_save($data)
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\VSP {
    /**
     * Dokan Vendor Subscription Product Module
     *
     * @since 3.8.0 HPOS support added
     */
    class Module
    {
        /**
         * Constructor for the Dokan_VSP class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         *
         * @uses is_admin()
         * @uses add_action()
         */
        public function __construct()
        {
        }
        /**
         * Hooks
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function define()
        {
        }
        /**
         * Get plugin path
         *
         * @since 1.5.1
         *
         * @return void
         **/
        public function plugin_path()
        {
        }
        /**
         * Includes all necessary class a functions file
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function includes()
        {
        }
        /**
         * Initiate all classes
         *
         * @return void
         */
        public function initiate()
        {
        }
        /**
         * Init all hooks
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Tell WC that we don't need any processing
         *
         * @param  bool $needs_processing
         * @param  \WC_Product $product
         * @return bool
         */
        public function order_needs_processing($needs_processing, $product)
        {
        }
        /**
         * Add subscription product for vendor subscription allowd categories
         *
         * @since 3.0.8
         *
         * @param $product_type
         *
         * @return array
         */
        public function add_subscription_type_product($product_type)
        {
        }
        /**
         * Load global scripts
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function load_scripts()
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Enqueue scripts
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Set subscription html templates directory
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function load_subcription_product_templates($template_path, $template, $args)
        {
        }
        /**
         * This method will load during module activation
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function activate()
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\VendorVerification\Admin {
    /**
     * Admin Class
     *
     * @since 3.11.1 Migrated to Class.
     */
    class Hooks
    {
        /**
         * Class Constructor.
         *
         * @since 3.11.1
         */
        public function __construct()
        {
        }
        /**
         * Load Admin menu
         *
         * @since unknown
         * @since 3.11.1 Verification vue page support added.
         *
         * @param string  $capability
         * @param integer $menu_position
         *
         * @return void
         */
        public function load_verification_admin_menu($capability, $menu_position)
        {
        }
        /**
         * Add vue routes for admin pages.
         *
         * @since 3.11.1
         *
         * @param array $routes Array of routes.
         *
         * @return array
         */
        public function vue_admin_routes($routes): array
        {
        }
    }
    /**
     * Admin Class
     *
     * @since 3.11.1 Migrated to Class.
     */
    class Settings
    {
        /**
         * Class Constructor.
         *
         * @since 3.11.1
         */
        public function __construct()
        {
        }
        /**
         * Add Sections.
         *
         * @since 3.11.1
         *
         * @param array $sections Settings Sections.
         *
         * @return array
         */
        public function settings_sections($sections): array
        {
        }
        /**
         * Add fields.
         *
         * @since 3.11.1
         *
         * @param array $settings_fields Settings Fields.
         *
         * @return array
         */
        public function settings_fields($settings_fields): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\VendorVerification {
    /**
     * Ajax Class.
     *
     * @since 3.11.1
     */
    class Ajax
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Dokan Vendor Verification Request Creation.
         *
         * @since 3.11.1
         *
         * @return void
         */
        public function verification_request_creation()
        {
        }
        /**
         * Dokan Vendor Verification Request Cancellation.
         *
         * @since 3.11.1
         *
         * @return void
         */
        public function verification_request_cancellation()
        {
        }
        /*
         * Sends SMS from verification template
         *
         * @since 1.0.0
         *
         * @return Ajax Success/fail
         *
         */
        public function dokan_v_send_sms()
        {
        }
        /*
         * Verify sent SMS code and update corresponding meta
         *
         * @since 1.0.0
         *
         * @return Ajax Success/fail
         *
         */
        public function dokan_v_verify_sms_code()
        {
        }
    }
    /**
     * Assets Class.
     *
     * @since 3.11.1
     */
    class Assets
    {
        /**
         * Class Constructor.
         *
         * @since 3.11.1
         */
        public function __construct()
        {
        }
        /**
         * Enqueue scripts
         *
         * Allows plugin assets to be loaded.
         *
         * @since unknown
         * @since 3.11.1 Migrated to Separate class.
         *
         * @uses  wp_enqueue_script()
         * @uses  wp_localize_script()
         * @uses  wp_enqueue_style
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Register scripts and styles.
         *
         * Allows plugin assets to be loaded.
         *
         * @since unknown
         * @since 3.11.1 Migrated to Separate class.
         *
         * @uses  wp_register_style()
         * @uses  wp_register_script()
         */
        public function register_scripts()
        {
        }
    }
    /**
     * Vendor Verification Cache class.
     *
     * Manage all caches related to vendor verifications.
     *
     * @since 3.4.2
     *
     * @see \WeDevs\Dokan\Cache
     */
    class Cache
    {
        /**
         * Class Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Clear Vendor Verification caches.
         *
         * @since 3.4.2
         *
         * @param int $seller_id
         *
         * @return void
         */
        public function clear_vendor_verification_cache($seller_id = null)
        {
        }
        /**
         * Clear Vendor Verification methods caches.
         *
         * @since 3.11.1
         *
         * @param int $id Document type identifier.
         *
         * @return void
         */
        public function clear_vendor_verification_method_cache($id = 0)
        {
        }
        /**
         * Clear Vendor Verification requests caches.
         *
         * @since 3.11.1
         *
         * @return void
         */
        public function clear_vendor_verification_request_cache()
        {
        }
    }
    /**
     * Verification Emails.
     *
     * @since 3.11.1
     */
    class Emails
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Load all email class related with vendor verification.
         *
         * @since 3.7.23
         * @since 3.11.1 Moved to separate class.
         *
         * @param array $wc_emails Email classes.
         *
         * @return array
         */
        public function load_email_classes(array $wc_emails): array
        {
        }
        /**
         * Register all email actions related with vendor verification.
         *
         * @since 3.7.23
         * @since 3.11.1 Moved to separate class.
         *
         * @param array $actions Actions.
         *
         * @return array
         */
        public function register_email_actions(array $actions): array
        {
        }
        /**
         * Register all email templates related with vendor verification.
         *
         * @since 3.11.1
         *
         * @param array $templates
         *
         * @return array
         */
        public function register_email_templates(array $templates): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\VendorVerification\Emails {
    /**
     * Dokan Vendor Verification Request Submission Email.
     *
     * An email sent to the admin when a vendor submits a document for verification.
     *
     * @class   DokanVendorVerificationRequestSubmission
     * @version 3.7.23
     * @author  weDevs
     * @extends WC_Email
     */
    class RequestSubmission extends \WC_Email
    {
        /**
         * Class Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since 3.7.23
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since 3.7.23
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Default content to show below main email content.
         *
         * @since 3.7.23
         *
         * @return string
         */
        public function get_default_additional_content()
        {
        }
        /**
         * Trigger the sending of this email.
         *
         * @since 3.7.23
         *
         * @param int $seller_id Sellder id
         *
         * @return void
         */
        public function trigger($seller_id)
        {
        }
        /**
         * Trigger email.
         *
         * @since 3.11.1
         *
         * @param int $request_id ID of the request.
         *
         * @return void
         */
        public function trigger_for_verification(int $request_id)
        {
        }
        /**
         * Get content html.
         *
         * @since  3.7.23
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @since  3.7.23
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialize settings form fields.
         *
         * @since 3.7.23
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
    }
    /**
     * Dokan Vendor Verification Status Update Email.
     *
     * An email sent to the vendor after updating the verification status by admin.
     *
     * @class   DokanVendorVerificationStatusUpdate
     * @version 3.7.23
     * @author  weDevs
     * @extends WC_Email
     */
    class StatusUpdate extends \WC_Email
    {
        /**
         * Class Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @since 3.7.23
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @since 3.7.23
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * Default content to show below main email content.
         *
         * @since 3.7.23
         *
         * @return string
         */
        public function get_default_additional_content()
        {
        }
        /**
         * Trigger Email.
         *
         * @since 3.11.1
         *
         * @param int $verification_id Verification id.
         *
         * @return void
         */
        public function trigger(int $verification_id)
        {
        }
        /**
         * Get content html.
         *
         * @since  3.7.23
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @since  3.7.23
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialize settings form fields.
         *
         * @since 3.7.23
         *
         * @return void
         */
        public function init_form_fields()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\VendorVerification\Frontend {
    /**
     * Admin Class
     *
     * @since 3.11.1 Migrated to Class.
     */
    class Dashboard
    {
        /**
         * Class Constructor.
         *
         * @since 3.11.1
         */
        public function __construct()
        {
        }
        /**
         * Add capabilities
         *
         * @since 1.0.0
         *
         * @return array
         */
        public function add_capabilities($capabilities)
        {
        }
        /**
         * Adds a Verification menu on Dokan Seller Dashboard
         *
         * @since 1.0.0
         * @since 3.11.1 Moved to separate class.
         *
         * @param array $menus Menus.
         *
         * @return array
         */
        public function register_dashboard_menu(array $menus): array
        {
        }
        /**
         * Register Query vars.
         *
         * @since 1.0.0
         * @since 3.11.1 Moved to separate class.
         *
         * @param array $query_var Query vars.
         *
         * @return array
         */
        public function register_template_endpoint(array $query_var): array
        {
        }
        /**
         * Set Template heading.
         *
         *
         * @since 1.0.0
         * @since 3.11.1 Moved to separate class.
         *
         * @param string $heading    Heading
         * @param string $query_vars Query vars.
         *
         * @return string
         */
        public function load_header_title($heading, $query_vars): string
        {
        }
        /**
         * Load templates. so that it can override from theme
         *
         * @since 1.0.0
         *
         * @return string
         **/
        public function load_verification_templates($template_path, $template, $args)
        {
        }
        /**
         * Load Template content.
         *
         * @since 1.0.0
         * @since 3.11.1 Moved to separate class.
         *
         * @param array $query_vars Query vars.
         *
         * @return void
         */
        public function load_content_template(array $query_vars)
        {
        }
        /**
         * On verification request update, set vendor as verified.
         *
         * @param int $request_id Verification Request ID.
         *
         * @return void
         */
        public function on_verification_request_updated(int $request_id)
        {
        }
        /**
         * Display a warning message on address save.
         *
         * @since 3.11.1
         *
         * @param array|string $address Address data.
         *
         * @return void
         */
        public function display_warning_message_on_address_save($address)
        {
        }
        /**
         * Detect vendor default address change.
         *
         * @sience 3.11.1
         *
         * @param int    $meta_id     Meta ID.
         * @param int    $object_id   Object ID.
         * @param string $meta_key    Meta key.
         * @param mixed  $_meta_value Meta value.
         *
         * @return void
         */
        public function detect_vendor_default_address_change(int $meta_id, int $object_id, string $meta_key, $_meta_value)
        {
        }
    }
    /**
     * Admin Class
     *
     * @since 3.11.1 Migrated to Class.
     */
    class Hooks
    {
        /**
         * Class Constructor.
         *
         * @since 3.11.1
         */
        public function __construct()
        {
        }
        /**
         * Render vendor verified icon after store name
         *
         * @since 3.5.2
         * @since 3.11.1 Moved to Vendor Class.
         *
         * @return void
         */
        public function add_vendor_verified_icon($vendor)
        {
        }
        /*
         * Custom dir for vendor uploaded file
         *
         * @since 2.9.0
         *
         * @return array
         *
         */
        public function dokan_customize_upload_dir($upload)
        {
        }
        /**
         * Creates .htaccess & index.html files if not exists that prevent direct folder access
         *
         * @since 3.1.3
         */
        protected function disallow_direct_access()
        {
        }
    }
    /**
     * Admin Class
     *
     * @since 3.11.1 Migrated to Class.
     */
    class HybridauthHooks
    {
        /**
         * @var string
         */
        public $e_msg = '';
        /**
         * Class Constructor.
         *
         * @since 3.11.1
         */
        public function __construct()
        {
        }
        /**
         * @since 3.3.1
         *
         * @return void
         */
        public function init_config()
        {
        }
        /**
         * Monitors Url for Hauth Request and process Hauth for authentication
         *
         * @return void
         */
        public function monitor_authenticate_requests()
        {
        }
        /**
         * Get Provider Config
         *
         * @since 1.0.0
         * @since 3.11.1 moved this file from module.php to here.
         *
         * @return mixed|null
         */
        protected function get_provider_config()
        {
        }
    }
    /**
     * Verification Setup Wizard.
     *
     * @since 3.11.1
     */
    class SetupWizard
    {
        /**
         * SetupWizard class constructor.
         *
         * @since 3.11.1
         */
        public function __construct()
        {
        }
        /**
         * Adds a wizard step.
         *
         * @since 3.11.1
         *
         * @param array $steps Step array.
         *
         * @return array
         */
        public function add_wizard_steps(array $steps): array
        {
        }
        /**
         * Verification template views.
         *
         * @since 3.11.1
         *
         * @return void
         */
        public function dokan_setup_verifications_view()
        {
        }
        /**
         * Enqueue style and script for setup wizard.
         *
         * @since 3.11.1
         *
         * @return void
         */
        public function enqueue_scripts()
        {
        }
        /**
         * Make store step required.
         * This is required for the vendor verification setup wizard.
         *
         * @since 3.11.1
         *
         * @return void
         */
        public function make_store_step_required()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\VendorVerification {
    /**
     * Admin Class
     *
     * @since 3.11.1 Migrated to Class.
     */
    class Helper
    {
        /**
         * Get verified status Icon list
         *
         * @since 3.11.1
         *
         * @return array
         */
        public static function get_verified_icons(): array
        {
        }
        /**
         * Get the translated version of approval statuses
         *
         * @since 3.5.4
         *
         * @param $status
         *
         * @return string Translated Status
         */
        public static function get_translated_status($status)
        {
        }
    }
    /**
     * Installer Class.
     *
     * @since 3.11.1
     */
    class Installer
    {
        /**
         * Run Installer.
         */
        public function run()
        {
        }
        /**
         * Create Database table.
         *
         * @since 3.11.1
         * @return void
         */
        protected function create_table()
        {
        }
        /**
         * Seed verification Method database.
         *
         * @since 3.11.1
         * @return void
         */
        protected function seed_table()
        {
        }
        /**
         * Add necessary Roles.
         *
         * @since 3.11.1 Code migration from module page.
         * @return void
         */
        protected function add_roles()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\VendorVerification\Models {
    /**
     * method for vendor verification.
     *
     * @since 3.11.1
     */
    class VerificationMethod
    {
        /**
         * @since 3.11.1
         *
         * Status Enabled constant.
         */
        const STATUS_ENABLED = true;
        /**
         * @since 3.11.1
         *
         * Status Disabled constant
         */
        const STATUS_DISABLED = false;
        /**
         * @since 3.11.1
         *
         * Kind Custom constant.
         */
        const TYPE_CUSTOM = 'custom';
        /**
         * @since 3.11.1
         *
         * Kind Address constant.
         */
        const TYPE_ADDRESS = 'address';
        /**
         * @since 3.11.1
         *
         * @var int $id The method identifier.
         */
        protected $id = 0;
        /**
         * @since 3.11.1
         *
         * @var string $title The method title.
         */
        protected $title = '';
        /**
         * @since 3.11.1
         *
         * @var string $help_text The method help text.
         */
        protected $help_text = '';
        /**
         * @since 3.11.1
         *
         * @var bool $required Is Required verification?
         */
        protected $required = false;
        /**
         * @since 3.11.1
         *
         * @var string $kind The method.
         */
        protected $kind = self::TYPE_CUSTOM;
        /**
         * @since 3.11.1
         *
         * @var DateTimeImmutable $created_at Created at date time.
         */
        protected $created_at;
        /**
         * @since 3.11.1
         *
         * @var DateTimeImmutable $updated_at Updated at date time.
         */
        protected $updated_at;
        /**
         * @since 3.11.1
         *
         * @var bool $status Whether the method is enabled.
         */
        protected $status = self::STATUS_DISABLED;
        /**
         * VerificationMethod constructor.
         *
         * @since 3.11.1
         *
         * @param int $id ID.
         */
        public function __construct(int $id = 0)
        {
        }
        /**
         * Get the cache key for this method.
         *
         * @since 3.11.1
         *
         * @return string
         */
        public function get_cache_key(): string
        {
        }
        /**
         * Get the cache group for this method.
         *
         * @since 3.11.1
         *
         * @return string
         */
        public function get_cache_group(): string
        {
        }
        /**
         * Get ID.
         *
         * @since 3.11.1
         *
         * @return int
         */
        public function get_id(): int
        {
        }
        /**
         * Set ID.
         *
         * @since 3.11.1
         *
         * @param int $id ID.
         *
         * @return VerificationMethod
         */
        public function set_id(int $id): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationMethod
        {
        }
        /**
         * Get Title.
         *
         * @since 3.11.1
         *
         * @return string
         */
        public function get_title(): string
        {
        }
        /**
         * Set Title.
         *
         * @since 3.11.1
         *
         * @param string $title Title.
         *
         * @return VerificationMethod
         */
        public function set_title(string $title): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationMethod
        {
        }
        /**
         * Get help text.
         *
         * @since 3.11.1
         *
         * @return string
         */
        public function get_help_text(): string
        {
        }
        /**
         * Set Help text.
         *
         * @since 3.11.1
         *
         * @param string $help_text Help text.
         *
         * @return VerificationMethod
         */
        public function set_help_text(string $help_text): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationMethod
        {
        }
        /**
         * Is required?
         *
         * @since 3.11.1
         *
         * @return bool
         */
        public function is_required(): bool
        {
        }
        /**
         * Set required status.
         *
         * @since 3.11.1
         *
         * @param bool $required Required status.
         *
         * @return VerificationMethod
         */
        public function set_required(bool $required): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationMethod
        {
        }
        /**
         * Get created at date time.
         *
         * @since 3.11.1
         *
         * @return DateTimeImmutable
         */
        public function get_created_at(): \DateTimeImmutable
        {
        }
        /**
         * Set created at date time.
         *
         * @since 3.11.1
         *
         * @param DateTimeImmutable $created_at DateTime.
         *
         * @return VerificationMethod
         */
        public function set_created_at(\DateTimeImmutable $created_at): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationMethod
        {
        }
        /**
         * Get method Kind.
         *
         * @since 3.11.1
         *
         * @return string
         */
        public function get_kind(): string
        {
        }
        /**
         * Set method Kind.
         *
         * @since 3.11.1
         *
         * @param string $kind method Kind. Possible values are `custom` and `address`.
         *
         * @return VerificationMethod
         */
        public function set_kind(string $kind): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationMethod
        {
        }
        /**
         * Get Updated at date time.
         *
         * @since 3.11.1
         *
         * @return DateTimeImmutable
         */
        public function get_updated_at(): \DateTimeImmutable
        {
        }
        /**
         * Set Updated at date time.
         *
         * @since 3.11.1
         *
         * @param DateTimeImmutable $updated_at DateTime.
         *
         * @return VerificationMethod
         */
        public function set_updated_at(\DateTimeImmutable $updated_at): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationMethod
        {
        }
        /**
         * Get table name.
         *
         * @since 3.11.1
         *
         * @return string
         */
        public function get_table_name(): string
        {
        }
        /**
         * Is the method Enabled?
         *
         * @since 3.11.1
         *
         * @return bool
         */
        public function is_enabled(): bool
        {
        }
        /**
         * Set the method Enabled status.
         *
         *
         * @since 3.11.1
         *
         * @param bool $status Enabled Status.
         *
         * @return VerificationMethod
         */
        public function set_enabled(bool $status): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationMethod
        {
        }
        /**
         * Get and populate data.
         *
         * @throws Exception If id does not exist or record is invalid.
         * @return VerificationMethod
         */
        public function get(): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationMethod
        {
        }
        /**
         * Populate the model with data.
         *
         * @since 3.11.1
         *
         * @param stdClass $document Document Object.
         *
         * @throws Exception When date time is not valid.
         * @return VerificationMethod
         */
        protected function populate(\stdClass $document): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationMethod
        {
        }
        /**
         * Create new method.
         *
         * @since 3.11.1
         *
         * @throws Exception If required info not provided or database error.
         * @return VerificationMethod
         */
        public function create(): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationMethod
        {
        }
        /**
         * Updates the verification method.
         *
         * @since 3.11.1
         *
         * @throws Exception If verification method is not updated successfully.
         * @return VerificationMethod
         */
        public function update(): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationMethod
        {
        }
        /**
         * Save verification method data.
         *
         * @since 3.11.1
         *
         * @throws Exception
         * @return VerificationMethod
         */
        public function save(): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationMethod
        {
        }
        /**
         * Delete a verification method.
         *
         * @since 3.11.1
         *
         * @throws Exception If ID not provided or not deleted.
         */
        public function delete(): bool
        {
        }
        /**
         * Count method.
         *
         * @since 3.11.1
         *
         * @param array $args Array of arguments.
         *
         * @return int
         */
        public function count(array $args): int
        {
        }
        /**
         * Query method.
         *
         * @since 3.11.1
         *
         * @param array $args Array of arguments.
         *
         * @return VerificationMethod[]
         */
        public function query(array $args): array
        {
        }
        /**
         * Convert to array.
         *
         * @since 3.11.1
         *
         * @return array
         */
        public function to_array(): array
        {
        }
        /**
         * Convert Object to array.
         *
         * @since 3.11.1
         *
         * @return array
         */
        public function __toArray(): array
        {
        }
    }
    /**
     * Vendor verification request.
     *
     * @since 3.11.1
     */
    class VerificationRequest
    {
        /**
         * Statuses.
         *
         * @since 3.11.1
         */
        const STATUS_PENDING = 'pending';
        const STATUS_APPROVED = 'approved';
        const STATUS_REJECTED = 'rejected';
        const STATUS_CANCELLED = 'cancelled';
        /**
         * VerificationRequest constructor.
         *
         * @since 3.11.1
         *
         * @param int $id ID.
         */
        public function __construct(int $id = 0)
        {
        }
        /**
         * Get the cache key for this method.
         *
         * @since 3.11.1
         *
         * @return string
         */
        public function get_cache_key(): string
        {
        }
        /**
         * Get the cache group for this method.
         *
         * @since 3.11.1
         *
         * @return string
         */
        public function get_cache_group(): string
        {
        }
        /**
         * Get table name.
         *
         * @since 3.11.1
         *
         * @return string
         */
        public function get_table_name(): string
        {
        }
        /**
         * Get the id.
         *
         * @since 3.11.1
         *
         * @return int
         */
        public function get_id(): int
        {
        }
        /**
         * Set the id.
         *
         * @since 3.11.1
         *
         * @param int $id ID.
         *
         * @return VerificationRequest
         */
        public function set_id(int $id): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationRequest
        {
        }
        /**
         * Get vendor ID.
         *
         * @since 3.11.1
         *
         * @return int
         */
        public function get_vendor_id(): int
        {
        }
        /**
         * Set vendor ID.
         *
         * @since 3.11.1
         *
         * @param int $vendor_id Vendor ID.
         *
         * @return VerificationRequest
         */
        public function set_vendor_id(int $vendor_id): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationRequest
        {
        }
        /**
         * Get Verification Method ID.
         *
         * @since 3.11.1
         *
         * @return int
         */
        public function get_method_id(): int
        {
        }
        /**
         * Set Verification Method ID.
         *
         * @since 3.11.1
         *
         * @param int $method_id Verification Method ID.
         *
         * @return VerificationRequest
         */
        public function set_method_id(int $method_id): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationRequest
        {
        }
        /**
         * Get Status.
         *
         * @since 3.11.1
         *
         * @return string
         */
        public function get_status(): string
        {
        }
        /**
         * Set Status.
         *
         * @since 3.11.1
         *
         * @param string $status Status.
         *
         * @return VerificationRequest
         */
        public function set_status(string $status): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationRequest
        {
        }
        /**
         * Get Checked By ID
         *
         * @since 3.11.1
         *
         * @return int
         */
        public function get_checked_by(): int
        {
        }
        /**
         * Set Checked by.
         *
         * @since 3.11.1
         *
         * @param int $checked_by Checked by user ID.
         *
         * @return VerificationRequest
         */
        public function set_checked_by(int $checked_by): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationRequest
        {
        }
        /**
         * Get Additional Information.
         *
         * @since 3.11.1
         *
         * @return array
         */
        public function get_additional_info(): array
        {
        }
        /**
         * Set additional information.
         *
         * @since 3.11.1
         *
         * @param array $additional_info Additional Information.
         *
         * @return VerificationRequest
         */
        public function set_additional_info(array $additional_info): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationRequest
        {
        }
        /**
         * Get Documents list.
         *
         * @since 3.11.1
         *
         * @return array
         */
        public function get_documents(): array
        {
        }
        /**
         * Set Document List.
         *
         * @since 3.11.1
         *
         * @param array $documents Documents.
         *
         * @return VerificationRequest
         */
        public function set_documents(array $documents): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationRequest
        {
        }
        /**
         * Get a Note.
         *
         * @since 3.11.1
         *
         * @return string
         */
        public function get_note(): string
        {
        }
        /**
         * Set a note.
         *
         * @since 3.11.1
         *
         * @param string $note Note Text.
         *
         * @return VerificationRequest
         */
        public function set_note(string $note): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationRequest
        {
        }
        /**
         * Get Created At time.
         *
         * @since 3.11.1
         *
         * @return DateTimeImmutable
         */
        public function get_created_at(): \DateTimeImmutable
        {
        }
        /**
         * Set Created At time.
         *
         * @since 3.11.1
         *
         * @param DateTimeImmutable $created_at DateTime.
         *
         * @return VerificationRequest
         */
        public function set_created_at(\DateTimeImmutable $created_at): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationRequest
        {
        }
        /**
         * Get updated at time.
         *
         * @since 3.11.1
         *
         * @return DateTimeImmutable
         */
        public function get_updated_at(): \DateTimeImmutable
        {
        }
        /**
         * Set updated at time.
         *
         * @since 3.11.1
         *
         * @param DateTimeImmutable $updated_at DateTimeInterface.
         *
         * @return VerificationRequest
         */
        public function set_updated_at(\DateTimeImmutable $updated_at): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationRequest
        {
        }
        /**
         * Get All statuses.
         *
         * @since 3.11.1
         *
         * @return array
         */
        public function get_statuses(): array
        {
        }
        /**
         * Get status Title.
         *
         * @since 3.11.1
         *
         * @param string $status Status.
         *
         * @return string
         */
        public function get_status_title(string $status = ''): string
        {
        }
        /**
         * Create verification request.
         *
         * @since 3.11.1
         *
         * @throws Exception When method ID or Vendor ID is invalid.
         * @return VerificationRequest
         */
        public function create(): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationRequest
        {
        }
        /**
         * Get verification request.
         *
         * @since 3.11.1
         *
         * @throws Exception
         * @return VerificationRequest
         */
        public function get(): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationRequest
        {
        }
        /**
         * Populate the model with data.
         *
         * @since 3.11.1
         *
         * @param stdClass $verification_request Document Object.
         *
         * @throws Exception When date time is not valid.
         * @return VerificationRequest
         */
        public function populate(\stdClass $verification_request): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationRequest
        {
        }
        /**
         * Update verification request.
         *
         * @since 3.11.1
         *
         * @throws Exception
         * @return VerificationRequest
         */
        public function update(): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationRequest
        {
        }
        /**
         * Save verification method data.
         *
         * @since 3.11.1
         *
         * @throws Exception
         * @return VerificationRequest
         */
        public function save(): \WeDevs\DokanPro\Modules\VendorVerification\Models\VerificationRequest
        {
        }
        /**
         * Delete a verification request.
         *
         * @since 3.11.1
         *
         * @throws Exception If ID not provided or not deleted.
         */
        public function delete(): bool
        {
        }
        /**
         * Convert to array.
         *
         * @since 3.11.1
         *
         * @return array
         */
        public function to_array(): array
        {
        }
        /**
         * Convert Object to array.
         *
         * @since 3.11.1
         *
         * @return array
         */
        public function __toArray(): array
        {
        }
        /**
         * Convert to object.
         *
         * @since 3.11.1
         *
         * @return stdClass
         */
        public function __toObject(): \stdClass
        {
        }
        /**
         * Count method.
         *
         * @since 3.11.1
         *
         * @param array $args Array of arguments.
         *
         * @return array
         */
        public function count(array $args = []): array
        {
        }
        /**
         * Query method.
         *
         * @since 3.11.1
         *
         * @param array $args Array of arguments.
         *
         * @return VerificationRequest[]
         */
        public function query(array $args): array
        {
        }
        /**
         * Query field method.
         *
         * @since 3.11.1
         *
         * @param array $args Array of arguments.
         *
         * @return array
         */
        public function query_field(array $args): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\VendorVerification\REST {
    /**
     * Verification Document Type API.
     *
     * @since 3.11.1
     */
    class VerificationMethodsApi extends \WP_REST_Controller
    {
        /**
         * API namespace.
         *
         * @var string $namespace
         */
        protected $namespace = 'dokan/v1';
        /**
         * API rest base.
         *
         * @var string $rest_base
         */
        protected $rest_base = 'verification-methods';
        /**
         * Constructor.
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Register Rest Routes.
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get a collection of Document Types.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * Create a new Document Type.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function create_item($request)
        {
        }
        /**
         * Get a Document Type.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function get_item($request)
        {
        }
        /**
         * Updates one item from the collection.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Deletes one item from the collection.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Prepares the item for the REST response.
         *
         * @since 3.11.1
         *
         * @param VerificationMethod $item    WordPress' representation of the item.
         * @param WP_REST_Request    $request Request object.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepare links for the request.
         *
         * @param VerificationMethod $item    Object data.
         * @param WP_REST_Request    $request Request object.
         *
         * @return array                   Links for the given post.
         */
        protected function prepare_links($item, $request)
        {
        }
        /**
         * Get Item permission check.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return bool|WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Get Item permission check.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return bool|WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Create Item permission check.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|bool
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Update Item permission check.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|bool
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Delete Item permission check.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|bool
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Item schema.
         *
         * @since 3.11.1
         *
         * @return array
         */
        public function get_item_schema(): array
        {
        }
        /**
         * Retrieves the query params for the collections.
         *
         * @since 3.11.1
         *
         * @return array Query parameters for the collection.
         */
        public function get_collection_params(): array
        {
        }
    }
    /**
     * Verification Request API.
     *
     * @since 3.11.1
     */
    class VerificationRequestsApi extends \WP_REST_Controller
    {
        /**
         * API namespace.
         *
         * @var string $namespace
         */
        protected $namespace = 'dokan/v1';
        /**
         * API rest base.
         *
         * @var string $rest_base
         */
        protected $rest_base = 'verification-requests';
        /**
         * Constructor.
         *
         * @since 3.11.1
         *
         * @return void
         */
        public function __construct()
        {
        }
        /**
         * Register Rest Routes.
         *
         * @since 3.11.1
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Get a collection of Document Types.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function get_items($request)
        {
        }
        /**
         * Create a new Document Type.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function create_item($request)
        {
        }
        /**
         * Get a Document Type.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|WP_HTTP_Response|WP_REST_Response
         */
        public function get_item($request)
        {
        }
        /**
         * Updates one item from the collection.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function update_item($request)
        {
        }
        /**
         * Deletes one item from the collection.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Full details about the request.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function delete_item($request)
        {
        }
        /**
         * Prepares the item for the REST response.
         *
         * @since 3.11.1
         *
         * @param VerificationRequest $item    WordPress' representation of the item.
         * @param WP_REST_Request     $request Request object.
         *
         * @return WP_REST_Response|WP_Error Response object on success, or WP_Error object on failure.
         */
        public function prepare_item_for_response($item, $request)
        {
        }
        /**
         * Prepare links for the request.
         *
         * @param VerificationRequest $item    Object data.
         * @param WP_REST_Request     $request Request object.
         *
         * @return array                   Links for the given post.
         */
        protected function prepare_links($item, $request)
        {
        }
        /**
         * Get Items permission check.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return bool|WP_Error
         */
        public function get_items_permissions_check($request)
        {
        }
        /**
         * Get Item permission check.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return bool|WP_Error
         */
        public function get_item_permissions_check($request)
        {
        }
        /**
         * Create Item permission check.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|bool
         */
        public function create_item_permissions_check($request)
        {
        }
        /**
         * Update Item permission check.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|bool
         */
        public function update_item_permissions_check($request)
        {
        }
        /**
         * Delete Item permission check.
         *
         * @since 3.11.1
         *
         * @param WP_REST_Request $request Rest Request.
         *
         * @return WP_Error|bool
         */
        public function delete_item_permissions_check($request)
        {
        }
        /**
         * Item schema.
         *
         * @since 3.11.1
         *
         * @return array
         */
        public function get_item_schema(): array
        {
        }
        /**
         * Retrieves the query params for the collections.
         *
         * @since 3.11.1
         *
         * @return array Query parameters for the collection.
         */
        public function get_collection_params(): array
        {
        }
        /**
         * Is verification request author.
         *
         * @since 3.11.1
         *
         * @param int $verification_request_id Request ID.
         * @param int $author_id               Author ID to compare.
         *
         * @return bool
         */
        public function is_author(int $verification_request_id = 0, int $author_id = 0): bool
        {
        }
        /**
         * Validate document ids.
         *
         * @since 3.11.1
         *
         * @param array $documents Document IDs.
         *
         * @return array
         */
        protected function validate_document_ids(array $documents): array
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\VendorVerification {
    /**
     * Widget Class.
     *
     * @since 3.11.1
     */
    class Widget
    {
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Register widgets
         *
         * @since 2.8
         * @since 3.10.2 Updated to comply with `dokan-lite` widget registration process
         *
         * @param array $widgets List of widgets to be registered
         *
         * @return array
         */
        public function register_widgets(array $widgets): array
        {
        }
        /**
         * Show verification widgets.
         *
         * @since unknown
         * @since 3.11.1 Migrated to the class.
         *
         * @return void
         */
        public function show_verification_widget()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\VendorVerification\Widgets {
    /**
     * new WordPress Widget format
     * WordPress 2.8 and above
     *
     * @see http://codex.wordpress.org/Widgets_API#Developing_Widgets
     */
    class VerifiedMethodsList extends \WP_Widget
    {
        /**
         * Instance key to keep track of the widget inside widget container in dokan-lite
         *
         * @since 3.10.2
         *
         * @var string
         */
        const INSTANCE_KEY = 'vendor_verification__Dokan_Store_Verification_list';
        /**
         * Constructor
         *
         * @return void
         * */
        public function __construct()
        {
        }
        /**
         * Outputs the HTML for this widget.
         *
         * @param array $args     An array of standard parameters for widgets in this theme
         * @param array $instance An array of settings for this widget instance
         *
         * @return void Echoes it's output
         * */
        public function widget($args, $instance)
        {
        }
        /**
         * Deals with the settings when they are saved by the admin. Here is
         * where any validation should be dealt with.
         *
         * @param array $new_instance An array of new settings as submitted by the admin
         * @param array $old_instance An array of the previous settings
         *
         * @return array The validated and (if necessary) amended settings
         * */
        public function update($new_instance, $old_instance)
        {
        }
        /**
         * Displays the form for this widget on the Widgets page of the WP Admin area.
         *
         * @param array $instance An array of the current settings for this widget
         *
         * @return void Echoes it's output
         * */
        public function form($instance)
        {
        }
        /*
         * Prints out list items after checking
         */
        public function print_item($key, $item)
        {
        }
        /**
         * Print social items.
         *
         * @since 3.11.1
         *
         * @param string $key  Key.
         * @param string $item Item.
         *
         * @return void
         */
        public function print_social_item($key, $item)
        {
        }
        /**
         * Print verified info items.
         *
         * @since 3.11.1
         *
         * @param string $key  Key.
         * @param string $item Item.
         *
         * @return void
         */
        public function print_info_items($key, $item)
        {
        }
        /**
         * Print verified verification methods.
         *
         * @since 3.11.1
         *
         * @param string             $key  Key.
         * @param VerificationMethod $item Verified Method.
         *
         * @return void
         */
        public function print_verification_methods($key, $item)
        {
        }
    }
}
namespace {
    /**
     * SMS Gateway handler class
     *
     * @author weDevs
     */
    class WeDevs_Dokan_SMS_Gateways
    {
        /**
         * Gateway slug
         *
         * @param string $provider name of the gateway
         */
        public function __construct()
        {
        }
        public static function instance()
        {
        }
        /**
         * Get all sms gateways
         *
         * @return array
         */
        public function get_gateways()
        {
        }
        /**
         * Set last sms sent time
         */
        public function set_last_sent()
        {
        }
        public function send($to)
        {
        }
        /**
         * Sends SMS via Twillo api
         *
         * @uses `wedevs_sms_via_twilio` filter to fire
         *
         * @param type $sms_data
         *
         * @return bool
         */
        public function twilio_api($sms_data)
        {
        }
        /**
         * Sends SMS via Nexmo api
         *
         * @uses `wedevs_sms_via_nexmo` filter to fire
         *
         * @param type $sms_data
         *
         * @return bool
         */
        public function nexmo_api($sms_data)
        {
        }
        /**
         * Handles Twilio error codes and returns translatable text
         *
         * @param $error_code
         *
         * @return string|void
         */
        public function handle_twilio_errors($error_code)
        {
        }
    }
    /**
     * Class NexmoMessage handles the methods and properties of sending an SMS message.
     */
    class NexmoMessage
    {
        /**
         * @var string Nexmo server URI
         *
         * We're sticking with the JSON interface here since json
         * parsing is built into PHP and requires no extensions.
         * This will also keep any debugging to a minimum due to
         * not worrying about which parser is being used.
         */
        public $nx_uri = 'https://rest.nexmo.com/sms/json';
        /**
         * @var bool If recieved an inbound message
         */
        public $inbound_message = \false;
        // Current message
        public $to = '';
        public $from = '';
        public $text = '';
        public $network = '';
        public $message_id = '';
        // A few options
        public $ssl_verify = \false;
        // Verify Nexmo SSL before sending any message
        public function __construct($api_key, $api_secret)
        {
        }
        /**
         * Prepare new text message.
         *
         * If $unicode is not provided we will try to detect the
         * message type. Otherwise set to TRUE if you require
         * unicode characters.
         */
        public function sendText($to, $from, $message, $unicode = \null)
        {
        }
        /**
         * Prepare new WAP message.
         */
        public function sendBinary($to, $from, $body, $udh)
        {
        }
        /**
         * Prepare new binary message.
         */
        public function pushWap($to, $from, $title, $url, $validity = 172800000)
        {
        }
        /**
         * Display a brief overview of a sent message.
         * Useful for debugging and quick-start purposes.
         */
        public function displayOverview($nexmo_response = \null)
        {
        }
        /**
         * Inbound text methods
         */
        /**
         * Check for any inbound messages, using $_GET by default.
         *
         * This will set the current message to the inbound
         * message allowing for a future reply() call.
         */
        public function inboundText($data = \null)
        {
        }
        /**
         * Reply the current message if one is set.
         */
        public function reply($message)
        {
        }
    }
    class WeDevs_Settings_API
    {
        public function __construct()
        {
        }
        /**
         * Set settings sections
         *
         * @param array   $sections setting sections array
         */
        function set_sections($sections)
        {
        }
        /**
         * Add a single section
         *
         * @param array   $section
         */
        function add_section($section)
        {
        }
        /**
         * Set settings fields
         *
         * @param array   $fields settings fields array
         */
        function set_fields($fields)
        {
        }
        function add_field($section, $field)
        {
        }
        /**
         * Initialize and registers the settings sections and fileds to WordPress
         *
         * Usually this should be called at `admin_init` hook.
         *
         * This function gets the initiated settings sections and fields. Then
         * registers them to WordPress and ready for use.
         */
        function admin_init()
        {
        }
        /**
         * Displays a text field for a settings field
         *
         * @param array   $args settings field args
         */
        function callback_text($args)
        {
        }
        /**
         * Displays a checkbox for a settings field
         *
         * @param array   $args settings field args
         */
        function callback_checkbox($args)
        {
        }
        /**
         * Displays a multicheckbox a settings field
         *
         * @param array   $args settings field args
         */
        function callback_multicheck($args)
        {
        }
        /**
         * Displays a multicheckbox a settings field
         *
         * @param array   $args settings field args
         */
        function callback_radio($args)
        {
        }
        /**
         * Displays a selectbox for a settings field
         *
         * @param array   $args settings field args
         */
        function callback_select($args)
        {
        }
        /**
         * Displays a textarea for a settings field
         *
         * @param array   $args settings field args
         */
        function callback_textarea($args)
        {
        }
        /**
         * Displays a textarea for a settings field
         *
         * @param array   $args settings field args
         */
        function callback_html($args)
        {
        }
        /**
         * Displays a rich text textarea for a settings field
         *
         * @param array   $args settings field args
         */
        function callback_wysiwyg($args)
        {
        }
        /**
         * Get the value of a settings field
         *
         * @param string  $option  settings field name
         * @param string  $section the section name this field belongs to
         * @param string  $default default text if it's not found
         * @return string
         */
        function get_option($option, $section, $default = '')
        {
        }
        /**
         * Show navigations as tab
         *
         * Shows all the settings section labels as tab
         */
        function show_navigation()
        {
        }
        /**
         * Show the section settings forms
         *
         * This function displays every sections in a different form
         */
        function show_forms()
        {
        }
        /**
         * Tabbable JavaScript codes
         *
         * This code uses localstorage for displaying active tabs
         */
        function script()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\VendorVerification {
    /**
     * Vendor Verification Module.
     *
     * @since 3.11.1
     *
     * @property Ajax                $ajax                    Ajax Class.
     * @property Assets              $assets                    Ajax Class.
     * @property AdminSettings       $admin_settings          Admin Settings Class.
     * @property AdminHooks          $admin_hooks             Admin Hooks Class.
     * @property Dashboard           $dashboard               Vendor Dashboard Class.
     * @property FrontendHooks       $frontend_hooks          Frontend Hook Class.
     * @property HybridauthHooks     $hybridauth_hooks        Frontend Hook Class.
     * @property Emails              $emails                  Emails Class.
     * @property SetupWizard         $setup_wizard            SetupWizard Class.
     * @property VerifiedMethodsList $list_widget             List Widget Class.
     * @property Installer           $installer               Installer Class.
     */
    class Module
    {
        use \WeDevs\Dokan\Traits\ChainableContainer;
        /**
         * Constructor for the Dokan_Seller_Verification class
         *
         * Sets up all the appropriate hooks and actions
         * within our plugin.
         */
        public function __construct()
        {
        }
        /**
         * Placeholder for activation function
         *
         * Nothing being called here yet.
         */
        public function activate()
        {
        }
        /**
         * Flush rewrite rules
         *
         * @since 3.3.1
         *
         * @return void
         */
        public function flush_rewrite_rules()
        {
        }
        /**
         * Rest api class map
         *
         * @since 3.11.1
         *
         * @param array $classes An array of classes.
         *
         * @return array
         */
        public function register_class_map(array $classes): array
        {
        }
        /**
         * Define module constants
         *
         * @since 3.0.0
         *
         * @return void
         */
        public function define_constants()
        {
        }
        /**
         * Include all the required files
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function includes_file()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Wholesale {
    /**
     * Wholesale Block data handler class.
     *
     * @since 3.7.13
     */
    class BlockData
    {
        /**
         * Block Section name.
         *
         * @since 3.7.13
         *
         * @var string
         */
        public $section;
        /**
         * Meta key name.
         *
         * @since 3.7.13
         *
         * @var string
         */
        public $meta_key;
        /**
         * Constructor class.
         *
         * @since 3.7.13
         */
        public function __construct()
        {
        }
        /**
         * Get wholesale product data for Dokan-pro
         *
         * @since 3.7.13
         *
         * @param array      $block
         * @param WC_Product $product
         *
         * @return array
         */
        public function get_product_block_data($block, $product)
        {
        }
        /**
         * Save wholesale data after REST-API insert or update.
         *
         * @since 3.7.13
         *
         * @param WC_Product      $product  Inserted object.
         * @param WP_REST_Request $request  Request object.
         *
         * @return void
         */
        public function set_product_block_data($product, $request)
        {
        }
    }
    /**
     * Wholesale Cache class.
     *
     * Manage all caching for wholesale module.
     *
     * @since 3.4.2
     *
     * @see \WeDevs\Dokan\Cache
     */
    class WholesaleCache
    {
        /**
         * Class constructor.
         *
         * @since 3.4.2
         */
        public function __construct()
        {
        }
        /**
         * Clear Wholesale customer caches.
         *
         * @since 3.4.2
         *
         * @return void
         */
        public static function clear_wholesale_customer_cache()
        {
        }
        /**
         * Clear wholesale customer cache after update an user.
         *
         * @since 3.4.2
         *
         * @param int    $user_id
         * @param object $old_user_data
         *
         * @return void
         */
        public static function clear_cache_after_update_user($user_id, $old_user_data)
        {
        }
    }
}
namespace {
    /**
     * Wholesale related API's
     */
    class Dokan_REST_Wholesale_Controller extends \WeDevs\Dokan\Abstracts\DokanRESTController
    {
        /**
         * Endpoint namespace
         *
         * @var string
         */
        protected $namespace = 'dokan/v1';
        /**
         * Route name
         *
         * @var string
         */
        protected $base = 'wholesale';
        /**
         * Register all routes releated with stores
         *
         * @return void
         */
        public function register_routes()
        {
        }
        /**
         * Change wholesale customer status
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function permission_for_change_status()
        {
        }
        /**
         * Change wholesale customer status
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function permission_for_get_all()
        {
        }
        /**
         * Change wholesale customer status
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function permission_check_for_manageable_part()
        {
        }
        /**
         * Get all wholesale customers
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function get_wholesale_customers($request)
        {
        }
        /**
         * Create wholesale customer
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function create_wholesale_customer($request)
        {
        }
        /**
         * Update status for wholesale customer
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function update_wholesale_customer_status($request)
        {
        }
        /**
         * Batch udpate for vendor listing
         *
         * @since 2.8.0
         *
         * @return void
         */
        public function batch_update($request)
        {
        }
        /**
         * Transform Wholesale customer userdata
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function format_user_collections($request)
        {
        }
        /**
         * Prepare a single user output for response
         *
         * @param object $item
         * @param WP_REST_Request $request Request object.
         * @param array $additional_fields (optional)
         *
         * @return WP_REST_Response $response Response data.
         */
        public function prepare_item_for_response($data, $request, $additional_fields = [])
        {
        }
        /**
         * Prepare links for the request.
         *
         * @param WC_Data         $object  Object data.
         * @param WP_REST_Request $request Request object.
         *
         * @return array                   Links for the given post.
         */
        protected function prepare_links($object, $request)
        {
        }
        /**
         * Format item's collection for response
         *
         * @param  object $response
         * @param  object $request
         * @param  array $items
         * @param  int $total_items
         *
         * @return object
         */
        public function format_collection_response($response, $request, $total_items)
        {
        }
    }
    /**
    * Admin class
    */
    class Dokan_Wholesale_Admin
    {
        /**
         * Load automatically when class initiate
         *
         * @since 2.9.5
         */
        public function __construct()
        {
        }
        /**
         * Load admin settings section
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function load_settings_section($section)
        {
        }
        /**
         * Load all settings fields
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function load_settings_fields($fields)
        {
        }
        /**
         * Enqueue vue component js
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function admin_enqueue_scripts()
        {
        }
        /**
         * Register scripts
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Add submenu page in dokan Dashboard
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function add_submenu($capability)
        {
        }
        /**
         * Add subscripton route
         *
         * @param  array $routes
         *
         * @return array
         */
        public function admin_routes($routes)
        {
        }
        /**
         * Add wholesale matabox
         *
         * @since 2.9.13
         *
         * @return void
         */
        public function wholesale_metabox()
        {
        }
        /**
         * Save wholesale matabox data
         *
         * @since 2.9.13
         *
         * @param int $product_id
         *
         * @return void
         */
        public function save_wholesale_data($product_id)
        {
        }
        /**
         * Add wholesale variation metabox
         *
         * @since 2.9.13
         *
         * @param  int $loop
         * @param  array $variation_data
         * @param  object variation
         *
         * @return void
         */
        public function wholesale_variation_metabox($loop, $variation_data, $variation)
        {
        }
        /**
         * Save whole variation data
         *
         * @since 2.9.13
         *
         * @param int $product_id
         * @param int $loop
         *
         * @return void
         */
        public function save_wholesale_variation_data($product_id, $loop)
        {
        }
    }
    /**
    * Cart and checkout handler Class
    *
    * @since 2.9.5
    */
    class Dokan_Wholesale_Cart_Checkout
    {
        /**
         * Load automatically when class initiate
         *
         * @since 2.9.5
         */
        public function __construct()
        {
        }
        /**
         * Get formatter data for wholesale
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function change_wholesale_item_meta_title($key, $meta, $item)
        {
        }
        /**
         * Add warranty data to all variations
         *
         * @param $data
         * @param $product
         * @param $variation
         *
         * @return mixed
         */
        public function add_variation_data($data, $product, $variation)
        {
        }
        /**
         * Show wholesale price
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function show_wholesale_price()
        {
        }
        /**
         * Calculate cart item for wholesales
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function calculate_cart($cart_obj)
        {
        }
        /**
         * Recalculate mini cart when applied wholesale
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function recalculate_cart_totals()
        {
        }
        /**
         * Display wholesale info
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function show_wholesale_info($cart_item, $cart_item_key)
        {
        }
        /**
         * Order item meta added for wholesale product
         *
         * @since 1.0.0
         *
         * @throws Exception
         * @return void
         */
        public function order_item_meta($item, $cart_item_key, $values)
        {
        }
        /**
         * Show wholesale price in shop loop
         *
         * @since 1.0.0
         *
         * @return string
         */
        public function show_loop_wholesale_price($price, $product)
        {
        }
    }
    /**
    * Customer related functionality
    *
    * @since 2.9.5
    */
    class Dokan_Wholesale_Customer
    {
        /**
         * Load automatically when class initiate
         *
         * @since 2.9.5
         */
        public function __construct()
        {
        }
        /**
         * Render migration html
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function render_migration_html()
        {
        }
    }
    /**
    * Vendor related functionality
    *
    * @since 2.9.5
    */
    class Dokan_Wholesale_Vendor
    {
        /**
         * Load automatically when class initiate
         *
         * @since 2.9.5
         */
        public function __construct()
        {
        }
        /**
         * Render product rma options
         *
         * @since 2.9.5
         *
         * @return void
         **/
        public function load_wholesale_content($post, $post_id)
        {
        }
        /**
         * Show wholesale settings in variations
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function load_wholesale_content_variation($loop, $variation_data, $variation)
        {
        }
        /**
         * Save RMA data
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function save_wholesale_data($post_id)
        {
        }
        /**
         * Save wholesale variation data
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function save_variation_wholesale_data($post_id)
        {
        }
    }
    /**
     * New Wholesael customer registration Email to admin.
     *
     * An email sent to the admin when a a customer registration as wholesale.
     *
     * @class       Dokan_Email_Wholesale_Register
     * @extends     WC_Email
     */
    class Dokan_Email_Wholesale_Register extends \WC_Email
    {
        /**
         * Heading Confirmation string.
         *
         * @var string
         */
        public $heading_confirmation = '';
        /**
         * Subject Confirmation string.
         *
         * @var string
         */
        public $subject_confirmation = '';
        /**
         * Constructor.
         */
        public function __construct()
        {
        }
        /**
         * Get email subject.
         *
         * @return string
         */
        public function get_default_subject()
        {
        }
        /**
         * Get email heading.
         *
         * @return string
         */
        public function get_default_heading()
        {
        }
        /**
         * trigger function.
         *
         * @access public
         * @return void
         */
        public function trigger($user, $request)
        {
        }
        /**
         * Get content html.
         *
         * @access public
         * @return string
         */
        public function get_content_html()
        {
        }
        /**
         * Get content plain.
         *
         * @access public
         * @return string
         */
        public function get_content_plain()
        {
        }
        /**
         * Initialise settings form fields.
         */
        public function init_form_fields()
        {
        }
    }
}
namespace WeDevs\DokanPro\Modules\Wholesale {
    class Module
    {
        /**
         * Load automatically when class initiate
         *
         * @since 2.9.5
         */
        public function __construct()
        {
        }
        /**
         * Hooks
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function define()
        {
        }
        /**
         * Get plugin path
         *
         * @since 2.9.5
         *
         * @return void
         **/
        public function plugin_path()
        {
        }
        /**
         * Includes all necessary class a functions file
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function includes()
        {
        }
        /**
         * Initiate all classes
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function initiate()
        {
        }
        /**
         * Init all hooks
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function hooks()
        {
        }
        /**
         * Register scripts to enqueue later
         *
         * @since 3.7.4
         */
        public function register_scripts()
        {
        }
        /**
         * Load scripts
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function load_scripts()
        {
        }
        /**
         * Set template path for Wholesale
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function load_wholesale_templates($template_path, $template, $args)
        {
        }
        /**
         * REST API classes Mapping
         *
         * @since 2.9.5
         *
         * @return void
         */
        public function rest_api_class_map($class_map)
        {
        }
        /**
         * Set some localize data for wholesales
         *
         * @since 1.0.0
         *
         * @return void
         */
        public function add_localize_data($data)
        {
        }
        public function setup_emails($emails)
        {
        }
        public function load_dokan_wholesale_register_emails($wc_emails)
        {
        }
        public function register_dokan_wholesale_register_actions($actions)
        {
        }
        /**
         * Set Proper template directory.
         *
         * @param array $template_array
         *
         * @return array
         */
        public function set_email_template_directory($template_array)
        {
        }
    }
}
namespace WeDevs\DokanPro\Dependencies\GuzzleHttp {
    /**
     * Debug function used to describe the provided value type and class.
     *
     * @param mixed $input Any type of variable to describe the type of. This
     *                     parameter misses a typehint because of that.
     *
     * @return string Returns a string containing the type of the variable and
     *                if a class is provided, the class name.
     *
     * @deprecated describe_type will be removed in guzzlehttp/guzzle:8.0. Use Utils::describeType instead.
     */
    function describe_type($input): string
    {
    }
    /**
     * Parses an array of header lines into an associative array of headers.
     *
     * @param iterable $lines Header lines array of strings in the following
     *                        format: "Name: Value"
     *
     * @deprecated headers_from_lines will be removed in guzzlehttp/guzzle:8.0. Use Utils::headersFromLines instead.
     */
    function headers_from_lines(iterable $lines): array
    {
    }
    /**
     * Returns a debug stream based on the provided variable.
     *
     * @param mixed $value Optional value
     *
     * @return resource
     *
     * @deprecated debug_resource will be removed in guzzlehttp/guzzle:8.0. Use Utils::debugResource instead.
     */
    function debug_resource($value = null)
    {
    }
    /**
     * Chooses and creates a default handler to use based on the environment.
     *
     * The returned handler is not wrapped by any default middlewares.
     *
     * @return callable(\WeDevs\DokanPro\Dependencies\Psr\Http\Message\RequestInterface, array): \WeDevs\DokanPro\Dependencies\GuzzleHttp\Promise\PromiseInterface Returns the best handler for the given system.
     *
     * @throws \RuntimeException if no viable Handler is available.
     *
     * @deprecated choose_handler will be removed in guzzlehttp/guzzle:8.0. Use Utils::chooseHandler instead.
     */
    function choose_handler(): callable
    {
    }
    /**
     * Get the default User-Agent string to use with Guzzle.
     *
     * @deprecated default_user_agent will be removed in guzzlehttp/guzzle:8.0. Use Utils::defaultUserAgent instead.
     */
    function default_user_agent(): string
    {
    }
    /**
     * Returns the default cacert bundle for the current system.
     *
     * First, the openssl.cafile and curl.cainfo php.ini settings are checked.
     * If those settings are not configured, then the common locations for
     * bundles found on Red Hat, CentOS, Fedora, Ubuntu, Debian, FreeBSD, OS X
     * and Windows are checked. If any of these file locations are found on
     * disk, they will be utilized.
     *
     * Note: the result of this function is cached for subsequent calls.
     *
     * @throws \RuntimeException if no bundle can be found.
     *
     * @deprecated default_ca_bundle will be removed in guzzlehttp/guzzle:8.0. This function is not needed in PHP 5.6+.
     */
    function default_ca_bundle(): string
    {
    }
    /**
     * Creates an associative array of lowercase header names to the actual
     * header casing.
     *
     * @deprecated normalize_header_keys will be removed in guzzlehttp/guzzle:8.0. Use Utils::normalizeHeaderKeys instead.
     */
    function normalize_header_keys(array $headers): array
    {
    }
    /**
     * Returns true if the provided host matches any of the no proxy areas.
     *
     * This method will strip a port from the host if it is present. Each pattern
     * can be matched with an exact match (e.g., "foo.com" == "foo.com") or a
     * partial match: (e.g., "foo.com" == "baz.foo.com" and ".foo.com" ==
     * "baz.foo.com", but ".foo.com" != "foo.com").
     *
     * Areas are matched in the following cases:
     * 1. "*" (without quotes) always matches any hosts.
     * 2. An exact match.
     * 3. The area starts with "." and the area is the last part of the host. e.g.
     *    '.mit.edu' will match any host that ends with '.mit.edu'.
     *
     * @param string   $host         Host to check against the patterns.
     * @param string[] $noProxyArray An array of host patterns.
     *
     * @throws Exception\InvalidArgumentException
     *
     * @deprecated is_host_in_noproxy will be removed in guzzlehttp/guzzle:8.0. Use Utils::isHostInNoProxy instead.
     */
    function is_host_in_noproxy(string $host, array $noProxyArray): bool
    {
    }
    /**
     * Wrapper for json_decode that throws when an error occurs.
     *
     * @param string $json    JSON data to parse
     * @param bool   $assoc   When true, returned objects will be converted
     *                        into associative arrays.
     * @param int    $depth   User specified recursion depth.
     * @param int    $options Bitmask of JSON decode options.
     *
     * @return object|array|string|int|float|bool|null
     *
     * @throws Exception\InvalidArgumentException if the JSON cannot be decoded.
     *
     * @see https://www.php.net/manual/en/function.json-decode.php
     * @deprecated json_decode will be removed in guzzlehttp/guzzle:8.0. Use Utils::jsonDecode instead.
     */
    function json_decode(string $json, bool $assoc = false, int $depth = 512, int $options = 0)
    {
    }
    /**
     * Wrapper for JSON encoding that throws when an error occurs.
     *
     * @param mixed $value   The value being encoded
     * @param int   $options JSON encode option bitmask
     * @param int   $depth   Set the maximum depth. Must be greater than zero.
     *
     * @throws Exception\InvalidArgumentException if the JSON cannot be encoded.
     *
     * @see https://www.php.net/manual/en/function.json-encode.php
     * @deprecated json_encode will be removed in guzzlehttp/guzzle:8.0. Use Utils::jsonEncode instead.
     */
    function json_encode($value, int $options = 0, int $depth = 512): string
    {
    }
}
namespace {
    /**
     * Load pro plugin for dokan
     *
     * @since 2.5.3
     *
     * @return \Dokan_Pro
     * */
    function dokan_pro()
    {
    }
    /**
     * Dokan get coupon types
     *
     * @since 3.0.0
     *
     * @return array
     */
    function dokan_get_coupon_types()
    {
    }
    /**
     * Retrieves all the product IDs that can be included while creating a coupon by a seller.
     *
     * @since 3.7.7
     *
     * @param int|string $user_id (Optional) ID of the seller
     *
     * @return array List of the expected product IDs
     */
    function dokan_coupon_get_seller_product_ids($user_id = \false)
    {
    }
    /**
     * Check a order have admin coupons for vendors
     *
     * @since 3.4.0
     *
     * @param WC_Order $order
     * @param Int      $vendor_id
     * @param Int      $product_id
     *
     * @return boolean
     */
    function dokan_is_admin_coupon_used_for_vendors($order, $vendor_id, $product_id = 0)
    {
    }
    /**
     * Dokan get prepare coupons meta data
     *
     * @since 3.4.0
     *
     * @param array $coupon_meta
     *
     * @return array $coupon_meta_data
     */
    function dokan_get_coupon_metadata_from_order($coupon_meta)
    {
    }
    /**
     * Dokan get admin coupons meta data
     *
     * @since 3.4.0
     *
     * @param WC_Coupon $coupon
     *
     * @return array $coupon_meta
     */
    function dokan_get_admin_coupon_meta($coupon)
    {
    }
    /**
     * Check the coupon created by admin for vendor
     *
     * @since 3.4.0
     *
     * @param WC_Coupon $coupon
     *
     * @return bool
     */
    function dokan_is_coupon_created_by_admin_for_vendor($coupon)
    {
    }
    /**
     * Check admin created vendor coupon by coupon meta data
     *
     * @since 3.4.0
     *
     * @param array $coupon_meta
     * @param int   $vendor_id
     *
     * @return bool
     */
    function dokan_is_admin_created_vendor_coupon_by_meta($coupon_meta, $vendor_id)
    {
    }
    /**
     * Dokan admin coupon commission types
     *
     * @since 3.4.0
     *
     * @return array
     */
    function dokan_get_admin_coupon_commissions_type()
    {
    }
    /**
     * Dokan get seller products ids by coupon
     *
     * @since 3.4.0
     *
     * @param \WC_Coupon
     * @param int $seller_id
     *
     * @return string
     */
    function dokan_get_seller_products_ids_by_coupon($coupon, $seller_id)
    {
    }
    /**
     * Get Coupon Localize Data.
     *
     * @since 3.10.3
     *
     * @return array
     **/
    function dokan_get_coupon_localize_data()
    {
    }
    /**
     * Get refund counts, used in admin area
     *
     * @since 2.4.11
     * @since 3.0.0 Move the logic to Refund manager class
     * @since 3.8.0 moved this function from dokan-pro/includes/functions.php
     *
     * @global WPDB $wpdb
     * @return array
     */
    function dokan_get_refund_count($seller_id = \null)
    {
    }
    /**
     * Get refund localize data
     *
     * @since 2.6
     * @since 3.8.0 moved this function from dokan-pro/includes/functions.php
     *
     * @return array
     **/
    function dokan_get_refund_localize_data()
    {
    }
    /**
     * Check if the refund request is allowed to be approved
     *
     * @since 3.8.0 moved this function from dokan-pro/includes/functions.php
     *
     * @param int $order_id
     *
     * @return boolean
     */
    function dokan_is_refund_allowed_to_approve($order_id)
    {
    }
    /**
     * Get seller refund by date range
     *
     * @param string $start_date
     * @param string $end_date
     * @param int    $seller_id
     *
     * @deprecated DOKAN_SINCE Will be removed on next major release
     *
     * @return object[]|WP_Error
     */
    function dokan_get_seller_refund_by_date($start_date, $end_date, $seller_id = \false)
    {
    }
    /**
     * Insert an order in sync table once a order is created
     *
     * @since 2.4
     *
     * @param int $order_id
     *
     * @deprecated DOKAN_SINCE Will be removed on next major release
     *
     * @todo Remove this function on next major release
     *
     * @return void
     */
    function dokan_sync_order_table($order_id)
    {
    }
    /**
     * Load order items template
     *
     * @since 3.8.0 moved this method from includes/functions.php
     *
     * @param int $order_id
     *
     * @return void
     */
    function dokan_render_order_table_items($order_id)
    {
    }
    /**
     * Seller sales statement
     *
     * @since
     *
     * @return
     */
    function dokan_seller_sales_statement()
    {
    }
    /**
     * Generate SQL query and fetch the report data based on the arguments passed
     *
     * This function was cloned from WC_Admin_Report class.
     *
     * @since 1.0
     *
     * @global WPDB $wpdb
     * @global WP_User $current_user
     *
     * @param array  $args
     * @param string $start_date
     * @param string $end_date
     *
     * @return obj
     */
    function dokan_get_order_report_data($args, $start_date, $end_date, $current_user = \false)
    {
    }
    /**
     * Generate sales overview report chart in report area
     *
     * @since 1.0
     * @since 3.8.0 Rewritten the function
     *
     * @return void
     */
    function dokan_sales_overview()
    {
    }
    /**
     * Generate seller dashboard overview chart
     *
     * @since 1.0
     * @since 3.8.0 Rewritten the function
     *
     * @return void
     */
    function dokan_dashboard_sales_overview()
    {
    }
    /**
     * Generates daily sales report
     *
     * @since 1.0
     * @since 3.8.0 Rewritten the function
     *
     * @global WPDB $wpdb
     */
    function dokan_daily_sales()
    {
    }
    /**
     * Output the top sellers chart.
     *
     * @since 3.8.0 Rewritten the function
     *
     * @return void
     */
    function dokan_top_sellers()
    {
    }
    /**
     * Output the top earners chart.
     *
     * @since 3.8.0 Rewritten the function
     *
     * @return void
     */
    function dokan_top_earners()
    {
    }
    function dokan_save_variations($post_id)
    {
    }
    /**
     * Show the variable product options.
     *
     * @access public
     * @return void
     */
    function dokan_variable_product_type_options()
    {
    }
    /**
     * Split shpping seller wise
     *
     * @param array $packages
     *
     * @return array
     */
    function dokan_custom_split_shipping_packages($packages)
    {
    }
    /**
     * Set packagewise seller name
     *
     * @param string $title
     * @param integer $i
     * @param array $package
     *
     * @return string
     */
    function dokan_change_shipping_pack_name($title, $i, $package)
    {
    }
    /**
     * Added shipping meta after order
     *
     * @param object $item
     * @param string $package_key
     * @param array $package
     * @param object $order
     *
     * @return void
     */
    function dokan_add_shipping_pack_meta($item, $package_key, $package, $order)
    {
    }
    function dokan_social_reg_handler()
    {
    }
    /**
     * Include pending product status into variation args
     *
     * @param array $args
     *
     * @since 2.9.13
     */
    function dokan_set_variations_args($args)
    {
    }
    /**
     * Set variation product author to product vendor id
     *
     * @param int $variation_id
     *
     * @since 2.9.13
     *
     * @return void
     */
    function dokan_override_variation_product_author($variation_id)
    {
    }
    /**
     * Dokan enabble single seller mode
     *
     * @param bool $valid
     * @param int $product_id
     *
     * @since  2.9.16
     *
     * @return bool
     */
    function dokan_validate_cart_for_single_seller_mode($valid, $product_id)
    {
    }
    /**
     * Dokan rest validate single seller mode
     *
     * @param WC_Order $order
     * @param WP_REST_Request
     * @param bool $creating
     *
     * @since  2.9.16
     *
     * @return WC_Order|WP_REST_Response on failure
     */
    function dokan_rest_validate_single_seller_mode($order, $request, $creating)
    {
    }
    /**
     * Dokan customer available downloads modified for sub orders
     *
     * @param array $downloads
     *
     * @since  3.1.2
     *
     * @return array $modified_downloads|$downloads
     */
    function dokan_woocommerce_customer_available_downloads_modified($downloads)
    {
    }
    /**
     * This method will verify per page item value, will be used only with rest api validate callback
     *
     * @since 3.8.0
     *
     * @param $value
     * @param $request WP_REST_Request
     * @param $key
     *
     * @return bool|WP_Error
     */
    function dokan_rest_validate_store_id($value, $request, $key)
    {
    }
    /**
     * Dokan Admin menu capability
     *
     * @since 3.9.4
     *
     * @return string
     */
    function dokan_admin_menu_capability()
    {
    }
    function dokan_is_empty($var)
    {
    }
    /**
     * Register custom post status "vacation".
     *
     * @since 3.9.0
     *
     * @return void
     */
    function dokan_register_custom_post_status_vacation()
    {
    }
    function dokan_get_profile_progressbar()
    {
    }
    /**
     * Dokan progressbar translated string
     *
     * @param string $string
     * @param int    $value
     * @param int    $progress
     *
     * @return string
     */
    function dokan_progressbar_translated_string($string = '', $value = 15, $progress = 0)
    {
    }
    /**
     * Get get seller coupon
     *
     * @since 2.4.12
     *
     * @param int $seller_id
     *
     * @return array
     */
    function dokan_get_seller_coupon($seller_id, $show_on_store = \false)
    {
    }
    /**
     * Get marketplace seller coupons
     *
     * @since 3.4.0
     *
     * @param int  $seller_id
     * @param bool $show_on_store
     *
     * @return array
     */
    function dokan_get_marketplace_seller_coupon($seller_id, $show_on_store = \false)
    {
    }
    /**
     * Get review page url of a seller
     *
     * @param int $user_id
     *
     * @return string
     */
    function dokan_get_review_url($user_id)
    {
    }
    /**
     * Get best sellers list
     *
     * @param int $limit
     *
     * @return array
     */
    function dokan_get_best_sellers($limit = 5)
    {
    }
    /**
     * Get featured sellers list
     *
     * @param int $count
     *
     * @return array
     */
    function dokan_get_feature_sellers($count = 5)
    {
    }
    /**
     * Set store categories
     *
     * @since 2.9.2
     *
     * @param int            $store_id
     * @param array|int|null $categories
     *
     * @return array|WP_Error Term taxonomy IDs of the affected terms.
     */
    function dokan_set_store_categories($store_id, $categories = \null)
    {
    }
    /**
     * Checks if store category feature is on or off
     *
     * @since 2.9.2
     *
     * @return bool
     */
    function dokan_is_store_categories_feature_on()
    {
    }
    /**
     * Get the default store category id
     *
     * @since 2.9.2
     *
     * @return int
     */
    function dokan_get_default_store_category_id()
    {
    }
    /**
     * Set the default store category id
     *
     * Make sure to category exists before calling
     * this function.
     *
     * @since 2.9.2
     *
     * @param int $category_id
     *
     * @return bool
     */
    function dokan_set_default_store_category_id($category_id)
    {
    }
    /**
     * Nomalize shipping postcode that contains '-' or space
     *
     * @since  2.9.14
     *
     * @param string $code
     *
     * @return string
     */
    function dokan_normalize_shipping_postcode($code)
    {
    }
    /**
     * Include Dokan Pro template
     *
     * Modules should have their own get
     * template function, like `dokan_geo_get_template`
     * used in Geolocation module.
     *
     * @since 3.0.0
     *
     * @param string $name
     * @param array  $args
     *
     * @return void
     */
    function dokan_pro_get_template($name, $args = [])
    {
    }
    /**
     * Dokan register deactivation hook description
     *
     * @param string       $file   full file path
     * @param array|string $method callback function
     *
     * @deprecated 3.8.0 will be removed in a future version of Dokan Pro
     *
     * @return void
     */
    function dokan_register_deactivation_hook($file, $method)
    {
    }
    /**
     * Dokan is single seller mode enable
     *
     * @since 3.1.3
     *
     * @return boolean
     */
    function dokan_is_single_seller_mode_enable()
    {
    }
    /**
     * Dokan get shipping tracking providers list
     *
     * @since 3.2.4
     *
     * @return array
     */
    function dokan_shipping_status_tracking_providers_list()
    {
    }
    /**
     * Dokan get shipping tracking providers list
     *
     * @since 3.2.4
     *
     * @return array
     */
    function dokan_get_shipping_tracking_providers_list()
    {
    }
    /**
     * Dokan get shipping tracking default providers list
     *
     * @since 3.2.4
     *
     * @return array
     */
    function dokan_get_shipping_tracking_default_providers_list()
    {
    }
    /**
     * Dokan get shipping tracking default providers list
     *
     * @since 3.2.4
     *
     * @param string $key_data
     *
     * @return string
     */
    function dokan_get_shipping_tracking_status_by_key($key_data)
    {
    }
    /**
     * Dokan get shipping tracking provider name by key
     *
     * @since 3.2.4
     *
     * @param string $key_data
     * @param string $return_type
     * @param string $tracking_number
     *
     * @return string
     */
    function dokan_get_shipping_tracking_provider_by_key($key_data, $return_type = 'label', $tracking_number = '')
    {
    }
    /**
     * Dokan get shipping tracking current status by order id
     *
     * @since 3.2.4
     *
     * @param int $order_id
     * @param int $need_label
     *
     * @return string
     */
    function dokan_shipping_tracking_status_by_orderid($order_id, $need_label = 0)
    {
    }
    /**
     * Dokan get shipping tracking current provider by oder id
     *
     * @since 3.2.4
     *
     * @param int $order_id
     *
     * @return string
     */
    function dokan_shipping_tracking_provider_by_orderid($order_id)
    {
    }
    /**
     * Get order current shipment status
     *
     * @since 3.2.4
     *
     * @param int  $order_id
     * @param bool $get_only_status
     *
     * @return string|bool
     */
    function dokan_get_order_shipment_current_status($order_id, $get_only_status = \false)
    {
    }
    /**
     * Get main order current shipment status
     *
     * @since 3.2.4
     *
     * @param int $order_id
     *
     * @return string
     */
    function dokan_get_main_order_shipment_current_status($order_id)
    {
    }
    /**
     * Get order current shipment status html view
     *
     * @since 3.2.4
     *
     * @param string $get_status
     *
     * @param string
     */
    function dokan_get_order_shipment_status_html($get_status)
    {
    }
    /**
     * Shipping clear cache values by group name
     *
     * @since 3.2.4
     *
     * @param int $order_id
     *
     * @return void
     */
    function dokan_shipment_cache_clear_group($order_id)
    {
    }
    /**
     * This method will return a random string
     *
     * @param int $length should be positive even number
     *
     * @return string
     */
    function dokan_get_random_string($length = 8)
    {
    }
    /**
     * Get script suffic and version for dokan
     *
     * @since 3.7.25
     *
     * @return array first element is script file suffix and second element is script file version
     */
    function dokan_get_script_suffix_and_version()
    {
    }
    /**
     * Get product available statuses
     *
     * @since 3.8.3
     *
     * @args  int|object $product_id
     *
     * @return array
     */
    function dokan_get_available_post_status($product_id = 0)
    {
    }
    /**
     * Check if HPOS is enabled
     *
     * @since 3.8.0
     */
    function dokan_pro_is_hpos_enabled(): bool
    {
    }
    /**
     * Check if the given id is an order
     *
     * @since 3.8.0
     *
     * @param int   $order_id
     * @param array $types
     *
     * @return bool
     */
    function dokan_pro_is_order($order_id, $types = []): bool
    {
    }
    /**
     * Trigger product create email
     *
     * @since 3.8.3
     *
     * @param WC_Product|int $product
     *
     * @return void
     */
    function dokan_trigger_product_create_email($product)
    {
    }
    /**
     * Load Dokan Plugin when all plugins loaded
     *
     * @return \WeDevs\DokanPro\Modules\Elementor\Module|stdClass
     */
    function dokan_elementor()
    {
    }
    /**
     * WordPress Export Administration API
     *
     * @package WordPress
     * @subpackage Administration
     */
    /**
     * Version number for the export format.
     *
     * Bump this when something changes that might affect compatibility.
     *
     * @since 2.5.0
     */
    \define('WXR_VERSION', '1.2');
    /**
     * Generates the WXR export file for download
     *
     * @since 2.1.0
     *
     * @param array $args Filters defining what should be included in the export
     */
    function export_wp($args = array())
    {
    }
    /**
     * Include Dokan Follow Store template
     *
     * @since 1.0.0
     *
     * @param string $name
     * @param array  $args
     *
     * @return void
     */
    function dokan_follow_store_get_template($name, $args = [])
    {
    }
    /**
     * Follow button labels
     *
     * @since 1.0.0
     *
     * @return array
     */
    function dokan_follow_store_button_labels()
    {
    }
    /**
     * Toggle store follow status for a customer
     *
     * @since 1.0.0
     *
     * @param int $vendor_id   Vendor WP User ID
     * @param int $follower_id Follower WP User ID
     *
     * @return string Follow status
     */
    function dokan_follow_store_toggle_status($vendor_id, $follower_id)
    {
    }
    /**
     * Is customer following a store
     *
     * @since 1.0.0
     *
     * @param int $vendor_id
     * @param int $follower_id
     *
     * @return bool|WP_Error
     */
    function dokan_follow_store_is_following_store($vendor_id, $follower_id)
    {
    }
    /**
     * Check if a follower can use coupon
     *
     * @since 1.0.0
     *
     * @param array     $follower_emails
     * @param WC_Coupon $coupon
     *
     * @return bool
     */
    function dokan_follower_can_user_coupon($follower_emails, $coupon)
    {
    }
    /**
     * Get arg values for Follow Store button
     *
     * @since 2.9.7
     *
     * @param WP_User $vendor
     * @param array   $button_classes
     *
     * @return array
     */
    function dokan_follow_store_get_button_args($vendor, $button_classes = array())
    {
    }
    /**
     * Get all followers of a vendor
     *
     * @since 3.4.2
     *
     * @param $vendor_id
     *
     * @return array
     */
    function dokan_follow_store_get_vendor_followers($vendor_id)
    {
    }
    /**
     * Include Dokan Geolocation template
     *
     * @since 1.0.0
     *
     * @param string $name
     * @param array  $args
     *
     * @return void
     */
    function dokan_geo_get_template($name, $args = [])
    {
    }
    /**
     * Default geolocation latitude and longitude
     *
     * @since 1.0.0
     *
     * @return array
     */
    function dokan_geo_get_default_location()
    {
    }
    /**
     * Enqueue locations map style and scripts
     *
     * @since 1.0.0
     *
     * @return void
     */
    function dokan_geo_enqueue_locations_map()
    {
    }
    /**
     * Dokan Geolocation Filter Form
     *
     * @since 1.0.0
     *
     * @param string $scope   null|product|vendor
     * @param string $display inline|block
     *
     * @return void
     */
    function dokan_geo_filter_form($scope = '', $display = 'inline')
    {
    }
    /**
     * Prints product location map with address
     *
     * @since 1.0.0
     *
     * @return void
     */
    function dokan_geo_product_location()
    {
    }
    /**
     * A helper function to remove Geolocation hook in seller listing footer content
     *
     * @since 1.0.0
     *
     * @return void
     */
    function dokan_geo_remove_seller_listing_footer_content_hook()
    {
    }
    /**
     * A helper function to escape float values
     *
     * @since 2.9.5
     *
     * @return float
     */
    function dokan_geo_float_val($val)
    {
    }
    /**
     * Dokan Geolocation Store Lists Filter Form
     *
     * @since 3.0.0
     *
     * @return void
     */
    function dokan_geo_store_lists_filter_form()
    {
    }
    /**
     * Retrieves product related data.
     *
     * @since 3.7.17
     *
     * @param int $product_id
     *
     * @return array
     */
    function dokan_geo_get_product_data($product_id)
    {
    }
    /**
     * convert a money amount (represented by a float or string (based on locale) ie.: R$ 5,00) to cents (represented by an int).
     *
     * @param float $amount
     *
     * @throws \UnexpectedValueException
     *
     * @return int
     */
    function to_cents(float $amount)
    {
    }
    /**
     * print_r() convenience function.
     *
     * In terminals this will act similar to using print_r() directly, when not run on cli
     * print_r() will also wrap <pre> tags around the output of given variable. Similar to debug().
     *
     * This function returns the same variable that was passed.
     *
     * @param mixed $var Variable to print out.
     *
     * @return mixed the same $var that was passed to this function
     *
     * @link http://book.cakephp.org/3.0/en/core-libraries/global-constants-and-functions.html#pr
     * @see debug()
     */
    function pr($var)
    {
    }
    function dokan_pa_convert_type_name($type = '')
    {
    }
    function dokan_pa_get_posted_product_addons($postdata = [])
    {
    }
    function dokan_pa_addons_cmp($a, $b)
    {
    }
    function dokan_get_vendor_staff($vendor_id = \null)
    {
    }
    function get_staff_ids($user_id)
    {
    }
    function dokan_pa_view_addon_for_vendor_staff_vendor($query)
    {
    }
    /**
     * Module class object
     *
     * @return \WeDevs\DokanPro\Modules\ReportAbuse\Module
     */
    function dokan_report_abuse()
    {
    }
    /**
     * Include Dokan Report Abuse template
     *
     * @since 1.0.0
     *
     * @param string $name
     * @param array  $args
     *
     * @return void
     */
    function dokan_report_abuse_template($name, $args = [])
    {
    }
    /**
     * Create abuse report
     *
     * @since 2.9.8
     *
     * @param array $args
     *
     * @return array
     */
    function dokan_report_abuse_create_report($args)
    {
    }
    /**
     * Get module admin settings
     *
     * @since 2.9.8
     *
     * @return array
     */
    function dokan_report_abuse_get_option()
    {
    }
    /**
     * Report Abuse Form
     *
     * @since 2.9.8
     *
     * @param array $args
     * @param bool  $echo
     *
     * @return void|string
     */
    function dokan_report_abuse_report_form($args = [], $echo = \false)
    {
    }
    /**
     * Get abuse reports
     *
     * @since 2.9.8
     *
     * @param array $args
     *
     * @return array|int array of reports or total count
     */
    function dokan_report_abuse_get_reports($args = [])
    {
    }
    /**
     * Delete abuse reports
     *
     * @since 2.9.8
     *
     * @param array $ids
     *
     * @return int
     */
    function dokan_report_abuse_delete_reports($ids)
    {
    }
    /**
     * Warranty Type
     *
     * @since 1.0.0
     *
     * @return array|string
     */
    function dokan_rma_warranty_type($type = '')
    {
    }
    /**
     * Warranty Length if included warranty
     *
     * @since 1.0.0
     *
     * @return string | Array
     */
    function dokan_rma_warranty_length($length = '')
    {
    }
    /**
     * Warranty Length duration if included warranty
     *
     * @since 1.0.0
     *
     * @return string | Array
     */
    function dokan_rma_warranty_length_duration($duration = '')
    {
    }
    /**
     * Get refund Reasons formatted
     *
     * @since 1.0.0
     *
     * @return void
     */
    function dokan_rma_refund_reasons($reason = '')
    {
    }
    /**
     * Get duration value
     *
     * @since 1.0.0
     *
     * @return void
     */
    function dokan_rma_get_duration_value($duration, $value = 0)
    {
    }
    /**
     * Get the warranty validity date based on the order date and warranty duration
     *
     * @since 1.0.0
     *
     * @param string $order_date
     * @param int $warranty_duration
     * @param string $warranty_unit
     *
     * @return string
     */
    function dokan_rma_get_date($order_date, $warranty_duration, $warranty_unit)
    {
    }
    /**
     * Strip slashes from array value recursively
     *
     * @param string $value
     *
     * @return string
     */
    function dokan_stripslashes($value)
    {
    }
    /**
     * Get warranty details from item
     *
     * @param array $item
     *
     * @return array
     */
    function dokan_get_order_item_warranty($item)
    {
    }
    /**
     * Get warranty expiry time in order items
     *
     * @param array $warranty
     * @param object $order
     *
     * @return string
     */
    function dokan_get_warranty_duration_string($warranty, $order)
    {
    }
    /**
     * Get the formatted warranty string of the given product
     *
     * @param int   $product_id
     * @param array $warranty
     *
     * @return string
     */
    function dokan_get_warranty_string($product_id = 0, $warranty = \null)
    {
    }
    /**
     * Warranty request status
     *
     * @since 1.0.0
     *
     * @param string $status
     *
     * @return array|String
     */
    function dokan_warranty_request_status($status = '')
    {
    }
    /**
     * Get return request type
     *
     * @since 1.0.0
     *
     * @return void
     */
    function dokan_warranty_request_type($type = '')
    {
    }
    /**
     * Save warranty request
     *
     * @since 1.0.0
     *
     * @return void
     */
    function dokan_save_warranty_request($data = [])
    {
    }
    /**
     * Update warranty requests
     *
     * @param array $data
     *
     * @return WP_Error | int
     */
    function dokan_update_warranty_request($data = [])
    {
    }
    /**
     * Dokan get warranty request
     *
     * @since 1.0.0
     *
     * @return array
     */
    function dokan_get_warranty_request($data = [])
    {
    }
    /**
     * Update warranty request status.
     *
     * @since 1.0.0
     *
     * @param int $id Request ID.
     * @param string $status Status.
     *
     * @return bool|int|WP_Error
     */
    function dokan_update_warranty_request_status($id, $status)
    {
    }
    /**
     * Warranty request status count
     *
     * @since 1.0.0
     *
     * @return array
     */
    function dokan_warranty_request_status_count()
    {
    }
    /**
     * List filter for warranty request
     *
     * @since 1.0.0
     *
     * @return void
     */
    function dokan_warranty_request_listing_status_filter()
    {
    }
    /**
     * Get quantity remainting
     *
     * @since 1.0.0
     *
     * @return void
     */
    function dokan_get_product_qty_remaining($order_id, $item_id)
    {
    }
    /**
     * Check item has warranty or not
     *
     * @since 1.0.0
     *
     * @param integer $order_id
     * @param array $item
     *
     * @return void
     */
    function dokan_check_item_has_warranty($order_id, $item)
    {
    }
    function dokan_get_item_warranty_expiry($duration_value = '', $duration_type = '')
    {
    }
    /**
     * Check and generate an unique random copuon code
     *
     * @since 1.0.0
     *
     * @return string
     */
    function dokan_rma_generate_coupon_code()
    {
    }
    /**
     * Dokan delete warranty request
     *
     * @param $id
     * @param $vendor_id
     *
     * @since 3.0.7
     *
     * @return bool
     */
    function dokan_delete_warranty_request($id, $vendor_id)
    {
    }
    /**
     * Include module template
     *
     * @since 2.9.10
     *
     * @param string $name
     * @param array  $args
     *
     * @return void
     */
    function dokan_seller_vacation_get_template($name, $args = array())
    {
    }
    /**
     * Get vacation schedules
     *
     * @since 2.9.10
     *
     * @param array $profile_info
     *
     * @return array
     */
    function dokan_seller_vacation_get_vacation_schedules($profile_info)
    {
    }
    /**
     * Check if seller is on vacation
     *
     * @since 2.9.10
     *
     * @param int $vendor_id
     *
     * @return bool
     */
    function dokan_seller_vacation_is_seller_on_vacation($vendor_id)
    {
    }
    /**
     * Include Dokan ShipStation template
     *
     * @since 1.0.0
     *
     * @param string $name
     * @param array  $args
     *
     * @return void
     */
    function dokan_shipstation_get_template($name, $args = [])
    {
    }
    /**
     * Get Order data for a seller
     *
     * @since 1.0.0
     *
     * @param int   $seller_id
     * @param array $args
     *
     * @return array
     */
    function dokan_shipstation_get_orders($seller_id, $args = array())
    {
    }
    /**
     * Check if the seller is enabled
     *
     * @since 1.0.0
     *
     * @param int $user_id
     *
     * @return boolean
     */
    function dokan_is_seller_auction_disabled($user_id)
    {
    }
    /**
     * Auction post status counting.
     *
     * @since  1.0.0
     *
     * @param  string $post_type
     * @param  integer $user_id
     *
     * @return object
     */
    function dokan_count_auction_posts($post_type, $user_id)
    {
    }
    /**
     * Auction listing status filter
     *
     * @since  1.0.0
     *
     * @return void
     */
    function dokan_auction_product_listing_status_filter()
    {
    }
    /**
     * Gets auction activity for a specific vendor,
     * pass $count = true to get the count of auction activity
     *
     * @param bool $count (Optional)
     *
     * @since 3.3.9
     *
     * @return array|integer
     */
    function dokan_auction_get_activity($count = \false)
    {
    }
    /**
     * Include module templates
     *
     * @since 2.9.8
     *
     * @param string $name
     * @param array  $args
     *
     * @return void
     */
    function dokan_spmv_get_template($name, $args = [])
    {
    }
    /**
     * Get other reseller vendors
     *
     * @since 2.9.8
     *
     * @param int $product_id
     *
     * @return array
     */
    function dokan_spmv_get_product_clones($product)
    {
    }
    /**
     * Get product show order options
     *
     * @since 2.9.11
     *
     * @return array
     */
    function dokan_spmv_get_show_order_options()
    {
    }
    /**
     * Update visibilities for a group of cloned products
     *
     * @since 2.9.11
     *
     * @param int $map_id
     *
     * @return array
     */
    function dokan_spmv_update_clone_visibilities($map_id)
    {
    }
    /**
     * We are checking if vendor subscription is active,
     * if true, we are getting the subscription of the vendor
     * and checking if the vendor has remaining product based on active subscription
     *
     * @since 3.3.0
     *
     * @param $user_id
     *
     * @return bool
     */
    function dokan_spmv_can_vendor_create_new_product($user_id)
    {
    }
    /**
     * Returns the tabs for the analytics
     *
     * @since 1.0
     * @return array
     */
    function dokan_get_analytics_tabs()
    {
    }
    /**
     * Returns date form
     *
     * @since 1.0
     * @since 3.7.23 Site Date format support added.
     *
     * @return void
     */
    function dokan_analytics_date_form($start_date, $end_date)
    {
    }
    /**
     * Returns general analytics
     *
     * @since 1.0
     * @since 3.7.23 GA4 Support Added.
     *
     * @return void
     */
    function dokan_general_analytics()
    {
    }
    /**
     * Format General analytics report values.
     *
     * @since 3.7.23
     *
     * @param array $metrics Metrics values and headers.
     * @param int   $row_count Row count.
     *
     * @return array
     */
    function dokan_analytics_format_general_analytics_metric_value(array $metrics, int $row_count): array
    {
    }
    /**
     * Prepares chart data for sales overview
     *
     * @since 1.0
     *
     * @global WP_Locale $wp_locale WP locale.
     * @param string $start_date Start date.
     * @param string $end_date End date.
     * @param string $group_by Group by.
     * @param array $analytics Analytics data for charting.
     *
     * @return void
     */
    function dokan_analytics_overview_chart_data($start_date, $end_date, $group_by, $analytics)
    {
    }
    /**
     * Returns page analytics
     *
     * @since 1.0
     * @return void
     */
    function dokan_page_analytics()
    {
    }
    /**
     * Returns activity analytics
     *
     * @since 1.0
     * @return void
     */
    function dokan_activity_analytics()
    {
    }
    /**
     * Returns geo analytics
     *
     * @since 1.0
     * @return void
     */
    function dokan_geographic_analytics()
    {
    }
    /**
     * Returns system analytics
     *
     * @since 1.0
     * @return array
     */
    function dokan_system_analytics()
    {
    }
    /**
     * Returns promotion analytics
     *
     * @since 1.0
     * @return array
     */
    function dokan_promotion_analytics()
    {
    }
    /**
     * Returns keyword analytics
     *
     * @since 1.0
     * @return array
     */
    function dokan_keyword_analytics()
    {
    }
    /**
     * Get dokan analytics app client_id
     *
     * @since 1.0.0
     *
     * @return string
     */
    function dokan_vendor_analytics_client_id()
    {
    }
    /**
     * Get dokan analytics app redirect url
     *
     * @since 1.0.0
     *
     * @return string
     */
    function dokan_vendor_analytics_get_redirect_uri()
    {
    }
    /**
     * Get dokan analytics app refresh token url
     *
     * @since 1.0.0
     *
     * @return string
     */
    function dokan_vendor_analytics_get_refresh_token_url()
    {
    }
    /**
     * Get google auth url for dokan analytics app
     *
     * @since 1.0.0
     *
     * @return string
     */
    function dokan_vendor_analytics_get_auth_url()
    {
    }
    /**
     * Get configured Dokan_Client
     *
     * @since 1.0.0
     *
     * @return Dokan_Client
     */
    function dokan_vendor_analytics_client()
    {
    }
    /**
     * Get analytics token
     *
     * @since 1.0.0
     *
     * @return string
     */
    function dokan_vendor_analytics_token()
    {
    }
    /**
     * Get a tokenized instance of Google_Client
     *
     * If token is expired, it'll refresh first.
     *
     * @since 3.0.5
     *
     * @return \Dokan_Client|\WP_Error
     */
    function dokan_vendor_analytics_get_tokenized_client()
    {
    }
    /**
     * Get analytics profiles from Google API
     *
     * @since 3.0.5
     *
     * @return array|\WP_Error
     */
    function dokan_vendor_analytics_api_get_profiles()
    {
    }
    /**
     * Get user readable title from title key.
     *
     * @since 3.3.7
     *
     * @param string $title_key
     *
     * @return string
     */
    function dokan_vendor_analytics_get_report_title($title_key): string
    {
    }
    /**
     * Vendor Analytics Data Client.
     *
     * @since 3.7.23
     *
     * @return BetaAnalyticsDataClient
     * @throws ValidationException|Exception
     */
    function dokan_vendor_analytics_service_client(): \Google\Analytics\Data\V1beta\BetaAnalyticsDataClient
    {
    }
    /**
     * Vendor Analytics admin Data Client.
     *
     * @since 3.7.23
     *
     * @return AnalyticsAdminServiceClient
     * @throws ValidationException|Exception
     */
    function dokan_vendor_analytics_admin_service_client(): \Google\Analytics\Admin\V1beta\AnalyticsAdminServiceClient
    {
    }
    /**
     * Vendor Analytics Date form Handler.
     *
     * @since 3.7.23
     * @since 3.7.25 Start date is set to 31 days ago and end date is set yesterday. Ranging last 30 days.
     *
     * @return array
     */
    function dokan_vendor_analytics_date_form_handler(): array
    {
    }
    /*
     * Copyright 2014 Google Inc.
     *
     * Licensed under the Apache License, Version 2.0 (the "License");
     * you may not use this file except in compliance with the License.
     * You may obtain a copy of the License at
     *
     *     http://www.apache.org/licenses/LICENSE-2.0
     *
     * Unless required by applicable law or agreed to in writing, software
     * distributed under the License is distributed on an "AS IS" BASIS,
     * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
     * See the License for the specific language governing permissions and
     * limitations under the License.
     */
    function google_api_php_client_autoload_dokan($className)
    {
    }
    /**
     * Dokan get all vendor staffs
     *
     * @return array
     */
    function dokan_get_all_vendor_staffs($args)
    {
    }
    function dokan_get_staff_capabilities()
    {
    }
    /**
     * Dokan get staff id by order id
     *
     * @param  int order
     *
     * @since  2.8.3
     *
     * @return array
     */
    function dokan_get_staff_id_by_order($id)
    {
    }
    /**
     * Dokan get staff order details by order_id
     *
     * @param  int $order
     *
     * @return array
     */
    function dokan_get_staff_order_details($order_id, $staff_id)
    {
    }
    /**
    * Get translated string of order status
    *
    * @param string $status
    * @return string
    */
    function dokan_vps_get_subscription_status_translated($status)
    {
    }
    /**
    * Get bootstrap label class based on order status
    *
    * @param string $status
    * @return string
    */
    function dokan_vps_get_subscription_status_class($status)
    {
    }
    /**
     * Display Date format for subscriptions
     *
     * @since 1.0.0
     *
     * @return void
     */
    function dokan_vps_get_date_content($subscription, $column)
    {
    }
    /**
     * Get the subscriptions or count for a specific seller.
     *
     * @since 3.3.6
     *
     * @global wpdb $wpdb
     *
     * @param array $args
     *
     * @return array|int
     */
    function dokan_vps_get_seller_subscriptions($args = array())
    {
    }
    /**
     * Get Seller status counts, used in admin area
     *
     * @since 2.6.6
     *
     * @global WPDB $wpdb
     * @return array
     */
    function dokan_wholesale_get_customer_status_count()
    {
    }
    /**
     * Check if customer has permission to see wholesale
     *
     * @since 1.0.0
     *
     * @return void
     */
    function dokan_wholesale_can_see_price()
    {
    }
}